
Allocating common symbols
Common symbol       size              file

finish              0x4               main.o
results             0x3a0             main.o
start               0x4               main.o

Discarded input sections

 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 regbits.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .group         0x0000000000000000        0x8 main.o
 .debug_macro   0x0000000000000000       0x22 main.o
 .debug_macro   0x0000000000000000       0x51 main.o
 .debug_macro   0x0000000000000000       0xef main.o
 .debug_macro   0x0000000000000000       0x6a main.o
 .debug_macro   0x0000000000000000      0x1df main.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .group         0x0000000000000000        0x8 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000      0xa60 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x22 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x8e lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x51 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0xef lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x6a lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000      0x1df lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x22 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x3a lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x26 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000      0x329 lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000       0x8f lpc8xx_ram_init.o
 .debug_macro   0x0000000000000000      0x1c4 lpc8xx_ram_init.o

Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x0000000000000000 0x0000000000008000 xr
RAM              0x0000000010000000 0x0000000000002000 xrw
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD regbits.o
LOAD main.o
LOAD lpc8xx_ram_init.o
                0x0000000000000020                PROVIDE (MINIMUM_STACK_SIZE, 0x20)
                0x0000000010000000                . = ORIGIN (RAM)

.text           0x0000000010000000     0x160c
 *(.isr_vectors)
 .isr_vectors   0x0000000010000000       0x9c lpc8xx_ram_init.o
                0x0000000010000000                INTERRUPT_VECTORS
 *(.text)
 .text          0x000000001000009c     0x1490 regbits.o
                0x000000001000009c                zero_reg()
                0x00000000100000a8                zero_array()
                0x00000000100000b4                set_singl_bits_operator()
                0x00000000100000c4                set_singl_bits_method()
                0x00000000100000d4                clr_singl_bits_operator()
                0x00000000100000e4                clr_singl_bits_method()
                0x00000000100000f4                set_singl_mskd_operator()
                0x0000000010000104                set_singl_mskd_method()
                0x0000000010000114                clr_singl_mskd_operator()
                0x0000000010000124                clr_singl_mskd_method()
                0x0000000010000134                equ_singl_bits_operator()
                0x0000000010000140                equ_singl_bits_method()
                0x000000001000014c                equ_singl_mskd_operator()
                0x0000000010000158                equ_singl_mskd_method()
                0x0000000010000164                flp_singl_bits_operator()
                0x0000000010000174                flp_singl_bits_method()
                0x0000000010000184                flp_singl_mskd_operator()
                0x0000000010000194                flp_singl_mskd_method()
                0x00000000100001a4                ins_singl_mskd_operator()
                0x00000000100001b8                ins_singl_mskd_method()
                0x00000000100001cc                set_multi_bits_operator()
                0x00000000100001dc                set_multi_bits_method()
                0x00000000100001ec                ins_multi_mskd_operator()
                0x0000000010000208                ins_multi_mskd_method()
                0x0000000010000224                equ_multi_bits_operator()
                0x0000000010000230                equ_multi_bits_method()
                0x000000001000023c                equ_multi_mskd_operator()
                0x000000001000024c                equ_multi_mskd_method()
                0x000000001000025c                equ_bits_mskd_operator()
                0x0000000010000268                equ_bits_mskd_method()
                0x0000000010000274                equ_mskd_bits_operator()
                0x0000000010000280                equ_mskd_bits_method()
                0x000000001000028c                equ_bits_var()
                0x000000001000029c                equ_mskd_var()
                0x00000000100002b0                cmp_equ_zero()
                0x00000000100002d8                cmp_neq_zero()
                0x00000000100002f8                cmp_equ_bits()
                0x0000000010000320                cmp_neq_bits()
                0x0000000010000340                cmp_equ_multi_bits()
                0x000000001000036c                cmp_neq_multi_bits()
                0x0000000010000398                cmp_equ_mskd()
                0x00000000100003e0                cmp_neq_mskd()
                0x0000000010000418                cmp_equ_reg()
                0x0000000010000440                cmp_neq_reg()
                0x0000000010000460                constexpr_bits_array()
                0x0000000010000474                runtime_bits_array()
                0x00000000100004a0                prescaler_low()
                0x00000000100004bc                prescaler_high()
                0x00000000100004d8                reg_mskd_lss()
                0x000000001000050c                reg_mskd_leq()
                0x0000000010000548                reg_mskd_gtr()
                0x0000000010000578                reg_mskd_geq()
                0x00000000100005c0                pos_cmp_eq()
                0x00000000100005cc                pos_cmp_ne()
                0x00000000100005d8                bits_extract_eq()
                0x00000000100005f8                mskd_extract_eq()
                0x0000000010000618                mskd_extract_ne()
                0x0000000010000638                mskd_extract_lss()
                0x0000000010000664                mskd_extract_leq()
                0x000000001000068c                mskd_extract_gtr()
                0x00000000100006b8                set_bits_global()
                0x00000000100006c8                ins_mskd_global()
                0x00000000100006dc                assign_array_global()
                0x00000000100006e8                shifted_global()
                0x0000000010000704                assign_register_global()
                0x0000000010000710                copy_bits_equ()
                0x0000000010000730                copy_bits_neq()
                0x0000000010000750                copy_mskd_equ()
                0x000000001000077c                copy_mskd_neq()
                0x00000000100007a8                copy_mskd_lss()
                0x00000000100007dc                copy_mskd_leq()
                0x0000000010000808                copy_mskd_gtr()
                0x0000000010000838                copy_mskd_geq()
                0x000000001000086c                copy_shifted()
                0x0000000010000898                bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)
                0x00000000100008a8                call_bits_val_var()
                0x00000000100008b2                call_bits_val_const()
                0x00000000100008bc                call_bits_val_global()
                0x00000000100008c6                bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)
                0x00000000100008d8                call_bits_ref_var()
                0x00000000100008ea                call_bits_ref_const()
                0x00000000100008fc                call_bits_ref_global()
                0x000000001000090e                mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000920                call_mskd_val_var()
                0x000000001000092c                call_mskd_val_const()
                0x0000000010000938                call_mskd_val_global()
                0x0000000010000944                mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)
                0x0000000010000958                call_mskd_ref_var()
                0x0000000010000974                call_mskd_ref_const()
                0x000000001000098a                call_mskd_ref_global()
                0x00000000100009a0                periph_bits(mcu::Serial*)
                0x00000000100009aa                call_periph_bits()
                0x00000000100009b8                periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)
                0x00000000100009c0                call_periph_bits_val()
                0x00000000100009d0                reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)
                0x00000000100009d8                call_reg_bits_val()
                0x00000000100009e8                periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)
                0x00000000100009f2                call_periph_bits_ref()
                0x0000000010000a0c                reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)
                0x0000000010000a16                call_reg_bits_ref()
                0x0000000010000a30                periph_mskd(mcu::Serial*)
                0x0000000010000a3e                call_periph_mskd()
                0x0000000010000a4c                periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000a56                call_periph_mskd_val()
                0x0000000010000a68                reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000a72                call_reg_mskd_val()
                0x0000000010000a84                periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000a8e                call_periph_mskd_ref()
                0x0000000010000aa0                reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000aaa                call_reg_mskd_ref()
                0x0000000010000abc                return_bits()
                0x0000000010000ac0                call_return_bits()
                0x0000000010000ae4                return_mskd()
                0x0000000010000aee                call_return_mskd()
                0x0000000010000b20                return_reg()
                0x0000000010000b34                call_return_reg()
                0x0000000010000b58                return_periph()
                0x0000000010000b64                call_return_periph()
                0x0000000010000b88                pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)
                0x0000000010000bac                call_pos_val()
                0x0000000010000bbc                call_pos_val_global()
                0x0000000010000bc6                pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)
                0x0000000010000bec                call_pos_ref()
                0x0000000010000c06                call_pos_ref_global()
                0x0000000010000c18                runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000c28                call_range_val(unsigned int)
                0x0000000010000c38                call_range_val_port()
                0x0000000010000c42                runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)
                0x0000000010000c54                call_range_ref(unsigned int)
                0x0000000010000c64                call_range_ref_port()
                0x0000000010000c6e                check_array_range_pass(unsigned int)
                0x0000000010000c88                check_array_range_fail(unsigned int)
                0x0000000010000ca0                check_bits_range_pass(unsigned int)
                0x0000000010000cb8                check_bits_range_fail(unsigned int)
                0x0000000010000cd0                check_mskd_range_pass(unsigned int)
                0x0000000010000ce8                check_mskd_range_fail(unsigned int)
                0x0000000010000d00                bits_extract_ne()
                0x0000000010000d20                mskd_extract_geq()
                0x0000000010000d4c                shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)
                0x0000000010000d68                call_shifted_const_val()
                0x0000000010000d76                call_shifted_var_val()
                0x0000000010000d84                call_shifted_global_val()
                0x0000000010000d98                shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)
                0x0000000010000db8                call_shifted_const_ref()
                0x0000000010000dd4                call_shifted_var_ref()
                0x0000000010000df0                call_shifted_global_ref()
                0x0000000010000e0c                copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)
                0x0000000010000e24                call_copy_bits_val()
                0x0000000010000e38                copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)
                0x0000000010000e54                call_copy_bits_ref()
                0x0000000010000e70                run
 .text          0x000000001000152c       0x4c main.o
                0x000000001000152c                memset
                0x0000000010001540                do_test
 .text          0x0000000010001578       0x94 lpc8xx_ram_init.o
                0x0000000010001578                NMI_Handler
                0x000000001000157c                HardFault_Handler
                0x0000000010001580                SVCall_Handler
                0x0000000010001584                PendSV_Handler
                0x0000000010001588                SysTick_Handler
                0x000000001000158c                SPI0_IRQHandler
                0x0000000010001590                SPI1_IRQHandler
                0x0000000010001594                UART0_IRQHandler
                0x0000000010001598                UART1_IRQHandler
                0x000000001000159c                UART2_IRQHandler
                0x00000000100015a0                Reserved1_IRQHandler
                0x00000000100015a4                SCT_IRQHandler
                0x00000000100015a8                MRT_IRQHandler
                0x00000000100015ac                CMP_IRQHandler
                0x00000000100015b0                WDT_IRQHandler
                0x00000000100015b4                BOD_IRQHandler
                0x00000000100015b8                WKT_IRQHandler
                0x00000000100015bc                Reserved11_IRQHandler
                0x00000000100015c0                PININT0_IRQHandler
                0x00000000100015c4                PININT1_IRQHandler
                0x00000000100015c8                PININT2_IRQHandler
                0x00000000100015cc                PININT3_IRQHandler
                0x00000000100015d0                PININT4_IRQHandler
                0x00000000100015d4                PININT5_IRQHandler
                0x00000000100015d8                PININT6_IRQHandler
                0x00000000100015dc                PININT7_IRQHandler
                0x00000000100015e0                init

.glue_7         0x000000001000160c        0x0
 .glue_7        0x000000001000160c        0x0 linker stubs

.glue_7t        0x000000001000160c        0x0
 .glue_7t       0x000000001000160c        0x0 linker stubs

.vfp11_veneer   0x000000001000160c        0x0
 .vfp11_veneer  0x000000001000160c        0x0 linker stubs

.v4_bx          0x000000001000160c        0x0
 .v4_bx         0x000000001000160c        0x0 linker stubs

.iplt           0x000000001000160c        0x0
 .iplt          0x000000001000160c        0x0 regbits.o

.text.startup   0x000000001000160c       0x38
 .text.startup  0x000000001000160c       0x38 main.o
                0x000000001000160c                main

.rodata         0x0000000010001644       0x20
 .rodata        0x0000000010001644       0x20 regbits.o

.rel.dyn        0x0000000010001664        0x0
 .rel.iplt      0x0000000010001664        0x0 regbits.o

.data           0x0000000010001664        0x0
                0x0000000010001664                . = ALIGN (0x4)
 *(.data)
 .data          0x0000000010001664        0x0 regbits.o
 .data          0x0000000010001664        0x0 main.o
 .data          0x0000000010001664        0x0 lpc8xx_ram_init.o
                0x0000000010001664                BSS_START = .

.igot.plt       0x0000000010001664        0x0
 .igot.plt      0x0000000010001664        0x0 regbits.o

.bss            0x0000000010001664      0x3d8
                0x0000000010001664                . = ALIGN (0x4)
 *(.bss)
 .bss           0x0000000010001664       0x30 regbits.o
 .bss           0x0000000010001694        0x0 main.o
 .bss           0x0000000010001694        0x0 lpc8xx_ram_init.o
 COMMON         0x0000000010001694      0x3a8 main.o
                0x0000000010001694                finish
                0x0000000010001698                results
                0x0000000010001a38                start
                0x0000000010001a3c                BSS_END = .
                0x0000000010001a3c                end = .
                0x0000000010000000                RAM_BASE_ADDR = ORIGIN (RAM)
                0x0000000000000000                FLASH_BASE_ADDR = ORIGIN (FLASH)
                0x0000000010002000                TOP_OF_STACK = (ORIGIN (RAM) + LENGTH (RAM))
                0x0000000000000000                ASSERT (((end + MINIMUM_STACK_SIZE) < TOP_OF_STACK), too big to fit in RAM)
OUTPUT(regbits.elf elf32-littlearm)

.debug_info     0x0000000000000000    0x12cdd
 .debug_info    0x0000000000000000    0x12602 regbits.o
 .debug_info    0x0000000000012602      0x2d4 main.o
 .debug_info    0x00000000000128d6      0x407 lpc8xx_ram_init.o

.debug_abbrev   0x0000000000000000      0x9f0
 .debug_abbrev  0x0000000000000000      0x69e regbits.o
 .debug_abbrev  0x000000000000069e      0x1df main.o
 .debug_abbrev  0x000000000000087d      0x173 lpc8xx_ram_init.o

.debug_loc      0x0000000000000000     0x2b8d
 .debug_loc     0x0000000000000000     0x2a12 regbits.o
 .debug_loc     0x0000000000002a12      0x157 main.o
 .debug_loc     0x0000000000002b69       0x24 lpc8xx_ram_init.o

.debug_aranges  0x0000000000000000       0x68
 .debug_aranges
                0x0000000000000000       0x20 regbits.o
 .debug_aranges
                0x0000000000000020       0x28 main.o
 .debug_aranges
                0x0000000000000048       0x20 lpc8xx_ram_init.o

.debug_ranges   0x0000000000000000       0x48
 .debug_ranges  0x0000000000000000       0x30 regbits.o
 .debug_ranges  0x0000000000000030       0x18 main.o

.debug_macro    0x0000000000000000     0x2573
 .debug_macro   0x0000000000000000       0x8e regbits.o
 .debug_macro   0x000000000000008e      0xb0e regbits.o
 .debug_macro   0x0000000000000b9c       0x1c regbits.o
 .debug_macro   0x0000000000000bb8       0x22 regbits.o
 .debug_macro   0x0000000000000bda       0x56 regbits.o
 .debug_macro   0x0000000000000c30       0x51 regbits.o
 .debug_macro   0x0000000000000c81       0xef regbits.o
 .debug_macro   0x0000000000000d70       0x6a regbits.o
 .debug_macro   0x0000000000000dda      0x1df regbits.o
 .debug_macro   0x0000000000000fb9       0x1f regbits.o
 .debug_macro   0x0000000000000fd8       0x58 regbits.o
 .debug_macro   0x0000000000001030      0x17b regbits.o
 .debug_macro   0x00000000000011ab       0xba main.o
 .debug_macro   0x0000000000001265      0xa60 main.o
 .debug_macro   0x0000000000001cc5      0x174 main.o
 .debug_macro   0x0000000000001e39       0x8e main.o
 .debug_macro   0x0000000000001ec7       0x22 main.o
 .debug_macro   0x0000000000001ee9       0x3a main.o
 .debug_macro   0x0000000000001f23       0x26 main.o
 .debug_macro   0x0000000000001f49      0x329 main.o
 .debug_macro   0x0000000000002272       0x8f main.o
 .debug_macro   0x0000000000002301      0x1c4 main.o
 .debug_macro   0x00000000000024c5       0xae lpc8xx_ram_init.o

.debug_line     0x0000000000000000     0x2c3b
 .debug_line    0x0000000000000000     0x23c9 regbits.o
 .debug_line    0x00000000000023c9      0x3a9 main.o
 .debug_line    0x0000000000002772      0x4c9 lpc8xx_ram_init.o

.debug_str      0x0000000000000000    0x19768
 .debug_str     0x0000000000000000    0x17277 regbits.o
                                      0x175db (size before relaxing)
 .debug_str     0x0000000000017277     0x229c main.o
                                       0x5f46 (size before relaxing)
 .debug_str     0x0000000000019513      0x255 lpc8xx_ram_init.o
                                       0x5dea (size before relaxing)

.comment        0x0000000000000000       0x75
 .comment       0x0000000000000000       0x75 regbits.o
                                         0x76 (size before relaxing)
 .comment       0x0000000000000075       0x76 main.o
 .comment       0x0000000000000075       0x76 lpc8xx_ram_init.o

.ARM.attributes
                0x0000000000000000       0x1c
 .ARM.attributes
                0x0000000000000000       0x1c regbits.o
 .ARM.attributes
                0x000000000000001c       0x1c main.o
 .ARM.attributes
                0x0000000000000038       0x1c lpc8xx_ram_init.o

.debug_frame    0x0000000000000000      0xd08
 .debug_frame   0x0000000000000000      0xae4 regbits.o
 .debug_frame   0x0000000000000ae4       0x5c main.o
 .debug_frame   0x0000000000000b40      0x1c8 lpc8xx_ram_init.o
Memory region         Used Size  Region Size  %age Used
           FLASH:          0 GB        32 KB      0.00%
             RAM:        6716 B         8 KB     81.98%
