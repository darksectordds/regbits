
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	10001dc0 	.word	0x10001dc0

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	10001c00 	.word	0x10001c00

00000018 <set_singl_bits_operator()>:
      18:	2140      	movs	r1, #64	; 0x40
      1a:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1c:	6853      	ldr	r3, [r2, #4]
      1e:	430b      	orrs	r3, r1
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	10001dc0 	.word	0x10001dc0

00000028 <set_singl_bits_method()>:
      28:	2140      	movs	r1, #64	; 0x40
      2a:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2c:	6853      	ldr	r3, [r2, #4]
      2e:	430b      	orrs	r3, r1
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	10001dc0 	.word	0x10001dc0

00000038 <clr_singl_bits_operator()>:
      38:	2140      	movs	r1, #64	; 0x40
      3a:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3c:	6853      	ldr	r3, [r2, #4]
      3e:	438b      	bics	r3, r1
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	10001dc0 	.word	0x10001dc0

00000048 <clr_singl_bits_method()>:
      48:	2140      	movs	r1, #64	; 0x40
      4a:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4c:	6853      	ldr	r3, [r2, #4]
      4e:	438b      	bics	r3, r1
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	10001dc0 	.word	0x10001dc0

00000058 <set_singl_mskd_operator()>:
      58:	2102      	movs	r1, #2
      5a:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5c:	6853      	ldr	r3, [r2, #4]
      5e:	430b      	orrs	r3, r1
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	10001dc0 	.word	0x10001dc0

00000068 <set_singl_mskd_method()>:
      68:	2102      	movs	r1, #2
      6a:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6c:	6853      	ldr	r3, [r2, #4]
      6e:	430b      	orrs	r3, r1
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	10001dc0 	.word	0x10001dc0

00000078 <clr_singl_mskd_operator()>:
      78:	2102      	movs	r1, #2
      7a:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7c:	6853      	ldr	r3, [r2, #4]
      7e:	438b      	bics	r3, r1
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	10001dc0 	.word	0x10001dc0

00000088 <clr_singl_mskd_method()>:
      88:	2102      	movs	r1, #2
      8a:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8c:	6853      	ldr	r3, [r2, #4]
      8e:	438b      	bics	r3, r1
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	10001dc0 	.word	0x10001dc0

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	10001dc0 	.word	0x10001dc0

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	10001dc0 	.word	0x10001dc0

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	10001dc0 	.word	0x10001dc0

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	10001dc0 	.word	0x10001dc0

000000c8 <flp_singl_bits_operator()>:
      c8:	2140      	movs	r1, #64	; 0x40
      ca:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      cc:	6853      	ldr	r3, [r2, #4]
      ce:	404b      	eors	r3, r1
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	10001dc0 	.word	0x10001dc0

000000d8 <flp_singl_bits_method()>:
      d8:	2140      	movs	r1, #64	; 0x40
      da:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      dc:	6853      	ldr	r3, [r2, #4]
      de:	404b      	eors	r3, r1
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	10001dc0 	.word	0x10001dc0

000000e8 <flp_singl_mskd_operator()>:
      e8:	2102      	movs	r1, #2
      ea:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ec:	6853      	ldr	r3, [r2, #4]
      ee:	404b      	eors	r3, r1
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	10001dc0 	.word	0x10001dc0

000000f8 <flp_singl_mskd_method()>:
      f8:	2102      	movs	r1, #2
      fa:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fc:	6853      	ldr	r3, [r2, #4]
      fe:	404b      	eors	r3, r1
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	10001dc0 	.word	0x10001dc0

00000108 <ins_singl_mskd_operator()>:
     108:	2106      	movs	r1, #6
     10a:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10c:	6853      	ldr	r3, [r2, #4]
     10e:	438b      	bics	r3, r1
     110:	3902      	subs	r1, #2
     112:	430b      	orrs	r3, r1
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	10001dc0 	.word	0x10001dc0

0000011c <ins_singl_mskd_method()>:
     11c:	2106      	movs	r1, #6
     11e:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     120:	6853      	ldr	r3, [r2, #4]
     122:	438b      	bics	r3, r1
     124:	3902      	subs	r1, #2
     126:	430b      	orrs	r3, r1
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	10001dc0 	.word	0x10001dc0

00000130 <set_multi_bits_operator()>:
     130:	2121      	movs	r1, #33	; 0x21
     132:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     134:	6853      	ldr	r3, [r2, #4]
     136:	430b      	orrs	r3, r1
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	10001dc0 	.word	0x10001dc0

00000140 <set_multi_bits_method()>:
     140:	2121      	movs	r1, #33	; 0x21
     142:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     144:	6853      	ldr	r3, [r2, #4]
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	10001dc0 	.word	0x10001dc0

00000150 <ins_multi_mskd_operator()>:
     150:	4904      	ldr	r1, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	4a05      	ldr	r2, [pc, #20]	; (168 <ins_multi_mskd_operator()+0x18>)
     154:	684b      	ldr	r3, [r1, #4]
     156:	401a      	ands	r2, r3
     158:	23c1      	movs	r3, #193	; 0xc1
     15a:	005b      	lsls	r3, r3, #1
     15c:	4313      	orrs	r3, r2
     15e:	604b      	str	r3, [r1, #4]
     160:	4770      	bx	lr
     162:	46c0      	nop			; (mov r8, r8)
     164:	10001dc0 	.word	0x10001dc0
     168:	fffff079 	.word	0xfffff079

0000016c <ins_multi_mskd_method()>:
     16c:	4904      	ldr	r1, [pc, #16]	; (180 <ins_multi_mskd_method()+0x14>)
     16e:	4a05      	ldr	r2, [pc, #20]	; (184 <ins_multi_mskd_method()+0x18>)
     170:	684b      	ldr	r3, [r1, #4]
     172:	401a      	ands	r2, r3
     174:	23c1      	movs	r3, #193	; 0xc1
     176:	005b      	lsls	r3, r3, #1
     178:	4313      	orrs	r3, r2
     17a:	604b      	str	r3, [r1, #4]
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	10001dc0 	.word	0x10001dc0
     184:	fffff079 	.word	0xfffff079

00000188 <equ_multi_bits_operator()>:
     188:	2260      	movs	r2, #96	; 0x60
     18a:	4b01      	ldr	r3, [pc, #4]	; (190 <equ_multi_bits_operator()+0x8>)
     18c:	605a      	str	r2, [r3, #4]
     18e:	4770      	bx	lr
     190:	10001dc0 	.word	0x10001dc0

00000194 <equ_multi_bits_method()>:
     194:	2260      	movs	r2, #96	; 0x60
     196:	4b01      	ldr	r3, [pc, #4]	; (19c <equ_multi_bits_method()+0x8>)
     198:	605a      	str	r2, [r3, #4]
     19a:	4770      	bx	lr
     19c:	10001dc0 	.word	0x10001dc0

000001a0 <equ_multi_mskd_operator()>:
     1a0:	22c2      	movs	r2, #194	; 0xc2
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <equ_multi_mskd_operator()+0xc>)
     1a4:	0092      	lsls	r2, r2, #2
     1a6:	605a      	str	r2, [r3, #4]
     1a8:	4770      	bx	lr
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	10001dc0 	.word	0x10001dc0

000001b0 <equ_multi_mskd_method()>:
     1b0:	22c2      	movs	r2, #194	; 0xc2
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <equ_multi_mskd_method()+0xc>)
     1b4:	0092      	lsls	r2, r2, #2
     1b6:	605a      	str	r2, [r3, #4]
     1b8:	4770      	bx	lr
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	10001dc0 	.word	0x10001dc0

000001c0 <equ_bits_mskd_operator()>:
     1c0:	2222      	movs	r2, #34	; 0x22
     1c2:	4b01      	ldr	r3, [pc, #4]	; (1c8 <equ_bits_mskd_operator()+0x8>)
     1c4:	605a      	str	r2, [r3, #4]
     1c6:	4770      	bx	lr
     1c8:	10001dc0 	.word	0x10001dc0

000001cc <equ_bits_mskd_method()>:
     1cc:	2222      	movs	r2, #34	; 0x22
     1ce:	4b01      	ldr	r3, [pc, #4]	; (1d4 <equ_bits_mskd_method()+0x8>)
     1d0:	605a      	str	r2, [r3, #4]
     1d2:	4770      	bx	lr
     1d4:	10001dc0 	.word	0x10001dc0

000001d8 <equ_mskd_bits_operator()>:
     1d8:	2244      	movs	r2, #68	; 0x44
     1da:	4b01      	ldr	r3, [pc, #4]	; (1e0 <equ_mskd_bits_operator()+0x8>)
     1dc:	605a      	str	r2, [r3, #4]
     1de:	4770      	bx	lr
     1e0:	10001dc0 	.word	0x10001dc0

000001e4 <equ_mskd_bits_method()>:
     1e4:	2244      	movs	r2, #68	; 0x44
     1e6:	4b01      	ldr	r3, [pc, #4]	; (1ec <equ_mskd_bits_method()+0x8>)
     1e8:	605a      	str	r2, [r3, #4]
     1ea:	4770      	bx	lr
     1ec:	10001dc0 	.word	0x10001dc0

000001f0 <equ_bits_var()>:
     1f0:	2240      	movs	r2, #64	; 0x40
     1f2:	4b02      	ldr	r3, [pc, #8]	; (1fc <equ_bits_var()+0xc>)
     1f4:	605a      	str	r2, [r3, #4]
     1f6:	3a3f      	subs	r2, #63	; 0x3f
     1f8:	605a      	str	r2, [r3, #4]
     1fa:	4770      	bx	lr
     1fc:	10001dc0 	.word	0x10001dc0

00000200 <equ_mskd_var()>:
     200:	2202      	movs	r2, #2
     202:	4b03      	ldr	r3, [pc, #12]	; (210 <equ_mskd_var()+0x10>)
     204:	605a      	str	r2, [r3, #4]
     206:	327f      	adds	r2, #127	; 0x7f
     208:	32ff      	adds	r2, #255	; 0xff
     20a:	605a      	str	r2, [r3, #4]
     20c:	4770      	bx	lr
     20e:	46c0      	nop			; (mov r8, r8)
     210:	10001dc0 	.word	0x10001dc0

00000214 <cmp_equ_zero()>:
     214:	2200      	movs	r2, #0
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <cmp_equ_zero()+0x20>)
     218:	605a      	str	r2, [r3, #4]
     21a:	685b      	ldr	r3, [r3, #4]
     21c:	2b00      	cmp	r3, #0
     21e:	d104      	bne.n	22a <cmp_equ_zero()+0x16>
     220:	22e8      	movs	r2, #232	; 0xe8
     222:	4b05      	ldr	r3, [pc, #20]	; (238 <cmp_equ_zero()+0x24>)
     224:	0592      	lsls	r2, r2, #22
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	2288      	movs	r2, #136	; 0x88
     22c:	4b02      	ldr	r3, [pc, #8]	; (238 <cmp_equ_zero()+0x24>)
     22e:	0592      	lsls	r2, r2, #22
     230:	605a      	str	r2, [r3, #4]
     232:	e7f9      	b.n	228 <cmp_equ_zero()+0x14>
     234:	10001dc0 	.word	0x10001dc0
     238:	10001d20 	.word	0x10001d20

0000023c <cmp_neq_zero()>:
     23c:	2200      	movs	r2, #0
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <cmp_neq_zero()+0x18>)
     240:	605a      	str	r2, [r3, #4]
     242:	685a      	ldr	r2, [r3, #4]
     244:	2a00      	cmp	r2, #0
     246:	d002      	beq.n	24e <cmp_neq_zero()+0x12>
     248:	2204      	movs	r2, #4
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	2220      	movs	r2, #32
     250:	605a      	str	r2, [r3, #4]
     252:	e7fb      	b.n	24c <cmp_neq_zero()+0x10>
     254:	10001dc0 	.word	0x10001dc0

00000258 <cmp_equ_bits()>:
     258:	2340      	movs	r3, #64	; 0x40
     25a:	4a07      	ldr	r2, [pc, #28]	; (278 <cmp_equ_bits()+0x20>)
     25c:	6053      	str	r3, [r2, #4]
     25e:	6852      	ldr	r2, [r2, #4]
     260:	4213      	tst	r3, r2
     262:	d004      	beq.n	26e <cmp_equ_bits()+0x16>
     264:	22b0      	movs	r2, #176	; 0xb0
     266:	4b05      	ldr	r3, [pc, #20]	; (27c <cmp_equ_bits()+0x24>)
     268:	0552      	lsls	r2, r2, #21
     26a:	605a      	str	r2, [r3, #4]
     26c:	4770      	bx	lr
     26e:	22d0      	movs	r2, #208	; 0xd0
     270:	4b02      	ldr	r3, [pc, #8]	; (27c <cmp_equ_bits()+0x24>)
     272:	0552      	lsls	r2, r2, #21
     274:	605a      	str	r2, [r3, #4]
     276:	e7f9      	b.n	26c <cmp_equ_bits()+0x14>
     278:	10001dc0 	.word	0x10001dc0
     27c:	10001d20 	.word	0x10001d20

00000280 <cmp_neq_bits()>:
     280:	2240      	movs	r2, #64	; 0x40
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <cmp_neq_bits()+0x18>)
     284:	605a      	str	r2, [r3, #4]
     286:	6859      	ldr	r1, [r3, #4]
     288:	420a      	tst	r2, r1
     28a:	d102      	bne.n	292 <cmp_neq_bits()+0x12>
     28c:	3a3e      	subs	r2, #62	; 0x3e
     28e:	605a      	str	r2, [r3, #4]
     290:	4770      	bx	lr
     292:	2220      	movs	r2, #32
     294:	605a      	str	r2, [r3, #4]
     296:	e7fb      	b.n	290 <cmp_neq_bits()+0x10>
     298:	10001dc0 	.word	0x10001dc0

0000029c <cmp_equ_multi_bits()>:
     29c:	2360      	movs	r3, #96	; 0x60
     29e:	4a08      	ldr	r2, [pc, #32]	; (2c0 <cmp_equ_multi_bits()+0x24>)
     2a0:	6053      	str	r3, [r2, #4]
     2a2:	6852      	ldr	r2, [r2, #4]
     2a4:	4013      	ands	r3, r2
     2a6:	2b60      	cmp	r3, #96	; 0x60
     2a8:	d004      	beq.n	2b4 <cmp_equ_multi_bits()+0x18>
     2aa:	22b8      	movs	r2, #184	; 0xb8
     2ac:	4b05      	ldr	r3, [pc, #20]	; (2c4 <cmp_equ_multi_bits()+0x28>)
     2ae:	0592      	lsls	r2, r2, #22
     2b0:	605a      	str	r2, [r3, #4]
     2b2:	4770      	bx	lr
     2b4:	2288      	movs	r2, #136	; 0x88
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <cmp_equ_multi_bits()+0x28>)
     2b8:	0592      	lsls	r2, r2, #22
     2ba:	605a      	str	r2, [r3, #4]
     2bc:	e7f9      	b.n	2b2 <cmp_equ_multi_bits()+0x16>
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	10001dc0 	.word	0x10001dc0
     2c4:	10001d20 	.word	0x10001d20

000002c8 <cmp_neq_multi_bits()>:
     2c8:	2360      	movs	r3, #96	; 0x60
     2ca:	4a08      	ldr	r2, [pc, #32]	; (2ec <cmp_neq_multi_bits()+0x24>)
     2cc:	6053      	str	r3, [r2, #4]
     2ce:	6852      	ldr	r2, [r2, #4]
     2d0:	4013      	ands	r3, r2
     2d2:	2b60      	cmp	r3, #96	; 0x60
     2d4:	d004      	beq.n	2e0 <cmp_neq_multi_bits()+0x18>
     2d6:	22e8      	movs	r2, #232	; 0xe8
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <cmp_neq_multi_bits()+0x28>)
     2da:	0592      	lsls	r2, r2, #22
     2dc:	605a      	str	r2, [r3, #4]
     2de:	4770      	bx	lr
     2e0:	22f8      	movs	r2, #248	; 0xf8
     2e2:	4b03      	ldr	r3, [pc, #12]	; (2f0 <cmp_neq_multi_bits()+0x28>)
     2e4:	0592      	lsls	r2, r2, #22
     2e6:	605a      	str	r2, [r3, #4]
     2e8:	e7f9      	b.n	2de <cmp_neq_multi_bits()+0x16>
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	10001dc0 	.word	0x10001dc0
     2f0:	10001d20 	.word	0x10001d20

000002f4 <cmp_equ_mskd()>:
     2f4:	22e8      	movs	r2, #232	; 0xe8
     2f6:	4b0e      	ldr	r3, [pc, #56]	; (330 <cmp_equ_mskd()+0x3c>)
     2f8:	0252      	lsls	r2, r2, #9
     2fa:	605a      	str	r2, [r3, #4]
     2fc:	22f8      	movs	r2, #248	; 0xf8
     2fe:	685b      	ldr	r3, [r3, #4]
     300:	0252      	lsls	r2, r2, #9
     302:	4013      	ands	r3, r2
     304:	2288      	movs	r2, #136	; 0x88
     306:	490b      	ldr	r1, [pc, #44]	; (334 <cmp_equ_mskd()+0x40>)
     308:	0252      	lsls	r2, r2, #9
     30a:	4293      	cmp	r3, r2
     30c:	d007      	beq.n	31e <cmp_equ_mskd()+0x2a>
     30e:	684b      	ldr	r3, [r1, #4]
     310:	4a09      	ldr	r2, [pc, #36]	; (338 <cmp_equ_mskd()+0x44>)
     312:	401a      	ands	r2, r3
     314:	2388      	movs	r3, #136	; 0x88
     316:	059b      	lsls	r3, r3, #22
     318:	4313      	orrs	r3, r2
     31a:	604b      	str	r3, [r1, #4]
     31c:	4770      	bx	lr
     31e:	684b      	ldr	r3, [r1, #4]
     320:	4a05      	ldr	r2, [pc, #20]	; (338 <cmp_equ_mskd()+0x44>)
     322:	401a      	ands	r2, r3
     324:	23e0      	movs	r3, #224	; 0xe0
     326:	051b      	lsls	r3, r3, #20
     328:	4313      	orrs	r3, r2
     32a:	604b      	str	r3, [r1, #4]
     32c:	e7f6      	b.n	31c <cmp_equ_mskd()+0x28>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	10001dc0 	.word	0x10001dc0
     334:	10001d20 	.word	0x10001d20
     338:	c1ffffff 	.word	0xc1ffffff

0000033c <cmp_neq_mskd()>:
     33c:	22e8      	movs	r2, #232	; 0xe8
     33e:	21f8      	movs	r1, #248	; 0xf8
     340:	4b0a      	ldr	r3, [pc, #40]	; (36c <cmp_neq_mskd()+0x30>)
     342:	0252      	lsls	r2, r2, #9
     344:	605a      	str	r2, [r3, #4]
     346:	685a      	ldr	r2, [r3, #4]
     348:	0249      	lsls	r1, r1, #9
     34a:	400a      	ands	r2, r1
     34c:	2188      	movs	r1, #136	; 0x88
     34e:	0249      	lsls	r1, r1, #9
     350:	428a      	cmp	r2, r1
     352:	d006      	beq.n	362 <cmp_neq_mskd()+0x26>
     354:	2106      	movs	r1, #6
     356:	685a      	ldr	r2, [r3, #4]
     358:	438a      	bics	r2, r1
     35a:	3902      	subs	r1, #2
     35c:	430a      	orrs	r2, r1
     35e:	605a      	str	r2, [r3, #4]
     360:	4770      	bx	lr
     362:	2140      	movs	r1, #64	; 0x40
     364:	685a      	ldr	r2, [r3, #4]
     366:	430a      	orrs	r2, r1
     368:	605a      	str	r2, [r3, #4]
     36a:	e7f9      	b.n	360 <cmp_neq_mskd()+0x24>
     36c:	10001dc0 	.word	0x10001dc0

00000370 <cmp_equ_reg()>:
     370:	2222      	movs	r2, #34	; 0x22
     372:	4b07      	ldr	r3, [pc, #28]	; (390 <cmp_equ_reg()+0x20>)
     374:	605a      	str	r2, [r3, #4]
     376:	685b      	ldr	r3, [r3, #4]
     378:	2b22      	cmp	r3, #34	; 0x22
     37a:	d004      	beq.n	386 <cmp_equ_reg()+0x16>
     37c:	22b8      	movs	r2, #184	; 0xb8
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <cmp_equ_reg()+0x24>)
     380:	0592      	lsls	r2, r2, #22
     382:	605a      	str	r2, [r3, #4]
     384:	4770      	bx	lr
     386:	22a8      	movs	r2, #168	; 0xa8
     388:	4b02      	ldr	r3, [pc, #8]	; (394 <cmp_equ_reg()+0x24>)
     38a:	0592      	lsls	r2, r2, #22
     38c:	605a      	str	r2, [r3, #4]
     38e:	e7f9      	b.n	384 <cmp_equ_reg()+0x14>
     390:	10001dc0 	.word	0x10001dc0
     394:	10001d20 	.word	0x10001d20

00000398 <cmp_neq_reg()>:
     398:	2222      	movs	r2, #34	; 0x22
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <cmp_neq_reg()+0x18>)
     39c:	605a      	str	r2, [r3, #4]
     39e:	685a      	ldr	r2, [r3, #4]
     3a0:	2a22      	cmp	r2, #34	; 0x22
     3a2:	d002      	beq.n	3aa <cmp_neq_reg()+0x12>
     3a4:	2202      	movs	r2, #2
     3a6:	605a      	str	r2, [r3, #4]
     3a8:	4770      	bx	lr
     3aa:	2220      	movs	r2, #32
     3ac:	605a      	str	r2, [r3, #4]
     3ae:	e7fb      	b.n	3a8 <cmp_neq_reg()+0x10>
     3b0:	10001dc0 	.word	0x10001dc0

000003b4 <constexpr_bits_array()>:
     3b4:	2206      	movs	r2, #6
     3b6:	2180      	movs	r1, #128	; 0x80
     3b8:	4b02      	ldr	r3, [pc, #8]	; (3c4 <constexpr_bits_array()+0x10>)
     3ba:	0189      	lsls	r1, r1, #6
     3bc:	62da      	str	r2, [r3, #44]	; 0x2c
     3be:	329a      	adds	r2, #154	; 0x9a
     3c0:	5099      	str	r1, [r3, r2]
     3c2:	4770      	bx	lr
     3c4:	10001c00 	.word	0x10001c00

000003c8 <runtime_bits_array()>:
     3c8:	2303      	movs	r3, #3
     3ca:	4a09      	ldr	r2, [pc, #36]	; (3f0 <runtime_bits_array()+0x28>)
     3cc:	b081      	sub	sp, #4
     3ce:	4694      	mov	ip, r2
     3d0:	2221      	movs	r2, #33	; 0x21
     3d2:	9300      	str	r3, [sp, #0]
     3d4:	9b00      	ldr	r3, [sp, #0]
     3d6:	4661      	mov	r1, ip
     3d8:	009b      	lsls	r3, r3, #2
     3da:	4463      	add	r3, ip
     3dc:	621a      	str	r2, [r3, #32]
     3de:	2307      	movs	r3, #7
     3e0:	9300      	str	r3, [sp, #0]
     3e2:	9a00      	ldr	r2, [sp, #0]
     3e4:	3b06      	subs	r3, #6
     3e6:	4093      	lsls	r3, r2
     3e8:	22a0      	movs	r2, #160	; 0xa0
     3ea:	508b      	str	r3, [r1, r2]
     3ec:	b001      	add	sp, #4
     3ee:	4770      	bx	lr
     3f0:	10001c00 	.word	0x10001c00

000003f4 <prescaler_low()>:
     3f4:	2277      	movs	r2, #119	; 0x77
     3f6:	4b04      	ldr	r3, [pc, #16]	; (408 <prescaler_low()+0x14>)
     3f8:	605a      	str	r2, [r3, #4]
     3fa:	685a      	ldr	r2, [r3, #4]
     3fc:	237f      	movs	r3, #127	; 0x7f
     3fe:	4013      	ands	r3, r2
     400:	4a02      	ldr	r2, [pc, #8]	; (40c <prescaler_low()+0x18>)
     402:	62d3      	str	r3, [r2, #44]	; 0x2c
     404:	4770      	bx	lr
     406:	46c0      	nop			; (mov r8, r8)
     408:	10001d20 	.word	0x10001d20
     40c:	10001c00 	.word	0x10001c00

00000410 <prescaler_high()>:
     410:	22e8      	movs	r2, #232	; 0xe8
     412:	4b04      	ldr	r3, [pc, #16]	; (424 <prescaler_high()+0x14>)
     414:	0592      	lsls	r2, r2, #22
     416:	605a      	str	r2, [r3, #4]
     418:	685b      	ldr	r3, [r3, #4]
     41a:	4a03      	ldr	r2, [pc, #12]	; (428 <prescaler_high()+0x18>)
     41c:	009b      	lsls	r3, r3, #2
     41e:	0edb      	lsrs	r3, r3, #27
     420:	62d3      	str	r3, [r2, #44]	; 0x2c
     422:	4770      	bx	lr
     424:	10001d20 	.word	0x10001d20
     428:	10001c00 	.word	0x10001c00

0000042c <reg_mskd_lss()>:
     42c:	22d8      	movs	r2, #216	; 0xd8
     42e:	4b09      	ldr	r3, [pc, #36]	; (454 <reg_mskd_lss()+0x28>)
     430:	0592      	lsls	r2, r2, #22
     432:	605a      	str	r2, [r3, #4]
     434:	22f8      	movs	r2, #248	; 0xf8
     436:	685b      	ldr	r3, [r3, #4]
     438:	0592      	lsls	r2, r2, #22
     43a:	4013      	ands	r3, r2
     43c:	4a06      	ldr	r2, [pc, #24]	; (458 <reg_mskd_lss()+0x2c>)
     43e:	4293      	cmp	r3, r2
     440:	d803      	bhi.n	44a <reg_mskd_lss()+0x1e>
     442:	2202      	movs	r2, #2
     444:	4b05      	ldr	r3, [pc, #20]	; (45c <reg_mskd_lss()+0x30>)
     446:	605a      	str	r2, [r3, #4]
     448:	4770      	bx	lr
     44a:	2204      	movs	r2, #4
     44c:	4b03      	ldr	r3, [pc, #12]	; (45c <reg_mskd_lss()+0x30>)
     44e:	605a      	str	r2, [r3, #4]
     450:	e7fa      	b.n	448 <reg_mskd_lss()+0x1c>
     452:	46c0      	nop			; (mov r8, r8)
     454:	10001d20 	.word	0x10001d20
     458:	37ffffff 	.word	0x37ffffff
     45c:	10001dc0 	.word	0x10001dc0

00000460 <reg_mskd_leq()>:
     460:	21b8      	movs	r1, #184	; 0xb8
     462:	20f8      	movs	r0, #248	; 0xf8
     464:	4a0a      	ldr	r2, [pc, #40]	; (490 <reg_mskd_leq()+0x30>)
     466:	0589      	lsls	r1, r1, #22
     468:	6051      	str	r1, [r2, #4]
     46a:	6853      	ldr	r3, [r2, #4]
     46c:	0580      	lsls	r0, r0, #22
     46e:	4003      	ands	r3, r0
     470:	428b      	cmp	r3, r1
     472:	d805      	bhi.n	480 <reg_mskd_leq()+0x20>
     474:	6853      	ldr	r3, [r2, #4]
     476:	4018      	ands	r0, r3
     478:	23c0      	movs	r3, #192	; 0xc0
     47a:	059b      	lsls	r3, r3, #22
     47c:	4298      	cmp	r0, r3
     47e:	d903      	bls.n	488 <reg_mskd_leq()+0x28>
     480:	2204      	movs	r2, #4
     482:	4b04      	ldr	r3, [pc, #16]	; (494 <reg_mskd_leq()+0x34>)
     484:	605a      	str	r2, [r3, #4]
     486:	4770      	bx	lr
     488:	2202      	movs	r2, #2
     48a:	4b02      	ldr	r3, [pc, #8]	; (494 <reg_mskd_leq()+0x34>)
     48c:	605a      	str	r2, [r3, #4]
     48e:	e7fa      	b.n	486 <reg_mskd_leq()+0x26>
     490:	10001d20 	.word	0x10001d20
     494:	10001dc0 	.word	0x10001dc0

00000498 <reg_mskd_gtr()>:
     498:	2298      	movs	r2, #152	; 0x98
     49a:	4b09      	ldr	r3, [pc, #36]	; (4c0 <reg_mskd_gtr()+0x28>)
     49c:	0592      	lsls	r2, r2, #22
     49e:	605a      	str	r2, [r3, #4]
     4a0:	22f8      	movs	r2, #248	; 0xf8
     4a2:	685b      	ldr	r3, [r3, #4]
     4a4:	0592      	lsls	r2, r2, #22
     4a6:	4013      	ands	r3, r2
     4a8:	2290      	movs	r2, #144	; 0x90
     4aa:	0592      	lsls	r2, r2, #22
     4ac:	4293      	cmp	r3, r2
     4ae:	d903      	bls.n	4b8 <reg_mskd_gtr()+0x20>
     4b0:	2202      	movs	r2, #2
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <reg_mskd_gtr()+0x2c>)
     4b4:	605a      	str	r2, [r3, #4]
     4b6:	4770      	bx	lr
     4b8:	2204      	movs	r2, #4
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <reg_mskd_gtr()+0x2c>)
     4bc:	605a      	str	r2, [r3, #4]
     4be:	e7fa      	b.n	4b6 <reg_mskd_gtr()+0x1e>
     4c0:	10001d20 	.word	0x10001d20
     4c4:	10001dc0 	.word	0x10001dc0

000004c8 <reg_mskd_geq()>:
     4c8:	2388      	movs	r3, #136	; 0x88
     4ca:	21f8      	movs	r1, #248	; 0xf8
     4cc:	4a0a      	ldr	r2, [pc, #40]	; (4f8 <reg_mskd_geq()+0x30>)
     4ce:	059b      	lsls	r3, r3, #22
     4d0:	6053      	str	r3, [r2, #4]
     4d2:	6853      	ldr	r3, [r2, #4]
     4d4:	4809      	ldr	r0, [pc, #36]	; (4fc <reg_mskd_geq()+0x34>)
     4d6:	0589      	lsls	r1, r1, #22
     4d8:	400b      	ands	r3, r1
     4da:	4283      	cmp	r3, r0
     4dc:	d904      	bls.n	4e8 <reg_mskd_geq()+0x20>
     4de:	6853      	ldr	r3, [r2, #4]
     4e0:	4019      	ands	r1, r3
     4e2:	4b07      	ldr	r3, [pc, #28]	; (500 <reg_mskd_geq()+0x38>)
     4e4:	4299      	cmp	r1, r3
     4e6:	d803      	bhi.n	4f0 <reg_mskd_geq()+0x28>
     4e8:	2204      	movs	r2, #4
     4ea:	4b06      	ldr	r3, [pc, #24]	; (504 <reg_mskd_geq()+0x3c>)
     4ec:	605a      	str	r2, [r3, #4]
     4ee:	4770      	bx	lr
     4f0:	2202      	movs	r2, #2
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <reg_mskd_geq()+0x3c>)
     4f4:	605a      	str	r2, [r3, #4]
     4f6:	e7fa      	b.n	4ee <reg_mskd_geq()+0x26>
     4f8:	10001d20 	.word	0x10001d20
     4fc:	1fffffff 	.word	0x1fffffff
     500:	21ffffff 	.word	0x21ffffff
     504:	10001dc0 	.word	0x10001dc0

00000508 <pos_cmp_eq()>:
     508:	2202      	movs	r2, #2
     50a:	4b01      	ldr	r3, [pc, #4]	; (510 <pos_cmp_eq()+0x8>)
     50c:	605a      	str	r2, [r3, #4]
     50e:	4770      	bx	lr
     510:	10001dc0 	.word	0x10001dc0

00000514 <pos_cmp_ne()>:
     514:	2202      	movs	r2, #2
     516:	4b01      	ldr	r3, [pc, #4]	; (51c <pos_cmp_ne()+0x8>)
     518:	605a      	str	r2, [r3, #4]
     51a:	4770      	bx	lr
     51c:	10001dc0 	.word	0x10001dc0

00000520 <bits_extract_eq()>:
     520:	2240      	movs	r2, #64	; 0x40
     522:	4b05      	ldr	r3, [pc, #20]	; (538 <bits_extract_eq()+0x18>)
     524:	605a      	str	r2, [r3, #4]
     526:	685a      	ldr	r2, [r3, #4]
     528:	2a40      	cmp	r2, #64	; 0x40
     52a:	d002      	beq.n	532 <bits_extract_eq()+0x12>
     52c:	2204      	movs	r2, #4
     52e:	605a      	str	r2, [r3, #4]
     530:	4770      	bx	lr
     532:	3a3e      	subs	r2, #62	; 0x3e
     534:	605a      	str	r2, [r3, #4]
     536:	e7fb      	b.n	530 <bits_extract_eq()+0x10>
     538:	10001dc0 	.word	0x10001dc0

0000053c <mskd_extract_eq()>:
     53c:	2202      	movs	r2, #2
     53e:	4b05      	ldr	r3, [pc, #20]	; (554 <mskd_extract_eq()+0x18>)
     540:	605a      	str	r2, [r3, #4]
     542:	685a      	ldr	r2, [r3, #4]
     544:	2a02      	cmp	r2, #2
     546:	d002      	beq.n	54e <mskd_extract_eq()+0x12>
     548:	2240      	movs	r2, #64	; 0x40
     54a:	605a      	str	r2, [r3, #4]
     54c:	4770      	bx	lr
     54e:	321e      	adds	r2, #30
     550:	605a      	str	r2, [r3, #4]
     552:	e7fb      	b.n	54c <mskd_extract_eq()+0x10>
     554:	10001dc0 	.word	0x10001dc0

00000558 <mskd_extract_ne()>:
     558:	2204      	movs	r2, #4
     55a:	4b05      	ldr	r3, [pc, #20]	; (570 <mskd_extract_ne()+0x18>)
     55c:	605a      	str	r2, [r3, #4]
     55e:	685a      	ldr	r2, [r3, #4]
     560:	2a04      	cmp	r2, #4
     562:	d002      	beq.n	56a <mskd_extract_ne()+0x12>
     564:	2220      	movs	r2, #32
     566:	605a      	str	r2, [r3, #4]
     568:	4770      	bx	lr
     56a:	323c      	adds	r2, #60	; 0x3c
     56c:	605a      	str	r2, [r3, #4]
     56e:	e7fb      	b.n	568 <mskd_extract_ne()+0x10>
     570:	10001dc0 	.word	0x10001dc0

00000574 <mskd_extract_lss()>:
     574:	22b0      	movs	r2, #176	; 0xb0
     576:	4b07      	ldr	r3, [pc, #28]	; (594 <mskd_extract_lss()+0x20>)
     578:	0552      	lsls	r2, r2, #21
     57a:	605a      	str	r2, [r3, #4]
     57c:	685a      	ldr	r2, [r3, #4]
     57e:	4b06      	ldr	r3, [pc, #24]	; (598 <mskd_extract_lss()+0x24>)
     580:	429a      	cmp	r2, r3
     582:	d803      	bhi.n	58c <mskd_extract_lss()+0x18>
     584:	2220      	movs	r2, #32
     586:	4b05      	ldr	r3, [pc, #20]	; (59c <mskd_extract_lss()+0x28>)
     588:	605a      	str	r2, [r3, #4]
     58a:	4770      	bx	lr
     58c:	2240      	movs	r2, #64	; 0x40
     58e:	4b03      	ldr	r3, [pc, #12]	; (59c <mskd_extract_lss()+0x28>)
     590:	605a      	str	r2, [r3, #4]
     592:	e7fa      	b.n	58a <mskd_extract_lss()+0x16>
     594:	10001d20 	.word	0x10001d20
     598:	17ffffff 	.word	0x17ffffff
     59c:	10001dc0 	.word	0x10001dc0

000005a0 <mskd_extract_leq()>:
     5a0:	23b8      	movs	r3, #184	; 0xb8
     5a2:	4a07      	ldr	r2, [pc, #28]	; (5c0 <mskd_extract_leq()+0x20>)
     5a4:	059b      	lsls	r3, r3, #22
     5a6:	6053      	str	r3, [r2, #4]
     5a8:	6852      	ldr	r2, [r2, #4]
     5aa:	429a      	cmp	r2, r3
     5ac:	d803      	bhi.n	5b6 <mskd_extract_leq()+0x16>
     5ae:	2220      	movs	r2, #32
     5b0:	4b04      	ldr	r3, [pc, #16]	; (5c4 <mskd_extract_leq()+0x24>)
     5b2:	605a      	str	r2, [r3, #4]
     5b4:	4770      	bx	lr
     5b6:	2240      	movs	r2, #64	; 0x40
     5b8:	4b02      	ldr	r3, [pc, #8]	; (5c4 <mskd_extract_leq()+0x24>)
     5ba:	605a      	str	r2, [r3, #4]
     5bc:	e7fa      	b.n	5b4 <mskd_extract_leq()+0x14>
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	10001d20 	.word	0x10001d20
     5c4:	10001dc0 	.word	0x10001dc0

000005c8 <mskd_extract_gtr()>:
     5c8:	2298      	movs	r2, #152	; 0x98
     5ca:	4b08      	ldr	r3, [pc, #32]	; (5ec <mskd_extract_gtr()+0x24>)
     5cc:	0592      	lsls	r2, r2, #22
     5ce:	605a      	str	r2, [r3, #4]
     5d0:	685a      	ldr	r2, [r3, #4]
     5d2:	2390      	movs	r3, #144	; 0x90
     5d4:	059b      	lsls	r3, r3, #22
     5d6:	429a      	cmp	r2, r3
     5d8:	d903      	bls.n	5e2 <mskd_extract_gtr()+0x1a>
     5da:	2220      	movs	r2, #32
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <mskd_extract_gtr()+0x28>)
     5de:	605a      	str	r2, [r3, #4]
     5e0:	4770      	bx	lr
     5e2:	2240      	movs	r2, #64	; 0x40
     5e4:	4b02      	ldr	r3, [pc, #8]	; (5f0 <mskd_extract_gtr()+0x28>)
     5e6:	605a      	str	r2, [r3, #4]
     5e8:	e7fa      	b.n	5e0 <mskd_extract_gtr()+0x18>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	10001d20 	.word	0x10001d20
     5f0:	10001dc0 	.word	0x10001dc0

000005f4 <set_bits_global()>:
     5f4:	2140      	movs	r1, #64	; 0x40
     5f6:	4a02      	ldr	r2, [pc, #8]	; (600 <set_bits_global()+0xc>)
     5f8:	6853      	ldr	r3, [r2, #4]
     5fa:	430b      	orrs	r3, r1
     5fc:	6053      	str	r3, [r2, #4]
     5fe:	4770      	bx	lr
     600:	10001dc0 	.word	0x10001dc0

00000604 <ins_mskd_global()>:
     604:	2106      	movs	r1, #6
     606:	4a03      	ldr	r2, [pc, #12]	; (614 <ins_mskd_global()+0x10>)
     608:	6853      	ldr	r3, [r2, #4]
     60a:	438b      	bics	r3, r1
     60c:	3904      	subs	r1, #4
     60e:	430b      	orrs	r3, r1
     610:	6053      	str	r3, [r2, #4]
     612:	4770      	bx	lr
     614:	10001dc0 	.word	0x10001dc0

00000618 <assign_array_global()>:
     618:	22bd      	movs	r2, #189	; 0xbd
     61a:	4b01      	ldr	r3, [pc, #4]	; (620 <assign_array_global()+0x8>)
     61c:	601a      	str	r2, [r3, #0]
     61e:	4770      	bx	lr
     620:	10001c2c 	.word	0x10001c2c

00000624 <shifted_global()>:
     624:	22b8      	movs	r2, #184	; 0xb8
     626:	4b04      	ldr	r3, [pc, #16]	; (638 <shifted_global()+0x14>)
     628:	0592      	lsls	r2, r2, #22
     62a:	605a      	str	r2, [r3, #4]
     62c:	685b      	ldr	r3, [r3, #4]
     62e:	4a03      	ldr	r2, [pc, #12]	; (63c <shifted_global()+0x18>)
     630:	009b      	lsls	r3, r3, #2
     632:	0edb      	lsrs	r3, r3, #27
     634:	62d3      	str	r3, [r2, #44]	; 0x2c
     636:	4770      	bx	lr
     638:	10001d20 	.word	0x10001d20
     63c:	10001c00 	.word	0x10001c00

00000640 <assign_register_global()>:
     640:	2204      	movs	r2, #4
     642:	4b01      	ldr	r3, [pc, #4]	; (648 <assign_register_global()+0x8>)
     644:	605a      	str	r2, [r3, #4]
     646:	4770      	bx	lr
     648:	10001dc0 	.word	0x10001dc0

0000064c <copy_bits_equ()>:
     64c:	2240      	movs	r2, #64	; 0x40
     64e:	4b05      	ldr	r3, [pc, #20]	; (664 <copy_bits_equ()+0x18>)
     650:	605a      	str	r2, [r3, #4]
     652:	6859      	ldr	r1, [r3, #4]
     654:	420a      	tst	r2, r1
     656:	d002      	beq.n	65e <copy_bits_equ()+0x12>
     658:	3a3e      	subs	r2, #62	; 0x3e
     65a:	605a      	str	r2, [r3, #4]
     65c:	4770      	bx	lr
     65e:	2204      	movs	r2, #4
     660:	605a      	str	r2, [r3, #4]
     662:	e7fb      	b.n	65c <copy_bits_equ()+0x10>
     664:	10001dc0 	.word	0x10001dc0

00000668 <copy_bits_neq()>:
     668:	2240      	movs	r2, #64	; 0x40
     66a:	4b05      	ldr	r3, [pc, #20]	; (680 <copy_bits_neq()+0x18>)
     66c:	605a      	str	r2, [r3, #4]
     66e:	6859      	ldr	r1, [r3, #4]
     670:	420a      	tst	r2, r1
     672:	d102      	bne.n	67a <copy_bits_neq()+0x12>
     674:	3a3e      	subs	r2, #62	; 0x3e
     676:	605a      	str	r2, [r3, #4]
     678:	4770      	bx	lr
     67a:	2204      	movs	r2, #4
     67c:	605a      	str	r2, [r3, #4]
     67e:	e7fb      	b.n	678 <copy_bits_neq()+0x10>
     680:	10001dc0 	.word	0x10001dc0

00000684 <copy_mskd_equ()>:
     684:	22b0      	movs	r2, #176	; 0xb0
     686:	21f8      	movs	r1, #248	; 0xf8
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <copy_mskd_equ()+0x24>)
     68a:	0552      	lsls	r2, r2, #21
     68c:	605a      	str	r2, [r3, #4]
     68e:	685b      	ldr	r3, [r3, #4]
     690:	0589      	lsls	r1, r1, #22
     692:	400b      	ands	r3, r1
     694:	4293      	cmp	r3, r2
     696:	d003      	beq.n	6a0 <copy_mskd_equ()+0x1c>
     698:	2204      	movs	r2, #4
     69a:	4b04      	ldr	r3, [pc, #16]	; (6ac <copy_mskd_equ()+0x28>)
     69c:	605a      	str	r2, [r3, #4]
     69e:	4770      	bx	lr
     6a0:	2202      	movs	r2, #2
     6a2:	4b02      	ldr	r3, [pc, #8]	; (6ac <copy_mskd_equ()+0x28>)
     6a4:	605a      	str	r2, [r3, #4]
     6a6:	e7fa      	b.n	69e <copy_mskd_equ()+0x1a>
     6a8:	10001d20 	.word	0x10001d20
     6ac:	10001dc0 	.word	0x10001dc0

000006b0 <copy_mskd_neq()>:
     6b0:	22d0      	movs	r2, #208	; 0xd0
     6b2:	21f8      	movs	r1, #248	; 0xf8
     6b4:	4b07      	ldr	r3, [pc, #28]	; (6d4 <copy_mskd_neq()+0x24>)
     6b6:	0552      	lsls	r2, r2, #21
     6b8:	605a      	str	r2, [r3, #4]
     6ba:	685b      	ldr	r3, [r3, #4]
     6bc:	0589      	lsls	r1, r1, #22
     6be:	400b      	ands	r3, r1
     6c0:	4293      	cmp	r3, r2
     6c2:	d003      	beq.n	6cc <copy_mskd_neq()+0x1c>
     6c4:	2202      	movs	r2, #2
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <copy_mskd_neq()+0x28>)
     6c8:	605a      	str	r2, [r3, #4]
     6ca:	4770      	bx	lr
     6cc:	2204      	movs	r2, #4
     6ce:	4b02      	ldr	r3, [pc, #8]	; (6d8 <copy_mskd_neq()+0x28>)
     6d0:	605a      	str	r2, [r3, #4]
     6d2:	e7fa      	b.n	6ca <copy_mskd_neq()+0x1a>
     6d4:	10001d20 	.word	0x10001d20
     6d8:	10001dc0 	.word	0x10001dc0

000006dc <copy_mskd_lss()>:
     6dc:	22d8      	movs	r2, #216	; 0xd8
     6de:	4b09      	ldr	r3, [pc, #36]	; (704 <copy_mskd_lss()+0x28>)
     6e0:	0592      	lsls	r2, r2, #22
     6e2:	605a      	str	r2, [r3, #4]
     6e4:	22f8      	movs	r2, #248	; 0xf8
     6e6:	685b      	ldr	r3, [r3, #4]
     6e8:	0592      	lsls	r2, r2, #22
     6ea:	4013      	ands	r3, r2
     6ec:	4a06      	ldr	r2, [pc, #24]	; (708 <copy_mskd_lss()+0x2c>)
     6ee:	4293      	cmp	r3, r2
     6f0:	d803      	bhi.n	6fa <copy_mskd_lss()+0x1e>
     6f2:	2202      	movs	r2, #2
     6f4:	4b05      	ldr	r3, [pc, #20]	; (70c <copy_mskd_lss()+0x30>)
     6f6:	605a      	str	r2, [r3, #4]
     6f8:	4770      	bx	lr
     6fa:	2204      	movs	r2, #4
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <copy_mskd_lss()+0x30>)
     6fe:	605a      	str	r2, [r3, #4]
     700:	e7fa      	b.n	6f8 <copy_mskd_lss()+0x1c>
     702:	46c0      	nop			; (mov r8, r8)
     704:	10001d20 	.word	0x10001d20
     708:	37ffffff 	.word	0x37ffffff
     70c:	10001dc0 	.word	0x10001dc0

00000710 <copy_mskd_leq()>:
     710:	22b8      	movs	r2, #184	; 0xb8
     712:	21f8      	movs	r1, #248	; 0xf8
     714:	4b07      	ldr	r3, [pc, #28]	; (734 <copy_mskd_leq()+0x24>)
     716:	0592      	lsls	r2, r2, #22
     718:	605a      	str	r2, [r3, #4]
     71a:	685b      	ldr	r3, [r3, #4]
     71c:	0589      	lsls	r1, r1, #22
     71e:	400b      	ands	r3, r1
     720:	4293      	cmp	r3, r2
     722:	d803      	bhi.n	72c <copy_mskd_leq()+0x1c>
     724:	2202      	movs	r2, #2
     726:	4b04      	ldr	r3, [pc, #16]	; (738 <copy_mskd_leq()+0x28>)
     728:	605a      	str	r2, [r3, #4]
     72a:	4770      	bx	lr
     72c:	2204      	movs	r2, #4
     72e:	4b02      	ldr	r3, [pc, #8]	; (738 <copy_mskd_leq()+0x28>)
     730:	605a      	str	r2, [r3, #4]
     732:	e7fa      	b.n	72a <copy_mskd_leq()+0x1a>
     734:	10001d20 	.word	0x10001d20
     738:	10001dc0 	.word	0x10001dc0

0000073c <copy_mskd_gtr()>:
     73c:	2298      	movs	r2, #152	; 0x98
     73e:	4b09      	ldr	r3, [pc, #36]	; (764 <copy_mskd_gtr()+0x28>)
     740:	0592      	lsls	r2, r2, #22
     742:	605a      	str	r2, [r3, #4]
     744:	22f8      	movs	r2, #248	; 0xf8
     746:	685b      	ldr	r3, [r3, #4]
     748:	0592      	lsls	r2, r2, #22
     74a:	4013      	ands	r3, r2
     74c:	2290      	movs	r2, #144	; 0x90
     74e:	0592      	lsls	r2, r2, #22
     750:	4293      	cmp	r3, r2
     752:	d903      	bls.n	75c <copy_mskd_gtr()+0x20>
     754:	2202      	movs	r2, #2
     756:	4b04      	ldr	r3, [pc, #16]	; (768 <copy_mskd_gtr()+0x2c>)
     758:	605a      	str	r2, [r3, #4]
     75a:	4770      	bx	lr
     75c:	2204      	movs	r2, #4
     75e:	4b02      	ldr	r3, [pc, #8]	; (768 <copy_mskd_gtr()+0x2c>)
     760:	605a      	str	r2, [r3, #4]
     762:	e7fa      	b.n	75a <copy_mskd_gtr()+0x1e>
     764:	10001d20 	.word	0x10001d20
     768:	10001dc0 	.word	0x10001dc0

0000076c <copy_mskd_geq()>:
     76c:	2288      	movs	r2, #136	; 0x88
     76e:	4b09      	ldr	r3, [pc, #36]	; (794 <copy_mskd_geq()+0x28>)
     770:	0592      	lsls	r2, r2, #22
     772:	605a      	str	r2, [r3, #4]
     774:	22f8      	movs	r2, #248	; 0xf8
     776:	685b      	ldr	r3, [r3, #4]
     778:	0592      	lsls	r2, r2, #22
     77a:	4013      	ands	r3, r2
     77c:	4a06      	ldr	r2, [pc, #24]	; (798 <copy_mskd_geq()+0x2c>)
     77e:	4293      	cmp	r3, r2
     780:	d803      	bhi.n	78a <copy_mskd_geq()+0x1e>
     782:	2204      	movs	r2, #4
     784:	4b05      	ldr	r3, [pc, #20]	; (79c <copy_mskd_geq()+0x30>)
     786:	605a      	str	r2, [r3, #4]
     788:	4770      	bx	lr
     78a:	2202      	movs	r2, #2
     78c:	4b03      	ldr	r3, [pc, #12]	; (79c <copy_mskd_geq()+0x30>)
     78e:	605a      	str	r2, [r3, #4]
     790:	e7fa      	b.n	788 <copy_mskd_geq()+0x1c>
     792:	46c0      	nop			; (mov r8, r8)
     794:	10001d20 	.word	0x10001d20
     798:	21ffffff 	.word	0x21ffffff
     79c:	10001dc0 	.word	0x10001dc0

000007a0 <copy_shifted()>:
     7a0:	22b0      	movs	r2, #176	; 0xb0
     7a2:	4b08      	ldr	r3, [pc, #32]	; (7c4 <copy_shifted()+0x24>)
     7a4:	0552      	lsls	r2, r2, #21
     7a6:	605a      	str	r2, [r3, #4]
     7a8:	685b      	ldr	r3, [r3, #4]
     7aa:	009b      	lsls	r3, r3, #2
     7ac:	0edb      	lsrs	r3, r3, #27
     7ae:	2b0b      	cmp	r3, #11
     7b0:	d003      	beq.n	7ba <copy_shifted()+0x1a>
     7b2:	2204      	movs	r2, #4
     7b4:	4b04      	ldr	r3, [pc, #16]	; (7c8 <copy_shifted()+0x28>)
     7b6:	605a      	str	r2, [r3, #4]
     7b8:	4770      	bx	lr
     7ba:	2202      	movs	r2, #2
     7bc:	4b02      	ldr	r3, [pc, #8]	; (7c8 <copy_shifted()+0x28>)
     7be:	605a      	str	r2, [r3, #4]
     7c0:	e7fa      	b.n	7b8 <copy_shifted()+0x18>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	10001d20 	.word	0x10001d20
     7c8:	10001dc0 	.word	0x10001dc0

000007cc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>:
     7cc:	2266      	movs	r2, #102	; 0x66
     7ce:	4b01      	ldr	r3, [pc, #4]	; (7d4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]+0x8>)
     7d0:	62da      	str	r2, [r3, #44]	; 0x2c
     7d2:	4770      	bx	lr
     7d4:	10001c00 	.word	0x10001c00

000007d8 <call_pos_ref()>:
     7d8:	b510      	push	{r4, lr}
     7da:	2405      	movs	r4, #5
     7dc:	b081      	sub	sp, #4
     7de:	4668      	mov	r0, sp
     7e0:	9400      	str	r4, [sp, #0]
     7e2:	f7ff fff3 	bl	7cc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     7e6:	4668      	mov	r0, sp
     7e8:	9400      	str	r4, [sp, #0]
     7ea:	f7ff ffef 	bl	7cc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     7ee:	b001      	add	sp, #4
     7f0:	bd10      	pop	{r4, pc}
     7f2:	46c0      	nop			; (mov r8, r8)

000007f4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>:
     7f4:	2277      	movs	r2, #119	; 0x77
     7f6:	4b01      	ldr	r3, [pc, #4]	; (7fc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]+0x8>)
     7f8:	62da      	str	r2, [r3, #44]	; 0x2c
     7fa:	4770      	bx	lr
     7fc:	10001c00 	.word	0x10001c00

00000800 <call_pos_ref_global()>:
     800:	2306      	movs	r3, #6
     802:	b500      	push	{lr}
     804:	b081      	sub	sp, #4
     806:	4668      	mov	r0, sp
     808:	9300      	str	r3, [sp, #0]
     80a:	f7ff fff3 	bl	7f4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>
     80e:	b001      	add	sp, #4
     810:	bd00      	pop	{pc}
     812:	46c0      	nop			; (mov r8, r8)

00000814 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     814:	2233      	movs	r2, #51	; 0x33
     816:	4b01      	ldr	r3, [pc, #4]	; (81c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x8>)
     818:	62da      	str	r2, [r3, #44]	; 0x2c
     81a:	4770      	bx	lr
     81c:	10001c00 	.word	0x10001c00

00000820 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     820:	2244      	movs	r2, #68	; 0x44
     822:	4b01      	ldr	r3, [pc, #4]	; (828 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
     824:	62da      	str	r2, [r3, #44]	; 0x2c
     826:	4770      	bx	lr
     828:	10001c00 	.word	0x10001c00

0000082c <call_pos_val()>:
     82c:	b500      	push	{lr}
     82e:	2005      	movs	r0, #5
     830:	f7ff fff0 	bl	814 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     834:	2006      	movs	r0, #6
     836:	f7ff fff3 	bl	820 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     83a:	bd00      	pop	{pc}

0000083c <call_pos_val_global()>:
     83c:	b500      	push	{lr}
     83e:	2006      	movs	r0, #6
     840:	f7ff ffee 	bl	820 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     844:	bd00      	pop	{pc}
     846:	46c0      	nop			; (mov r8, r8)

00000848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>:
     848:	2106      	movs	r1, #6
     84a:	4a03      	ldr	r2, [pc, #12]	; (858 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]+0x10>)
     84c:	6853      	ldr	r3, [r2, #4]
     84e:	438b      	bics	r3, r1
     850:	3904      	subs	r1, #4
     852:	430b      	orrs	r3, r1
     854:	6053      	str	r3, [r2, #4]
     856:	4770      	bx	lr
     858:	10001dc0 	.word	0x10001dc0

0000085c <call_mskd_val_const()>:
     85c:	b500      	push	{lr}
     85e:	2006      	movs	r0, #6
     860:	2102      	movs	r1, #2
     862:	f7ff fff1 	bl	848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     866:	bd00      	pop	{pc}

00000868 <call_mskd_val_var()>:
     868:	b500      	push	{lr}
     86a:	2006      	movs	r0, #6
     86c:	2102      	movs	r1, #2
     86e:	f7ff ffeb 	bl	848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     872:	bd00      	pop	{pc}

00000874 <call_mskd_val_global()>:
     874:	b500      	push	{lr}
     876:	2006      	movs	r0, #6
     878:	2102      	movs	r1, #2
     87a:	f7ff ffe5 	bl	848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     87e:	bd00      	pop	{pc}

00000880 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>:
     880:	2140      	movs	r1, #64	; 0x40
     882:	4a02      	ldr	r2, [pc, #8]	; (88c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]+0xc>)
     884:	6853      	ldr	r3, [r2, #4]
     886:	430b      	orrs	r3, r1
     888:	6053      	str	r3, [r2, #4]
     88a:	4770      	bx	lr
     88c:	10001dc0 	.word	0x10001dc0

00000890 <call_bits_val_const()>:
     890:	b500      	push	{lr}
     892:	2040      	movs	r0, #64	; 0x40
     894:	f7ff fff4 	bl	880 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>
     898:	bd00      	pop	{pc}
     89a:	46c0      	nop			; (mov r8, r8)

0000089c <call_bits_val_var()>:
     89c:	b500      	push	{lr}
     89e:	2040      	movs	r0, #64	; 0x40
     8a0:	f7ff ffee 	bl	880 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>
     8a4:	bd00      	pop	{pc}
     8a6:	46c0      	nop			; (mov r8, r8)

000008a8 <call_bits_val_global()>:
     8a8:	b500      	push	{lr}
     8aa:	2040      	movs	r0, #64	; 0x40
     8ac:	f7ff ffe8 	bl	880 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>
     8b0:	bd00      	pop	{pc}
     8b2:	46c0      	nop			; (mov r8, r8)

000008b4 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     8b4:	4b02      	ldr	r3, [pc, #8]	; (8c0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     8b6:	685a      	ldr	r2, [r3, #4]
     8b8:	4310      	orrs	r0, r2
     8ba:	6058      	str	r0, [r3, #4]
     8bc:	4770      	bx	lr
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	10001dc0 	.word	0x10001dc0

000008c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8c4:	4a02      	ldr	r2, [pc, #8]	; (8d0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     8c6:	6801      	ldr	r1, [r0, #0]
     8c8:	6853      	ldr	r3, [r2, #4]
     8ca:	430b      	orrs	r3, r1
     8cc:	6053      	str	r3, [r2, #4]
     8ce:	4770      	bx	lr
     8d0:	10001dc0 	.word	0x10001dc0

000008d4 <call_bits_ref_var()>:
     8d4:	2301      	movs	r3, #1
     8d6:	b500      	push	{lr}
     8d8:	b081      	sub	sp, #4
     8da:	4668      	mov	r0, sp
     8dc:	9300      	str	r3, [sp, #0]
     8de:	f7ff fffe 	bl	8c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8e2:	b001      	add	sp, #4
     8e4:	bd00      	pop	{pc}
     8e6:	46c0      	nop			; (mov r8, r8)

000008e8 <call_bits_ref_const()>:
     8e8:	2301      	movs	r3, #1
     8ea:	b500      	push	{lr}
     8ec:	b081      	sub	sp, #4
     8ee:	4668      	mov	r0, sp
     8f0:	9300      	str	r3, [sp, #0]
     8f2:	f7ff fffe 	bl	8c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8f6:	b001      	add	sp, #4
     8f8:	bd00      	pop	{pc}
     8fa:	46c0      	nop			; (mov r8, r8)

000008fc <call_bits_ref_global()>:
     8fc:	2340      	movs	r3, #64	; 0x40
     8fe:	b500      	push	{lr}
     900:	b081      	sub	sp, #4
     902:	4668      	mov	r0, sp
     904:	9300      	str	r3, [sp, #0]
     906:	f7ff fffe 	bl	8c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     90a:	b001      	add	sp, #4
     90c:	bd00      	pop	{pc}
     90e:	46c0      	nop			; (mov r8, r8)

00000910 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     910:	4a02      	ldr	r2, [pc, #8]	; (91c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     912:	6853      	ldr	r3, [r2, #4]
     914:	4383      	bics	r3, r0
     916:	430b      	orrs	r3, r1
     918:	6053      	str	r3, [r2, #4]
     91a:	4770      	bx	lr
     91c:	10001dc0 	.word	0x10001dc0

00000920 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     920:	4a03      	ldr	r2, [pc, #12]	; (930 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x10>)
     922:	6801      	ldr	r1, [r0, #0]
     924:	6853      	ldr	r3, [r2, #4]
     926:	438b      	bics	r3, r1
     928:	6841      	ldr	r1, [r0, #4]
     92a:	430b      	orrs	r3, r1
     92c:	6053      	str	r3, [r2, #4]
     92e:	4770      	bx	lr
     930:	10001dc0 	.word	0x10001dc0

00000934 <call_mskd_ref_var()>:
     934:	b500      	push	{lr}
     936:	4b05      	ldr	r3, [pc, #20]	; (94c <call_mskd_ref_var()+0x18>)
     938:	b082      	sub	sp, #8
     93a:	4668      	mov	r0, sp
     93c:	681a      	ldr	r2, [r3, #0]
     93e:	685b      	ldr	r3, [r3, #4]
     940:	9200      	str	r2, [sp, #0]
     942:	9301      	str	r3, [sp, #4]
     944:	f7ff fffe 	bl	920 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     948:	b002      	add	sp, #8
     94a:	bd00      	pop	{pc}
     94c:	00000000 	.word	0x00000000

00000950 <call_mskd_ref_const()>:
     950:	2306      	movs	r3, #6
     952:	b500      	push	{lr}
     954:	b082      	sub	sp, #8
     956:	9300      	str	r3, [sp, #0]
     958:	4668      	mov	r0, sp
     95a:	3b02      	subs	r3, #2
     95c:	9301      	str	r3, [sp, #4]
     95e:	f7ff fffe 	bl	920 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     962:	b002      	add	sp, #8
     964:	bd00      	pop	{pc}
     966:	46c0      	nop			; (mov r8, r8)

00000968 <call_mskd_ref_global()>:
     968:	2306      	movs	r3, #6
     96a:	b500      	push	{lr}
     96c:	b082      	sub	sp, #8
     96e:	9300      	str	r3, [sp, #0]
     970:	4668      	mov	r0, sp
     972:	3b04      	subs	r3, #4
     974:	9301      	str	r3, [sp, #4]
     976:	f7ff fffe 	bl	920 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     97a:	b002      	add	sp, #8
     97c:	bd00      	pop	{pc}
     97e:	46c0      	nop			; (mov r8, r8)

00000980 <periph_bits(mcu::Serial*)>:
     980:	2240      	movs	r2, #64	; 0x40
     982:	6843      	ldr	r3, [r0, #4]
     984:	4313      	orrs	r3, r2
     986:	6043      	str	r3, [r0, #4]
     988:	4770      	bx	lr
     98a:	46c0      	nop			; (mov r8, r8)

0000098c <call_periph_bits()>:
     98c:	b500      	push	{lr}
     98e:	4802      	ldr	r0, [pc, #8]	; (998 <call_periph_bits()+0xc>)
     990:	f7ff fffe 	bl	980 <periph_bits(mcu::Serial*)>
     994:	bd00      	pop	{pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	10001dc0 	.word	0x10001dc0

0000099c <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     99c:	6843      	ldr	r3, [r0, #4]
     99e:	4319      	orrs	r1, r3
     9a0:	6041      	str	r1, [r0, #4]
     9a2:	4770      	bx	lr

000009a4 <call_periph_bits_val()>:
     9a4:	b500      	push	{lr}
     9a6:	2140      	movs	r1, #64	; 0x40
     9a8:	4801      	ldr	r0, [pc, #4]	; (9b0 <call_periph_bits_val()+0xc>)
     9aa:	f7ff fffe 	bl	99c <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     9ae:	bd00      	pop	{pc}
     9b0:	10001dc0 	.word	0x10001dc0

000009b4 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     9b4:	6803      	ldr	r3, [r0, #0]
     9b6:	4319      	orrs	r1, r3
     9b8:	6001      	str	r1, [r0, #0]
     9ba:	4770      	bx	lr

000009bc <call_reg_bits_val()>:
     9bc:	b500      	push	{lr}
     9be:	2140      	movs	r1, #64	; 0x40
     9c0:	4801      	ldr	r0, [pc, #4]	; (9c8 <call_reg_bits_val()+0xc>)
     9c2:	f7ff fffe 	bl	9b4 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     9c6:	bd00      	pop	{pc}
     9c8:	10001dc4 	.word	0x10001dc4

000009cc <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     9cc:	6843      	ldr	r3, [r0, #4]
     9ce:	680a      	ldr	r2, [r1, #0]
     9d0:	4313      	orrs	r3, r2
     9d2:	6043      	str	r3, [r0, #4]
     9d4:	4770      	bx	lr
     9d6:	46c0      	nop			; (mov r8, r8)

000009d8 <call_periph_bits_ref()>:
     9d8:	2340      	movs	r3, #64	; 0x40
     9da:	b500      	push	{lr}
     9dc:	b081      	sub	sp, #4
     9de:	4669      	mov	r1, sp
     9e0:	4802      	ldr	r0, [pc, #8]	; (9ec <call_periph_bits_ref()+0x14>)
     9e2:	9300      	str	r3, [sp, #0]
     9e4:	f7ff fffe 	bl	9cc <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     9e8:	b001      	add	sp, #4
     9ea:	bd00      	pop	{pc}
     9ec:	10001dc0 	.word	0x10001dc0

000009f0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     9f0:	6803      	ldr	r3, [r0, #0]
     9f2:	680a      	ldr	r2, [r1, #0]
     9f4:	4313      	orrs	r3, r2
     9f6:	6003      	str	r3, [r0, #0]
     9f8:	4770      	bx	lr
     9fa:	46c0      	nop			; (mov r8, r8)

000009fc <call_reg_bits_ref()>:
     9fc:	2340      	movs	r3, #64	; 0x40
     9fe:	b500      	push	{lr}
     a00:	b081      	sub	sp, #4
     a02:	4669      	mov	r1, sp
     a04:	4802      	ldr	r0, [pc, #8]	; (a10 <call_reg_bits_ref()+0x14>)
     a06:	9300      	str	r3, [sp, #0]
     a08:	f7ff fffe 	bl	9f0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     a0c:	b001      	add	sp, #4
     a0e:	bd00      	pop	{pc}
     a10:	10001dc4 	.word	0x10001dc4

00000a14 <periph_mskd(mcu::Serial*)>:
     a14:	2206      	movs	r2, #6
     a16:	6843      	ldr	r3, [r0, #4]
     a18:	4393      	bics	r3, r2
     a1a:	3a04      	subs	r2, #4
     a1c:	4313      	orrs	r3, r2
     a1e:	6043      	str	r3, [r0, #4]
     a20:	4770      	bx	lr
     a22:	46c0      	nop			; (mov r8, r8)

00000a24 <call_periph_mskd()>:
     a24:	b500      	push	{lr}
     a26:	4802      	ldr	r0, [pc, #8]	; (a30 <call_periph_mskd()+0xc>)
     a28:	f7ff fffe 	bl	a14 <periph_mskd(mcu::Serial*)>
     a2c:	bd00      	pop	{pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	10001dc0 	.word	0x10001dc0

00000a34 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a34:	6843      	ldr	r3, [r0, #4]
     a36:	438b      	bics	r3, r1
     a38:	4313      	orrs	r3, r2
     a3a:	6043      	str	r3, [r0, #4]
     a3c:	4770      	bx	lr
     a3e:	46c0      	nop			; (mov r8, r8)

00000a40 <call_periph_mskd_val()>:
     a40:	b500      	push	{lr}
     a42:	2106      	movs	r1, #6
     a44:	2202      	movs	r2, #2
     a46:	4802      	ldr	r0, [pc, #8]	; (a50 <call_periph_mskd_val()+0x10>)
     a48:	f7ff fffe 	bl	a34 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a4c:	bd00      	pop	{pc}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	10001dc0 	.word	0x10001dc0

00000a54 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a54:	6803      	ldr	r3, [r0, #0]
     a56:	438b      	bics	r3, r1
     a58:	4313      	orrs	r3, r2
     a5a:	6003      	str	r3, [r0, #0]
     a5c:	4770      	bx	lr
     a5e:	46c0      	nop			; (mov r8, r8)

00000a60 <call_reg_mskd_val()>:
     a60:	b500      	push	{lr}
     a62:	2106      	movs	r1, #6
     a64:	2202      	movs	r2, #2
     a66:	4802      	ldr	r0, [pc, #8]	; (a70 <call_reg_mskd_val()+0x10>)
     a68:	f7ff fffe 	bl	a54 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a6c:	bd00      	pop	{pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	10001dc4 	.word	0x10001dc4

00000a74 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a74:	6843      	ldr	r3, [r0, #4]
     a76:	438b      	bics	r3, r1
     a78:	4313      	orrs	r3, r2
     a7a:	6043      	str	r3, [r0, #4]
     a7c:	4770      	bx	lr
     a7e:	46c0      	nop			; (mov r8, r8)

00000a80 <call_periph_mskd_ref()>:
     a80:	b500      	push	{lr}
     a82:	2106      	movs	r1, #6
     a84:	2202      	movs	r2, #2
     a86:	4802      	ldr	r0, [pc, #8]	; (a90 <call_periph_mskd_ref()+0x10>)
     a88:	f7ff fffe 	bl	a74 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a8c:	bd00      	pop	{pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	10001dc0 	.word	0x10001dc0

00000a94 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a94:	6803      	ldr	r3, [r0, #0]
     a96:	438b      	bics	r3, r1
     a98:	4313      	orrs	r3, r2
     a9a:	6003      	str	r3, [r0, #0]
     a9c:	4770      	bx	lr
     a9e:	46c0      	nop			; (mov r8, r8)

00000aa0 <call_reg_mskd_ref()>:
     aa0:	b500      	push	{lr}
     aa2:	2106      	movs	r1, #6
     aa4:	2202      	movs	r2, #2
     aa6:	4802      	ldr	r0, [pc, #8]	; (ab0 <call_reg_mskd_ref()+0x10>)
     aa8:	f7ff fffe 	bl	a94 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     aac:	bd00      	pop	{pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	10001dc4 	.word	0x10001dc4

00000ab4 <return_bits()>:
     ab4:	2020      	movs	r0, #32
     ab6:	4770      	bx	lr

00000ab8 <call_return_bits()>:
     ab8:	b500      	push	{lr}
     aba:	f7ff fffe 	bl	ab4 <return_bits()>
     abe:	4b05      	ldr	r3, [pc, #20]	; (ad4 <call_return_bits()+0x1c>)
     ac0:	2820      	cmp	r0, #32
     ac2:	d003      	beq.n	acc <call_return_bits()+0x14>
     ac4:	22c0      	movs	r2, #192	; 0xc0
     ac6:	04d2      	lsls	r2, r2, #19
     ac8:	605a      	str	r2, [r3, #4]
     aca:	bd00      	pop	{pc}
     acc:	22a8      	movs	r2, #168	; 0xa8
     ace:	0592      	lsls	r2, r2, #22
     ad0:	605a      	str	r2, [r3, #4]
     ad2:	e7fa      	b.n	aca <call_return_bits()+0x12>
     ad4:	10001d20 	.word	0x10001d20

00000ad8 <return_mskd()>:
     ad8:	2318      	movs	r3, #24
     ada:	6003      	str	r3, [r0, #0]
     adc:	3b10      	subs	r3, #16
     ade:	6043      	str	r3, [r0, #4]
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			; (mov r8, r8)

00000ae4 <call_return_mskd()>:
     ae4:	b500      	push	{lr}
     ae6:	b082      	sub	sp, #8
     ae8:	4668      	mov	r0, sp
     aea:	f7ff fffe 	bl	ad8 <return_mskd()>
     aee:	9a00      	ldr	r2, [sp, #0]
     af0:	9b01      	ldr	r3, [sp, #4]
     af2:	2a18      	cmp	r2, #24
     af4:	d005      	beq.n	b02 <call_return_mskd()+0x1e>
     af6:	2298      	movs	r2, #152	; 0x98
     af8:	4b05      	ldr	r3, [pc, #20]	; (b10 <call_return_mskd()+0x2c>)
     afa:	0592      	lsls	r2, r2, #22
     afc:	605a      	str	r2, [r3, #4]
     afe:	b002      	add	sp, #8
     b00:	bd00      	pop	{pc}
     b02:	2b08      	cmp	r3, #8
     b04:	d1f7      	bne.n	af6 <call_return_mskd()+0x12>
     b06:	2288      	movs	r2, #136	; 0x88
     b08:	4b01      	ldr	r3, [pc, #4]	; (b10 <call_return_mskd()+0x2c>)
     b0a:	0592      	lsls	r2, r2, #22
     b0c:	605a      	str	r2, [r3, #4]
     b0e:	e7f6      	b.n	afe <call_return_mskd()+0x1a>
     b10:	10001d20 	.word	0x10001d20

00000b14 <return_reg()>:
     b14:	2240      	movs	r2, #64	; 0x40
     b16:	4b02      	ldr	r3, [pc, #8]	; (b20 <return_reg()+0xc>)
     b18:	4802      	ldr	r0, [pc, #8]	; (b24 <return_reg()+0x10>)
     b1a:	605a      	str	r2, [r3, #4]
     b1c:	4770      	bx	lr
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	10001dc0 	.word	0x10001dc0
     b24:	10001dc4 	.word	0x10001dc4

00000b28 <call_return_reg()>:
     b28:	b500      	push	{lr}
     b2a:	f7ff fffe 	bl	b14 <return_reg()>
     b2e:	6803      	ldr	r3, [r0, #0]
     b30:	065b      	lsls	r3, r3, #25
     b32:	d504      	bpl.n	b3e <call_return_reg()+0x16>
     b34:	22f0      	movs	r2, #240	; 0xf0
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <call_return_reg()+0x20>)
     b38:	0552      	lsls	r2, r2, #21
     b3a:	605a      	str	r2, [r3, #4]
     b3c:	bd00      	pop	{pc}
     b3e:	22b8      	movs	r2, #184	; 0xb8
     b40:	4b01      	ldr	r3, [pc, #4]	; (b48 <call_return_reg()+0x20>)
     b42:	0592      	lsls	r2, r2, #22
     b44:	605a      	str	r2, [r3, #4]
     b46:	e7f9      	b.n	b3c <call_return_reg()+0x14>
     b48:	10001d20 	.word	0x10001d20

00000b4c <return_periph()>:
     b4c:	2340      	movs	r3, #64	; 0x40
     b4e:	4801      	ldr	r0, [pc, #4]	; (b54 <return_periph()+0x8>)
     b50:	6043      	str	r3, [r0, #4]
     b52:	4770      	bx	lr
     b54:	10001dc0 	.word	0x10001dc0

00000b58 <call_return_periph()>:
     b58:	b500      	push	{lr}
     b5a:	f7ff fffe 	bl	b4c <return_periph()>
     b5e:	6843      	ldr	r3, [r0, #4]
     b60:	065b      	lsls	r3, r3, #25
     b62:	d504      	bpl.n	b6e <call_return_periph()+0x16>
     b64:	2298      	movs	r2, #152	; 0x98
     b66:	4b04      	ldr	r3, [pc, #16]	; (b78 <call_return_periph()+0x20>)
     b68:	0592      	lsls	r2, r2, #22
     b6a:	605a      	str	r2, [r3, #4]
     b6c:	bd00      	pop	{pc}
     b6e:	22a8      	movs	r2, #168	; 0xa8
     b70:	4b01      	ldr	r3, [pc, #4]	; (b78 <call_return_periph()+0x20>)
     b72:	0592      	lsls	r2, r2, #22
     b74:	605a      	str	r2, [r3, #4]
     b76:	e7f9      	b.n	b6c <call_return_periph()+0x14>
     b78:	10001d20 	.word	0x10001d20

00000b7c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     b7e:	2805      	cmp	r0, #5
     b80:	d007      	beq.n	b92 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x16>
     b82:	2806      	cmp	r0, #6
     b84:	d002      	beq.n	b8c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x10>
     b86:	2255      	movs	r2, #85	; 0x55
     b88:	62da      	str	r2, [r3, #44]	; 0x2c
     b8a:	4770      	bx	lr
     b8c:	2244      	movs	r2, #68	; 0x44
     b8e:	62da      	str	r2, [r3, #44]	; 0x2c
     b90:	e7fb      	b.n	b8a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
     b92:	2233      	movs	r2, #51	; 0x33
     b94:	62da      	str	r2, [r3, #44]	; 0x2c
     b96:	e7f8      	b.n	b8a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
     b98:	10001c00 	.word	0x10001c00

00000b9c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     b9c:	6803      	ldr	r3, [r0, #0]
     b9e:	2b05      	cmp	r3, #5
     ba0:	d009      	beq.n	bb6 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1a>
     ba2:	2b06      	cmp	r3, #6
     ba4:	d003      	beq.n	bae <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x12>
     ba6:	2288      	movs	r2, #136	; 0x88
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     baa:	62da      	str	r2, [r3, #44]	; 0x2c
     bac:	4770      	bx	lr
     bae:	2277      	movs	r2, #119	; 0x77
     bb0:	4b03      	ldr	r3, [pc, #12]	; (bc0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     bb2:	62da      	str	r2, [r3, #44]	; 0x2c
     bb4:	e7fa      	b.n	bac <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
     bb6:	2266      	movs	r2, #102	; 0x66
     bb8:	4b01      	ldr	r3, [pc, #4]	; (bc0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     bba:	62da      	str	r2, [r3, #44]	; 0x2c
     bbc:	e7f6      	b.n	bac <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	10001c00 	.word	0x10001c00

00000bc4 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     bc4:	4a02      	ldr	r2, [pc, #8]	; (bd0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     bc6:	6853      	ldr	r3, [r2, #4]
     bc8:	4383      	bics	r3, r0
     bca:	430b      	orrs	r3, r1
     bcc:	6053      	str	r3, [r2, #4]
     bce:	4770      	bx	lr
     bd0:	10001dc0 	.word	0x10001dc0

00000bd4 <call_range_val(unsigned int)>:
     bd4:	0001      	movs	r1, r0
     bd6:	20f8      	movs	r0, #248	; 0xf8
     bd8:	b500      	push	{lr}
     bda:	0309      	lsls	r1, r1, #12
     bdc:	0240      	lsls	r0, r0, #9
     bde:	f7ff fffe 	bl	bc4 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     be2:	bd00      	pop	{pc}

00000be4 <call_range_val_port()>:
     be4:	b500      	push	{lr}
     be6:	201f      	movs	r0, #31
     be8:	f7ff fffe 	bl	bd4 <call_range_val(unsigned int)>
     bec:	bd00      	pop	{pc}
     bee:	46c0      	nop			; (mov r8, r8)

00000bf0 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     bf0:	4a02      	ldr	r2, [pc, #8]	; (bfc <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     bf2:	6853      	ldr	r3, [r2, #4]
     bf4:	4383      	bics	r3, r0
     bf6:	430b      	orrs	r3, r1
     bf8:	6053      	str	r3, [r2, #4]
     bfa:	4770      	bx	lr
     bfc:	10001dc0 	.word	0x10001dc0

00000c00 <call_range_ref(unsigned int)>:
     c00:	0001      	movs	r1, r0
     c02:	20f8      	movs	r0, #248	; 0xf8
     c04:	b500      	push	{lr}
     c06:	0309      	lsls	r1, r1, #12
     c08:	0240      	lsls	r0, r0, #9
     c0a:	f7ff fffe 	bl	bf0 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     c0e:	bd00      	pop	{pc}

00000c10 <call_range_ref_port()>:
     c10:	b500      	push	{lr}
     c12:	200c      	movs	r0, #12
     c14:	f7ff fffe 	bl	c00 <call_range_ref(unsigned int)>
     c18:	bd00      	pop	{pc}
     c1a:	46c0      	nop			; (mov r8, r8)

00000c1c <check_array_range_pass(unsigned int)>:
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <check_array_range_pass(unsigned int)+0x14>)
     c1e:	2816      	cmp	r0, #22
     c20:	d802      	bhi.n	c28 <check_array_range_pass(unsigned int)+0xc>
     c22:	227f      	movs	r2, #127	; 0x7f
     c24:	62da      	str	r2, [r3, #44]	; 0x2c
     c26:	4770      	bx	lr
     c28:	2283      	movs	r2, #131	; 0x83
     c2a:	62da      	str	r2, [r3, #44]	; 0x2c
     c2c:	e7fb      	b.n	c26 <check_array_range_pass(unsigned int)+0xa>
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	10001c00 	.word	0x10001c00

00000c34 <check_array_range_fail(unsigned int)>:
     c34:	4b04      	ldr	r3, [pc, #16]	; (c48 <check_array_range_fail(unsigned int)+0x14>)
     c36:	2816      	cmp	r0, #22
     c38:	d802      	bhi.n	c40 <check_array_range_fail(unsigned int)+0xc>
     c3a:	2295      	movs	r2, #149	; 0x95
     c3c:	62da      	str	r2, [r3, #44]	; 0x2c
     c3e:	4770      	bx	lr
     c40:	2297      	movs	r2, #151	; 0x97
     c42:	62da      	str	r2, [r3, #44]	; 0x2c
     c44:	e7fb      	b.n	c3e <check_array_range_fail(unsigned int)+0xa>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	10001c00 	.word	0x10001c00

00000c4c <check_bits_range_pass(unsigned int)>:
     c4c:	4b04      	ldr	r3, [pc, #16]	; (c60 <check_bits_range_pass(unsigned int)+0x14>)
     c4e:	280f      	cmp	r0, #15
     c50:	d802      	bhi.n	c58 <check_bits_range_pass(unsigned int)+0xc>
     c52:	229d      	movs	r2, #157	; 0x9d
     c54:	62da      	str	r2, [r3, #44]	; 0x2c
     c56:	4770      	bx	lr
     c58:	22a3      	movs	r2, #163	; 0xa3
     c5a:	62da      	str	r2, [r3, #44]	; 0x2c
     c5c:	e7fb      	b.n	c56 <check_bits_range_pass(unsigned int)+0xa>
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	10001c00 	.word	0x10001c00

00000c64 <check_bits_range_fail(unsigned int)>:
     c64:	4b04      	ldr	r3, [pc, #16]	; (c78 <check_bits_range_fail(unsigned int)+0x14>)
     c66:	280f      	cmp	r0, #15
     c68:	d802      	bhi.n	c70 <check_bits_range_fail(unsigned int)+0xc>
     c6a:	22a7      	movs	r2, #167	; 0xa7
     c6c:	62da      	str	r2, [r3, #44]	; 0x2c
     c6e:	4770      	bx	lr
     c70:	22ad      	movs	r2, #173	; 0xad
     c72:	62da      	str	r2, [r3, #44]	; 0x2c
     c74:	e7fb      	b.n	c6e <check_bits_range_fail(unsigned int)+0xa>
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	10001c00 	.word	0x10001c00

00000c7c <check_mskd_range_pass(unsigned int)>:
     c7c:	4b04      	ldr	r3, [pc, #16]	; (c90 <check_mskd_range_pass(unsigned int)+0x14>)
     c7e:	281f      	cmp	r0, #31
     c80:	d802      	bhi.n	c88 <check_mskd_range_pass(unsigned int)+0xc>
     c82:	22b3      	movs	r2, #179	; 0xb3
     c84:	62da      	str	r2, [r3, #44]	; 0x2c
     c86:	4770      	bx	lr
     c88:	22b5      	movs	r2, #181	; 0xb5
     c8a:	62da      	str	r2, [r3, #44]	; 0x2c
     c8c:	e7fb      	b.n	c86 <check_mskd_range_pass(unsigned int)+0xa>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	10001c00 	.word	0x10001c00

00000c94 <check_mskd_range_fail(unsigned int)>:
     c94:	4b04      	ldr	r3, [pc, #16]	; (ca8 <check_mskd_range_fail(unsigned int)+0x14>)
     c96:	281f      	cmp	r0, #31
     c98:	d802      	bhi.n	ca0 <check_mskd_range_fail(unsigned int)+0xc>
     c9a:	22bf      	movs	r2, #191	; 0xbf
     c9c:	62da      	str	r2, [r3, #44]	; 0x2c
     c9e:	4770      	bx	lr
     ca0:	22c1      	movs	r2, #193	; 0xc1
     ca2:	62da      	str	r2, [r3, #44]	; 0x2c
     ca4:	e7fb      	b.n	c9e <check_mskd_range_fail(unsigned int)+0xa>
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	10001c00 	.word	0x10001c00

00000cac <bits_extract_ne()>:
     cac:	2220      	movs	r2, #32
     cae:	4b05      	ldr	r3, [pc, #20]	; (cc4 <bits_extract_ne()+0x18>)
     cb0:	605a      	str	r2, [r3, #4]
     cb2:	685a      	ldr	r2, [r3, #4]
     cb4:	2a20      	cmp	r2, #32
     cb6:	d002      	beq.n	cbe <bits_extract_ne()+0x12>
     cb8:	2202      	movs	r2, #2
     cba:	605a      	str	r2, [r3, #4]
     cbc:	4770      	bx	lr
     cbe:	2204      	movs	r2, #4
     cc0:	605a      	str	r2, [r3, #4]
     cc2:	e7fb      	b.n	cbc <bits_extract_ne()+0x10>
     cc4:	10001dc0 	.word	0x10001dc0

00000cc8 <mskd_extract_geq()>:
     cc8:	22b0      	movs	r2, #176	; 0xb0
     cca:	4b07      	ldr	r3, [pc, #28]	; (ce8 <mskd_extract_geq()+0x20>)
     ccc:	0552      	lsls	r2, r2, #21
     cce:	605a      	str	r2, [r3, #4]
     cd0:	685a      	ldr	r2, [r3, #4]
     cd2:	4b06      	ldr	r3, [pc, #24]	; (cec <mskd_extract_geq()+0x24>)
     cd4:	429a      	cmp	r2, r3
     cd6:	d803      	bhi.n	ce0 <mskd_extract_geq()+0x18>
     cd8:	2240      	movs	r2, #64	; 0x40
     cda:	4b05      	ldr	r3, [pc, #20]	; (cf0 <mskd_extract_geq()+0x28>)
     cdc:	605a      	str	r2, [r3, #4]
     cde:	4770      	bx	lr
     ce0:	2220      	movs	r2, #32
     ce2:	4b03      	ldr	r3, [pc, #12]	; (cf0 <mskd_extract_geq()+0x28>)
     ce4:	605a      	str	r2, [r3, #4]
     ce6:	e7fa      	b.n	cde <mskd_extract_geq()+0x16>
     ce8:	10001d20 	.word	0x10001d20
     cec:	15ffffff 	.word	0x15ffffff
     cf0:	10001dc0 	.word	0x10001dc0

00000cf4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     cf4:	22b8      	movs	r2, #184	; 0xb8
     cf6:	4b04      	ldr	r3, [pc, #16]	; (d08 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     cf8:	0592      	lsls	r2, r2, #22
     cfa:	605a      	str	r2, [r3, #4]
     cfc:	685b      	ldr	r3, [r3, #4]
     cfe:	4018      	ands	r0, r3
     d00:	40c8      	lsrs	r0, r1
     d02:	4b02      	ldr	r3, [pc, #8]	; (d0c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     d04:	62d8      	str	r0, [r3, #44]	; 0x2c
     d06:	4770      	bx	lr
     d08:	10001d20 	.word	0x10001d20
     d0c:	10001c00 	.word	0x10001c00

00000d10 <call_shifted_const_val()>:
     d10:	20f8      	movs	r0, #248	; 0xf8
     d12:	b500      	push	{lr}
     d14:	0580      	lsls	r0, r0, #22
     d16:	2119      	movs	r1, #25
     d18:	f7ff fffe 	bl	cf4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     d1c:	bd00      	pop	{pc}
     d1e:	46c0      	nop			; (mov r8, r8)

00000d20 <call_shifted_var_val()>:
     d20:	20f8      	movs	r0, #248	; 0xf8
     d22:	b500      	push	{lr}
     d24:	0580      	lsls	r0, r0, #22
     d26:	2119      	movs	r1, #25
     d28:	f7ff fffe 	bl	cf4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     d2c:	bd00      	pop	{pc}
     d2e:	46c0      	nop			; (mov r8, r8)

00000d30 <call_shifted_global_val()>:
     d30:	20f8      	movs	r0, #248	; 0xf8
     d32:	b500      	push	{lr}
     d34:	0580      	lsls	r0, r0, #22
     d36:	2119      	movs	r1, #25
     d38:	f7ff fffe 	bl	cf4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     d3c:	bd00      	pop	{pc}
     d3e:	46c0      	nop			; (mov r8, r8)

00000d40 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     d40:	22b8      	movs	r2, #184	; 0xb8
     d42:	4b05      	ldr	r3, [pc, #20]	; (d58 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     d44:	0592      	lsls	r2, r2, #22
     d46:	605a      	str	r2, [r3, #4]
     d48:	6802      	ldr	r2, [r0, #0]
     d4a:	685b      	ldr	r3, [r3, #4]
     d4c:	4013      	ands	r3, r2
     d4e:	6842      	ldr	r2, [r0, #4]
     d50:	40d3      	lsrs	r3, r2
     d52:	4a02      	ldr	r2, [pc, #8]	; (d5c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     d54:	62d3      	str	r3, [r2, #44]	; 0x2c
     d56:	4770      	bx	lr
     d58:	10001d20 	.word	0x10001d20
     d5c:	10001c00 	.word	0x10001c00

00000d60 <call_shifted_const_ref()>:
     d60:	b500      	push	{lr}
     d62:	4b05      	ldr	r3, [pc, #20]	; (d78 <call_shifted_const_ref()+0x18>)
     d64:	b082      	sub	sp, #8
     d66:	4668      	mov	r0, sp
     d68:	689a      	ldr	r2, [r3, #8]
     d6a:	68db      	ldr	r3, [r3, #12]
     d6c:	9200      	str	r2, [sp, #0]
     d6e:	9301      	str	r3, [sp, #4]
     d70:	f7ff fffe 	bl	d40 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d74:	b002      	add	sp, #8
     d76:	bd00      	pop	{pc}
     d78:	00000000 	.word	0x00000000

00000d7c <call_shifted_var_ref()>:
     d7c:	b500      	push	{lr}
     d7e:	4b05      	ldr	r3, [pc, #20]	; (d94 <call_shifted_var_ref()+0x18>)
     d80:	b082      	sub	sp, #8
     d82:	4668      	mov	r0, sp
     d84:	691a      	ldr	r2, [r3, #16]
     d86:	695b      	ldr	r3, [r3, #20]
     d88:	9200      	str	r2, [sp, #0]
     d8a:	9301      	str	r3, [sp, #4]
     d8c:	f7ff fffe 	bl	d40 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d90:	b002      	add	sp, #8
     d92:	bd00      	pop	{pc}
     d94:	00000000 	.word	0x00000000

00000d98 <call_shifted_global_ref()>:
     d98:	23f8      	movs	r3, #248	; 0xf8
     d9a:	b500      	push	{lr}
     d9c:	059b      	lsls	r3, r3, #22
     d9e:	b082      	sub	sp, #8
     da0:	9300      	str	r3, [sp, #0]
     da2:	2319      	movs	r3, #25
     da4:	4668      	mov	r0, sp
     da6:	9301      	str	r3, [sp, #4]
     da8:	f7ff fffe 	bl	d40 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     dac:	b002      	add	sp, #8
     dae:	bd00      	pop	{pc}

00000db0 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
     db0:	0643      	lsls	r3, r0, #25
     db2:	d503      	bpl.n	dbc <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0xc>
     db4:	2202      	movs	r2, #2
     db6:	4b03      	ldr	r3, [pc, #12]	; (dc4 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x14>)
     db8:	605a      	str	r2, [r3, #4]
     dba:	4770      	bx	lr
     dbc:	2204      	movs	r2, #4
     dbe:	4b01      	ldr	r3, [pc, #4]	; (dc4 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x14>)
     dc0:	605a      	str	r2, [r3, #4]
     dc2:	e7fa      	b.n	dba <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0xa>
     dc4:	10001dc0 	.word	0x10001dc0

00000dc8 <call_copy_bits_val()>:
     dc8:	2240      	movs	r2, #64	; 0x40
     dca:	b500      	push	{lr}
     dcc:	4b02      	ldr	r3, [pc, #8]	; (dd8 <call_copy_bits_val()+0x10>)
     dce:	605a      	str	r2, [r3, #4]
     dd0:	6858      	ldr	r0, [r3, #4]
     dd2:	f7ff fffe 	bl	db0 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
     dd6:	bd00      	pop	{pc}
     dd8:	10001dc0 	.word	0x10001dc0

00000ddc <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
     ddc:	6803      	ldr	r3, [r0, #0]
     dde:	065b      	lsls	r3, r3, #25
     de0:	d503      	bpl.n	dea <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0xe>
     de2:	2202      	movs	r2, #2
     de4:	4b03      	ldr	r3, [pc, #12]	; (df4 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x18>)
     de6:	605a      	str	r2, [r3, #4]
     de8:	4770      	bx	lr
     dea:	2204      	movs	r2, #4
     dec:	4b01      	ldr	r3, [pc, #4]	; (df4 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x18>)
     dee:	605a      	str	r2, [r3, #4]
     df0:	e7fa      	b.n	de8 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0xc>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	10001dc0 	.word	0x10001dc0

00000df8 <call_copy_bits_ref()>:
     df8:	2240      	movs	r2, #64	; 0x40
     dfa:	b500      	push	{lr}
     dfc:	4b04      	ldr	r3, [pc, #16]	; (e10 <call_copy_bits_ref()+0x18>)
     dfe:	b081      	sub	sp, #4
     e00:	605a      	str	r2, [r3, #4]
     e02:	685b      	ldr	r3, [r3, #4]
     e04:	4668      	mov	r0, sp
     e06:	9300      	str	r3, [sp, #0]
     e08:	f7ff fffe 	bl	ddc <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
     e0c:	b001      	add	sp, #4
     e0e:	bd00      	pop	{pc}
     e10:	10001dc0 	.word	0x10001dc0

00000e14 <run>:
     e14:	b530      	push	{r4, r5, lr}
     e16:	4cfb      	ldr	r4, [pc, #1004]	; (1204 <run+0x3f0>)
     e18:	7823      	ldrb	r3, [r4, #0]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d100      	bne.n	e20 <run+0xc>
     e1e:	e31e      	b.n	145e <run+0x64a>
     e20:	68a1      	ldr	r1, [r4, #8]
     e22:	7b23      	ldrb	r3, [r4, #12]
     e24:	2b00      	cmp	r3, #0
     e26:	d103      	bne.n	e30 <run+0x1c>
     e28:	4bf7      	ldr	r3, [pc, #988]	; (1208 <run+0x3f4>)
     e2a:	6163      	str	r3, [r4, #20]
     e2c:	2301      	movs	r3, #1
     e2e:	7323      	strb	r3, [r4, #12]
     e30:	7e23      	ldrb	r3, [r4, #24]
     e32:	2b00      	cmp	r3, #0
     e34:	d103      	bne.n	e3e <run+0x2a>
     e36:	4bf5      	ldr	r3, [pc, #980]	; (120c <run+0x3f8>)
     e38:	6223      	str	r3, [r4, #32]
     e3a:	2301      	movs	r3, #1
     e3c:	7623      	strb	r3, [r4, #24]
     e3e:	2324      	movs	r3, #36	; 0x24
     e40:	5ce2      	ldrb	r2, [r4, r3]
     e42:	2a00      	cmp	r2, #0
     e44:	d103      	bne.n	e4e <run+0x3a>
     e46:	4af2      	ldr	r2, [pc, #968]	; (1210 <run+0x3fc>)
     e48:	62e2      	str	r2, [r4, #44]	; 0x2c
     e4a:	2201      	movs	r2, #1
     e4c:	54e2      	strb	r2, [r4, r3]
     e4e:	2200      	movs	r2, #0
     e50:	48f0      	ldr	r0, [pc, #960]	; (1214 <run+0x400>)
     e52:	f7ff fffe 	bl	0 <do_test>
     e56:	2201      	movs	r2, #1
     e58:	68a1      	ldr	r1, [r4, #8]
     e5a:	48ef      	ldr	r0, [pc, #956]	; (1218 <run+0x404>)
     e5c:	f7ff fffe 	bl	0 <do_test>
     e60:	2202      	movs	r2, #2
     e62:	68a1      	ldr	r1, [r4, #8]
     e64:	48ed      	ldr	r0, [pc, #948]	; (121c <run+0x408>)
     e66:	f7ff fffe 	bl	0 <do_test>
     e6a:	2203      	movs	r2, #3
     e6c:	68a1      	ldr	r1, [r4, #8]
     e6e:	48ec      	ldr	r0, [pc, #944]	; (1220 <run+0x40c>)
     e70:	f7ff fffe 	bl	0 <do_test>
     e74:	2204      	movs	r2, #4
     e76:	68a1      	ldr	r1, [r4, #8]
     e78:	48ea      	ldr	r0, [pc, #936]	; (1224 <run+0x410>)
     e7a:	f7ff fffe 	bl	0 <do_test>
     e7e:	2205      	movs	r2, #5
     e80:	68a1      	ldr	r1, [r4, #8]
     e82:	48e9      	ldr	r0, [pc, #932]	; (1228 <run+0x414>)
     e84:	f7ff fffe 	bl	0 <do_test>
     e88:	2206      	movs	r2, #6
     e8a:	68a1      	ldr	r1, [r4, #8]
     e8c:	48e7      	ldr	r0, [pc, #924]	; (122c <run+0x418>)
     e8e:	f7ff fffe 	bl	0 <do_test>
     e92:	2207      	movs	r2, #7
     e94:	68a1      	ldr	r1, [r4, #8]
     e96:	48e6      	ldr	r0, [pc, #920]	; (1230 <run+0x41c>)
     e98:	f7ff fffe 	bl	0 <do_test>
     e9c:	2208      	movs	r2, #8
     e9e:	68a1      	ldr	r1, [r4, #8]
     ea0:	48e4      	ldr	r0, [pc, #912]	; (1234 <run+0x420>)
     ea2:	f7ff fffe 	bl	0 <do_test>
     ea6:	2209      	movs	r2, #9
     ea8:	68a1      	ldr	r1, [r4, #8]
     eaa:	48e3      	ldr	r0, [pc, #908]	; (1238 <run+0x424>)
     eac:	f7ff fffe 	bl	0 <do_test>
     eb0:	220a      	movs	r2, #10
     eb2:	68a1      	ldr	r1, [r4, #8]
     eb4:	48e1      	ldr	r0, [pc, #900]	; (123c <run+0x428>)
     eb6:	f7ff fffe 	bl	0 <do_test>
     eba:	220b      	movs	r2, #11
     ebc:	68a1      	ldr	r1, [r4, #8]
     ebe:	48e0      	ldr	r0, [pc, #896]	; (1240 <run+0x42c>)
     ec0:	f7ff fffe 	bl	0 <do_test>
     ec4:	220c      	movs	r2, #12
     ec6:	68a1      	ldr	r1, [r4, #8]
     ec8:	48de      	ldr	r0, [pc, #888]	; (1244 <run+0x430>)
     eca:	f7ff fffe 	bl	0 <do_test>
     ece:	220d      	movs	r2, #13
     ed0:	68a1      	ldr	r1, [r4, #8]
     ed2:	48dd      	ldr	r0, [pc, #884]	; (1248 <run+0x434>)
     ed4:	f7ff fffe 	bl	0 <do_test>
     ed8:	220e      	movs	r2, #14
     eda:	68a1      	ldr	r1, [r4, #8]
     edc:	48db      	ldr	r0, [pc, #876]	; (124c <run+0x438>)
     ede:	f7ff fffe 	bl	0 <do_test>
     ee2:	220f      	movs	r2, #15
     ee4:	68a1      	ldr	r1, [r4, #8]
     ee6:	48da      	ldr	r0, [pc, #872]	; (1250 <run+0x43c>)
     ee8:	f7ff fffe 	bl	0 <do_test>
     eec:	2210      	movs	r2, #16
     eee:	68a1      	ldr	r1, [r4, #8]
     ef0:	48d8      	ldr	r0, [pc, #864]	; (1254 <run+0x440>)
     ef2:	f7ff fffe 	bl	0 <do_test>
     ef6:	2211      	movs	r2, #17
     ef8:	68a1      	ldr	r1, [r4, #8]
     efa:	48d7      	ldr	r0, [pc, #860]	; (1258 <run+0x444>)
     efc:	f7ff fffe 	bl	0 <do_test>
     f00:	2212      	movs	r2, #18
     f02:	68a1      	ldr	r1, [r4, #8]
     f04:	48d5      	ldr	r0, [pc, #852]	; (125c <run+0x448>)
     f06:	f7ff fffe 	bl	0 <do_test>
     f0a:	2213      	movs	r2, #19
     f0c:	68a1      	ldr	r1, [r4, #8]
     f0e:	48d4      	ldr	r0, [pc, #848]	; (1260 <run+0x44c>)
     f10:	f7ff fffe 	bl	0 <do_test>
     f14:	2214      	movs	r2, #20
     f16:	68a1      	ldr	r1, [r4, #8]
     f18:	48d2      	ldr	r0, [pc, #840]	; (1264 <run+0x450>)
     f1a:	f7ff fffe 	bl	0 <do_test>
     f1e:	2215      	movs	r2, #21
     f20:	68a1      	ldr	r1, [r4, #8]
     f22:	48d1      	ldr	r0, [pc, #836]	; (1268 <run+0x454>)
     f24:	f7ff fffe 	bl	0 <do_test>
     f28:	2216      	movs	r2, #22
     f2a:	68a1      	ldr	r1, [r4, #8]
     f2c:	48cf      	ldr	r0, [pc, #828]	; (126c <run+0x458>)
     f2e:	f7ff fffe 	bl	0 <do_test>
     f32:	2217      	movs	r2, #23
     f34:	68a1      	ldr	r1, [r4, #8]
     f36:	48ce      	ldr	r0, [pc, #824]	; (1270 <run+0x45c>)
     f38:	f7ff fffe 	bl	0 <do_test>
     f3c:	2218      	movs	r2, #24
     f3e:	68a1      	ldr	r1, [r4, #8]
     f40:	48cc      	ldr	r0, [pc, #816]	; (1274 <run+0x460>)
     f42:	f7ff fffe 	bl	0 <do_test>
     f46:	2219      	movs	r2, #25
     f48:	68a1      	ldr	r1, [r4, #8]
     f4a:	48cb      	ldr	r0, [pc, #812]	; (1278 <run+0x464>)
     f4c:	f7ff fffe 	bl	0 <do_test>
     f50:	221a      	movs	r2, #26
     f52:	68a1      	ldr	r1, [r4, #8]
     f54:	48c9      	ldr	r0, [pc, #804]	; (127c <run+0x468>)
     f56:	f7ff fffe 	bl	0 <do_test>
     f5a:	221b      	movs	r2, #27
     f5c:	68a1      	ldr	r1, [r4, #8]
     f5e:	48c8      	ldr	r0, [pc, #800]	; (1280 <run+0x46c>)
     f60:	f7ff fffe 	bl	0 <do_test>
     f64:	221c      	movs	r2, #28
     f66:	68a1      	ldr	r1, [r4, #8]
     f68:	48c6      	ldr	r0, [pc, #792]	; (1284 <run+0x470>)
     f6a:	f7ff fffe 	bl	0 <do_test>
     f6e:	221d      	movs	r2, #29
     f70:	68a1      	ldr	r1, [r4, #8]
     f72:	48c5      	ldr	r0, [pc, #788]	; (1288 <run+0x474>)
     f74:	f7ff fffe 	bl	0 <do_test>
     f78:	221e      	movs	r2, #30
     f7a:	68a1      	ldr	r1, [r4, #8]
     f7c:	48c3      	ldr	r0, [pc, #780]	; (128c <run+0x478>)
     f7e:	f7ff fffe 	bl	0 <do_test>
     f82:	221f      	movs	r2, #31
     f84:	68a1      	ldr	r1, [r4, #8]
     f86:	48c2      	ldr	r0, [pc, #776]	; (1290 <run+0x47c>)
     f88:	f7ff fffe 	bl	0 <do_test>
     f8c:	2220      	movs	r2, #32
     f8e:	68a1      	ldr	r1, [r4, #8]
     f90:	48c0      	ldr	r0, [pc, #768]	; (1294 <run+0x480>)
     f92:	f7ff fffe 	bl	0 <do_test>
     f96:	2221      	movs	r2, #33	; 0x21
     f98:	68a1      	ldr	r1, [r4, #8]
     f9a:	48bf      	ldr	r0, [pc, #764]	; (1298 <run+0x484>)
     f9c:	f7ff fffe 	bl	0 <do_test>
     fa0:	2222      	movs	r2, #34	; 0x22
     fa2:	68a1      	ldr	r1, [r4, #8]
     fa4:	48bd      	ldr	r0, [pc, #756]	; (129c <run+0x488>)
     fa6:	f7ff fffe 	bl	0 <do_test>
     faa:	2223      	movs	r2, #35	; 0x23
     fac:	68a1      	ldr	r1, [r4, #8]
     fae:	48bc      	ldr	r0, [pc, #752]	; (12a0 <run+0x48c>)
     fb0:	f7ff fffe 	bl	0 <do_test>
     fb4:	2224      	movs	r2, #36	; 0x24
     fb6:	68a1      	ldr	r1, [r4, #8]
     fb8:	48ba      	ldr	r0, [pc, #744]	; (12a4 <run+0x490>)
     fba:	f7ff fffe 	bl	0 <do_test>
     fbe:	2225      	movs	r2, #37	; 0x25
     fc0:	6961      	ldr	r1, [r4, #20]
     fc2:	48b9      	ldr	r0, [pc, #740]	; (12a8 <run+0x494>)
     fc4:	f7ff fffe 	bl	0 <do_test>
     fc8:	2226      	movs	r2, #38	; 0x26
     fca:	6961      	ldr	r1, [r4, #20]
     fcc:	48b7      	ldr	r0, [pc, #732]	; (12ac <run+0x498>)
     fce:	f7ff fffe 	bl	0 <do_test>
     fd2:	2227      	movs	r2, #39	; 0x27
     fd4:	6961      	ldr	r1, [r4, #20]
     fd6:	48b6      	ldr	r0, [pc, #728]	; (12b0 <run+0x49c>)
     fd8:	f7ff fffe 	bl	0 <do_test>
     fdc:	2228      	movs	r2, #40	; 0x28
     fde:	68a1      	ldr	r1, [r4, #8]
     fe0:	48b4      	ldr	r0, [pc, #720]	; (12b4 <run+0x4a0>)
     fe2:	f7ff fffe 	bl	0 <do_test>
     fe6:	2229      	movs	r2, #41	; 0x29
     fe8:	68a1      	ldr	r1, [r4, #8]
     fea:	48b3      	ldr	r0, [pc, #716]	; (12b8 <run+0x4a4>)
     fec:	f7ff fffe 	bl	0 <do_test>
     ff0:	222a      	movs	r2, #42	; 0x2a
     ff2:	68a1      	ldr	r1, [r4, #8]
     ff4:	48b1      	ldr	r0, [pc, #708]	; (12bc <run+0x4a8>)
     ff6:	f7ff fffe 	bl	0 <do_test>
     ffa:	222b      	movs	r2, #43	; 0x2b
     ffc:	68a1      	ldr	r1, [r4, #8]
     ffe:	48b0      	ldr	r0, [pc, #704]	; (12c0 <run+0x4ac>)
    1000:	f7ff fffe 	bl	0 <do_test>
    1004:	222c      	movs	r2, #44	; 0x2c
    1006:	68a1      	ldr	r1, [r4, #8]
    1008:	48ae      	ldr	r0, [pc, #696]	; (12c4 <run+0x4b0>)
    100a:	f7ff fffe 	bl	0 <do_test>
    100e:	222d      	movs	r2, #45	; 0x2d
    1010:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1012:	48ad      	ldr	r0, [pc, #692]	; (12c8 <run+0x4b4>)
    1014:	f7ff fffe 	bl	0 <do_test>
    1018:	222e      	movs	r2, #46	; 0x2e
    101a:	68a1      	ldr	r1, [r4, #8]
    101c:	48ab      	ldr	r0, [pc, #684]	; (12cc <run+0x4b8>)
    101e:	f7ff fffe 	bl	0 <do_test>
    1022:	222f      	movs	r2, #47	; 0x2f
    1024:	68a1      	ldr	r1, [r4, #8]
    1026:	48aa      	ldr	r0, [pc, #680]	; (12d0 <run+0x4bc>)
    1028:	f7ff fffe 	bl	0 <do_test>
    102c:	2230      	movs	r2, #48	; 0x30
    102e:	68a1      	ldr	r1, [r4, #8]
    1030:	48a8      	ldr	r0, [pc, #672]	; (12d4 <run+0x4c0>)
    1032:	f7ff fffe 	bl	0 <do_test>
    1036:	2231      	movs	r2, #49	; 0x31
    1038:	68a1      	ldr	r1, [r4, #8]
    103a:	48a7      	ldr	r0, [pc, #668]	; (12d8 <run+0x4c4>)
    103c:	f7ff fffe 	bl	0 <do_test>
    1040:	2232      	movs	r2, #50	; 0x32
    1042:	68a1      	ldr	r1, [r4, #8]
    1044:	48a5      	ldr	r0, [pc, #660]	; (12dc <run+0x4c8>)
    1046:	f7ff fffe 	bl	0 <do_test>
    104a:	2233      	movs	r2, #51	; 0x33
    104c:	68a1      	ldr	r1, [r4, #8]
    104e:	48a4      	ldr	r0, [pc, #656]	; (12e0 <run+0x4cc>)
    1050:	f7ff fffe 	bl	0 <do_test>
    1054:	2234      	movs	r2, #52	; 0x34
    1056:	68a1      	ldr	r1, [r4, #8]
    1058:	48a2      	ldr	r0, [pc, #648]	; (12e4 <run+0x4d0>)
    105a:	f7ff fffe 	bl	0 <do_test>
    105e:	2235      	movs	r2, #53	; 0x35
    1060:	68a1      	ldr	r1, [r4, #8]
    1062:	48a1      	ldr	r0, [pc, #644]	; (12e8 <run+0x4d4>)
    1064:	f7ff fffe 	bl	0 <do_test>
    1068:	2236      	movs	r2, #54	; 0x36
    106a:	68a1      	ldr	r1, [r4, #8]
    106c:	489f      	ldr	r0, [pc, #636]	; (12ec <run+0x4d8>)
    106e:	f7ff fffe 	bl	0 <do_test>
    1072:	2237      	movs	r2, #55	; 0x37
    1074:	68a1      	ldr	r1, [r4, #8]
    1076:	489e      	ldr	r0, [pc, #632]	; (12f0 <run+0x4dc>)
    1078:	f7ff fffe 	bl	0 <do_test>
    107c:	2238      	movs	r2, #56	; 0x38
    107e:	68a1      	ldr	r1, [r4, #8]
    1080:	489c      	ldr	r0, [pc, #624]	; (12f4 <run+0x4e0>)
    1082:	f7ff fffe 	bl	0 <do_test>
    1086:	2239      	movs	r2, #57	; 0x39
    1088:	68a1      	ldr	r1, [r4, #8]
    108a:	489b      	ldr	r0, [pc, #620]	; (12f8 <run+0x4e4>)
    108c:	f7ff fffe 	bl	0 <do_test>
    1090:	223a      	movs	r2, #58	; 0x3a
    1092:	68a1      	ldr	r1, [r4, #8]
    1094:	4899      	ldr	r0, [pc, #612]	; (12fc <run+0x4e8>)
    1096:	f7ff fffe 	bl	0 <do_test>
    109a:	223b      	movs	r2, #59	; 0x3b
    109c:	68a1      	ldr	r1, [r4, #8]
    109e:	4898      	ldr	r0, [pc, #608]	; (1300 <run+0x4ec>)
    10a0:	f7ff fffe 	bl	0 <do_test>
    10a4:	223c      	movs	r2, #60	; 0x3c
    10a6:	68a1      	ldr	r1, [r4, #8]
    10a8:	4896      	ldr	r0, [pc, #600]	; (1304 <run+0x4f0>)
    10aa:	f7ff fffe 	bl	0 <do_test>
    10ae:	223d      	movs	r2, #61	; 0x3d
    10b0:	68a1      	ldr	r1, [r4, #8]
    10b2:	4895      	ldr	r0, [pc, #596]	; (1308 <run+0x4f4>)
    10b4:	f7ff fffe 	bl	0 <do_test>
    10b8:	223e      	movs	r2, #62	; 0x3e
    10ba:	68a1      	ldr	r1, [r4, #8]
    10bc:	4893      	ldr	r0, [pc, #588]	; (130c <run+0x4f8>)
    10be:	f7ff fffe 	bl	0 <do_test>
    10c2:	223f      	movs	r2, #63	; 0x3f
    10c4:	68a1      	ldr	r1, [r4, #8]
    10c6:	4892      	ldr	r0, [pc, #584]	; (1310 <run+0x4fc>)
    10c8:	f7ff fffe 	bl	0 <do_test>
    10cc:	2240      	movs	r2, #64	; 0x40
    10ce:	6961      	ldr	r1, [r4, #20]
    10d0:	4890      	ldr	r0, [pc, #576]	; (1314 <run+0x500>)
    10d2:	f7ff fffe 	bl	0 <do_test>
    10d6:	2241      	movs	r2, #65	; 0x41
    10d8:	6961      	ldr	r1, [r4, #20]
    10da:	488f      	ldr	r0, [pc, #572]	; (1318 <run+0x504>)
    10dc:	f7ff fffe 	bl	0 <do_test>
    10e0:	2242      	movs	r2, #66	; 0x42
    10e2:	6961      	ldr	r1, [r4, #20]
    10e4:	488d      	ldr	r0, [pc, #564]	; (131c <run+0x508>)
    10e6:	f7ff fffe 	bl	0 <do_test>
    10ea:	2243      	movs	r2, #67	; 0x43
    10ec:	68a1      	ldr	r1, [r4, #8]
    10ee:	488c      	ldr	r0, [pc, #560]	; (1320 <run+0x50c>)
    10f0:	f7ff fffe 	bl	0 <do_test>
    10f4:	2244      	movs	r2, #68	; 0x44
    10f6:	6a21      	ldr	r1, [r4, #32]
    10f8:	488a      	ldr	r0, [pc, #552]	; (1324 <run+0x510>)
    10fa:	f7ff fffe 	bl	0 <do_test>
    10fe:	2245      	movs	r2, #69	; 0x45
    1100:	6a21      	ldr	r1, [r4, #32]
    1102:	4889      	ldr	r0, [pc, #548]	; (1328 <run+0x514>)
    1104:	f7ff fffe 	bl	0 <do_test>
    1108:	2246      	movs	r2, #70	; 0x46
    110a:	68a1      	ldr	r1, [r4, #8]
    110c:	4887      	ldr	r0, [pc, #540]	; (132c <run+0x518>)
    110e:	f7ff fffe 	bl	0 <do_test>
    1112:	2247      	movs	r2, #71	; 0x47
    1114:	68a1      	ldr	r1, [r4, #8]
    1116:	4886      	ldr	r0, [pc, #536]	; (1330 <run+0x51c>)
    1118:	f7ff fffe 	bl	0 <do_test>
    111c:	2248      	movs	r2, #72	; 0x48
    111e:	6a21      	ldr	r1, [r4, #32]
    1120:	4884      	ldr	r0, [pc, #528]	; (1334 <run+0x520>)
    1122:	f7ff fffe 	bl	0 <do_test>
    1126:	2249      	movs	r2, #73	; 0x49
    1128:	6a21      	ldr	r1, [r4, #32]
    112a:	4883      	ldr	r0, [pc, #524]	; (1338 <run+0x524>)
    112c:	f7ff fffe 	bl	0 <do_test>
    1130:	224a      	movs	r2, #74	; 0x4a
    1132:	68a1      	ldr	r1, [r4, #8]
    1134:	4881      	ldr	r0, [pc, #516]	; (133c <run+0x528>)
    1136:	f7ff fffe 	bl	0 <do_test>
    113a:	224b      	movs	r2, #75	; 0x4b
    113c:	68a1      	ldr	r1, [r4, #8]
    113e:	4880      	ldr	r0, [pc, #512]	; (1340 <run+0x52c>)
    1140:	f7ff fffe 	bl	0 <do_test>
    1144:	224c      	movs	r2, #76	; 0x4c
    1146:	68a1      	ldr	r1, [r4, #8]
    1148:	487e      	ldr	r0, [pc, #504]	; (1344 <run+0x530>)
    114a:	f7ff fffe 	bl	0 <do_test>
    114e:	224d      	movs	r2, #77	; 0x4d
    1150:	68a1      	ldr	r1, [r4, #8]
    1152:	487d      	ldr	r0, [pc, #500]	; (1348 <run+0x534>)
    1154:	f7ff fffe 	bl	0 <do_test>
    1158:	224e      	movs	r2, #78	; 0x4e
    115a:	68a1      	ldr	r1, [r4, #8]
    115c:	487b      	ldr	r0, [pc, #492]	; (134c <run+0x538>)
    115e:	f7ff fffe 	bl	0 <do_test>
    1162:	224f      	movs	r2, #79	; 0x4f
    1164:	68a1      	ldr	r1, [r4, #8]
    1166:	487a      	ldr	r0, [pc, #488]	; (1350 <run+0x53c>)
    1168:	f7ff fffe 	bl	0 <do_test>
    116c:	4d79      	ldr	r5, [pc, #484]	; (1354 <run+0x540>)
    116e:	2250      	movs	r2, #80	; 0x50
    1170:	0028      	movs	r0, r5
    1172:	68a1      	ldr	r1, [r4, #8]
    1174:	f7ff fffe 	bl	0 <do_test>
    1178:	0028      	movs	r0, r5
    117a:	2251      	movs	r2, #81	; 0x51
    117c:	68a1      	ldr	r1, [r4, #8]
    117e:	f7ff fffe 	bl	0 <do_test>
    1182:	2252      	movs	r2, #82	; 0x52
    1184:	68a1      	ldr	r1, [r4, #8]
    1186:	4874      	ldr	r0, [pc, #464]	; (1358 <run+0x544>)
    1188:	f7ff fffe 	bl	0 <do_test>
    118c:	2253      	movs	r2, #83	; 0x53
    118e:	68a1      	ldr	r1, [r4, #8]
    1190:	4872      	ldr	r0, [pc, #456]	; (135c <run+0x548>)
    1192:	f7ff fffe 	bl	0 <do_test>
    1196:	2254      	movs	r2, #84	; 0x54
    1198:	68a1      	ldr	r1, [r4, #8]
    119a:	4871      	ldr	r0, [pc, #452]	; (1360 <run+0x54c>)
    119c:	f7ff fffe 	bl	0 <do_test>
    11a0:	4d70      	ldr	r5, [pc, #448]	; (1364 <run+0x550>)
    11a2:	2255      	movs	r2, #85	; 0x55
    11a4:	0028      	movs	r0, r5
    11a6:	68a1      	ldr	r1, [r4, #8]
    11a8:	f7ff fffe 	bl	0 <do_test>
    11ac:	2256      	movs	r2, #86	; 0x56
    11ae:	68a1      	ldr	r1, [r4, #8]
    11b0:	486d      	ldr	r0, [pc, #436]	; (1368 <run+0x554>)
    11b2:	f7ff fffe 	bl	0 <do_test>
    11b6:	0028      	movs	r0, r5
    11b8:	2257      	movs	r2, #87	; 0x57
    11ba:	68a1      	ldr	r1, [r4, #8]
    11bc:	f7ff fffe 	bl	0 <do_test>
    11c0:	2258      	movs	r2, #88	; 0x58
    11c2:	68a1      	ldr	r1, [r4, #8]
    11c4:	4869      	ldr	r0, [pc, #420]	; (136c <run+0x558>)
    11c6:	f7ff fffe 	bl	0 <do_test>
    11ca:	2259      	movs	r2, #89	; 0x59
    11cc:	68a1      	ldr	r1, [r4, #8]
    11ce:	4868      	ldr	r0, [pc, #416]	; (1370 <run+0x55c>)
    11d0:	f7ff fffe 	bl	0 <do_test>
    11d4:	225a      	movs	r2, #90	; 0x5a
    11d6:	6a21      	ldr	r1, [r4, #32]
    11d8:	4866      	ldr	r0, [pc, #408]	; (1374 <run+0x560>)
    11da:	f7ff fffe 	bl	0 <do_test>
    11de:	225b      	movs	r2, #91	; 0x5b
    11e0:	6a21      	ldr	r1, [r4, #32]
    11e2:	4865      	ldr	r0, [pc, #404]	; (1378 <run+0x564>)
    11e4:	f7ff fffe 	bl	0 <do_test>
    11e8:	225c      	movs	r2, #92	; 0x5c
    11ea:	68a1      	ldr	r1, [r4, #8]
    11ec:	4863      	ldr	r0, [pc, #396]	; (137c <run+0x568>)
    11ee:	f7ff fffe 	bl	0 <do_test>
    11f2:	225d      	movs	r2, #93	; 0x5d
    11f4:	6a21      	ldr	r1, [r4, #32]
    11f6:	4862      	ldr	r0, [pc, #392]	; (1380 <run+0x56c>)
    11f8:	f7ff fffe 	bl	0 <do_test>
    11fc:	225e      	movs	r2, #94	; 0x5e
    11fe:	6a21      	ldr	r1, [r4, #32]
    1200:	e0c0      	b.n	1384 <run+0x570>
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	00000000 	.word	0x00000000
    1208:	10001d24 	.word	0x10001d24
    120c:	10001c2c 	.word	0x10001c2c
    1210:	10001ca0 	.word	0x10001ca0
	...
    1384:	4838      	ldr	r0, [pc, #224]	; (e4 <do_test+0xe4>)
    1386:	f7ff fffe 	bl	0 <do_test>
    138a:	225f      	movs	r2, #95	; 0x5f
    138c:	68a1      	ldr	r1, [r4, #8]
    138e:	4837      	ldr	r0, [pc, #220]	; (146c <run+0x658>)
    1390:	f7ff fffe 	bl	0 <do_test>
    1394:	2260      	movs	r2, #96	; 0x60
    1396:	68a1      	ldr	r1, [r4, #8]
    1398:	4835      	ldr	r0, [pc, #212]	; (1470 <run+0x65c>)
    139a:	f7ff fffe 	bl	0 <do_test>
    139e:	2261      	movs	r2, #97	; 0x61
    13a0:	68a1      	ldr	r1, [r4, #8]
    13a2:	4834      	ldr	r0, [pc, #208]	; (1474 <run+0x660>)
    13a4:	f7ff fffe 	bl	0 <do_test>
    13a8:	2262      	movs	r2, #98	; 0x62
    13aa:	68a1      	ldr	r1, [r4, #8]
    13ac:	4832      	ldr	r0, [pc, #200]	; (1478 <run+0x664>)
    13ae:	f7ff fffe 	bl	0 <do_test>
    13b2:	2263      	movs	r2, #99	; 0x63
    13b4:	6a21      	ldr	r1, [r4, #32]
    13b6:	4831      	ldr	r0, [pc, #196]	; (147c <run+0x668>)
    13b8:	f7ff fffe 	bl	0 <do_test>
    13bc:	2264      	movs	r2, #100	; 0x64
    13be:	6a21      	ldr	r1, [r4, #32]
    13c0:	482f      	ldr	r0, [pc, #188]	; (1480 <run+0x66c>)
    13c2:	f7ff fffe 	bl	0 <do_test>
    13c6:	2265      	movs	r2, #101	; 0x65
    13c8:	6a21      	ldr	r1, [r4, #32]
    13ca:	482e      	ldr	r0, [pc, #184]	; (1484 <run+0x670>)
    13cc:	f7ff fffe 	bl	0 <do_test>
    13d0:	2266      	movs	r2, #102	; 0x66
    13d2:	6a21      	ldr	r1, [r4, #32]
    13d4:	482c      	ldr	r0, [pc, #176]	; (1488 <run+0x674>)
    13d6:	f7ff fffe 	bl	0 <do_test>
    13da:	2267      	movs	r2, #103	; 0x67
    13dc:	6a21      	ldr	r1, [r4, #32]
    13de:	482b      	ldr	r0, [pc, #172]	; (148c <run+0x678>)
    13e0:	f7ff fffe 	bl	0 <do_test>
    13e4:	2268      	movs	r2, #104	; 0x68
    13e6:	6a21      	ldr	r1, [r4, #32]
    13e8:	4829      	ldr	r0, [pc, #164]	; (1490 <run+0x67c>)
    13ea:	f7ff fffe 	bl	0 <do_test>
    13ee:	2269      	movs	r2, #105	; 0x69
    13f0:	68a1      	ldr	r1, [r4, #8]
    13f2:	4828      	ldr	r0, [pc, #160]	; (1494 <run+0x680>)
    13f4:	f7ff fffe 	bl	0 <do_test>
    13f8:	226a      	movs	r2, #106	; 0x6a
    13fa:	68a1      	ldr	r1, [r4, #8]
    13fc:	4826      	ldr	r0, [pc, #152]	; (1498 <run+0x684>)
    13fe:	f7ff fffe 	bl	0 <do_test>
    1402:	226b      	movs	r2, #107	; 0x6b
    1404:	68a1      	ldr	r1, [r4, #8]
    1406:	4825      	ldr	r0, [pc, #148]	; (149c <run+0x688>)
    1408:	f7ff fffe 	bl	0 <do_test>
    140c:	226c      	movs	r2, #108	; 0x6c
    140e:	68a1      	ldr	r1, [r4, #8]
    1410:	4823      	ldr	r0, [pc, #140]	; (14a0 <run+0x68c>)
    1412:	f7ff fffe 	bl	0 <do_test>
    1416:	226d      	movs	r2, #109	; 0x6d
    1418:	68a1      	ldr	r1, [r4, #8]
    141a:	4822      	ldr	r0, [pc, #136]	; (14a4 <run+0x690>)
    141c:	f7ff fffe 	bl	0 <do_test>
    1420:	226e      	movs	r2, #110	; 0x6e
    1422:	68a1      	ldr	r1, [r4, #8]
    1424:	4820      	ldr	r0, [pc, #128]	; (14a8 <run+0x694>)
    1426:	f7ff fffe 	bl	0 <do_test>
    142a:	226f      	movs	r2, #111	; 0x6f
    142c:	68a1      	ldr	r1, [r4, #8]
    142e:	481f      	ldr	r0, [pc, #124]	; (14ac <run+0x698>)
    1430:	f7ff fffe 	bl	0 <do_test>
    1434:	2270      	movs	r2, #112	; 0x70
    1436:	68a1      	ldr	r1, [r4, #8]
    1438:	481d      	ldr	r0, [pc, #116]	; (14b0 <run+0x69c>)
    143a:	f7ff fffe 	bl	0 <do_test>
    143e:	2271      	movs	r2, #113	; 0x71
    1440:	68a1      	ldr	r1, [r4, #8]
    1442:	481c      	ldr	r0, [pc, #112]	; (14b4 <run+0x6a0>)
    1444:	f7ff fffe 	bl	0 <do_test>
    1448:	2272      	movs	r2, #114	; 0x72
    144a:	68a1      	ldr	r1, [r4, #8]
    144c:	481a      	ldr	r0, [pc, #104]	; (14b8 <run+0x6a4>)
    144e:	f7ff fffe 	bl	0 <do_test>
    1452:	68a1      	ldr	r1, [r4, #8]
    1454:	2273      	movs	r2, #115	; 0x73
    1456:	4819      	ldr	r0, [pc, #100]	; (14bc <run+0x6a8>)
    1458:	f7ff fffe 	bl	0 <do_test>
    145c:	bd30      	pop	{r4, r5, pc}
    145e:	2301      	movs	r3, #1
    1460:	4917      	ldr	r1, [pc, #92]	; (14c0 <run+0x6ac>)
    1462:	7023      	strb	r3, [r4, #0]
    1464:	60a1      	str	r1, [r4, #8]
    1466:	e4dc      	b.n	e22 <run+0xe>
	...
    14c0:	10001dc4 	.word	0x10001dc4

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
