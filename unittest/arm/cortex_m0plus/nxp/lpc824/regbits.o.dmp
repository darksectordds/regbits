
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	10001dc0 	.word	0x10001dc0

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	10001c00 	.word	0x10001c00

00000018 <set_singl_bits_operator()>:
      18:	2140      	movs	r1, #64	; 0x40
      1a:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1c:	6853      	ldr	r3, [r2, #4]
      1e:	430b      	orrs	r3, r1
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	10001dc0 	.word	0x10001dc0

00000028 <set_singl_bits_method()>:
      28:	2140      	movs	r1, #64	; 0x40
      2a:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2c:	6853      	ldr	r3, [r2, #4]
      2e:	430b      	orrs	r3, r1
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	10001dc0 	.word	0x10001dc0

00000038 <clr_singl_bits_operator()>:
      38:	2140      	movs	r1, #64	; 0x40
      3a:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3c:	6853      	ldr	r3, [r2, #4]
      3e:	438b      	bics	r3, r1
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	10001dc0 	.word	0x10001dc0

00000048 <clr_singl_bits_method()>:
      48:	2140      	movs	r1, #64	; 0x40
      4a:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4c:	6853      	ldr	r3, [r2, #4]
      4e:	438b      	bics	r3, r1
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	10001dc0 	.word	0x10001dc0

00000058 <set_singl_mskd_operator()>:
      58:	2102      	movs	r1, #2
      5a:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5c:	6853      	ldr	r3, [r2, #4]
      5e:	430b      	orrs	r3, r1
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	10001dc0 	.word	0x10001dc0

00000068 <set_singl_mskd_method()>:
      68:	2102      	movs	r1, #2
      6a:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6c:	6853      	ldr	r3, [r2, #4]
      6e:	430b      	orrs	r3, r1
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	10001dc0 	.word	0x10001dc0

00000078 <clr_singl_mskd_operator()>:
      78:	2102      	movs	r1, #2
      7a:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7c:	6853      	ldr	r3, [r2, #4]
      7e:	438b      	bics	r3, r1
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	10001dc0 	.word	0x10001dc0

00000088 <clr_singl_mskd_method()>:
      88:	2102      	movs	r1, #2
      8a:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8c:	6853      	ldr	r3, [r2, #4]
      8e:	438b      	bics	r3, r1
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	10001dc0 	.word	0x10001dc0

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	10001dc0 	.word	0x10001dc0

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	10001dc0 	.word	0x10001dc0

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	10001dc0 	.word	0x10001dc0

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	10001dc0 	.word	0x10001dc0

000000c8 <flp_singl_bits_operator()>:
      c8:	2140      	movs	r1, #64	; 0x40
      ca:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      cc:	6853      	ldr	r3, [r2, #4]
      ce:	404b      	eors	r3, r1
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	10001dc0 	.word	0x10001dc0

000000d8 <flp_singl_bits_method()>:
      d8:	2140      	movs	r1, #64	; 0x40
      da:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      dc:	6853      	ldr	r3, [r2, #4]
      de:	404b      	eors	r3, r1
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	10001dc0 	.word	0x10001dc0

000000e8 <flp_singl_mskd_operator()>:
      e8:	2102      	movs	r1, #2
      ea:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ec:	6853      	ldr	r3, [r2, #4]
      ee:	404b      	eors	r3, r1
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	10001dc0 	.word	0x10001dc0

000000f8 <flp_singl_mskd_method()>:
      f8:	2102      	movs	r1, #2
      fa:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fc:	6853      	ldr	r3, [r2, #4]
      fe:	404b      	eors	r3, r1
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	10001dc0 	.word	0x10001dc0

00000108 <ins_singl_mskd_operator()>:
     108:	2106      	movs	r1, #6
     10a:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10c:	6853      	ldr	r3, [r2, #4]
     10e:	438b      	bics	r3, r1
     110:	3902      	subs	r1, #2
     112:	430b      	orrs	r3, r1
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	10001dc0 	.word	0x10001dc0

0000011c <ins_singl_mskd_method()>:
     11c:	2106      	movs	r1, #6
     11e:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     120:	6853      	ldr	r3, [r2, #4]
     122:	438b      	bics	r3, r1
     124:	3902      	subs	r1, #2
     126:	430b      	orrs	r3, r1
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	10001dc0 	.word	0x10001dc0

00000130 <set_multi_bits_operator()>:
     130:	2121      	movs	r1, #33	; 0x21
     132:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     134:	6853      	ldr	r3, [r2, #4]
     136:	430b      	orrs	r3, r1
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	10001dc0 	.word	0x10001dc0

00000140 <set_multi_bits_method()>:
     140:	2121      	movs	r1, #33	; 0x21
     142:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     144:	6853      	ldr	r3, [r2, #4]
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	10001dc0 	.word	0x10001dc0

00000150 <ins_multi_mskd_operator()>:
     150:	4904      	ldr	r1, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	4a05      	ldr	r2, [pc, #20]	; (168 <ins_multi_mskd_operator()+0x18>)
     154:	684b      	ldr	r3, [r1, #4]
     156:	401a      	ands	r2, r3
     158:	23c1      	movs	r3, #193	; 0xc1
     15a:	005b      	lsls	r3, r3, #1
     15c:	4313      	orrs	r3, r2
     15e:	604b      	str	r3, [r1, #4]
     160:	4770      	bx	lr
     162:	46c0      	nop			; (mov r8, r8)
     164:	10001dc0 	.word	0x10001dc0
     168:	fffff079 	.word	0xfffff079

0000016c <ins_multi_mskd_method()>:
     16c:	4904      	ldr	r1, [pc, #16]	; (180 <ins_multi_mskd_method()+0x14>)
     16e:	4a05      	ldr	r2, [pc, #20]	; (184 <ins_multi_mskd_method()+0x18>)
     170:	684b      	ldr	r3, [r1, #4]
     172:	401a      	ands	r2, r3
     174:	23c1      	movs	r3, #193	; 0xc1
     176:	005b      	lsls	r3, r3, #1
     178:	4313      	orrs	r3, r2
     17a:	604b      	str	r3, [r1, #4]
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	10001dc0 	.word	0x10001dc0
     184:	fffff079 	.word	0xfffff079

00000188 <equ_multi_bits_operator()>:
     188:	2260      	movs	r2, #96	; 0x60
     18a:	4b01      	ldr	r3, [pc, #4]	; (190 <equ_multi_bits_operator()+0x8>)
     18c:	605a      	str	r2, [r3, #4]
     18e:	4770      	bx	lr
     190:	10001dc0 	.word	0x10001dc0

00000194 <equ_multi_bits_method()>:
     194:	2260      	movs	r2, #96	; 0x60
     196:	4b01      	ldr	r3, [pc, #4]	; (19c <equ_multi_bits_method()+0x8>)
     198:	605a      	str	r2, [r3, #4]
     19a:	4770      	bx	lr
     19c:	10001dc0 	.word	0x10001dc0

000001a0 <equ_multi_mskd_operator()>:
     1a0:	22c2      	movs	r2, #194	; 0xc2
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <equ_multi_mskd_operator()+0xc>)
     1a4:	0092      	lsls	r2, r2, #2
     1a6:	605a      	str	r2, [r3, #4]
     1a8:	4770      	bx	lr
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	10001dc0 	.word	0x10001dc0

000001b0 <equ_multi_mskd_method()>:
     1b0:	22c2      	movs	r2, #194	; 0xc2
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <equ_multi_mskd_method()+0xc>)
     1b4:	0092      	lsls	r2, r2, #2
     1b6:	605a      	str	r2, [r3, #4]
     1b8:	4770      	bx	lr
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	10001dc0 	.word	0x10001dc0

000001c0 <equ_bits_mskd_operator()>:
     1c0:	2222      	movs	r2, #34	; 0x22
     1c2:	4b01      	ldr	r3, [pc, #4]	; (1c8 <equ_bits_mskd_operator()+0x8>)
     1c4:	605a      	str	r2, [r3, #4]
     1c6:	4770      	bx	lr
     1c8:	10001dc0 	.word	0x10001dc0

000001cc <equ_bits_mskd_method()>:
     1cc:	2222      	movs	r2, #34	; 0x22
     1ce:	4b01      	ldr	r3, [pc, #4]	; (1d4 <equ_bits_mskd_method()+0x8>)
     1d0:	605a      	str	r2, [r3, #4]
     1d2:	4770      	bx	lr
     1d4:	10001dc0 	.word	0x10001dc0

000001d8 <equ_mskd_bits_operator()>:
     1d8:	2244      	movs	r2, #68	; 0x44
     1da:	4b01      	ldr	r3, [pc, #4]	; (1e0 <equ_mskd_bits_operator()+0x8>)
     1dc:	605a      	str	r2, [r3, #4]
     1de:	4770      	bx	lr
     1e0:	10001dc0 	.word	0x10001dc0

000001e4 <equ_mskd_bits_method()>:
     1e4:	2244      	movs	r2, #68	; 0x44
     1e6:	4b01      	ldr	r3, [pc, #4]	; (1ec <equ_mskd_bits_method()+0x8>)
     1e8:	605a      	str	r2, [r3, #4]
     1ea:	4770      	bx	lr
     1ec:	10001dc0 	.word	0x10001dc0

000001f0 <equ_bits_var()>:
     1f0:	2240      	movs	r2, #64	; 0x40
     1f2:	4b02      	ldr	r3, [pc, #8]	; (1fc <equ_bits_var()+0xc>)
     1f4:	605a      	str	r2, [r3, #4]
     1f6:	3a3f      	subs	r2, #63	; 0x3f
     1f8:	605a      	str	r2, [r3, #4]
     1fa:	4770      	bx	lr
     1fc:	10001dc0 	.word	0x10001dc0

00000200 <equ_mskd_var()>:
     200:	2202      	movs	r2, #2
     202:	4b03      	ldr	r3, [pc, #12]	; (210 <equ_mskd_var()+0x10>)
     204:	605a      	str	r2, [r3, #4]
     206:	327f      	adds	r2, #127	; 0x7f
     208:	32ff      	adds	r2, #255	; 0xff
     20a:	605a      	str	r2, [r3, #4]
     20c:	4770      	bx	lr
     20e:	46c0      	nop			; (mov r8, r8)
     210:	10001dc0 	.word	0x10001dc0

00000214 <cmp_equ_zero()>:
     214:	2200      	movs	r2, #0
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <cmp_equ_zero()+0x20>)
     218:	605a      	str	r2, [r3, #4]
     21a:	685b      	ldr	r3, [r3, #4]
     21c:	2b00      	cmp	r3, #0
     21e:	d104      	bne.n	22a <cmp_equ_zero()+0x16>
     220:	22e8      	movs	r2, #232	; 0xe8
     222:	4b05      	ldr	r3, [pc, #20]	; (238 <cmp_equ_zero()+0x24>)
     224:	0592      	lsls	r2, r2, #22
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	2288      	movs	r2, #136	; 0x88
     22c:	4b02      	ldr	r3, [pc, #8]	; (238 <cmp_equ_zero()+0x24>)
     22e:	0592      	lsls	r2, r2, #22
     230:	605a      	str	r2, [r3, #4]
     232:	e7f9      	b.n	228 <cmp_equ_zero()+0x14>
     234:	10001dc0 	.word	0x10001dc0
     238:	10001d20 	.word	0x10001d20

0000023c <cmp_neq_zero()>:
     23c:	2200      	movs	r2, #0
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <cmp_neq_zero()+0x18>)
     240:	605a      	str	r2, [r3, #4]
     242:	685a      	ldr	r2, [r3, #4]
     244:	2a00      	cmp	r2, #0
     246:	d002      	beq.n	24e <cmp_neq_zero()+0x12>
     248:	2204      	movs	r2, #4
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	2220      	movs	r2, #32
     250:	605a      	str	r2, [r3, #4]
     252:	e7fb      	b.n	24c <cmp_neq_zero()+0x10>
     254:	10001dc0 	.word	0x10001dc0

00000258 <cmp_equ_bits()>:
     258:	2340      	movs	r3, #64	; 0x40
     25a:	4a07      	ldr	r2, [pc, #28]	; (278 <cmp_equ_bits()+0x20>)
     25c:	6053      	str	r3, [r2, #4]
     25e:	6852      	ldr	r2, [r2, #4]
     260:	4213      	tst	r3, r2
     262:	d004      	beq.n	26e <cmp_equ_bits()+0x16>
     264:	22b0      	movs	r2, #176	; 0xb0
     266:	4b05      	ldr	r3, [pc, #20]	; (27c <cmp_equ_bits()+0x24>)
     268:	0552      	lsls	r2, r2, #21
     26a:	605a      	str	r2, [r3, #4]
     26c:	4770      	bx	lr
     26e:	22d0      	movs	r2, #208	; 0xd0
     270:	4b02      	ldr	r3, [pc, #8]	; (27c <cmp_equ_bits()+0x24>)
     272:	0552      	lsls	r2, r2, #21
     274:	605a      	str	r2, [r3, #4]
     276:	e7f9      	b.n	26c <cmp_equ_bits()+0x14>
     278:	10001dc0 	.word	0x10001dc0
     27c:	10001d20 	.word	0x10001d20

00000280 <cmp_neq_bits()>:
     280:	2240      	movs	r2, #64	; 0x40
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <cmp_neq_bits()+0x18>)
     284:	605a      	str	r2, [r3, #4]
     286:	6859      	ldr	r1, [r3, #4]
     288:	420a      	tst	r2, r1
     28a:	d102      	bne.n	292 <cmp_neq_bits()+0x12>
     28c:	3a3e      	subs	r2, #62	; 0x3e
     28e:	605a      	str	r2, [r3, #4]
     290:	4770      	bx	lr
     292:	2220      	movs	r2, #32
     294:	605a      	str	r2, [r3, #4]
     296:	e7fb      	b.n	290 <cmp_neq_bits()+0x10>
     298:	10001dc0 	.word	0x10001dc0

0000029c <cmp_equ_mskd()>:
     29c:	22e8      	movs	r2, #232	; 0xe8
     29e:	4b0e      	ldr	r3, [pc, #56]	; (2d8 <cmp_equ_mskd()+0x3c>)
     2a0:	0252      	lsls	r2, r2, #9
     2a2:	605a      	str	r2, [r3, #4]
     2a4:	22f8      	movs	r2, #248	; 0xf8
     2a6:	685b      	ldr	r3, [r3, #4]
     2a8:	0252      	lsls	r2, r2, #9
     2aa:	4013      	ands	r3, r2
     2ac:	2288      	movs	r2, #136	; 0x88
     2ae:	490b      	ldr	r1, [pc, #44]	; (2dc <cmp_equ_mskd()+0x40>)
     2b0:	0252      	lsls	r2, r2, #9
     2b2:	4293      	cmp	r3, r2
     2b4:	d007      	beq.n	2c6 <cmp_equ_mskd()+0x2a>
     2b6:	684b      	ldr	r3, [r1, #4]
     2b8:	4a09      	ldr	r2, [pc, #36]	; (2e0 <cmp_equ_mskd()+0x44>)
     2ba:	401a      	ands	r2, r3
     2bc:	2388      	movs	r3, #136	; 0x88
     2be:	059b      	lsls	r3, r3, #22
     2c0:	4313      	orrs	r3, r2
     2c2:	604b      	str	r3, [r1, #4]
     2c4:	4770      	bx	lr
     2c6:	684b      	ldr	r3, [r1, #4]
     2c8:	4a05      	ldr	r2, [pc, #20]	; (2e0 <cmp_equ_mskd()+0x44>)
     2ca:	401a      	ands	r2, r3
     2cc:	23e0      	movs	r3, #224	; 0xe0
     2ce:	051b      	lsls	r3, r3, #20
     2d0:	4313      	orrs	r3, r2
     2d2:	604b      	str	r3, [r1, #4]
     2d4:	e7f6      	b.n	2c4 <cmp_equ_mskd()+0x28>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	10001dc0 	.word	0x10001dc0
     2dc:	10001d20 	.word	0x10001d20
     2e0:	c1ffffff 	.word	0xc1ffffff

000002e4 <cmp_neq_mskd()>:
     2e4:	22e8      	movs	r2, #232	; 0xe8
     2e6:	21f8      	movs	r1, #248	; 0xf8
     2e8:	4b0a      	ldr	r3, [pc, #40]	; (314 <cmp_neq_mskd()+0x30>)
     2ea:	0252      	lsls	r2, r2, #9
     2ec:	605a      	str	r2, [r3, #4]
     2ee:	685a      	ldr	r2, [r3, #4]
     2f0:	0249      	lsls	r1, r1, #9
     2f2:	400a      	ands	r2, r1
     2f4:	2188      	movs	r1, #136	; 0x88
     2f6:	0249      	lsls	r1, r1, #9
     2f8:	428a      	cmp	r2, r1
     2fa:	d006      	beq.n	30a <cmp_neq_mskd()+0x26>
     2fc:	2106      	movs	r1, #6
     2fe:	685a      	ldr	r2, [r3, #4]
     300:	438a      	bics	r2, r1
     302:	3902      	subs	r1, #2
     304:	430a      	orrs	r2, r1
     306:	605a      	str	r2, [r3, #4]
     308:	4770      	bx	lr
     30a:	2140      	movs	r1, #64	; 0x40
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	430a      	orrs	r2, r1
     310:	605a      	str	r2, [r3, #4]
     312:	e7f9      	b.n	308 <cmp_neq_mskd()+0x24>
     314:	10001dc0 	.word	0x10001dc0

00000318 <cmp_equ_reg()>:
     318:	2222      	movs	r2, #34	; 0x22
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <cmp_equ_reg()+0x20>)
     31c:	605a      	str	r2, [r3, #4]
     31e:	685b      	ldr	r3, [r3, #4]
     320:	2b22      	cmp	r3, #34	; 0x22
     322:	d004      	beq.n	32e <cmp_equ_reg()+0x16>
     324:	22b8      	movs	r2, #184	; 0xb8
     326:	4b05      	ldr	r3, [pc, #20]	; (33c <cmp_equ_reg()+0x24>)
     328:	0592      	lsls	r2, r2, #22
     32a:	605a      	str	r2, [r3, #4]
     32c:	4770      	bx	lr
     32e:	22a8      	movs	r2, #168	; 0xa8
     330:	4b02      	ldr	r3, [pc, #8]	; (33c <cmp_equ_reg()+0x24>)
     332:	0592      	lsls	r2, r2, #22
     334:	605a      	str	r2, [r3, #4]
     336:	e7f9      	b.n	32c <cmp_equ_reg()+0x14>
     338:	10001dc0 	.word	0x10001dc0
     33c:	10001d20 	.word	0x10001d20

00000340 <cmp_neq_reg()>:
     340:	2222      	movs	r2, #34	; 0x22
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <cmp_neq_reg()+0x18>)
     344:	605a      	str	r2, [r3, #4]
     346:	685a      	ldr	r2, [r3, #4]
     348:	2a22      	cmp	r2, #34	; 0x22
     34a:	d002      	beq.n	352 <cmp_neq_reg()+0x12>
     34c:	2202      	movs	r2, #2
     34e:	605a      	str	r2, [r3, #4]
     350:	4770      	bx	lr
     352:	2220      	movs	r2, #32
     354:	605a      	str	r2, [r3, #4]
     356:	e7fb      	b.n	350 <cmp_neq_reg()+0x10>
     358:	10001dc0 	.word	0x10001dc0

0000035c <constexpr_bits_array()>:
     35c:	2206      	movs	r2, #6
     35e:	2180      	movs	r1, #128	; 0x80
     360:	4b02      	ldr	r3, [pc, #8]	; (36c <constexpr_bits_array()+0x10>)
     362:	0189      	lsls	r1, r1, #6
     364:	62da      	str	r2, [r3, #44]	; 0x2c
     366:	329a      	adds	r2, #154	; 0x9a
     368:	5099      	str	r1, [r3, r2]
     36a:	4770      	bx	lr
     36c:	10001c00 	.word	0x10001c00

00000370 <runtime_bits_array()>:
     370:	2303      	movs	r3, #3
     372:	4a09      	ldr	r2, [pc, #36]	; (398 <runtime_bits_array()+0x28>)
     374:	b081      	sub	sp, #4
     376:	4694      	mov	ip, r2
     378:	2221      	movs	r2, #33	; 0x21
     37a:	9300      	str	r3, [sp, #0]
     37c:	9b00      	ldr	r3, [sp, #0]
     37e:	4661      	mov	r1, ip
     380:	009b      	lsls	r3, r3, #2
     382:	4463      	add	r3, ip
     384:	621a      	str	r2, [r3, #32]
     386:	2307      	movs	r3, #7
     388:	9300      	str	r3, [sp, #0]
     38a:	9a00      	ldr	r2, [sp, #0]
     38c:	3b06      	subs	r3, #6
     38e:	4093      	lsls	r3, r2
     390:	22a0      	movs	r2, #160	; 0xa0
     392:	508b      	str	r3, [r1, r2]
     394:	b001      	add	sp, #4
     396:	4770      	bx	lr
     398:	10001c00 	.word	0x10001c00

0000039c <prescaler_low()>:
     39c:	2277      	movs	r2, #119	; 0x77
     39e:	4b04      	ldr	r3, [pc, #16]	; (3b0 <prescaler_low()+0x14>)
     3a0:	605a      	str	r2, [r3, #4]
     3a2:	685a      	ldr	r2, [r3, #4]
     3a4:	237f      	movs	r3, #127	; 0x7f
     3a6:	4013      	ands	r3, r2
     3a8:	4a02      	ldr	r2, [pc, #8]	; (3b4 <prescaler_low()+0x18>)
     3aa:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ac:	4770      	bx	lr
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	10001d20 	.word	0x10001d20
     3b4:	10001c00 	.word	0x10001c00

000003b8 <prescaler_high()>:
     3b8:	22e8      	movs	r2, #232	; 0xe8
     3ba:	4b04      	ldr	r3, [pc, #16]	; (3cc <prescaler_high()+0x14>)
     3bc:	0592      	lsls	r2, r2, #22
     3be:	605a      	str	r2, [r3, #4]
     3c0:	685b      	ldr	r3, [r3, #4]
     3c2:	4a03      	ldr	r2, [pc, #12]	; (3d0 <prescaler_high()+0x18>)
     3c4:	009b      	lsls	r3, r3, #2
     3c6:	0edb      	lsrs	r3, r3, #27
     3c8:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ca:	4770      	bx	lr
     3cc:	10001d20 	.word	0x10001d20
     3d0:	10001c00 	.word	0x10001c00

000003d4 <reg_mskd_lss()>:
     3d4:	22d8      	movs	r2, #216	; 0xd8
     3d6:	4b09      	ldr	r3, [pc, #36]	; (3fc <reg_mskd_lss()+0x28>)
     3d8:	0592      	lsls	r2, r2, #22
     3da:	605a      	str	r2, [r3, #4]
     3dc:	22f8      	movs	r2, #248	; 0xf8
     3de:	685b      	ldr	r3, [r3, #4]
     3e0:	0592      	lsls	r2, r2, #22
     3e2:	4013      	ands	r3, r2
     3e4:	4a06      	ldr	r2, [pc, #24]	; (400 <reg_mskd_lss()+0x2c>)
     3e6:	4293      	cmp	r3, r2
     3e8:	d803      	bhi.n	3f2 <reg_mskd_lss()+0x1e>
     3ea:	2202      	movs	r2, #2
     3ec:	4b05      	ldr	r3, [pc, #20]	; (404 <reg_mskd_lss()+0x30>)
     3ee:	605a      	str	r2, [r3, #4]
     3f0:	4770      	bx	lr
     3f2:	2204      	movs	r2, #4
     3f4:	4b03      	ldr	r3, [pc, #12]	; (404 <reg_mskd_lss()+0x30>)
     3f6:	605a      	str	r2, [r3, #4]
     3f8:	e7fa      	b.n	3f0 <reg_mskd_lss()+0x1c>
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	10001d20 	.word	0x10001d20
     400:	37ffffff 	.word	0x37ffffff
     404:	10001dc0 	.word	0x10001dc0

00000408 <reg_mskd_leq()>:
     408:	21b8      	movs	r1, #184	; 0xb8
     40a:	20f8      	movs	r0, #248	; 0xf8
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <reg_mskd_leq()+0x30>)
     40e:	0589      	lsls	r1, r1, #22
     410:	6051      	str	r1, [r2, #4]
     412:	6853      	ldr	r3, [r2, #4]
     414:	0580      	lsls	r0, r0, #22
     416:	4003      	ands	r3, r0
     418:	428b      	cmp	r3, r1
     41a:	d805      	bhi.n	428 <reg_mskd_leq()+0x20>
     41c:	6853      	ldr	r3, [r2, #4]
     41e:	4018      	ands	r0, r3
     420:	23c0      	movs	r3, #192	; 0xc0
     422:	059b      	lsls	r3, r3, #22
     424:	4298      	cmp	r0, r3
     426:	d903      	bls.n	430 <reg_mskd_leq()+0x28>
     428:	2204      	movs	r2, #4
     42a:	4b04      	ldr	r3, [pc, #16]	; (43c <reg_mskd_leq()+0x34>)
     42c:	605a      	str	r2, [r3, #4]
     42e:	4770      	bx	lr
     430:	2202      	movs	r2, #2
     432:	4b02      	ldr	r3, [pc, #8]	; (43c <reg_mskd_leq()+0x34>)
     434:	605a      	str	r2, [r3, #4]
     436:	e7fa      	b.n	42e <reg_mskd_leq()+0x26>
     438:	10001d20 	.word	0x10001d20
     43c:	10001dc0 	.word	0x10001dc0

00000440 <reg_mskd_gtr()>:
     440:	2298      	movs	r2, #152	; 0x98
     442:	4b09      	ldr	r3, [pc, #36]	; (468 <reg_mskd_gtr()+0x28>)
     444:	0592      	lsls	r2, r2, #22
     446:	605a      	str	r2, [r3, #4]
     448:	22f8      	movs	r2, #248	; 0xf8
     44a:	685b      	ldr	r3, [r3, #4]
     44c:	0592      	lsls	r2, r2, #22
     44e:	4013      	ands	r3, r2
     450:	2290      	movs	r2, #144	; 0x90
     452:	0592      	lsls	r2, r2, #22
     454:	4293      	cmp	r3, r2
     456:	d903      	bls.n	460 <reg_mskd_gtr()+0x20>
     458:	2202      	movs	r2, #2
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <reg_mskd_gtr()+0x2c>)
     45c:	605a      	str	r2, [r3, #4]
     45e:	4770      	bx	lr
     460:	2204      	movs	r2, #4
     462:	4b02      	ldr	r3, [pc, #8]	; (46c <reg_mskd_gtr()+0x2c>)
     464:	605a      	str	r2, [r3, #4]
     466:	e7fa      	b.n	45e <reg_mskd_gtr()+0x1e>
     468:	10001d20 	.word	0x10001d20
     46c:	10001dc0 	.word	0x10001dc0

00000470 <reg_mskd_geq()>:
     470:	2388      	movs	r3, #136	; 0x88
     472:	21f8      	movs	r1, #248	; 0xf8
     474:	4a0a      	ldr	r2, [pc, #40]	; (4a0 <reg_mskd_geq()+0x30>)
     476:	059b      	lsls	r3, r3, #22
     478:	6053      	str	r3, [r2, #4]
     47a:	6853      	ldr	r3, [r2, #4]
     47c:	4809      	ldr	r0, [pc, #36]	; (4a4 <reg_mskd_geq()+0x34>)
     47e:	0589      	lsls	r1, r1, #22
     480:	400b      	ands	r3, r1
     482:	4283      	cmp	r3, r0
     484:	d904      	bls.n	490 <reg_mskd_geq()+0x20>
     486:	6853      	ldr	r3, [r2, #4]
     488:	4019      	ands	r1, r3
     48a:	4b07      	ldr	r3, [pc, #28]	; (4a8 <reg_mskd_geq()+0x38>)
     48c:	4299      	cmp	r1, r3
     48e:	d803      	bhi.n	498 <reg_mskd_geq()+0x28>
     490:	2204      	movs	r2, #4
     492:	4b06      	ldr	r3, [pc, #24]	; (4ac <reg_mskd_geq()+0x3c>)
     494:	605a      	str	r2, [r3, #4]
     496:	4770      	bx	lr
     498:	2202      	movs	r2, #2
     49a:	4b04      	ldr	r3, [pc, #16]	; (4ac <reg_mskd_geq()+0x3c>)
     49c:	605a      	str	r2, [r3, #4]
     49e:	e7fa      	b.n	496 <reg_mskd_geq()+0x26>
     4a0:	10001d20 	.word	0x10001d20
     4a4:	1fffffff 	.word	0x1fffffff
     4a8:	21ffffff 	.word	0x21ffffff
     4ac:	10001dc0 	.word	0x10001dc0

000004b0 <pos_cmp_eq()>:
     4b0:	2202      	movs	r2, #2
     4b2:	4b01      	ldr	r3, [pc, #4]	; (4b8 <pos_cmp_eq()+0x8>)
     4b4:	605a      	str	r2, [r3, #4]
     4b6:	4770      	bx	lr
     4b8:	10001dc0 	.word	0x10001dc0

000004bc <pos_cmp_ne()>:
     4bc:	2202      	movs	r2, #2
     4be:	4b01      	ldr	r3, [pc, #4]	; (4c4 <pos_cmp_ne()+0x8>)
     4c0:	605a      	str	r2, [r3, #4]
     4c2:	4770      	bx	lr
     4c4:	10001dc0 	.word	0x10001dc0

000004c8 <bits_extract_eq()>:
     4c8:	2240      	movs	r2, #64	; 0x40
     4ca:	4b05      	ldr	r3, [pc, #20]	; (4e0 <bits_extract_eq()+0x18>)
     4cc:	605a      	str	r2, [r3, #4]
     4ce:	685a      	ldr	r2, [r3, #4]
     4d0:	2a40      	cmp	r2, #64	; 0x40
     4d2:	d002      	beq.n	4da <bits_extract_eq()+0x12>
     4d4:	2204      	movs	r2, #4
     4d6:	605a      	str	r2, [r3, #4]
     4d8:	4770      	bx	lr
     4da:	3a3e      	subs	r2, #62	; 0x3e
     4dc:	605a      	str	r2, [r3, #4]
     4de:	e7fb      	b.n	4d8 <bits_extract_eq()+0x10>
     4e0:	10001dc0 	.word	0x10001dc0

000004e4 <mskd_extract_eq()>:
     4e4:	2202      	movs	r2, #2
     4e6:	4b05      	ldr	r3, [pc, #20]	; (4fc <mskd_extract_eq()+0x18>)
     4e8:	605a      	str	r2, [r3, #4]
     4ea:	685a      	ldr	r2, [r3, #4]
     4ec:	2a02      	cmp	r2, #2
     4ee:	d002      	beq.n	4f6 <mskd_extract_eq()+0x12>
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	605a      	str	r2, [r3, #4]
     4f4:	4770      	bx	lr
     4f6:	321e      	adds	r2, #30
     4f8:	605a      	str	r2, [r3, #4]
     4fa:	e7fb      	b.n	4f4 <mskd_extract_eq()+0x10>
     4fc:	10001dc0 	.word	0x10001dc0

00000500 <mskd_extract_ne()>:
     500:	2204      	movs	r2, #4
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <mskd_extract_ne()+0x18>)
     504:	605a      	str	r2, [r3, #4]
     506:	685a      	ldr	r2, [r3, #4]
     508:	2a04      	cmp	r2, #4
     50a:	d002      	beq.n	512 <mskd_extract_ne()+0x12>
     50c:	2220      	movs	r2, #32
     50e:	605a      	str	r2, [r3, #4]
     510:	4770      	bx	lr
     512:	323c      	adds	r2, #60	; 0x3c
     514:	605a      	str	r2, [r3, #4]
     516:	e7fb      	b.n	510 <mskd_extract_ne()+0x10>
     518:	10001dc0 	.word	0x10001dc0

0000051c <mskd_extract_lss()>:
     51c:	22b0      	movs	r2, #176	; 0xb0
     51e:	4b07      	ldr	r3, [pc, #28]	; (53c <mskd_extract_lss()+0x20>)
     520:	0552      	lsls	r2, r2, #21
     522:	605a      	str	r2, [r3, #4]
     524:	685a      	ldr	r2, [r3, #4]
     526:	4b06      	ldr	r3, [pc, #24]	; (540 <mskd_extract_lss()+0x24>)
     528:	429a      	cmp	r2, r3
     52a:	d803      	bhi.n	534 <mskd_extract_lss()+0x18>
     52c:	2220      	movs	r2, #32
     52e:	4b05      	ldr	r3, [pc, #20]	; (544 <mskd_extract_lss()+0x28>)
     530:	605a      	str	r2, [r3, #4]
     532:	4770      	bx	lr
     534:	2240      	movs	r2, #64	; 0x40
     536:	4b03      	ldr	r3, [pc, #12]	; (544 <mskd_extract_lss()+0x28>)
     538:	605a      	str	r2, [r3, #4]
     53a:	e7fa      	b.n	532 <mskd_extract_lss()+0x16>
     53c:	10001d20 	.word	0x10001d20
     540:	17ffffff 	.word	0x17ffffff
     544:	10001dc0 	.word	0x10001dc0

00000548 <mskd_extract_leq()>:
     548:	23b8      	movs	r3, #184	; 0xb8
     54a:	4a07      	ldr	r2, [pc, #28]	; (568 <mskd_extract_leq()+0x20>)
     54c:	059b      	lsls	r3, r3, #22
     54e:	6053      	str	r3, [r2, #4]
     550:	6852      	ldr	r2, [r2, #4]
     552:	429a      	cmp	r2, r3
     554:	d803      	bhi.n	55e <mskd_extract_leq()+0x16>
     556:	2220      	movs	r2, #32
     558:	4b04      	ldr	r3, [pc, #16]	; (56c <mskd_extract_leq()+0x24>)
     55a:	605a      	str	r2, [r3, #4]
     55c:	4770      	bx	lr
     55e:	2240      	movs	r2, #64	; 0x40
     560:	4b02      	ldr	r3, [pc, #8]	; (56c <mskd_extract_leq()+0x24>)
     562:	605a      	str	r2, [r3, #4]
     564:	e7fa      	b.n	55c <mskd_extract_leq()+0x14>
     566:	46c0      	nop			; (mov r8, r8)
     568:	10001d20 	.word	0x10001d20
     56c:	10001dc0 	.word	0x10001dc0

00000570 <mskd_extract_gtr()>:
     570:	2298      	movs	r2, #152	; 0x98
     572:	4b08      	ldr	r3, [pc, #32]	; (594 <mskd_extract_gtr()+0x24>)
     574:	0592      	lsls	r2, r2, #22
     576:	605a      	str	r2, [r3, #4]
     578:	685a      	ldr	r2, [r3, #4]
     57a:	2390      	movs	r3, #144	; 0x90
     57c:	059b      	lsls	r3, r3, #22
     57e:	429a      	cmp	r2, r3
     580:	d903      	bls.n	58a <mskd_extract_gtr()+0x1a>
     582:	2220      	movs	r2, #32
     584:	4b04      	ldr	r3, [pc, #16]	; (598 <mskd_extract_gtr()+0x28>)
     586:	605a      	str	r2, [r3, #4]
     588:	4770      	bx	lr
     58a:	2240      	movs	r2, #64	; 0x40
     58c:	4b02      	ldr	r3, [pc, #8]	; (598 <mskd_extract_gtr()+0x28>)
     58e:	605a      	str	r2, [r3, #4]
     590:	e7fa      	b.n	588 <mskd_extract_gtr()+0x18>
     592:	46c0      	nop			; (mov r8, r8)
     594:	10001d20 	.word	0x10001d20
     598:	10001dc0 	.word	0x10001dc0

0000059c <set_bits_global()>:
     59c:	2140      	movs	r1, #64	; 0x40
     59e:	4a02      	ldr	r2, [pc, #8]	; (5a8 <set_bits_global()+0xc>)
     5a0:	6853      	ldr	r3, [r2, #4]
     5a2:	430b      	orrs	r3, r1
     5a4:	6053      	str	r3, [r2, #4]
     5a6:	4770      	bx	lr
     5a8:	10001dc0 	.word	0x10001dc0

000005ac <ins_mskd_global()>:
     5ac:	2106      	movs	r1, #6
     5ae:	4a03      	ldr	r2, [pc, #12]	; (5bc <ins_mskd_global()+0x10>)
     5b0:	6853      	ldr	r3, [r2, #4]
     5b2:	438b      	bics	r3, r1
     5b4:	3904      	subs	r1, #4
     5b6:	430b      	orrs	r3, r1
     5b8:	6053      	str	r3, [r2, #4]
     5ba:	4770      	bx	lr
     5bc:	10001dc0 	.word	0x10001dc0

000005c0 <assign_array_global()>:
     5c0:	22bd      	movs	r2, #189	; 0xbd
     5c2:	4b01      	ldr	r3, [pc, #4]	; (5c8 <assign_array_global()+0x8>)
     5c4:	601a      	str	r2, [r3, #0]
     5c6:	4770      	bx	lr
     5c8:	10001c2c 	.word	0x10001c2c

000005cc <shifted_global()>:
     5cc:	22b8      	movs	r2, #184	; 0xb8
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <shifted_global()+0x14>)
     5d0:	0592      	lsls	r2, r2, #22
     5d2:	605a      	str	r2, [r3, #4]
     5d4:	685b      	ldr	r3, [r3, #4]
     5d6:	4a03      	ldr	r2, [pc, #12]	; (5e4 <shifted_global()+0x18>)
     5d8:	009b      	lsls	r3, r3, #2
     5da:	0edb      	lsrs	r3, r3, #27
     5dc:	62d3      	str	r3, [r2, #44]	; 0x2c
     5de:	4770      	bx	lr
     5e0:	10001d20 	.word	0x10001d20
     5e4:	10001c00 	.word	0x10001c00

000005e8 <assign_register_global()>:
     5e8:	2204      	movs	r2, #4
     5ea:	4b01      	ldr	r3, [pc, #4]	; (5f0 <assign_register_global()+0x8>)
     5ec:	605a      	str	r2, [r3, #4]
     5ee:	4770      	bx	lr
     5f0:	10001dc0 	.word	0x10001dc0

000005f4 <copy_bits_equ()>:
     5f4:	2240      	movs	r2, #64	; 0x40
     5f6:	4b05      	ldr	r3, [pc, #20]	; (60c <copy_bits_equ()+0x18>)
     5f8:	605a      	str	r2, [r3, #4]
     5fa:	6859      	ldr	r1, [r3, #4]
     5fc:	420a      	tst	r2, r1
     5fe:	d002      	beq.n	606 <copy_bits_equ()+0x12>
     600:	3a3e      	subs	r2, #62	; 0x3e
     602:	605a      	str	r2, [r3, #4]
     604:	4770      	bx	lr
     606:	2204      	movs	r2, #4
     608:	605a      	str	r2, [r3, #4]
     60a:	e7fb      	b.n	604 <copy_bits_equ()+0x10>
     60c:	10001dc0 	.word	0x10001dc0

00000610 <copy_bits_neq()>:
     610:	2240      	movs	r2, #64	; 0x40
     612:	4b05      	ldr	r3, [pc, #20]	; (628 <copy_bits_neq()+0x18>)
     614:	605a      	str	r2, [r3, #4]
     616:	6859      	ldr	r1, [r3, #4]
     618:	420a      	tst	r2, r1
     61a:	d102      	bne.n	622 <copy_bits_neq()+0x12>
     61c:	3a3e      	subs	r2, #62	; 0x3e
     61e:	605a      	str	r2, [r3, #4]
     620:	4770      	bx	lr
     622:	2204      	movs	r2, #4
     624:	605a      	str	r2, [r3, #4]
     626:	e7fb      	b.n	620 <copy_bits_neq()+0x10>
     628:	10001dc0 	.word	0x10001dc0

0000062c <copy_mskd_equ()>:
     62c:	22b0      	movs	r2, #176	; 0xb0
     62e:	21f8      	movs	r1, #248	; 0xf8
     630:	4b07      	ldr	r3, [pc, #28]	; (650 <copy_mskd_equ()+0x24>)
     632:	0552      	lsls	r2, r2, #21
     634:	605a      	str	r2, [r3, #4]
     636:	685b      	ldr	r3, [r3, #4]
     638:	0589      	lsls	r1, r1, #22
     63a:	400b      	ands	r3, r1
     63c:	4293      	cmp	r3, r2
     63e:	d003      	beq.n	648 <copy_mskd_equ()+0x1c>
     640:	2204      	movs	r2, #4
     642:	4b04      	ldr	r3, [pc, #16]	; (654 <copy_mskd_equ()+0x28>)
     644:	605a      	str	r2, [r3, #4]
     646:	4770      	bx	lr
     648:	2202      	movs	r2, #2
     64a:	4b02      	ldr	r3, [pc, #8]	; (654 <copy_mskd_equ()+0x28>)
     64c:	605a      	str	r2, [r3, #4]
     64e:	e7fa      	b.n	646 <copy_mskd_equ()+0x1a>
     650:	10001d20 	.word	0x10001d20
     654:	10001dc0 	.word	0x10001dc0

00000658 <copy_mskd_neq()>:
     658:	22d0      	movs	r2, #208	; 0xd0
     65a:	21f8      	movs	r1, #248	; 0xf8
     65c:	4b07      	ldr	r3, [pc, #28]	; (67c <copy_mskd_neq()+0x24>)
     65e:	0552      	lsls	r2, r2, #21
     660:	605a      	str	r2, [r3, #4]
     662:	685b      	ldr	r3, [r3, #4]
     664:	0589      	lsls	r1, r1, #22
     666:	400b      	ands	r3, r1
     668:	4293      	cmp	r3, r2
     66a:	d003      	beq.n	674 <copy_mskd_neq()+0x1c>
     66c:	2202      	movs	r2, #2
     66e:	4b04      	ldr	r3, [pc, #16]	; (680 <copy_mskd_neq()+0x28>)
     670:	605a      	str	r2, [r3, #4]
     672:	4770      	bx	lr
     674:	2204      	movs	r2, #4
     676:	4b02      	ldr	r3, [pc, #8]	; (680 <copy_mskd_neq()+0x28>)
     678:	605a      	str	r2, [r3, #4]
     67a:	e7fa      	b.n	672 <copy_mskd_neq()+0x1a>
     67c:	10001d20 	.word	0x10001d20
     680:	10001dc0 	.word	0x10001dc0

00000684 <copy_mskd_lss()>:
     684:	22d8      	movs	r2, #216	; 0xd8
     686:	4b09      	ldr	r3, [pc, #36]	; (6ac <copy_mskd_lss()+0x28>)
     688:	0592      	lsls	r2, r2, #22
     68a:	605a      	str	r2, [r3, #4]
     68c:	22f8      	movs	r2, #248	; 0xf8
     68e:	685b      	ldr	r3, [r3, #4]
     690:	0592      	lsls	r2, r2, #22
     692:	4013      	ands	r3, r2
     694:	4a06      	ldr	r2, [pc, #24]	; (6b0 <copy_mskd_lss()+0x2c>)
     696:	4293      	cmp	r3, r2
     698:	d803      	bhi.n	6a2 <copy_mskd_lss()+0x1e>
     69a:	2202      	movs	r2, #2
     69c:	4b05      	ldr	r3, [pc, #20]	; (6b4 <copy_mskd_lss()+0x30>)
     69e:	605a      	str	r2, [r3, #4]
     6a0:	4770      	bx	lr
     6a2:	2204      	movs	r2, #4
     6a4:	4b03      	ldr	r3, [pc, #12]	; (6b4 <copy_mskd_lss()+0x30>)
     6a6:	605a      	str	r2, [r3, #4]
     6a8:	e7fa      	b.n	6a0 <copy_mskd_lss()+0x1c>
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	10001d20 	.word	0x10001d20
     6b0:	37ffffff 	.word	0x37ffffff
     6b4:	10001dc0 	.word	0x10001dc0

000006b8 <copy_mskd_leq()>:
     6b8:	22b8      	movs	r2, #184	; 0xb8
     6ba:	21f8      	movs	r1, #248	; 0xf8
     6bc:	4b07      	ldr	r3, [pc, #28]	; (6dc <copy_mskd_leq()+0x24>)
     6be:	0592      	lsls	r2, r2, #22
     6c0:	605a      	str	r2, [r3, #4]
     6c2:	685b      	ldr	r3, [r3, #4]
     6c4:	0589      	lsls	r1, r1, #22
     6c6:	400b      	ands	r3, r1
     6c8:	4293      	cmp	r3, r2
     6ca:	d803      	bhi.n	6d4 <copy_mskd_leq()+0x1c>
     6cc:	2202      	movs	r2, #2
     6ce:	4b04      	ldr	r3, [pc, #16]	; (6e0 <copy_mskd_leq()+0x28>)
     6d0:	605a      	str	r2, [r3, #4]
     6d2:	4770      	bx	lr
     6d4:	2204      	movs	r2, #4
     6d6:	4b02      	ldr	r3, [pc, #8]	; (6e0 <copy_mskd_leq()+0x28>)
     6d8:	605a      	str	r2, [r3, #4]
     6da:	e7fa      	b.n	6d2 <copy_mskd_leq()+0x1a>
     6dc:	10001d20 	.word	0x10001d20
     6e0:	10001dc0 	.word	0x10001dc0

000006e4 <copy_mskd_gtr()>:
     6e4:	2298      	movs	r2, #152	; 0x98
     6e6:	4b09      	ldr	r3, [pc, #36]	; (70c <copy_mskd_gtr()+0x28>)
     6e8:	0592      	lsls	r2, r2, #22
     6ea:	605a      	str	r2, [r3, #4]
     6ec:	22f8      	movs	r2, #248	; 0xf8
     6ee:	685b      	ldr	r3, [r3, #4]
     6f0:	0592      	lsls	r2, r2, #22
     6f2:	4013      	ands	r3, r2
     6f4:	2290      	movs	r2, #144	; 0x90
     6f6:	0592      	lsls	r2, r2, #22
     6f8:	4293      	cmp	r3, r2
     6fa:	d903      	bls.n	704 <copy_mskd_gtr()+0x20>
     6fc:	2202      	movs	r2, #2
     6fe:	4b04      	ldr	r3, [pc, #16]	; (710 <copy_mskd_gtr()+0x2c>)
     700:	605a      	str	r2, [r3, #4]
     702:	4770      	bx	lr
     704:	2204      	movs	r2, #4
     706:	4b02      	ldr	r3, [pc, #8]	; (710 <copy_mskd_gtr()+0x2c>)
     708:	605a      	str	r2, [r3, #4]
     70a:	e7fa      	b.n	702 <copy_mskd_gtr()+0x1e>
     70c:	10001d20 	.word	0x10001d20
     710:	10001dc0 	.word	0x10001dc0

00000714 <copy_mskd_geq()>:
     714:	2288      	movs	r2, #136	; 0x88
     716:	4b09      	ldr	r3, [pc, #36]	; (73c <copy_mskd_geq()+0x28>)
     718:	0592      	lsls	r2, r2, #22
     71a:	605a      	str	r2, [r3, #4]
     71c:	22f8      	movs	r2, #248	; 0xf8
     71e:	685b      	ldr	r3, [r3, #4]
     720:	0592      	lsls	r2, r2, #22
     722:	4013      	ands	r3, r2
     724:	4a06      	ldr	r2, [pc, #24]	; (740 <copy_mskd_geq()+0x2c>)
     726:	4293      	cmp	r3, r2
     728:	d803      	bhi.n	732 <copy_mskd_geq()+0x1e>
     72a:	2204      	movs	r2, #4
     72c:	4b05      	ldr	r3, [pc, #20]	; (744 <copy_mskd_geq()+0x30>)
     72e:	605a      	str	r2, [r3, #4]
     730:	4770      	bx	lr
     732:	2202      	movs	r2, #2
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <copy_mskd_geq()+0x30>)
     736:	605a      	str	r2, [r3, #4]
     738:	e7fa      	b.n	730 <copy_mskd_geq()+0x1c>
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	10001d20 	.word	0x10001d20
     740:	21ffffff 	.word	0x21ffffff
     744:	10001dc0 	.word	0x10001dc0

00000748 <copy_shifted()>:
     748:	22b0      	movs	r2, #176	; 0xb0
     74a:	4b08      	ldr	r3, [pc, #32]	; (76c <copy_shifted()+0x24>)
     74c:	0552      	lsls	r2, r2, #21
     74e:	605a      	str	r2, [r3, #4]
     750:	685b      	ldr	r3, [r3, #4]
     752:	009b      	lsls	r3, r3, #2
     754:	0edb      	lsrs	r3, r3, #27
     756:	2b0b      	cmp	r3, #11
     758:	d003      	beq.n	762 <copy_shifted()+0x1a>
     75a:	2204      	movs	r2, #4
     75c:	4b04      	ldr	r3, [pc, #16]	; (770 <copy_shifted()+0x28>)
     75e:	605a      	str	r2, [r3, #4]
     760:	4770      	bx	lr
     762:	2202      	movs	r2, #2
     764:	4b02      	ldr	r3, [pc, #8]	; (770 <copy_shifted()+0x28>)
     766:	605a      	str	r2, [r3, #4]
     768:	e7fa      	b.n	760 <copy_shifted()+0x18>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	10001d20 	.word	0x10001d20
     770:	10001dc0 	.word	0x10001dc0

00000774 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>:
     774:	2266      	movs	r2, #102	; 0x66
     776:	4b01      	ldr	r3, [pc, #4]	; (77c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]+0x8>)
     778:	62da      	str	r2, [r3, #44]	; 0x2c
     77a:	4770      	bx	lr
     77c:	10001c00 	.word	0x10001c00

00000780 <call_pos_ref()>:
     780:	b510      	push	{r4, lr}
     782:	2405      	movs	r4, #5
     784:	b081      	sub	sp, #4
     786:	4668      	mov	r0, sp
     788:	9400      	str	r4, [sp, #0]
     78a:	f7ff fff3 	bl	774 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     78e:	4668      	mov	r0, sp
     790:	9400      	str	r4, [sp, #0]
     792:	f7ff ffef 	bl	774 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     796:	b001      	add	sp, #4
     798:	bd10      	pop	{r4, pc}
     79a:	46c0      	nop			; (mov r8, r8)

0000079c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>:
     79c:	2277      	movs	r2, #119	; 0x77
     79e:	4b01      	ldr	r3, [pc, #4]	; (7a4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]+0x8>)
     7a0:	62da      	str	r2, [r3, #44]	; 0x2c
     7a2:	4770      	bx	lr
     7a4:	10001c00 	.word	0x10001c00

000007a8 <call_pos_ref_global()>:
     7a8:	2306      	movs	r3, #6
     7aa:	b500      	push	{lr}
     7ac:	b081      	sub	sp, #4
     7ae:	4668      	mov	r0, sp
     7b0:	9300      	str	r3, [sp, #0]
     7b2:	f7ff fff3 	bl	79c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>
     7b6:	b001      	add	sp, #4
     7b8:	bd00      	pop	{pc}
     7ba:	46c0      	nop			; (mov r8, r8)

000007bc <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     7bc:	2233      	movs	r2, #51	; 0x33
     7be:	4b01      	ldr	r3, [pc, #4]	; (7c4 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x8>)
     7c0:	62da      	str	r2, [r3, #44]	; 0x2c
     7c2:	4770      	bx	lr
     7c4:	10001c00 	.word	0x10001c00

000007c8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     7c8:	2244      	movs	r2, #68	; 0x44
     7ca:	4b01      	ldr	r3, [pc, #4]	; (7d0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
     7cc:	62da      	str	r2, [r3, #44]	; 0x2c
     7ce:	4770      	bx	lr
     7d0:	10001c00 	.word	0x10001c00

000007d4 <call_pos_val()>:
     7d4:	b500      	push	{lr}
     7d6:	2005      	movs	r0, #5
     7d8:	f7ff fff0 	bl	7bc <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     7dc:	2006      	movs	r0, #6
     7de:	f7ff fff3 	bl	7c8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     7e2:	bd00      	pop	{pc}

000007e4 <call_pos_val_global()>:
     7e4:	b500      	push	{lr}
     7e6:	2006      	movs	r0, #6
     7e8:	f7ff ffee 	bl	7c8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     7ec:	bd00      	pop	{pc}
     7ee:	46c0      	nop			; (mov r8, r8)

000007f0 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>:
     7f0:	2106      	movs	r1, #6
     7f2:	4a03      	ldr	r2, [pc, #12]	; (800 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]+0x10>)
     7f4:	6853      	ldr	r3, [r2, #4]
     7f6:	438b      	bics	r3, r1
     7f8:	3904      	subs	r1, #4
     7fa:	430b      	orrs	r3, r1
     7fc:	6053      	str	r3, [r2, #4]
     7fe:	4770      	bx	lr
     800:	10001dc0 	.word	0x10001dc0

00000804 <call_mskd_val_const()>:
     804:	b500      	push	{lr}
     806:	2006      	movs	r0, #6
     808:	2102      	movs	r1, #2
     80a:	f7ff fff1 	bl	7f0 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     80e:	bd00      	pop	{pc}

00000810 <call_mskd_val_var()>:
     810:	b500      	push	{lr}
     812:	2006      	movs	r0, #6
     814:	2102      	movs	r1, #2
     816:	f7ff ffeb 	bl	7f0 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     81a:	bd00      	pop	{pc}

0000081c <call_mskd_val_global()>:
     81c:	b500      	push	{lr}
     81e:	2006      	movs	r0, #6
     820:	2102      	movs	r1, #2
     822:	f7ff ffe5 	bl	7f0 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     826:	bd00      	pop	{pc}

00000828 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>:
     828:	2140      	movs	r1, #64	; 0x40
     82a:	4a02      	ldr	r2, [pc, #8]	; (834 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]+0xc>)
     82c:	6853      	ldr	r3, [r2, #4]
     82e:	430b      	orrs	r3, r1
     830:	6053      	str	r3, [r2, #4]
     832:	4770      	bx	lr
     834:	10001dc0 	.word	0x10001dc0

00000838 <call_bits_val_const()>:
     838:	b500      	push	{lr}
     83a:	2040      	movs	r0, #64	; 0x40
     83c:	f7ff fff4 	bl	828 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>
     840:	bd00      	pop	{pc}
     842:	46c0      	nop			; (mov r8, r8)

00000844 <call_bits_val_var()>:
     844:	b500      	push	{lr}
     846:	2040      	movs	r0, #64	; 0x40
     848:	f7ff ffee 	bl	828 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>
     84c:	bd00      	pop	{pc}
     84e:	46c0      	nop			; (mov r8, r8)

00000850 <call_bits_val_global()>:
     850:	b500      	push	{lr}
     852:	2040      	movs	r0, #64	; 0x40
     854:	f7ff ffe8 	bl	828 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>
     858:	bd00      	pop	{pc}
     85a:	46c0      	nop			; (mov r8, r8)

0000085c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     85c:	4b02      	ldr	r3, [pc, #8]	; (868 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     85e:	685a      	ldr	r2, [r3, #4]
     860:	4310      	orrs	r0, r2
     862:	6058      	str	r0, [r3, #4]
     864:	4770      	bx	lr
     866:	46c0      	nop			; (mov r8, r8)
     868:	10001dc0 	.word	0x10001dc0

0000086c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     86c:	4a02      	ldr	r2, [pc, #8]	; (878 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     86e:	6801      	ldr	r1, [r0, #0]
     870:	6853      	ldr	r3, [r2, #4]
     872:	430b      	orrs	r3, r1
     874:	6053      	str	r3, [r2, #4]
     876:	4770      	bx	lr
     878:	10001dc0 	.word	0x10001dc0

0000087c <call_bits_ref_var()>:
     87c:	2301      	movs	r3, #1
     87e:	b500      	push	{lr}
     880:	b081      	sub	sp, #4
     882:	4668      	mov	r0, sp
     884:	9300      	str	r3, [sp, #0]
     886:	f7ff fffe 	bl	86c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     88a:	b001      	add	sp, #4
     88c:	bd00      	pop	{pc}
     88e:	46c0      	nop			; (mov r8, r8)

00000890 <call_bits_ref_const()>:
     890:	2301      	movs	r3, #1
     892:	b500      	push	{lr}
     894:	b081      	sub	sp, #4
     896:	4668      	mov	r0, sp
     898:	9300      	str	r3, [sp, #0]
     89a:	f7ff fffe 	bl	86c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     89e:	b001      	add	sp, #4
     8a0:	bd00      	pop	{pc}
     8a2:	46c0      	nop			; (mov r8, r8)

000008a4 <call_bits_ref_global()>:
     8a4:	2340      	movs	r3, #64	; 0x40
     8a6:	b500      	push	{lr}
     8a8:	b081      	sub	sp, #4
     8aa:	4668      	mov	r0, sp
     8ac:	9300      	str	r3, [sp, #0]
     8ae:	f7ff fffe 	bl	86c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8b2:	b001      	add	sp, #4
     8b4:	bd00      	pop	{pc}
     8b6:	46c0      	nop			; (mov r8, r8)

000008b8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8b8:	4a02      	ldr	r2, [pc, #8]	; (8c4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     8ba:	6853      	ldr	r3, [r2, #4]
     8bc:	4383      	bics	r3, r0
     8be:	430b      	orrs	r3, r1
     8c0:	6053      	str	r3, [r2, #4]
     8c2:	4770      	bx	lr
     8c4:	10001dc0 	.word	0x10001dc0

000008c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     8c8:	4a03      	ldr	r2, [pc, #12]	; (8d8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x10>)
     8ca:	6801      	ldr	r1, [r0, #0]
     8cc:	6853      	ldr	r3, [r2, #4]
     8ce:	438b      	bics	r3, r1
     8d0:	6841      	ldr	r1, [r0, #4]
     8d2:	430b      	orrs	r3, r1
     8d4:	6053      	str	r3, [r2, #4]
     8d6:	4770      	bx	lr
     8d8:	10001dc0 	.word	0x10001dc0

000008dc <call_mskd_ref_var()>:
     8dc:	b500      	push	{lr}
     8de:	4b05      	ldr	r3, [pc, #20]	; (8f4 <call_mskd_ref_var()+0x18>)
     8e0:	b082      	sub	sp, #8
     8e2:	4668      	mov	r0, sp
     8e4:	681a      	ldr	r2, [r3, #0]
     8e6:	685b      	ldr	r3, [r3, #4]
     8e8:	9200      	str	r2, [sp, #0]
     8ea:	9301      	str	r3, [sp, #4]
     8ec:	f7ff fffe 	bl	8c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     8f0:	b002      	add	sp, #8
     8f2:	bd00      	pop	{pc}
     8f4:	00000000 	.word	0x00000000

000008f8 <call_mskd_ref_const()>:
     8f8:	2306      	movs	r3, #6
     8fa:	b500      	push	{lr}
     8fc:	b082      	sub	sp, #8
     8fe:	9300      	str	r3, [sp, #0]
     900:	4668      	mov	r0, sp
     902:	3b02      	subs	r3, #2
     904:	9301      	str	r3, [sp, #4]
     906:	f7ff fffe 	bl	8c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     90a:	b002      	add	sp, #8
     90c:	bd00      	pop	{pc}
     90e:	46c0      	nop			; (mov r8, r8)

00000910 <call_mskd_ref_global()>:
     910:	2306      	movs	r3, #6
     912:	b500      	push	{lr}
     914:	b082      	sub	sp, #8
     916:	9300      	str	r3, [sp, #0]
     918:	4668      	mov	r0, sp
     91a:	3b04      	subs	r3, #4
     91c:	9301      	str	r3, [sp, #4]
     91e:	f7ff fffe 	bl	8c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     922:	b002      	add	sp, #8
     924:	bd00      	pop	{pc}
     926:	46c0      	nop			; (mov r8, r8)

00000928 <periph_bits(mcu::Serial*)>:
     928:	2240      	movs	r2, #64	; 0x40
     92a:	6843      	ldr	r3, [r0, #4]
     92c:	4313      	orrs	r3, r2
     92e:	6043      	str	r3, [r0, #4]
     930:	4770      	bx	lr
     932:	46c0      	nop			; (mov r8, r8)

00000934 <call_periph_bits()>:
     934:	b500      	push	{lr}
     936:	4802      	ldr	r0, [pc, #8]	; (940 <call_periph_bits()+0xc>)
     938:	f7ff fffe 	bl	928 <periph_bits(mcu::Serial*)>
     93c:	bd00      	pop	{pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	10001dc0 	.word	0x10001dc0

00000944 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     944:	6843      	ldr	r3, [r0, #4]
     946:	4319      	orrs	r1, r3
     948:	6041      	str	r1, [r0, #4]
     94a:	4770      	bx	lr

0000094c <call_periph_bits_val()>:
     94c:	b500      	push	{lr}
     94e:	2140      	movs	r1, #64	; 0x40
     950:	4801      	ldr	r0, [pc, #4]	; (958 <call_periph_bits_val()+0xc>)
     952:	f7ff fffe 	bl	944 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     956:	bd00      	pop	{pc}
     958:	10001dc0 	.word	0x10001dc0

0000095c <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     95c:	6803      	ldr	r3, [r0, #0]
     95e:	4319      	orrs	r1, r3
     960:	6001      	str	r1, [r0, #0]
     962:	4770      	bx	lr

00000964 <call_reg_bits_val()>:
     964:	b500      	push	{lr}
     966:	2140      	movs	r1, #64	; 0x40
     968:	4801      	ldr	r0, [pc, #4]	; (970 <call_reg_bits_val()+0xc>)
     96a:	f7ff fffe 	bl	95c <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     96e:	bd00      	pop	{pc}
     970:	10001dc4 	.word	0x10001dc4

00000974 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     974:	6843      	ldr	r3, [r0, #4]
     976:	680a      	ldr	r2, [r1, #0]
     978:	4313      	orrs	r3, r2
     97a:	6043      	str	r3, [r0, #4]
     97c:	4770      	bx	lr
     97e:	46c0      	nop			; (mov r8, r8)

00000980 <call_periph_bits_ref()>:
     980:	2340      	movs	r3, #64	; 0x40
     982:	b500      	push	{lr}
     984:	b081      	sub	sp, #4
     986:	4669      	mov	r1, sp
     988:	4802      	ldr	r0, [pc, #8]	; (994 <call_periph_bits_ref()+0x14>)
     98a:	9300      	str	r3, [sp, #0]
     98c:	f7ff fffe 	bl	974 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     990:	b001      	add	sp, #4
     992:	bd00      	pop	{pc}
     994:	10001dc0 	.word	0x10001dc0

00000998 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     998:	6803      	ldr	r3, [r0, #0]
     99a:	680a      	ldr	r2, [r1, #0]
     99c:	4313      	orrs	r3, r2
     99e:	6003      	str	r3, [r0, #0]
     9a0:	4770      	bx	lr
     9a2:	46c0      	nop			; (mov r8, r8)

000009a4 <call_reg_bits_ref()>:
     9a4:	2340      	movs	r3, #64	; 0x40
     9a6:	b500      	push	{lr}
     9a8:	b081      	sub	sp, #4
     9aa:	4669      	mov	r1, sp
     9ac:	4802      	ldr	r0, [pc, #8]	; (9b8 <call_reg_bits_ref()+0x14>)
     9ae:	9300      	str	r3, [sp, #0]
     9b0:	f7ff fffe 	bl	998 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     9b4:	b001      	add	sp, #4
     9b6:	bd00      	pop	{pc}
     9b8:	10001dc4 	.word	0x10001dc4

000009bc <periph_mskd(mcu::Serial*)>:
     9bc:	2206      	movs	r2, #6
     9be:	6843      	ldr	r3, [r0, #4]
     9c0:	4393      	bics	r3, r2
     9c2:	3a04      	subs	r2, #4
     9c4:	4313      	orrs	r3, r2
     9c6:	6043      	str	r3, [r0, #4]
     9c8:	4770      	bx	lr
     9ca:	46c0      	nop			; (mov r8, r8)

000009cc <call_periph_mskd()>:
     9cc:	b500      	push	{lr}
     9ce:	4802      	ldr	r0, [pc, #8]	; (9d8 <call_periph_mskd()+0xc>)
     9d0:	f7ff fffe 	bl	9bc <periph_mskd(mcu::Serial*)>
     9d4:	bd00      	pop	{pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	10001dc0 	.word	0x10001dc0

000009dc <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     9dc:	6843      	ldr	r3, [r0, #4]
     9de:	438b      	bics	r3, r1
     9e0:	4313      	orrs	r3, r2
     9e2:	6043      	str	r3, [r0, #4]
     9e4:	4770      	bx	lr
     9e6:	46c0      	nop			; (mov r8, r8)

000009e8 <call_periph_mskd_val()>:
     9e8:	b500      	push	{lr}
     9ea:	2106      	movs	r1, #6
     9ec:	2202      	movs	r2, #2
     9ee:	4802      	ldr	r0, [pc, #8]	; (9f8 <call_periph_mskd_val()+0x10>)
     9f0:	f7ff fffe 	bl	9dc <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     9f4:	bd00      	pop	{pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	10001dc0 	.word	0x10001dc0

000009fc <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     9fc:	6803      	ldr	r3, [r0, #0]
     9fe:	438b      	bics	r3, r1
     a00:	4313      	orrs	r3, r2
     a02:	6003      	str	r3, [r0, #0]
     a04:	4770      	bx	lr
     a06:	46c0      	nop			; (mov r8, r8)

00000a08 <call_reg_mskd_val()>:
     a08:	b500      	push	{lr}
     a0a:	2106      	movs	r1, #6
     a0c:	2202      	movs	r2, #2
     a0e:	4802      	ldr	r0, [pc, #8]	; (a18 <call_reg_mskd_val()+0x10>)
     a10:	f7ff fffe 	bl	9fc <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a14:	bd00      	pop	{pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	10001dc4 	.word	0x10001dc4

00000a1c <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a1c:	6843      	ldr	r3, [r0, #4]
     a1e:	438b      	bics	r3, r1
     a20:	4313      	orrs	r3, r2
     a22:	6043      	str	r3, [r0, #4]
     a24:	4770      	bx	lr
     a26:	46c0      	nop			; (mov r8, r8)

00000a28 <call_periph_mskd_ref()>:
     a28:	b500      	push	{lr}
     a2a:	2106      	movs	r1, #6
     a2c:	2202      	movs	r2, #2
     a2e:	4802      	ldr	r0, [pc, #8]	; (a38 <call_periph_mskd_ref()+0x10>)
     a30:	f7ff fffe 	bl	a1c <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a34:	bd00      	pop	{pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	10001dc0 	.word	0x10001dc0

00000a3c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a3c:	6803      	ldr	r3, [r0, #0]
     a3e:	438b      	bics	r3, r1
     a40:	4313      	orrs	r3, r2
     a42:	6003      	str	r3, [r0, #0]
     a44:	4770      	bx	lr
     a46:	46c0      	nop			; (mov r8, r8)

00000a48 <call_reg_mskd_ref()>:
     a48:	b500      	push	{lr}
     a4a:	2106      	movs	r1, #6
     a4c:	2202      	movs	r2, #2
     a4e:	4802      	ldr	r0, [pc, #8]	; (a58 <call_reg_mskd_ref()+0x10>)
     a50:	f7ff fffe 	bl	a3c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a54:	bd00      	pop	{pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	10001dc4 	.word	0x10001dc4

00000a5c <return_bits()>:
     a5c:	2020      	movs	r0, #32
     a5e:	4770      	bx	lr

00000a60 <call_return_bits()>:
     a60:	b500      	push	{lr}
     a62:	f7ff fffe 	bl	a5c <return_bits()>
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <call_return_bits()+0x1c>)
     a68:	2820      	cmp	r0, #32
     a6a:	d003      	beq.n	a74 <call_return_bits()+0x14>
     a6c:	22c0      	movs	r2, #192	; 0xc0
     a6e:	04d2      	lsls	r2, r2, #19
     a70:	605a      	str	r2, [r3, #4]
     a72:	bd00      	pop	{pc}
     a74:	22a8      	movs	r2, #168	; 0xa8
     a76:	0592      	lsls	r2, r2, #22
     a78:	605a      	str	r2, [r3, #4]
     a7a:	e7fa      	b.n	a72 <call_return_bits()+0x12>
     a7c:	10001d20 	.word	0x10001d20

00000a80 <return_mskd()>:
     a80:	2318      	movs	r3, #24
     a82:	6003      	str	r3, [r0, #0]
     a84:	3b10      	subs	r3, #16
     a86:	6043      	str	r3, [r0, #4]
     a88:	4770      	bx	lr
     a8a:	46c0      	nop			; (mov r8, r8)

00000a8c <call_return_mskd()>:
     a8c:	b500      	push	{lr}
     a8e:	b082      	sub	sp, #8
     a90:	4668      	mov	r0, sp
     a92:	f7ff fffe 	bl	a80 <return_mskd()>
     a96:	9a00      	ldr	r2, [sp, #0]
     a98:	9b01      	ldr	r3, [sp, #4]
     a9a:	2a18      	cmp	r2, #24
     a9c:	d005      	beq.n	aaa <call_return_mskd()+0x1e>
     a9e:	2298      	movs	r2, #152	; 0x98
     aa0:	4b05      	ldr	r3, [pc, #20]	; (ab8 <call_return_mskd()+0x2c>)
     aa2:	0592      	lsls	r2, r2, #22
     aa4:	605a      	str	r2, [r3, #4]
     aa6:	b002      	add	sp, #8
     aa8:	bd00      	pop	{pc}
     aaa:	2b08      	cmp	r3, #8
     aac:	d1f7      	bne.n	a9e <call_return_mskd()+0x12>
     aae:	2288      	movs	r2, #136	; 0x88
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <call_return_mskd()+0x2c>)
     ab2:	0592      	lsls	r2, r2, #22
     ab4:	605a      	str	r2, [r3, #4]
     ab6:	e7f6      	b.n	aa6 <call_return_mskd()+0x1a>
     ab8:	10001d20 	.word	0x10001d20

00000abc <return_reg()>:
     abc:	2240      	movs	r2, #64	; 0x40
     abe:	4b02      	ldr	r3, [pc, #8]	; (ac8 <return_reg()+0xc>)
     ac0:	4802      	ldr	r0, [pc, #8]	; (acc <return_reg()+0x10>)
     ac2:	605a      	str	r2, [r3, #4]
     ac4:	4770      	bx	lr
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	10001dc0 	.word	0x10001dc0
     acc:	10001dc4 	.word	0x10001dc4

00000ad0 <call_return_reg()>:
     ad0:	b500      	push	{lr}
     ad2:	f7ff fffe 	bl	abc <return_reg()>
     ad6:	6803      	ldr	r3, [r0, #0]
     ad8:	065b      	lsls	r3, r3, #25
     ada:	d504      	bpl.n	ae6 <call_return_reg()+0x16>
     adc:	22f0      	movs	r2, #240	; 0xf0
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <call_return_reg()+0x20>)
     ae0:	0552      	lsls	r2, r2, #21
     ae2:	605a      	str	r2, [r3, #4]
     ae4:	bd00      	pop	{pc}
     ae6:	22b8      	movs	r2, #184	; 0xb8
     ae8:	4b01      	ldr	r3, [pc, #4]	; (af0 <call_return_reg()+0x20>)
     aea:	0592      	lsls	r2, r2, #22
     aec:	605a      	str	r2, [r3, #4]
     aee:	e7f9      	b.n	ae4 <call_return_reg()+0x14>
     af0:	10001d20 	.word	0x10001d20

00000af4 <return_periph()>:
     af4:	2340      	movs	r3, #64	; 0x40
     af6:	4801      	ldr	r0, [pc, #4]	; (afc <return_periph()+0x8>)
     af8:	6043      	str	r3, [r0, #4]
     afa:	4770      	bx	lr
     afc:	10001dc0 	.word	0x10001dc0

00000b00 <call_return_periph()>:
     b00:	b500      	push	{lr}
     b02:	f7ff fffe 	bl	af4 <return_periph()>
     b06:	6843      	ldr	r3, [r0, #4]
     b08:	065b      	lsls	r3, r3, #25
     b0a:	d504      	bpl.n	b16 <call_return_periph()+0x16>
     b0c:	2298      	movs	r2, #152	; 0x98
     b0e:	4b04      	ldr	r3, [pc, #16]	; (b20 <call_return_periph()+0x20>)
     b10:	0592      	lsls	r2, r2, #22
     b12:	605a      	str	r2, [r3, #4]
     b14:	bd00      	pop	{pc}
     b16:	22a8      	movs	r2, #168	; 0xa8
     b18:	4b01      	ldr	r3, [pc, #4]	; (b20 <call_return_periph()+0x20>)
     b1a:	0592      	lsls	r2, r2, #22
     b1c:	605a      	str	r2, [r3, #4]
     b1e:	e7f9      	b.n	b14 <call_return_periph()+0x14>
     b20:	10001d20 	.word	0x10001d20

00000b24 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     b26:	2805      	cmp	r0, #5
     b28:	d007      	beq.n	b3a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x16>
     b2a:	2806      	cmp	r0, #6
     b2c:	d002      	beq.n	b34 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x10>
     b2e:	2255      	movs	r2, #85	; 0x55
     b30:	62da      	str	r2, [r3, #44]	; 0x2c
     b32:	4770      	bx	lr
     b34:	2244      	movs	r2, #68	; 0x44
     b36:	62da      	str	r2, [r3, #44]	; 0x2c
     b38:	e7fb      	b.n	b32 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
     b3a:	2233      	movs	r2, #51	; 0x33
     b3c:	62da      	str	r2, [r3, #44]	; 0x2c
     b3e:	e7f8      	b.n	b32 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
     b40:	10001c00 	.word	0x10001c00

00000b44 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     b44:	6803      	ldr	r3, [r0, #0]
     b46:	2b05      	cmp	r3, #5
     b48:	d009      	beq.n	b5e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1a>
     b4a:	2b06      	cmp	r3, #6
     b4c:	d003      	beq.n	b56 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x12>
     b4e:	2288      	movs	r2, #136	; 0x88
     b50:	4b05      	ldr	r3, [pc, #20]	; (b68 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     b52:	62da      	str	r2, [r3, #44]	; 0x2c
     b54:	4770      	bx	lr
     b56:	2277      	movs	r2, #119	; 0x77
     b58:	4b03      	ldr	r3, [pc, #12]	; (b68 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     b5a:	62da      	str	r2, [r3, #44]	; 0x2c
     b5c:	e7fa      	b.n	b54 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
     b5e:	2266      	movs	r2, #102	; 0x66
     b60:	4b01      	ldr	r3, [pc, #4]	; (b68 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     b62:	62da      	str	r2, [r3, #44]	; 0x2c
     b64:	e7f6      	b.n	b54 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	10001c00 	.word	0x10001c00

00000b6c <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     b6c:	4a02      	ldr	r2, [pc, #8]	; (b78 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     b6e:	6853      	ldr	r3, [r2, #4]
     b70:	4383      	bics	r3, r0
     b72:	430b      	orrs	r3, r1
     b74:	6053      	str	r3, [r2, #4]
     b76:	4770      	bx	lr
     b78:	10001dc0 	.word	0x10001dc0

00000b7c <call_range_val(unsigned int)>:
     b7c:	0001      	movs	r1, r0
     b7e:	20f8      	movs	r0, #248	; 0xf8
     b80:	b500      	push	{lr}
     b82:	0309      	lsls	r1, r1, #12
     b84:	0240      	lsls	r0, r0, #9
     b86:	f7ff fffe 	bl	b6c <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     b8a:	bd00      	pop	{pc}

00000b8c <call_range_val_port()>:
     b8c:	b500      	push	{lr}
     b8e:	201f      	movs	r0, #31
     b90:	f7ff fffe 	bl	b7c <call_range_val(unsigned int)>
     b94:	bd00      	pop	{pc}
     b96:	46c0      	nop			; (mov r8, r8)

00000b98 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     b98:	4a02      	ldr	r2, [pc, #8]	; (ba4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     b9a:	6853      	ldr	r3, [r2, #4]
     b9c:	4383      	bics	r3, r0
     b9e:	430b      	orrs	r3, r1
     ba0:	6053      	str	r3, [r2, #4]
     ba2:	4770      	bx	lr
     ba4:	10001dc0 	.word	0x10001dc0

00000ba8 <call_range_ref(unsigned int)>:
     ba8:	0001      	movs	r1, r0
     baa:	20f8      	movs	r0, #248	; 0xf8
     bac:	b500      	push	{lr}
     bae:	0309      	lsls	r1, r1, #12
     bb0:	0240      	lsls	r0, r0, #9
     bb2:	f7ff fffe 	bl	b98 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     bb6:	bd00      	pop	{pc}

00000bb8 <call_range_ref_port()>:
     bb8:	b500      	push	{lr}
     bba:	200c      	movs	r0, #12
     bbc:	f7ff fffe 	bl	ba8 <call_range_ref(unsigned int)>
     bc0:	bd00      	pop	{pc}
     bc2:	46c0      	nop			; (mov r8, r8)

00000bc4 <check_array_range_pass(unsigned int)>:
     bc4:	4b04      	ldr	r3, [pc, #16]	; (bd8 <check_array_range_pass(unsigned int)+0x14>)
     bc6:	2816      	cmp	r0, #22
     bc8:	d802      	bhi.n	bd0 <check_array_range_pass(unsigned int)+0xc>
     bca:	227f      	movs	r2, #127	; 0x7f
     bcc:	62da      	str	r2, [r3, #44]	; 0x2c
     bce:	4770      	bx	lr
     bd0:	2283      	movs	r2, #131	; 0x83
     bd2:	62da      	str	r2, [r3, #44]	; 0x2c
     bd4:	e7fb      	b.n	bce <check_array_range_pass(unsigned int)+0xa>
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	10001c00 	.word	0x10001c00

00000bdc <check_array_range_fail(unsigned int)>:
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <check_array_range_fail(unsigned int)+0x14>)
     bde:	2816      	cmp	r0, #22
     be0:	d802      	bhi.n	be8 <check_array_range_fail(unsigned int)+0xc>
     be2:	2295      	movs	r2, #149	; 0x95
     be4:	62da      	str	r2, [r3, #44]	; 0x2c
     be6:	4770      	bx	lr
     be8:	2297      	movs	r2, #151	; 0x97
     bea:	62da      	str	r2, [r3, #44]	; 0x2c
     bec:	e7fb      	b.n	be6 <check_array_range_fail(unsigned int)+0xa>
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	10001c00 	.word	0x10001c00

00000bf4 <check_bits_range_pass(unsigned int)>:
     bf4:	4b04      	ldr	r3, [pc, #16]	; (c08 <check_bits_range_pass(unsigned int)+0x14>)
     bf6:	280f      	cmp	r0, #15
     bf8:	d802      	bhi.n	c00 <check_bits_range_pass(unsigned int)+0xc>
     bfa:	229d      	movs	r2, #157	; 0x9d
     bfc:	62da      	str	r2, [r3, #44]	; 0x2c
     bfe:	4770      	bx	lr
     c00:	22a3      	movs	r2, #163	; 0xa3
     c02:	62da      	str	r2, [r3, #44]	; 0x2c
     c04:	e7fb      	b.n	bfe <check_bits_range_pass(unsigned int)+0xa>
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	10001c00 	.word	0x10001c00

00000c0c <check_bits_range_fail(unsigned int)>:
     c0c:	4b04      	ldr	r3, [pc, #16]	; (c20 <check_bits_range_fail(unsigned int)+0x14>)
     c0e:	280f      	cmp	r0, #15
     c10:	d802      	bhi.n	c18 <check_bits_range_fail(unsigned int)+0xc>
     c12:	22a7      	movs	r2, #167	; 0xa7
     c14:	62da      	str	r2, [r3, #44]	; 0x2c
     c16:	4770      	bx	lr
     c18:	22ad      	movs	r2, #173	; 0xad
     c1a:	62da      	str	r2, [r3, #44]	; 0x2c
     c1c:	e7fb      	b.n	c16 <check_bits_range_fail(unsigned int)+0xa>
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	10001c00 	.word	0x10001c00

00000c24 <check_mskd_range_pass(unsigned int)>:
     c24:	4b04      	ldr	r3, [pc, #16]	; (c38 <check_mskd_range_pass(unsigned int)+0x14>)
     c26:	281f      	cmp	r0, #31
     c28:	d802      	bhi.n	c30 <check_mskd_range_pass(unsigned int)+0xc>
     c2a:	22b3      	movs	r2, #179	; 0xb3
     c2c:	62da      	str	r2, [r3, #44]	; 0x2c
     c2e:	4770      	bx	lr
     c30:	22b5      	movs	r2, #181	; 0xb5
     c32:	62da      	str	r2, [r3, #44]	; 0x2c
     c34:	e7fb      	b.n	c2e <check_mskd_range_pass(unsigned int)+0xa>
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	10001c00 	.word	0x10001c00

00000c3c <check_mskd_range_fail(unsigned int)>:
     c3c:	4b04      	ldr	r3, [pc, #16]	; (c50 <check_mskd_range_fail(unsigned int)+0x14>)
     c3e:	281f      	cmp	r0, #31
     c40:	d802      	bhi.n	c48 <check_mskd_range_fail(unsigned int)+0xc>
     c42:	22bf      	movs	r2, #191	; 0xbf
     c44:	62da      	str	r2, [r3, #44]	; 0x2c
     c46:	4770      	bx	lr
     c48:	22c1      	movs	r2, #193	; 0xc1
     c4a:	62da      	str	r2, [r3, #44]	; 0x2c
     c4c:	e7fb      	b.n	c46 <check_mskd_range_fail(unsigned int)+0xa>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	10001c00 	.word	0x10001c00

00000c54 <bits_extract_ne()>:
     c54:	2220      	movs	r2, #32
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <bits_extract_ne()+0x18>)
     c58:	605a      	str	r2, [r3, #4]
     c5a:	685a      	ldr	r2, [r3, #4]
     c5c:	2a20      	cmp	r2, #32
     c5e:	d002      	beq.n	c66 <bits_extract_ne()+0x12>
     c60:	2202      	movs	r2, #2
     c62:	605a      	str	r2, [r3, #4]
     c64:	4770      	bx	lr
     c66:	2204      	movs	r2, #4
     c68:	605a      	str	r2, [r3, #4]
     c6a:	e7fb      	b.n	c64 <bits_extract_ne()+0x10>
     c6c:	10001dc0 	.word	0x10001dc0

00000c70 <mskd_extract_geq()>:
     c70:	22b0      	movs	r2, #176	; 0xb0
     c72:	4b07      	ldr	r3, [pc, #28]	; (c90 <mskd_extract_geq()+0x20>)
     c74:	0552      	lsls	r2, r2, #21
     c76:	605a      	str	r2, [r3, #4]
     c78:	685a      	ldr	r2, [r3, #4]
     c7a:	4b06      	ldr	r3, [pc, #24]	; (c94 <mskd_extract_geq()+0x24>)
     c7c:	429a      	cmp	r2, r3
     c7e:	d803      	bhi.n	c88 <mskd_extract_geq()+0x18>
     c80:	2240      	movs	r2, #64	; 0x40
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <mskd_extract_geq()+0x28>)
     c84:	605a      	str	r2, [r3, #4]
     c86:	4770      	bx	lr
     c88:	2220      	movs	r2, #32
     c8a:	4b03      	ldr	r3, [pc, #12]	; (c98 <mskd_extract_geq()+0x28>)
     c8c:	605a      	str	r2, [r3, #4]
     c8e:	e7fa      	b.n	c86 <mskd_extract_geq()+0x16>
     c90:	10001d20 	.word	0x10001d20
     c94:	15ffffff 	.word	0x15ffffff
     c98:	10001dc0 	.word	0x10001dc0

00000c9c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     c9c:	22b8      	movs	r2, #184	; 0xb8
     c9e:	4b04      	ldr	r3, [pc, #16]	; (cb0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     ca0:	0592      	lsls	r2, r2, #22
     ca2:	605a      	str	r2, [r3, #4]
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	4018      	ands	r0, r3
     ca8:	40c8      	lsrs	r0, r1
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     cac:	62d8      	str	r0, [r3, #44]	; 0x2c
     cae:	4770      	bx	lr
     cb0:	10001d20 	.word	0x10001d20
     cb4:	10001c00 	.word	0x10001c00

00000cb8 <call_shifted_const_val()>:
     cb8:	20f8      	movs	r0, #248	; 0xf8
     cba:	b500      	push	{lr}
     cbc:	0580      	lsls	r0, r0, #22
     cbe:	2119      	movs	r1, #25
     cc0:	f7ff fffe 	bl	c9c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     cc4:	bd00      	pop	{pc}
     cc6:	46c0      	nop			; (mov r8, r8)

00000cc8 <call_shifted_var_val()>:
     cc8:	20f8      	movs	r0, #248	; 0xf8
     cca:	b500      	push	{lr}
     ccc:	0580      	lsls	r0, r0, #22
     cce:	2119      	movs	r1, #25
     cd0:	f7ff fffe 	bl	c9c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     cd4:	bd00      	pop	{pc}
     cd6:	46c0      	nop			; (mov r8, r8)

00000cd8 <call_shifted_global_val()>:
     cd8:	20f8      	movs	r0, #248	; 0xf8
     cda:	b500      	push	{lr}
     cdc:	0580      	lsls	r0, r0, #22
     cde:	2119      	movs	r1, #25
     ce0:	f7ff fffe 	bl	c9c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     ce4:	bd00      	pop	{pc}
     ce6:	46c0      	nop			; (mov r8, r8)

00000ce8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     ce8:	22b8      	movs	r2, #184	; 0xb8
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     cec:	0592      	lsls	r2, r2, #22
     cee:	605a      	str	r2, [r3, #4]
     cf0:	6802      	ldr	r2, [r0, #0]
     cf2:	685b      	ldr	r3, [r3, #4]
     cf4:	4013      	ands	r3, r2
     cf6:	6842      	ldr	r2, [r0, #4]
     cf8:	40d3      	lsrs	r3, r2
     cfa:	4a02      	ldr	r2, [pc, #8]	; (d04 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
     cfe:	4770      	bx	lr
     d00:	10001d20 	.word	0x10001d20
     d04:	10001c00 	.word	0x10001c00

00000d08 <call_shifted_const_ref()>:
     d08:	b500      	push	{lr}
     d0a:	4b05      	ldr	r3, [pc, #20]	; (d20 <call_shifted_const_ref()+0x18>)
     d0c:	b082      	sub	sp, #8
     d0e:	4668      	mov	r0, sp
     d10:	689a      	ldr	r2, [r3, #8]
     d12:	68db      	ldr	r3, [r3, #12]
     d14:	9200      	str	r2, [sp, #0]
     d16:	9301      	str	r3, [sp, #4]
     d18:	f7ff fffe 	bl	ce8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d1c:	b002      	add	sp, #8
     d1e:	bd00      	pop	{pc}
     d20:	00000000 	.word	0x00000000

00000d24 <call_shifted_var_ref()>:
     d24:	b500      	push	{lr}
     d26:	4b05      	ldr	r3, [pc, #20]	; (d3c <call_shifted_var_ref()+0x18>)
     d28:	b082      	sub	sp, #8
     d2a:	4668      	mov	r0, sp
     d2c:	691a      	ldr	r2, [r3, #16]
     d2e:	695b      	ldr	r3, [r3, #20]
     d30:	9200      	str	r2, [sp, #0]
     d32:	9301      	str	r3, [sp, #4]
     d34:	f7ff fffe 	bl	ce8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d38:	b002      	add	sp, #8
     d3a:	bd00      	pop	{pc}
     d3c:	00000000 	.word	0x00000000

00000d40 <call_shifted_global_ref()>:
     d40:	23f8      	movs	r3, #248	; 0xf8
     d42:	b500      	push	{lr}
     d44:	059b      	lsls	r3, r3, #22
     d46:	b082      	sub	sp, #8
     d48:	9300      	str	r3, [sp, #0]
     d4a:	2319      	movs	r3, #25
     d4c:	4668      	mov	r0, sp
     d4e:	9301      	str	r3, [sp, #4]
     d50:	f7ff fffe 	bl	ce8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d54:	b002      	add	sp, #8
     d56:	bd00      	pop	{pc}

00000d58 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
     d58:	0643      	lsls	r3, r0, #25
     d5a:	d503      	bpl.n	d64 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0xc>
     d5c:	2202      	movs	r2, #2
     d5e:	4b03      	ldr	r3, [pc, #12]	; (d6c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x14>)
     d60:	605a      	str	r2, [r3, #4]
     d62:	4770      	bx	lr
     d64:	2204      	movs	r2, #4
     d66:	4b01      	ldr	r3, [pc, #4]	; (d6c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x14>)
     d68:	605a      	str	r2, [r3, #4]
     d6a:	e7fa      	b.n	d62 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0xa>
     d6c:	10001dc0 	.word	0x10001dc0

00000d70 <call_copy_bits_val()>:
     d70:	2240      	movs	r2, #64	; 0x40
     d72:	b500      	push	{lr}
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <call_copy_bits_val()+0x10>)
     d76:	605a      	str	r2, [r3, #4]
     d78:	6858      	ldr	r0, [r3, #4]
     d7a:	f7ff fffe 	bl	d58 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
     d7e:	bd00      	pop	{pc}
     d80:	10001dc0 	.word	0x10001dc0

00000d84 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
     d84:	6803      	ldr	r3, [r0, #0]
     d86:	065b      	lsls	r3, r3, #25
     d88:	d503      	bpl.n	d92 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0xe>
     d8a:	2202      	movs	r2, #2
     d8c:	4b03      	ldr	r3, [pc, #12]	; (d9c <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x18>)
     d8e:	605a      	str	r2, [r3, #4]
     d90:	4770      	bx	lr
     d92:	2204      	movs	r2, #4
     d94:	4b01      	ldr	r3, [pc, #4]	; (d9c <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x18>)
     d96:	605a      	str	r2, [r3, #4]
     d98:	e7fa      	b.n	d90 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0xc>
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	10001dc0 	.word	0x10001dc0

00000da0 <call_copy_bits_ref()>:
     da0:	2240      	movs	r2, #64	; 0x40
     da2:	b500      	push	{lr}
     da4:	4b04      	ldr	r3, [pc, #16]	; (db8 <call_copy_bits_ref()+0x18>)
     da6:	b081      	sub	sp, #4
     da8:	605a      	str	r2, [r3, #4]
     daa:	685b      	ldr	r3, [r3, #4]
     dac:	4668      	mov	r0, sp
     dae:	9300      	str	r3, [sp, #0]
     db0:	f7ff fffe 	bl	d84 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
     db4:	b001      	add	sp, #4
     db6:	bd00      	pop	{pc}
     db8:	10001dc0 	.word	0x10001dc0

00000dbc <run>:
     dbc:	b530      	push	{r4, r5, lr}
     dbe:	4cfb      	ldr	r4, [pc, #1004]	; (11ac <run+0x3f0>)
     dc0:	7823      	ldrb	r3, [r4, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d100      	bne.n	dc8 <run+0xc>
     dc6:	e314      	b.n	13f2 <run+0x636>
     dc8:	68a1      	ldr	r1, [r4, #8]
     dca:	7b23      	ldrb	r3, [r4, #12]
     dcc:	2b00      	cmp	r3, #0
     dce:	d103      	bne.n	dd8 <run+0x1c>
     dd0:	4bf7      	ldr	r3, [pc, #988]	; (11b0 <run+0x3f4>)
     dd2:	6163      	str	r3, [r4, #20]
     dd4:	2301      	movs	r3, #1
     dd6:	7323      	strb	r3, [r4, #12]
     dd8:	7e23      	ldrb	r3, [r4, #24]
     dda:	2b00      	cmp	r3, #0
     ddc:	d103      	bne.n	de6 <run+0x2a>
     dde:	4bf5      	ldr	r3, [pc, #980]	; (11b4 <run+0x3f8>)
     de0:	6223      	str	r3, [r4, #32]
     de2:	2301      	movs	r3, #1
     de4:	7623      	strb	r3, [r4, #24]
     de6:	2324      	movs	r3, #36	; 0x24
     de8:	5ce2      	ldrb	r2, [r4, r3]
     dea:	2a00      	cmp	r2, #0
     dec:	d103      	bne.n	df6 <run+0x3a>
     dee:	4af2      	ldr	r2, [pc, #968]	; (11b8 <run+0x3fc>)
     df0:	62e2      	str	r2, [r4, #44]	; 0x2c
     df2:	2201      	movs	r2, #1
     df4:	54e2      	strb	r2, [r4, r3]
     df6:	2200      	movs	r2, #0
     df8:	48f0      	ldr	r0, [pc, #960]	; (11bc <run+0x400>)
     dfa:	f7ff fffe 	bl	0 <do_test>
     dfe:	2201      	movs	r2, #1
     e00:	68a1      	ldr	r1, [r4, #8]
     e02:	48ef      	ldr	r0, [pc, #956]	; (11c0 <run+0x404>)
     e04:	f7ff fffe 	bl	0 <do_test>
     e08:	2202      	movs	r2, #2
     e0a:	68a1      	ldr	r1, [r4, #8]
     e0c:	48ed      	ldr	r0, [pc, #948]	; (11c4 <run+0x408>)
     e0e:	f7ff fffe 	bl	0 <do_test>
     e12:	2203      	movs	r2, #3
     e14:	68a1      	ldr	r1, [r4, #8]
     e16:	48ec      	ldr	r0, [pc, #944]	; (11c8 <run+0x40c>)
     e18:	f7ff fffe 	bl	0 <do_test>
     e1c:	2204      	movs	r2, #4
     e1e:	68a1      	ldr	r1, [r4, #8]
     e20:	48ea      	ldr	r0, [pc, #936]	; (11cc <run+0x410>)
     e22:	f7ff fffe 	bl	0 <do_test>
     e26:	2205      	movs	r2, #5
     e28:	68a1      	ldr	r1, [r4, #8]
     e2a:	48e9      	ldr	r0, [pc, #932]	; (11d0 <run+0x414>)
     e2c:	f7ff fffe 	bl	0 <do_test>
     e30:	2206      	movs	r2, #6
     e32:	68a1      	ldr	r1, [r4, #8]
     e34:	48e7      	ldr	r0, [pc, #924]	; (11d4 <run+0x418>)
     e36:	f7ff fffe 	bl	0 <do_test>
     e3a:	2207      	movs	r2, #7
     e3c:	68a1      	ldr	r1, [r4, #8]
     e3e:	48e6      	ldr	r0, [pc, #920]	; (11d8 <run+0x41c>)
     e40:	f7ff fffe 	bl	0 <do_test>
     e44:	2208      	movs	r2, #8
     e46:	68a1      	ldr	r1, [r4, #8]
     e48:	48e4      	ldr	r0, [pc, #912]	; (11dc <run+0x420>)
     e4a:	f7ff fffe 	bl	0 <do_test>
     e4e:	2209      	movs	r2, #9
     e50:	68a1      	ldr	r1, [r4, #8]
     e52:	48e3      	ldr	r0, [pc, #908]	; (11e0 <run+0x424>)
     e54:	f7ff fffe 	bl	0 <do_test>
     e58:	220a      	movs	r2, #10
     e5a:	68a1      	ldr	r1, [r4, #8]
     e5c:	48e1      	ldr	r0, [pc, #900]	; (11e4 <run+0x428>)
     e5e:	f7ff fffe 	bl	0 <do_test>
     e62:	220b      	movs	r2, #11
     e64:	68a1      	ldr	r1, [r4, #8]
     e66:	48e0      	ldr	r0, [pc, #896]	; (11e8 <run+0x42c>)
     e68:	f7ff fffe 	bl	0 <do_test>
     e6c:	220c      	movs	r2, #12
     e6e:	68a1      	ldr	r1, [r4, #8]
     e70:	48de      	ldr	r0, [pc, #888]	; (11ec <run+0x430>)
     e72:	f7ff fffe 	bl	0 <do_test>
     e76:	220d      	movs	r2, #13
     e78:	68a1      	ldr	r1, [r4, #8]
     e7a:	48dd      	ldr	r0, [pc, #884]	; (11f0 <run+0x434>)
     e7c:	f7ff fffe 	bl	0 <do_test>
     e80:	220e      	movs	r2, #14
     e82:	68a1      	ldr	r1, [r4, #8]
     e84:	48db      	ldr	r0, [pc, #876]	; (11f4 <run+0x438>)
     e86:	f7ff fffe 	bl	0 <do_test>
     e8a:	220f      	movs	r2, #15
     e8c:	68a1      	ldr	r1, [r4, #8]
     e8e:	48da      	ldr	r0, [pc, #872]	; (11f8 <run+0x43c>)
     e90:	f7ff fffe 	bl	0 <do_test>
     e94:	2210      	movs	r2, #16
     e96:	68a1      	ldr	r1, [r4, #8]
     e98:	48d8      	ldr	r0, [pc, #864]	; (11fc <run+0x440>)
     e9a:	f7ff fffe 	bl	0 <do_test>
     e9e:	2211      	movs	r2, #17
     ea0:	68a1      	ldr	r1, [r4, #8]
     ea2:	48d7      	ldr	r0, [pc, #860]	; (1200 <run+0x444>)
     ea4:	f7ff fffe 	bl	0 <do_test>
     ea8:	2212      	movs	r2, #18
     eaa:	68a1      	ldr	r1, [r4, #8]
     eac:	48d5      	ldr	r0, [pc, #852]	; (1204 <run+0x448>)
     eae:	f7ff fffe 	bl	0 <do_test>
     eb2:	2213      	movs	r2, #19
     eb4:	68a1      	ldr	r1, [r4, #8]
     eb6:	48d4      	ldr	r0, [pc, #848]	; (1208 <run+0x44c>)
     eb8:	f7ff fffe 	bl	0 <do_test>
     ebc:	2214      	movs	r2, #20
     ebe:	68a1      	ldr	r1, [r4, #8]
     ec0:	48d2      	ldr	r0, [pc, #840]	; (120c <run+0x450>)
     ec2:	f7ff fffe 	bl	0 <do_test>
     ec6:	2215      	movs	r2, #21
     ec8:	68a1      	ldr	r1, [r4, #8]
     eca:	48d1      	ldr	r0, [pc, #836]	; (1210 <run+0x454>)
     ecc:	f7ff fffe 	bl	0 <do_test>
     ed0:	2216      	movs	r2, #22
     ed2:	68a1      	ldr	r1, [r4, #8]
     ed4:	48cf      	ldr	r0, [pc, #828]	; (1214 <run+0x458>)
     ed6:	f7ff fffe 	bl	0 <do_test>
     eda:	2217      	movs	r2, #23
     edc:	68a1      	ldr	r1, [r4, #8]
     ede:	48ce      	ldr	r0, [pc, #824]	; (1218 <run+0x45c>)
     ee0:	f7ff fffe 	bl	0 <do_test>
     ee4:	2218      	movs	r2, #24
     ee6:	68a1      	ldr	r1, [r4, #8]
     ee8:	48cc      	ldr	r0, [pc, #816]	; (121c <run+0x460>)
     eea:	f7ff fffe 	bl	0 <do_test>
     eee:	2219      	movs	r2, #25
     ef0:	68a1      	ldr	r1, [r4, #8]
     ef2:	48cb      	ldr	r0, [pc, #812]	; (1220 <run+0x464>)
     ef4:	f7ff fffe 	bl	0 <do_test>
     ef8:	221a      	movs	r2, #26
     efa:	68a1      	ldr	r1, [r4, #8]
     efc:	48c9      	ldr	r0, [pc, #804]	; (1224 <run+0x468>)
     efe:	f7ff fffe 	bl	0 <do_test>
     f02:	221b      	movs	r2, #27
     f04:	68a1      	ldr	r1, [r4, #8]
     f06:	48c8      	ldr	r0, [pc, #800]	; (1228 <run+0x46c>)
     f08:	f7ff fffe 	bl	0 <do_test>
     f0c:	221c      	movs	r2, #28
     f0e:	68a1      	ldr	r1, [r4, #8]
     f10:	48c6      	ldr	r0, [pc, #792]	; (122c <run+0x470>)
     f12:	f7ff fffe 	bl	0 <do_test>
     f16:	221d      	movs	r2, #29
     f18:	68a1      	ldr	r1, [r4, #8]
     f1a:	48c5      	ldr	r0, [pc, #788]	; (1230 <run+0x474>)
     f1c:	f7ff fffe 	bl	0 <do_test>
     f20:	221e      	movs	r2, #30
     f22:	68a1      	ldr	r1, [r4, #8]
     f24:	48c3      	ldr	r0, [pc, #780]	; (1234 <run+0x478>)
     f26:	f7ff fffe 	bl	0 <do_test>
     f2a:	221f      	movs	r2, #31
     f2c:	68a1      	ldr	r1, [r4, #8]
     f2e:	48c2      	ldr	r0, [pc, #776]	; (1238 <run+0x47c>)
     f30:	f7ff fffe 	bl	0 <do_test>
     f34:	2220      	movs	r2, #32
     f36:	68a1      	ldr	r1, [r4, #8]
     f38:	48c0      	ldr	r0, [pc, #768]	; (123c <run+0x480>)
     f3a:	f7ff fffe 	bl	0 <do_test>
     f3e:	2221      	movs	r2, #33	; 0x21
     f40:	68a1      	ldr	r1, [r4, #8]
     f42:	48bf      	ldr	r0, [pc, #764]	; (1240 <run+0x484>)
     f44:	f7ff fffe 	bl	0 <do_test>
     f48:	2222      	movs	r2, #34	; 0x22
     f4a:	68a1      	ldr	r1, [r4, #8]
     f4c:	48bd      	ldr	r0, [pc, #756]	; (1244 <run+0x488>)
     f4e:	f7ff fffe 	bl	0 <do_test>
     f52:	2223      	movs	r2, #35	; 0x23
     f54:	68a1      	ldr	r1, [r4, #8]
     f56:	48bc      	ldr	r0, [pc, #752]	; (1248 <run+0x48c>)
     f58:	f7ff fffe 	bl	0 <do_test>
     f5c:	2224      	movs	r2, #36	; 0x24
     f5e:	68a1      	ldr	r1, [r4, #8]
     f60:	48ba      	ldr	r0, [pc, #744]	; (124c <run+0x490>)
     f62:	f7ff fffe 	bl	0 <do_test>
     f66:	2225      	movs	r2, #37	; 0x25
     f68:	68a1      	ldr	r1, [r4, #8]
     f6a:	48b9      	ldr	r0, [pc, #740]	; (1250 <run+0x494>)
     f6c:	f7ff fffe 	bl	0 <do_test>
     f70:	2226      	movs	r2, #38	; 0x26
     f72:	68a1      	ldr	r1, [r4, #8]
     f74:	48b7      	ldr	r0, [pc, #732]	; (1254 <run+0x498>)
     f76:	f7ff fffe 	bl	0 <do_test>
     f7a:	2227      	movs	r2, #39	; 0x27
     f7c:	68a1      	ldr	r1, [r4, #8]
     f7e:	48b6      	ldr	r0, [pc, #728]	; (1258 <run+0x49c>)
     f80:	f7ff fffe 	bl	0 <do_test>
     f84:	2228      	movs	r2, #40	; 0x28
     f86:	68a1      	ldr	r1, [r4, #8]
     f88:	48b4      	ldr	r0, [pc, #720]	; (125c <run+0x4a0>)
     f8a:	f7ff fffe 	bl	0 <do_test>
     f8e:	2229      	movs	r2, #41	; 0x29
     f90:	68a1      	ldr	r1, [r4, #8]
     f92:	48b3      	ldr	r0, [pc, #716]	; (1260 <run+0x4a4>)
     f94:	f7ff fffe 	bl	0 <do_test>
     f98:	222a      	movs	r2, #42	; 0x2a
     f9a:	68a1      	ldr	r1, [r4, #8]
     f9c:	48b1      	ldr	r0, [pc, #708]	; (1264 <run+0x4a8>)
     f9e:	f7ff fffe 	bl	0 <do_test>
     fa2:	222b      	movs	r2, #43	; 0x2b
     fa4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     fa6:	48b0      	ldr	r0, [pc, #704]	; (1268 <run+0x4ac>)
     fa8:	f7ff fffe 	bl	0 <do_test>
     fac:	222c      	movs	r2, #44	; 0x2c
     fae:	68a1      	ldr	r1, [r4, #8]
     fb0:	48ae      	ldr	r0, [pc, #696]	; (126c <run+0x4b0>)
     fb2:	f7ff fffe 	bl	0 <do_test>
     fb6:	222d      	movs	r2, #45	; 0x2d
     fb8:	68a1      	ldr	r1, [r4, #8]
     fba:	48ad      	ldr	r0, [pc, #692]	; (1270 <run+0x4b4>)
     fbc:	f7ff fffe 	bl	0 <do_test>
     fc0:	222e      	movs	r2, #46	; 0x2e
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	48ab      	ldr	r0, [pc, #684]	; (1274 <run+0x4b8>)
     fc6:	f7ff fffe 	bl	0 <do_test>
     fca:	222f      	movs	r2, #47	; 0x2f
     fcc:	68a1      	ldr	r1, [r4, #8]
     fce:	48aa      	ldr	r0, [pc, #680]	; (1278 <run+0x4bc>)
     fd0:	f7ff fffe 	bl	0 <do_test>
     fd4:	2230      	movs	r2, #48	; 0x30
     fd6:	68a1      	ldr	r1, [r4, #8]
     fd8:	48a8      	ldr	r0, [pc, #672]	; (127c <run+0x4c0>)
     fda:	f7ff fffe 	bl	0 <do_test>
     fde:	2231      	movs	r2, #49	; 0x31
     fe0:	68a1      	ldr	r1, [r4, #8]
     fe2:	48a7      	ldr	r0, [pc, #668]	; (1280 <run+0x4c4>)
     fe4:	f7ff fffe 	bl	0 <do_test>
     fe8:	2232      	movs	r2, #50	; 0x32
     fea:	68a1      	ldr	r1, [r4, #8]
     fec:	48a5      	ldr	r0, [pc, #660]	; (1284 <run+0x4c8>)
     fee:	f7ff fffe 	bl	0 <do_test>
     ff2:	2233      	movs	r2, #51	; 0x33
     ff4:	68a1      	ldr	r1, [r4, #8]
     ff6:	48a4      	ldr	r0, [pc, #656]	; (1288 <run+0x4cc>)
     ff8:	f7ff fffe 	bl	0 <do_test>
     ffc:	2234      	movs	r2, #52	; 0x34
     ffe:	68a1      	ldr	r1, [r4, #8]
    1000:	48a2      	ldr	r0, [pc, #648]	; (128c <run+0x4d0>)
    1002:	f7ff fffe 	bl	0 <do_test>
    1006:	2235      	movs	r2, #53	; 0x35
    1008:	68a1      	ldr	r1, [r4, #8]
    100a:	48a1      	ldr	r0, [pc, #644]	; (1290 <run+0x4d4>)
    100c:	f7ff fffe 	bl	0 <do_test>
    1010:	2236      	movs	r2, #54	; 0x36
    1012:	68a1      	ldr	r1, [r4, #8]
    1014:	489f      	ldr	r0, [pc, #636]	; (1294 <run+0x4d8>)
    1016:	f7ff fffe 	bl	0 <do_test>
    101a:	2237      	movs	r2, #55	; 0x37
    101c:	68a1      	ldr	r1, [r4, #8]
    101e:	489e      	ldr	r0, [pc, #632]	; (1298 <run+0x4dc>)
    1020:	f7ff fffe 	bl	0 <do_test>
    1024:	2238      	movs	r2, #56	; 0x38
    1026:	68a1      	ldr	r1, [r4, #8]
    1028:	489c      	ldr	r0, [pc, #624]	; (129c <run+0x4e0>)
    102a:	f7ff fffe 	bl	0 <do_test>
    102e:	2239      	movs	r2, #57	; 0x39
    1030:	68a1      	ldr	r1, [r4, #8]
    1032:	489b      	ldr	r0, [pc, #620]	; (12a0 <run+0x4e4>)
    1034:	f7ff fffe 	bl	0 <do_test>
    1038:	223a      	movs	r2, #58	; 0x3a
    103a:	68a1      	ldr	r1, [r4, #8]
    103c:	4899      	ldr	r0, [pc, #612]	; (12a4 <run+0x4e8>)
    103e:	f7ff fffe 	bl	0 <do_test>
    1042:	223b      	movs	r2, #59	; 0x3b
    1044:	68a1      	ldr	r1, [r4, #8]
    1046:	4898      	ldr	r0, [pc, #608]	; (12a8 <run+0x4ec>)
    1048:	f7ff fffe 	bl	0 <do_test>
    104c:	223c      	movs	r2, #60	; 0x3c
    104e:	68a1      	ldr	r1, [r4, #8]
    1050:	4896      	ldr	r0, [pc, #600]	; (12ac <run+0x4f0>)
    1052:	f7ff fffe 	bl	0 <do_test>
    1056:	223d      	movs	r2, #61	; 0x3d
    1058:	68a1      	ldr	r1, [r4, #8]
    105a:	4895      	ldr	r0, [pc, #596]	; (12b0 <run+0x4f4>)
    105c:	f7ff fffe 	bl	0 <do_test>
    1060:	223e      	movs	r2, #62	; 0x3e
    1062:	6961      	ldr	r1, [r4, #20]
    1064:	4893      	ldr	r0, [pc, #588]	; (12b4 <run+0x4f8>)
    1066:	f7ff fffe 	bl	0 <do_test>
    106a:	223f      	movs	r2, #63	; 0x3f
    106c:	6961      	ldr	r1, [r4, #20]
    106e:	4892      	ldr	r0, [pc, #584]	; (12b8 <run+0x4fc>)
    1070:	f7ff fffe 	bl	0 <do_test>
    1074:	2240      	movs	r2, #64	; 0x40
    1076:	6961      	ldr	r1, [r4, #20]
    1078:	4890      	ldr	r0, [pc, #576]	; (12bc <run+0x500>)
    107a:	f7ff fffe 	bl	0 <do_test>
    107e:	2241      	movs	r2, #65	; 0x41
    1080:	68a1      	ldr	r1, [r4, #8]
    1082:	488f      	ldr	r0, [pc, #572]	; (12c0 <run+0x504>)
    1084:	f7ff fffe 	bl	0 <do_test>
    1088:	2242      	movs	r2, #66	; 0x42
    108a:	6a21      	ldr	r1, [r4, #32]
    108c:	488d      	ldr	r0, [pc, #564]	; (12c4 <run+0x508>)
    108e:	f7ff fffe 	bl	0 <do_test>
    1092:	2243      	movs	r2, #67	; 0x43
    1094:	6a21      	ldr	r1, [r4, #32]
    1096:	488c      	ldr	r0, [pc, #560]	; (12c8 <run+0x50c>)
    1098:	f7ff fffe 	bl	0 <do_test>
    109c:	2244      	movs	r2, #68	; 0x44
    109e:	68a1      	ldr	r1, [r4, #8]
    10a0:	488a      	ldr	r0, [pc, #552]	; (12cc <run+0x510>)
    10a2:	f7ff fffe 	bl	0 <do_test>
    10a6:	2245      	movs	r2, #69	; 0x45
    10a8:	68a1      	ldr	r1, [r4, #8]
    10aa:	4889      	ldr	r0, [pc, #548]	; (12d0 <run+0x514>)
    10ac:	f7ff fffe 	bl	0 <do_test>
    10b0:	2246      	movs	r2, #70	; 0x46
    10b2:	6a21      	ldr	r1, [r4, #32]
    10b4:	4887      	ldr	r0, [pc, #540]	; (12d4 <run+0x518>)
    10b6:	f7ff fffe 	bl	0 <do_test>
    10ba:	2247      	movs	r2, #71	; 0x47
    10bc:	6a21      	ldr	r1, [r4, #32]
    10be:	4886      	ldr	r0, [pc, #536]	; (12d8 <run+0x51c>)
    10c0:	f7ff fffe 	bl	0 <do_test>
    10c4:	2248      	movs	r2, #72	; 0x48
    10c6:	68a1      	ldr	r1, [r4, #8]
    10c8:	4884      	ldr	r0, [pc, #528]	; (12dc <run+0x520>)
    10ca:	f7ff fffe 	bl	0 <do_test>
    10ce:	2249      	movs	r2, #73	; 0x49
    10d0:	68a1      	ldr	r1, [r4, #8]
    10d2:	4883      	ldr	r0, [pc, #524]	; (12e0 <run+0x524>)
    10d4:	f7ff fffe 	bl	0 <do_test>
    10d8:	224a      	movs	r2, #74	; 0x4a
    10da:	68a1      	ldr	r1, [r4, #8]
    10dc:	4881      	ldr	r0, [pc, #516]	; (12e4 <run+0x528>)
    10de:	f7ff fffe 	bl	0 <do_test>
    10e2:	224b      	movs	r2, #75	; 0x4b
    10e4:	68a1      	ldr	r1, [r4, #8]
    10e6:	4880      	ldr	r0, [pc, #512]	; (12e8 <run+0x52c>)
    10e8:	f7ff fffe 	bl	0 <do_test>
    10ec:	224c      	movs	r2, #76	; 0x4c
    10ee:	68a1      	ldr	r1, [r4, #8]
    10f0:	487e      	ldr	r0, [pc, #504]	; (12ec <run+0x530>)
    10f2:	f7ff fffe 	bl	0 <do_test>
    10f6:	224d      	movs	r2, #77	; 0x4d
    10f8:	68a1      	ldr	r1, [r4, #8]
    10fa:	487d      	ldr	r0, [pc, #500]	; (12f0 <run+0x534>)
    10fc:	f7ff fffe 	bl	0 <do_test>
    1100:	4d7c      	ldr	r5, [pc, #496]	; (12f4 <run+0x538>)
    1102:	224e      	movs	r2, #78	; 0x4e
    1104:	0028      	movs	r0, r5
    1106:	68a1      	ldr	r1, [r4, #8]
    1108:	f7ff fffe 	bl	0 <do_test>
    110c:	0028      	movs	r0, r5
    110e:	224f      	movs	r2, #79	; 0x4f
    1110:	68a1      	ldr	r1, [r4, #8]
    1112:	f7ff fffe 	bl	0 <do_test>
    1116:	2250      	movs	r2, #80	; 0x50
    1118:	68a1      	ldr	r1, [r4, #8]
    111a:	4877      	ldr	r0, [pc, #476]	; (12f8 <run+0x53c>)
    111c:	f7ff fffe 	bl	0 <do_test>
    1120:	2251      	movs	r2, #81	; 0x51
    1122:	68a1      	ldr	r1, [r4, #8]
    1124:	4875      	ldr	r0, [pc, #468]	; (12fc <run+0x540>)
    1126:	f7ff fffe 	bl	0 <do_test>
    112a:	2252      	movs	r2, #82	; 0x52
    112c:	68a1      	ldr	r1, [r4, #8]
    112e:	4874      	ldr	r0, [pc, #464]	; (1300 <run+0x544>)
    1130:	f7ff fffe 	bl	0 <do_test>
    1134:	4d73      	ldr	r5, [pc, #460]	; (1304 <run+0x548>)
    1136:	2253      	movs	r2, #83	; 0x53
    1138:	0028      	movs	r0, r5
    113a:	68a1      	ldr	r1, [r4, #8]
    113c:	f7ff fffe 	bl	0 <do_test>
    1140:	2254      	movs	r2, #84	; 0x54
    1142:	68a1      	ldr	r1, [r4, #8]
    1144:	4870      	ldr	r0, [pc, #448]	; (1308 <run+0x54c>)
    1146:	f7ff fffe 	bl	0 <do_test>
    114a:	0028      	movs	r0, r5
    114c:	2255      	movs	r2, #85	; 0x55
    114e:	68a1      	ldr	r1, [r4, #8]
    1150:	f7ff fffe 	bl	0 <do_test>
    1154:	2256      	movs	r2, #86	; 0x56
    1156:	68a1      	ldr	r1, [r4, #8]
    1158:	486c      	ldr	r0, [pc, #432]	; (130c <run+0x550>)
    115a:	f7ff fffe 	bl	0 <do_test>
    115e:	2257      	movs	r2, #87	; 0x57
    1160:	68a1      	ldr	r1, [r4, #8]
    1162:	486b      	ldr	r0, [pc, #428]	; (1310 <run+0x554>)
    1164:	f7ff fffe 	bl	0 <do_test>
    1168:	2258      	movs	r2, #88	; 0x58
    116a:	6a21      	ldr	r1, [r4, #32]
    116c:	4869      	ldr	r0, [pc, #420]	; (1314 <run+0x558>)
    116e:	f7ff fffe 	bl	0 <do_test>
    1172:	2259      	movs	r2, #89	; 0x59
    1174:	6a21      	ldr	r1, [r4, #32]
    1176:	4868      	ldr	r0, [pc, #416]	; (1318 <run+0x55c>)
    1178:	f7ff fffe 	bl	0 <do_test>
    117c:	225a      	movs	r2, #90	; 0x5a
    117e:	68a1      	ldr	r1, [r4, #8]
    1180:	4866      	ldr	r0, [pc, #408]	; (131c <run+0x560>)
    1182:	f7ff fffe 	bl	0 <do_test>
    1186:	225b      	movs	r2, #91	; 0x5b
    1188:	6a21      	ldr	r1, [r4, #32]
    118a:	4865      	ldr	r0, [pc, #404]	; (1320 <run+0x564>)
    118c:	f7ff fffe 	bl	0 <do_test>
    1190:	225c      	movs	r2, #92	; 0x5c
    1192:	6a21      	ldr	r1, [r4, #32]
    1194:	4863      	ldr	r0, [pc, #396]	; (1324 <run+0x568>)
    1196:	f7ff fffe 	bl	0 <do_test>
    119a:	225d      	movs	r2, #93	; 0x5d
    119c:	68a1      	ldr	r1, [r4, #8]
    119e:	4862      	ldr	r0, [pc, #392]	; (1328 <run+0x56c>)
    11a0:	f7ff fffe 	bl	0 <do_test>
    11a4:	225e      	movs	r2, #94	; 0x5e
    11a6:	68a1      	ldr	r1, [r4, #8]
    11a8:	e0c0      	b.n	132c <run+0x570>
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	00000000 	.word	0x00000000
    11b0:	10001d24 	.word	0x10001d24
    11b4:	10001c2c 	.word	0x10001c2c
    11b8:	10001ca0 	.word	0x10001ca0
	...
    132c:	4833      	ldr	r0, [pc, #204]	; (d0 <do_test+0xd0>)
    132e:	f7ff fffe 	bl	0 <do_test>
    1332:	225f      	movs	r2, #95	; 0x5f
    1334:	68a1      	ldr	r1, [r4, #8]
    1336:	4832      	ldr	r0, [pc, #200]	; (1400 <run+0x644>)
    1338:	f7ff fffe 	bl	0 <do_test>
    133c:	2260      	movs	r2, #96	; 0x60
    133e:	68a1      	ldr	r1, [r4, #8]
    1340:	4830      	ldr	r0, [pc, #192]	; (1404 <run+0x648>)
    1342:	f7ff fffe 	bl	0 <do_test>
    1346:	2261      	movs	r2, #97	; 0x61
    1348:	6a21      	ldr	r1, [r4, #32]
    134a:	482f      	ldr	r0, [pc, #188]	; (1408 <run+0x64c>)
    134c:	f7ff fffe 	bl	0 <do_test>
    1350:	2262      	movs	r2, #98	; 0x62
    1352:	6a21      	ldr	r1, [r4, #32]
    1354:	482d      	ldr	r0, [pc, #180]	; (140c <run+0x650>)
    1356:	f7ff fffe 	bl	0 <do_test>
    135a:	2263      	movs	r2, #99	; 0x63
    135c:	6a21      	ldr	r1, [r4, #32]
    135e:	482c      	ldr	r0, [pc, #176]	; (1410 <run+0x654>)
    1360:	f7ff fffe 	bl	0 <do_test>
    1364:	2264      	movs	r2, #100	; 0x64
    1366:	6a21      	ldr	r1, [r4, #32]
    1368:	482a      	ldr	r0, [pc, #168]	; (1414 <run+0x658>)
    136a:	f7ff fffe 	bl	0 <do_test>
    136e:	2265      	movs	r2, #101	; 0x65
    1370:	6a21      	ldr	r1, [r4, #32]
    1372:	4829      	ldr	r0, [pc, #164]	; (1418 <run+0x65c>)
    1374:	f7ff fffe 	bl	0 <do_test>
    1378:	2266      	movs	r2, #102	; 0x66
    137a:	6a21      	ldr	r1, [r4, #32]
    137c:	4827      	ldr	r0, [pc, #156]	; (141c <run+0x660>)
    137e:	f7ff fffe 	bl	0 <do_test>
    1382:	2267      	movs	r2, #103	; 0x67
    1384:	68a1      	ldr	r1, [r4, #8]
    1386:	4826      	ldr	r0, [pc, #152]	; (1420 <run+0x664>)
    1388:	f7ff fffe 	bl	0 <do_test>
    138c:	2268      	movs	r2, #104	; 0x68
    138e:	68a1      	ldr	r1, [r4, #8]
    1390:	4824      	ldr	r0, [pc, #144]	; (1424 <run+0x668>)
    1392:	f7ff fffe 	bl	0 <do_test>
    1396:	2269      	movs	r2, #105	; 0x69
    1398:	68a1      	ldr	r1, [r4, #8]
    139a:	4823      	ldr	r0, [pc, #140]	; (1428 <run+0x66c>)
    139c:	f7ff fffe 	bl	0 <do_test>
    13a0:	226a      	movs	r2, #106	; 0x6a
    13a2:	68a1      	ldr	r1, [r4, #8]
    13a4:	4821      	ldr	r0, [pc, #132]	; (142c <run+0x670>)
    13a6:	f7ff fffe 	bl	0 <do_test>
    13aa:	226b      	movs	r2, #107	; 0x6b
    13ac:	68a1      	ldr	r1, [r4, #8]
    13ae:	4820      	ldr	r0, [pc, #128]	; (1430 <run+0x674>)
    13b0:	f7ff fffe 	bl	0 <do_test>
    13b4:	226c      	movs	r2, #108	; 0x6c
    13b6:	68a1      	ldr	r1, [r4, #8]
    13b8:	481e      	ldr	r0, [pc, #120]	; (1434 <run+0x678>)
    13ba:	f7ff fffe 	bl	0 <do_test>
    13be:	226d      	movs	r2, #109	; 0x6d
    13c0:	68a1      	ldr	r1, [r4, #8]
    13c2:	481d      	ldr	r0, [pc, #116]	; (1438 <run+0x67c>)
    13c4:	f7ff fffe 	bl	0 <do_test>
    13c8:	226e      	movs	r2, #110	; 0x6e
    13ca:	68a1      	ldr	r1, [r4, #8]
    13cc:	481b      	ldr	r0, [pc, #108]	; (143c <run+0x680>)
    13ce:	f7ff fffe 	bl	0 <do_test>
    13d2:	226f      	movs	r2, #111	; 0x6f
    13d4:	68a1      	ldr	r1, [r4, #8]
    13d6:	481a      	ldr	r0, [pc, #104]	; (1440 <run+0x684>)
    13d8:	f7ff fffe 	bl	0 <do_test>
    13dc:	2270      	movs	r2, #112	; 0x70
    13de:	68a1      	ldr	r1, [r4, #8]
    13e0:	4818      	ldr	r0, [pc, #96]	; (1444 <run+0x688>)
    13e2:	f7ff fffe 	bl	0 <do_test>
    13e6:	68a1      	ldr	r1, [r4, #8]
    13e8:	2271      	movs	r2, #113	; 0x71
    13ea:	4817      	ldr	r0, [pc, #92]	; (1448 <run+0x68c>)
    13ec:	f7ff fffe 	bl	0 <do_test>
    13f0:	bd30      	pop	{r4, r5, pc}
    13f2:	2301      	movs	r3, #1
    13f4:	4915      	ldr	r1, [pc, #84]	; (144c <run+0x690>)
    13f6:	7023      	strb	r3, [r4, #0]
    13f8:	60a1      	str	r1, [r4, #8]
    13fa:	e4e6      	b.n	dca <run+0xe>
	...
    144c:	10001dc4 	.word	0x10001dc4

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
