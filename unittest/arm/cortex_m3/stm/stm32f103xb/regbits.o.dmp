
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
   0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
   2:	2200      	movs	r2, #0
   4:	605a      	str	r2, [r3, #4]
   6:	4770      	bx	lr
   8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
   c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
   e:	2200      	movs	r2, #0
  10:	62da      	str	r2, [r3, #44]	; 0x2c
  12:	4770      	bx	lr
  14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
  18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
  1a:	6853      	ldr	r3, [r2, #4]
  1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20:	6053      	str	r3, [r2, #4]
  22:	4770      	bx	lr
  24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
  28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
  2a:	6853      	ldr	r3, [r2, #4]
  2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  30:	6053      	str	r3, [r2, #4]
  32:	4770      	bx	lr
  34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
  38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
  3a:	6853      	ldr	r3, [r2, #4]
  3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40:	6053      	str	r3, [r2, #4]
  42:	4770      	bx	lr
  44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
  48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
  4a:	6853      	ldr	r3, [r2, #4]
  4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  50:	6053      	str	r3, [r2, #4]
  52:	4770      	bx	lr
  54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
  58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
  5a:	6853      	ldr	r3, [r2, #4]
  5c:	f043 0302 	orr.w	r3, r3, #2
  60:	6053      	str	r3, [r2, #4]
  62:	4770      	bx	lr
  64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
  68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
  6a:	6853      	ldr	r3, [r2, #4]
  6c:	f043 0302 	orr.w	r3, r3, #2
  70:	6053      	str	r3, [r2, #4]
  72:	4770      	bx	lr
  74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
  78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
  7a:	6853      	ldr	r3, [r2, #4]
  7c:	f023 0302 	bic.w	r3, r3, #2
  80:	6053      	str	r3, [r2, #4]
  82:	4770      	bx	lr
  84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
  88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
  8a:	6853      	ldr	r3, [r2, #4]
  8c:	f023 0302 	bic.w	r3, r3, #2
  90:	6053      	str	r3, [r2, #4]
  92:	4770      	bx	lr
  94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
  98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
  9a:	2240      	movs	r2, #64	; 0x40
  9c:	605a      	str	r2, [r3, #4]
  9e:	4770      	bx	lr
  a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
  a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
  a6:	2240      	movs	r2, #64	; 0x40
  a8:	605a      	str	r2, [r3, #4]
  aa:	4770      	bx	lr
  ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
  b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
  b2:	2202      	movs	r2, #2
  b4:	605a      	str	r2, [r3, #4]
  b6:	4770      	bx	lr
  b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
  bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
  be:	2202      	movs	r2, #2
  c0:	605a      	str	r2, [r3, #4]
  c2:	4770      	bx	lr
  c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
  c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
  ca:	6853      	ldr	r3, [r2, #4]
  cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
  d0:	6053      	str	r3, [r2, #4]
  d2:	4770      	bx	lr
  d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
  d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
  da:	6853      	ldr	r3, [r2, #4]
  dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
  e0:	6053      	str	r3, [r2, #4]
  e2:	4770      	bx	lr
  e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
  e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
  ea:	6853      	ldr	r3, [r2, #4]
  ec:	f083 0302 	eor.w	r3, r3, #2
  f0:	6053      	str	r3, [r2, #4]
  f2:	4770      	bx	lr
  f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
  f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
  fa:	6853      	ldr	r3, [r2, #4]
  fc:	f083 0302 	eor.w	r3, r3, #2
 100:	6053      	str	r3, [r2, #4]
 102:	4770      	bx	lr
 104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
 108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
 10a:	6853      	ldr	r3, [r2, #4]
 10c:	f023 0306 	bic.w	r3, r3, #6
 110:	f043 0304 	orr.w	r3, r3, #4
 114:	6053      	str	r3, [r2, #4]
 116:	4770      	bx	lr
 118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
 11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
 11e:	6853      	ldr	r3, [r2, #4]
 120:	f023 0306 	bic.w	r3, r3, #6
 124:	f043 0304 	orr.w	r3, r3, #4
 128:	6053      	str	r3, [r2, #4]
 12a:	4770      	bx	lr
 12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
 130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
 132:	6853      	ldr	r3, [r2, #4]
 134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 138:	6053      	str	r3, [r2, #4]
 13a:	4770      	bx	lr
 13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
 140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
 142:	6853      	ldr	r3, [r2, #4]
 144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 148:	6053      	str	r3, [r2, #4]
 14a:	4770      	bx	lr
 14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
 150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
 152:	6853      	ldr	r3, [r2, #4]
 154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 158:	f023 0306 	bic.w	r3, r3, #6
 15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
 160:	6053      	str	r3, [r2, #4]
 162:	4770      	bx	lr
 164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
 168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
 16a:	6853      	ldr	r3, [r2, #4]
 16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 170:	f023 0306 	bic.w	r3, r3, #6
 174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
 178:	6053      	str	r3, [r2, #4]
 17a:	4770      	bx	lr
 17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
 180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
 182:	2260      	movs	r2, #96	; 0x60
 184:	605a      	str	r2, [r3, #4]
 186:	4770      	bx	lr
 188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
 18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
 18e:	2260      	movs	r2, #96	; 0x60
 190:	605a      	str	r2, [r3, #4]
 192:	4770      	bx	lr
 194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
 198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
 19a:	f44f 7242 	mov.w	r2, #776	; 0x308
 19e:	605a      	str	r2, [r3, #4]
 1a0:	4770      	bx	lr
 1a2:	bf00      	nop
 1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
 1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
 1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
 1ae:	605a      	str	r2, [r3, #4]
 1b0:	4770      	bx	lr
 1b2:	bf00      	nop
 1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
 1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
 1ba:	2222      	movs	r2, #34	; 0x22
 1bc:	605a      	str	r2, [r3, #4]
 1be:	4770      	bx	lr
 1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
 1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
 1c6:	2222      	movs	r2, #34	; 0x22
 1c8:	605a      	str	r2, [r3, #4]
 1ca:	4770      	bx	lr
 1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
 1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
 1d2:	2244      	movs	r2, #68	; 0x44
 1d4:	605a      	str	r2, [r3, #4]
 1d6:	4770      	bx	lr
 1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
 1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
 1de:	2244      	movs	r2, #68	; 0x44
 1e0:	605a      	str	r2, [r3, #4]
 1e2:	4770      	bx	lr
 1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
 1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
 1ea:	2240      	movs	r2, #64	; 0x40
 1ec:	605a      	str	r2, [r3, #4]
 1ee:	2201      	movs	r2, #1
 1f0:	605a      	str	r2, [r3, #4]
 1f2:	4770      	bx	lr
 1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
 1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
 1fa:	2202      	movs	r2, #2
 1fc:	605a      	str	r2, [r3, #4]
 1fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 202:	605a      	str	r2, [r3, #4]
 204:	4770      	bx	lr
 206:	bf00      	nop
 208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
 20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
 20e:	2200      	movs	r2, #0
 210:	605a      	str	r2, [r3, #4]
 212:	685b      	ldr	r3, [r3, #4]
 214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
 216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
 218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 21c:	605a      	str	r2, [r3, #4]
 21e:	4770      	bx	lr
 220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
 222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 226:	605a      	str	r2, [r3, #4]
 228:	4770      	bx	lr
 22a:	bf00      	nop
 22c:	20002480 	.word	0x20002480
 230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
 234:	4b06      	ldr	r3, [pc, #24]	; (250 <cmp_neq_zero()+0x1c>)
 236:	2200      	movs	r2, #0
 238:	605a      	str	r2, [r3, #4]
 23a:	685b      	ldr	r3, [r3, #4]
 23c:	b11b      	cbz	r3, 246 <cmp_neq_zero()+0x12>
 23e:	4b04      	ldr	r3, [pc, #16]	; (250 <cmp_neq_zero()+0x1c>)
 240:	2204      	movs	r2, #4
 242:	605a      	str	r2, [r3, #4]
 244:	4770      	bx	lr
 246:	4b02      	ldr	r3, [pc, #8]	; (250 <cmp_neq_zero()+0x1c>)
 248:	2220      	movs	r2, #32
 24a:	605a      	str	r2, [r3, #4]
 24c:	4770      	bx	lr
 24e:	bf00      	nop
 250:	20002480 	.word	0x20002480

00000254 <cmp_equ_bits()>:
 254:	4b06      	ldr	r3, [pc, #24]	; (270 <cmp_equ_bits()+0x1c>)
 256:	2240      	movs	r2, #64	; 0x40
 258:	605a      	str	r2, [r3, #4]
 25a:	685b      	ldr	r3, [r3, #4]
 25c:	f013 0f40 	tst.w	r3, #64	; 0x40
 260:	4b04      	ldr	r3, [pc, #16]	; (274 <cmp_equ_bits()+0x20>)
 262:	bf14      	ite	ne
 264:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
 268:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
 26c:	605a      	str	r2, [r3, #4]
 26e:	4770      	bx	lr
 270:	20002480 	.word	0x20002480
 274:	200023e0 	.word	0x200023e0

00000278 <cmp_neq_bits()>:
 278:	4b05      	ldr	r3, [pc, #20]	; (290 <cmp_neq_bits()+0x18>)
 27a:	2240      	movs	r2, #64	; 0x40
 27c:	605a      	str	r2, [r3, #4]
 27e:	685b      	ldr	r3, [r3, #4]
 280:	f013 0f40 	tst.w	r3, #64	; 0x40
 284:	4b02      	ldr	r3, [pc, #8]	; (290 <cmp_neq_bits()+0x18>)
 286:	bf0c      	ite	eq
 288:	2202      	moveq	r2, #2
 28a:	2220      	movne	r2, #32
 28c:	605a      	str	r2, [r3, #4]
 28e:	4770      	bx	lr
 290:	20002480 	.word	0x20002480

00000294 <cmp_equ_multi_bits()>:
 294:	4b06      	ldr	r3, [pc, #24]	; (2b0 <cmp_equ_multi_bits()+0x1c>)
 296:	2260      	movs	r2, #96	; 0x60
 298:	605a      	str	r2, [r3, #4]
 29a:	685b      	ldr	r3, [r3, #4]
 29c:	4013      	ands	r3, r2
 29e:	4293      	cmp	r3, r2
 2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <cmp_equ_multi_bits()+0x20>)
 2a2:	bf0c      	ite	eq
 2a4:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
 2a8:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
 2ac:	605a      	str	r2, [r3, #4]
 2ae:	4770      	bx	lr
 2b0:	20002480 	.word	0x20002480
 2b4:	200023e0 	.word	0x200023e0

000002b8 <cmp_neq_multi_bits()>:
 2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <cmp_neq_multi_bits()+0x1c>)
 2ba:	2260      	movs	r2, #96	; 0x60
 2bc:	605a      	str	r2, [r3, #4]
 2be:	685b      	ldr	r3, [r3, #4]
 2c0:	4013      	ands	r3, r2
 2c2:	4293      	cmp	r3, r2
 2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <cmp_neq_multi_bits()+0x20>)
 2c6:	bf14      	ite	ne
 2c8:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
 2cc:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
 2d0:	605a      	str	r2, [r3, #4]
 2d2:	4770      	bx	lr
 2d4:	20002480 	.word	0x20002480
 2d8:	200023e0 	.word	0x200023e0

000002dc <cmp_equ_mskd()>:
 2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <cmp_equ_mskd()+0x28>)
 2de:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
 2e2:	605a      	str	r2, [r3, #4]
 2e4:	685b      	ldr	r3, [r3, #4]
 2e6:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
 2ea:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 2ee:	4a06      	ldr	r2, [pc, #24]	; (308 <cmp_equ_mskd()+0x2c>)
 2f0:	6853      	ldr	r3, [r2, #4]
 2f2:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
 2f6:	bf0c      	ite	eq
 2f8:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
 2fc:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
 300:	6053      	str	r3, [r2, #4]
 302:	4770      	bx	lr
 304:	20002480 	.word	0x20002480
 308:	200023e0 	.word	0x200023e0

0000030c <cmp_neq_mskd()>:
 30c:	4b09      	ldr	r3, [pc, #36]	; (334 <cmp_neq_mskd()+0x28>)
 30e:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
 312:	605a      	str	r2, [r3, #4]
 314:	685b      	ldr	r3, [r3, #4]
 316:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
 31a:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 31e:	4a05      	ldr	r2, [pc, #20]	; (334 <cmp_neq_mskd()+0x28>)
 320:	6853      	ldr	r3, [r2, #4]
 322:	bf1a      	itte	ne
 324:	f023 0306 	bicne.w	r3, r3, #6
 328:	f043 0304 	orrne.w	r3, r3, #4
 32c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 330:	6053      	str	r3, [r2, #4]
 332:	4770      	bx	lr
 334:	20002480 	.word	0x20002480

00000338 <cmp_equ_reg()>:
 338:	4b06      	ldr	r3, [pc, #24]	; (354 <cmp_equ_reg()+0x1c>)
 33a:	2222      	movs	r2, #34	; 0x22
 33c:	605a      	str	r2, [r3, #4]
 33e:	685b      	ldr	r3, [r3, #4]
 340:	4293      	cmp	r3, r2
 342:	4b05      	ldr	r3, [pc, #20]	; (358 <cmp_equ_reg()+0x20>)
 344:	bf0c      	ite	eq
 346:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
 34a:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
 34e:	605a      	str	r2, [r3, #4]
 350:	4770      	bx	lr
 352:	bf00      	nop
 354:	20002480 	.word	0x20002480
 358:	200023e0 	.word	0x200023e0

0000035c <cmp_neq_reg()>:
 35c:	4b05      	ldr	r3, [pc, #20]	; (374 <cmp_neq_reg()+0x18>)
 35e:	2222      	movs	r2, #34	; 0x22
 360:	605a      	str	r2, [r3, #4]
 362:	685b      	ldr	r3, [r3, #4]
 364:	4293      	cmp	r3, r2
 366:	4b03      	ldr	r3, [pc, #12]	; (374 <cmp_neq_reg()+0x18>)
 368:	bf14      	ite	ne
 36a:	2202      	movne	r2, #2
 36c:	2220      	moveq	r2, #32
 36e:	605a      	str	r2, [r3, #4]
 370:	4770      	bx	lr
 372:	bf00      	nop
 374:	20002480 	.word	0x20002480

00000378 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
 378:	4a02      	ldr	r2, [pc, #8]	; (384 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
 37a:	6853      	ldr	r3, [r2, #4]
 37c:	4318      	orrs	r0, r3
 37e:	6050      	str	r0, [r2, #4]
 380:	4770      	bx	lr
 382:	bf00      	nop
 384:	20002480 	.word	0x20002480

00000388 <call_bits_val_const()>:
 388:	b500      	push	{lr}
 38a:	2040      	movs	r0, #64	; 0x40
 38c:	f7ff fffe 	bl	378 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
 390:	f85d fb04 	ldr.w	pc, [sp], #4

00000394 <call_bits_val_var()>:
 394:	b500      	push	{lr}
 396:	2040      	movs	r0, #64	; 0x40
 398:	f7ff fffe 	bl	378 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
 39c:	f85d fb04 	ldr.w	pc, [sp], #4

000003a0 <constexpr_bits_array()>:
 3a0:	4b03      	ldr	r3, [pc, #12]	; (3b0 <constexpr_bits_array()+0x10>)
 3a2:	2206      	movs	r2, #6
 3a4:	62da      	str	r2, [r3, #44]	; 0x2c
 3a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 3aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 3ae:	4770      	bx	lr
 3b0:	200022c0 	.word	0x200022c0

000003b4 <runtime_bits_array()>:
 3b4:	b081      	sub	sp, #4
 3b6:	2303      	movs	r3, #3
 3b8:	9300      	str	r3, [sp, #0]
 3ba:	9b00      	ldr	r3, [sp, #0]
 3bc:	4a06      	ldr	r2, [pc, #24]	; (3d8 <runtime_bits_array()+0x24>)
 3be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 3c2:	2121      	movs	r1, #33	; 0x21
 3c4:	6219      	str	r1, [r3, #32]
 3c6:	2307      	movs	r3, #7
 3c8:	9300      	str	r3, [sp, #0]
 3ca:	9900      	ldr	r1, [sp, #0]
 3cc:	2301      	movs	r3, #1
 3ce:	408b      	lsls	r3, r1
 3d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 3d4:	b001      	add	sp, #4
 3d6:	4770      	bx	lr
 3d8:	200022c0 	.word	0x200022c0

000003dc <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
 3dc:	4a02      	ldr	r2, [pc, #8]	; (3e8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
 3de:	6853      	ldr	r3, [r2, #4]
 3e0:	6801      	ldr	r1, [r0, #0]
 3e2:	430b      	orrs	r3, r1
 3e4:	6053      	str	r3, [r2, #4]
 3e6:	4770      	bx	lr
 3e8:	20002480 	.word	0x20002480

000003ec <call_bits_ref_const()>:
 3ec:	b500      	push	{lr}
 3ee:	b081      	sub	sp, #4
 3f0:	2301      	movs	r3, #1
 3f2:	9300      	str	r3, [sp, #0]
 3f4:	4668      	mov	r0, sp
 3f6:	f7ff fffe 	bl	3dc <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
 3fa:	b001      	add	sp, #4
 3fc:	f85d fb04 	ldr.w	pc, [sp], #4

00000400 <call_bits_ref_var()>:
 400:	b500      	push	{lr}
 402:	b081      	sub	sp, #4
 404:	2301      	movs	r3, #1
 406:	9300      	str	r3, [sp, #0]
 408:	4668      	mov	r0, sp
 40a:	f7ff fffe 	bl	3dc <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
 40e:	b001      	add	sp, #4
 410:	f85d fb04 	ldr.w	pc, [sp], #4

00000414 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 414:	4a03      	ldr	r2, [pc, #12]	; (424 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
 416:	6853      	ldr	r3, [r2, #4]
 418:	ea23 0000 	bic.w	r0, r3, r0
 41c:	4308      	orrs	r0, r1
 41e:	6050      	str	r0, [r2, #4]
 420:	4770      	bx	lr
 422:	bf00      	nop
 424:	20002480 	.word	0x20002480

00000428 <call_mskd_val_const()>:
 428:	b500      	push	{lr}
 42a:	2006      	movs	r0, #6
 42c:	2102      	movs	r1, #2
 42e:	f7ff fffe 	bl	414 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 432:	f85d fb04 	ldr.w	pc, [sp], #4

00000436 <call_mskd_val_var()>:
 436:	b500      	push	{lr}
 438:	2006      	movs	r0, #6
 43a:	2102      	movs	r1, #2
 43c:	f7ff fffe 	bl	414 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 440:	f85d fb04 	ldr.w	pc, [sp], #4

00000444 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
 444:	4a04      	ldr	r2, [pc, #16]	; (458 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x14>)
 446:	6853      	ldr	r3, [r2, #4]
 448:	6801      	ldr	r1, [r0, #0]
 44a:	ea23 0301 	bic.w	r3, r3, r1
 44e:	6841      	ldr	r1, [r0, #4]
 450:	430b      	orrs	r3, r1
 452:	6053      	str	r3, [r2, #4]
 454:	4770      	bx	lr
 456:	bf00      	nop
 458:	20002480 	.word	0x20002480

0000045c <call_mskd_ref_const()>:
 45c:	b500      	push	{lr}
 45e:	b082      	sub	sp, #8
 460:	2306      	movs	r3, #6
 462:	9300      	str	r3, [sp, #0]
 464:	2304      	movs	r3, #4
 466:	9301      	str	r3, [sp, #4]
 468:	4668      	mov	r0, sp
 46a:	f7ff fffe 	bl	444 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
 46e:	b002      	add	sp, #8
 470:	f85d fb04 	ldr.w	pc, [sp], #4

00000474 <call_mskd_ref_var()>:
 474:	b500      	push	{lr}
 476:	b082      	sub	sp, #8
 478:	4b04      	ldr	r3, [pc, #16]	; (48c <call_mskd_ref_var()+0x18>)
 47a:	cb0c      	ldmia	r3, {r2, r3}
 47c:	e88d 000c 	stmia.w	sp, {r2, r3}
 480:	4668      	mov	r0, sp
 482:	f7ff fffe 	bl	444 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
 486:	b002      	add	sp, #8
 488:	f85d fb04 	ldr.w	pc, [sp], #4
 48c:	00000000 	.word	0x00000000

00000490 <periph_bits(mcu::Serial*)>:
 490:	6843      	ldr	r3, [r0, #4]
 492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 496:	6043      	str	r3, [r0, #4]
 498:	4770      	bx	lr

0000049a <call_periph_bits()>:
 49a:	b500      	push	{lr}
 49c:	4802      	ldr	r0, [pc, #8]	; (4a8 <call_periph_bits()+0xe>)
 49e:	f7ff fffe 	bl	490 <periph_bits(mcu::Serial*)>
 4a2:	f85d fb04 	ldr.w	pc, [sp], #4
 4a6:	bf00      	nop
 4a8:	20002480 	.word	0x20002480

000004ac <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
 4ac:	6843      	ldr	r3, [r0, #4]
 4ae:	4319      	orrs	r1, r3
 4b0:	6041      	str	r1, [r0, #4]
 4b2:	4770      	bx	lr

000004b4 <call_periph_bits_val()>:
 4b4:	b500      	push	{lr}
 4b6:	2140      	movs	r1, #64	; 0x40
 4b8:	4802      	ldr	r0, [pc, #8]	; (4c4 <call_periph_bits_val()+0x10>)
 4ba:	f7ff fffe 	bl	4ac <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
 4be:	f85d fb04 	ldr.w	pc, [sp], #4
 4c2:	bf00      	nop
 4c4:	20002480 	.word	0x20002480

000004c8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
 4c8:	6803      	ldr	r3, [r0, #0]
 4ca:	4319      	orrs	r1, r3
 4cc:	6001      	str	r1, [r0, #0]
 4ce:	4770      	bx	lr

000004d0 <call_reg_bits_val()>:
 4d0:	b500      	push	{lr}
 4d2:	2140      	movs	r1, #64	; 0x40
 4d4:	4802      	ldr	r0, [pc, #8]	; (4e0 <call_reg_bits_val()+0x10>)
 4d6:	f7ff fffe 	bl	4c8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
 4da:	f85d fb04 	ldr.w	pc, [sp], #4
 4de:	bf00      	nop
 4e0:	20002484 	.word	0x20002484

000004e4 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
 4e4:	6843      	ldr	r3, [r0, #4]
 4e6:	680a      	ldr	r2, [r1, #0]
 4e8:	4313      	orrs	r3, r2
 4ea:	6043      	str	r3, [r0, #4]
 4ec:	4770      	bx	lr

000004ee <call_periph_bits_ref()>:
 4ee:	b500      	push	{lr}
 4f0:	b081      	sub	sp, #4
 4f2:	2340      	movs	r3, #64	; 0x40
 4f4:	9300      	str	r3, [sp, #0]
 4f6:	4669      	mov	r1, sp
 4f8:	4802      	ldr	r0, [pc, #8]	; (504 <call_periph_bits_ref()+0x16>)
 4fa:	f7ff fffe 	bl	4e4 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
 4fe:	b001      	add	sp, #4
 500:	f85d fb04 	ldr.w	pc, [sp], #4
 504:	20002480 	.word	0x20002480

00000508 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
 508:	6803      	ldr	r3, [r0, #0]
 50a:	680a      	ldr	r2, [r1, #0]
 50c:	4313      	orrs	r3, r2
 50e:	6003      	str	r3, [r0, #0]
 510:	4770      	bx	lr

00000512 <call_reg_bits_ref()>:
 512:	b500      	push	{lr}
 514:	b081      	sub	sp, #4
 516:	2340      	movs	r3, #64	; 0x40
 518:	9300      	str	r3, [sp, #0]
 51a:	4669      	mov	r1, sp
 51c:	4802      	ldr	r0, [pc, #8]	; (528 <call_reg_bits_ref()+0x16>)
 51e:	f7ff fffe 	bl	508 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
 522:	b001      	add	sp, #4
 524:	f85d fb04 	ldr.w	pc, [sp], #4
 528:	20002484 	.word	0x20002484

0000052c <periph_mskd(mcu::Serial*)>:
 52c:	6843      	ldr	r3, [r0, #4]
 52e:	f023 0306 	bic.w	r3, r3, #6
 532:	f043 0302 	orr.w	r3, r3, #2
 536:	6043      	str	r3, [r0, #4]
 538:	4770      	bx	lr

0000053a <call_periph_mskd()>:
 53a:	b500      	push	{lr}
 53c:	4802      	ldr	r0, [pc, #8]	; (548 <call_periph_mskd()+0xe>)
 53e:	f7ff fffe 	bl	52c <periph_mskd(mcu::Serial*)>
 542:	f85d fb04 	ldr.w	pc, [sp], #4
 546:	bf00      	nop
 548:	20002480 	.word	0x20002480

0000054c <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 54c:	6843      	ldr	r3, [r0, #4]
 54e:	ea23 0101 	bic.w	r1, r3, r1
 552:	4311      	orrs	r1, r2
 554:	6041      	str	r1, [r0, #4]
 556:	4770      	bx	lr

00000558 <call_periph_mskd_val()>:
 558:	b500      	push	{lr}
 55a:	2106      	movs	r1, #6
 55c:	2202      	movs	r2, #2
 55e:	4802      	ldr	r0, [pc, #8]	; (568 <call_periph_mskd_val()+0x10>)
 560:	f7ff fffe 	bl	54c <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 564:	f85d fb04 	ldr.w	pc, [sp], #4
 568:	20002480 	.word	0x20002480

0000056c <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 56c:	6803      	ldr	r3, [r0, #0]
 56e:	ea23 0101 	bic.w	r1, r3, r1
 572:	4311      	orrs	r1, r2
 574:	6001      	str	r1, [r0, #0]
 576:	4770      	bx	lr

00000578 <call_reg_mskd_val()>:
 578:	b500      	push	{lr}
 57a:	2106      	movs	r1, #6
 57c:	2202      	movs	r2, #2
 57e:	4802      	ldr	r0, [pc, #8]	; (588 <call_reg_mskd_val()+0x10>)
 580:	f7ff fffe 	bl	56c <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 584:	f85d fb04 	ldr.w	pc, [sp], #4
 588:	20002484 	.word	0x20002484

0000058c <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 58c:	6843      	ldr	r3, [r0, #4]
 58e:	ea23 0101 	bic.w	r1, r3, r1
 592:	4311      	orrs	r1, r2
 594:	6041      	str	r1, [r0, #4]
 596:	4770      	bx	lr

00000598 <call_periph_mskd_ref()>:
 598:	b500      	push	{lr}
 59a:	2106      	movs	r1, #6
 59c:	2202      	movs	r2, #2
 59e:	4802      	ldr	r0, [pc, #8]	; (5a8 <call_periph_mskd_ref()+0x10>)
 5a0:	f7ff fffe 	bl	58c <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 5a4:	f85d fb04 	ldr.w	pc, [sp], #4
 5a8:	20002480 	.word	0x20002480

000005ac <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 5ac:	6803      	ldr	r3, [r0, #0]
 5ae:	ea23 0101 	bic.w	r1, r3, r1
 5b2:	4311      	orrs	r1, r2
 5b4:	6001      	str	r1, [r0, #0]
 5b6:	4770      	bx	lr

000005b8 <call_reg_mskd_ref()>:
 5b8:	b500      	push	{lr}
 5ba:	2106      	movs	r1, #6
 5bc:	2202      	movs	r2, #2
 5be:	4802      	ldr	r0, [pc, #8]	; (5c8 <call_reg_mskd_ref()+0x10>)
 5c0:	f7ff fffe 	bl	5ac <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 5c4:	f85d fb04 	ldr.w	pc, [sp], #4
 5c8:	20002484 	.word	0x20002484

000005cc <return_bits()>:
 5cc:	2020      	movs	r0, #32
 5ce:	4770      	bx	lr

000005d0 <call_return_bits()>:
 5d0:	b500      	push	{lr}
 5d2:	f7ff fffe 	bl	5cc <return_bits()>
 5d6:	2820      	cmp	r0, #32
 5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <call_return_bits()+0x1c>)
 5da:	bf0c      	ite	eq
 5dc:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
 5e0:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
 5e4:	605a      	str	r2, [r3, #4]
 5e6:	f85d fb04 	ldr.w	pc, [sp], #4
 5ea:	bf00      	nop
 5ec:	200023e0 	.word	0x200023e0

000005f0 <return_mskd()>:
 5f0:	2218      	movs	r2, #24
 5f2:	6002      	str	r2, [r0, #0]
 5f4:	2208      	movs	r2, #8
 5f6:	6042      	str	r2, [r0, #4]
 5f8:	4770      	bx	lr

000005fa <call_return_mskd()>:
 5fa:	b500      	push	{lr}
 5fc:	b082      	sub	sp, #8
 5fe:	4668      	mov	r0, sp
 600:	f7ff fffe 	bl	5f0 <return_mskd()>
 604:	9a01      	ldr	r2, [sp, #4]
 606:	9b00      	ldr	r3, [sp, #0]
 608:	2b18      	cmp	r3, #24
 60a:	d006      	beq.n	61a <call_return_mskd()+0x20>
 60c:	4b06      	ldr	r3, [pc, #24]	; (628 <call_return_mskd()+0x2e>)
 60e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
 612:	605a      	str	r2, [r3, #4]
 614:	b002      	add	sp, #8
 616:	f85d fb04 	ldr.w	pc, [sp], #4
 61a:	2a08      	cmp	r2, #8
 61c:	d1f6      	bne.n	60c <call_return_mskd()+0x12>
 61e:	4b02      	ldr	r3, [pc, #8]	; (628 <call_return_mskd()+0x2e>)
 620:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 624:	605a      	str	r2, [r3, #4]
 626:	e7f5      	b.n	614 <call_return_mskd()+0x1a>
 628:	200023e0 	.word	0x200023e0

0000062c <return_reg()>:
 62c:	4b02      	ldr	r3, [pc, #8]	; (638 <return_reg()+0xc>)
 62e:	2240      	movs	r2, #64	; 0x40
 630:	605a      	str	r2, [r3, #4]
 632:	4802      	ldr	r0, [pc, #8]	; (63c <return_reg()+0x10>)
 634:	4770      	bx	lr
 636:	bf00      	nop
 638:	20002480 	.word	0x20002480
 63c:	20002484 	.word	0x20002484

00000640 <call_return_reg()>:
 640:	b500      	push	{lr}
 642:	f7ff fffe 	bl	62c <return_reg()>
 646:	6803      	ldr	r3, [r0, #0]
 648:	f013 0f40 	tst.w	r3, #64	; 0x40
 64c:	4b04      	ldr	r3, [pc, #16]	; (660 <call_return_reg()+0x20>)
 64e:	bf14      	ite	ne
 650:	f04f 52f0 	movne.w	r2, #503316480	; 0x1e000000
 654:	f04f 5238 	moveq.w	r2, #771751936	; 0x2e000000
 658:	605a      	str	r2, [r3, #4]
 65a:	f85d fb04 	ldr.w	pc, [sp], #4
 65e:	bf00      	nop
 660:	200023e0 	.word	0x200023e0

00000664 <return_periph()>:
 664:	4801      	ldr	r0, [pc, #4]	; (66c <return_periph()+0x8>)
 666:	2340      	movs	r3, #64	; 0x40
 668:	6043      	str	r3, [r0, #4]
 66a:	4770      	bx	lr
 66c:	20002480 	.word	0x20002480

00000670 <call_return_periph()>:
 670:	b500      	push	{lr}
 672:	f7ff fffe 	bl	664 <return_periph()>
 676:	6843      	ldr	r3, [r0, #4]
 678:	f013 0f40 	tst.w	r3, #64	; 0x40
 67c:	4b04      	ldr	r3, [pc, #16]	; (690 <call_return_periph()+0x20>)
 67e:	bf14      	ite	ne
 680:	f04f 5218 	movne.w	r2, #637534208	; 0x26000000
 684:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
 688:	605a      	str	r2, [r3, #4]
 68a:	f85d fb04 	ldr.w	pc, [sp], #4
 68e:	bf00      	nop
 690:	200023e0 	.word	0x200023e0

00000694 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
 694:	2805      	cmp	r0, #5
 696:	d006      	beq.n	6a6 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
 698:	2806      	cmp	r0, #6
 69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
 69c:	bf0c      	ite	eq
 69e:	2244      	moveq	r2, #68	; 0x44
 6a0:	2255      	movne	r2, #85	; 0x55
 6a2:	62da      	str	r2, [r3, #44]	; 0x2c
 6a4:	4770      	bx	lr
 6a6:	4b02      	ldr	r3, [pc, #8]	; (6b0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
 6a8:	2233      	movs	r2, #51	; 0x33
 6aa:	62da      	str	r2, [r3, #44]	; 0x2c
 6ac:	4770      	bx	lr
 6ae:	bf00      	nop
 6b0:	200022c0 	.word	0x200022c0

000006b4 <call_pos_val()>:
 6b4:	b500      	push	{lr}
 6b6:	2005      	movs	r0, #5
 6b8:	f7ff fffe 	bl	694 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
 6bc:	2006      	movs	r0, #6
 6be:	f7ff fffe 	bl	694 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
 6c2:	f85d fb04 	ldr.w	pc, [sp], #4

000006c6 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
 6c6:	6803      	ldr	r3, [r0, #0]
 6c8:	2b05      	cmp	r3, #5
 6ca:	d006      	beq.n	6da <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
 6cc:	2b06      	cmp	r3, #6
 6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
 6d0:	bf0c      	ite	eq
 6d2:	2277      	moveq	r2, #119	; 0x77
 6d4:	2288      	movne	r2, #136	; 0x88
 6d6:	62da      	str	r2, [r3, #44]	; 0x2c
 6d8:	4770      	bx	lr
 6da:	4b02      	ldr	r3, [pc, #8]	; (6e4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
 6dc:	2266      	movs	r2, #102	; 0x66
 6de:	62da      	str	r2, [r3, #44]	; 0x2c
 6e0:	4770      	bx	lr
 6e2:	bf00      	nop
 6e4:	200022c0 	.word	0x200022c0

000006e8 <call_pos_ref()>:
 6e8:	b510      	push	{r4, lr}
 6ea:	b082      	sub	sp, #8
 6ec:	2405      	movs	r4, #5
 6ee:	9401      	str	r4, [sp, #4]
 6f0:	a801      	add	r0, sp, #4
 6f2:	f7ff fffe 	bl	6c6 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
 6f6:	9400      	str	r4, [sp, #0]
 6f8:	4668      	mov	r0, sp
 6fa:	f7ff fffe 	bl	6c6 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
 6fe:	b002      	add	sp, #8
 700:	bd10      	pop	{r4, pc}

00000702 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 702:	4a03      	ldr	r2, [pc, #12]	; (710 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
 704:	6853      	ldr	r3, [r2, #4]
 706:	ea23 0000 	bic.w	r0, r3, r0
 70a:	4308      	orrs	r0, r1
 70c:	6050      	str	r0, [r2, #4]
 70e:	4770      	bx	lr
 710:	20002480 	.word	0x20002480

00000714 <call_range_val(unsigned int)>:
 714:	b500      	push	{lr}
 716:	0301      	lsls	r1, r0, #12
 718:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
 71c:	f7ff fffe 	bl	702 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 720:	f85d fb04 	ldr.w	pc, [sp], #4

00000724 <call_range_val_port()>:
 724:	b500      	push	{lr}
 726:	201f      	movs	r0, #31
 728:	f7ff fffe 	bl	714 <call_range_val(unsigned int)>
 72c:	f85d fb04 	ldr.w	pc, [sp], #4

00000730 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
 730:	4a03      	ldr	r2, [pc, #12]	; (740 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
 732:	6853      	ldr	r3, [r2, #4]
 734:	ea23 0000 	bic.w	r0, r3, r0
 738:	4308      	orrs	r0, r1
 73a:	6050      	str	r0, [r2, #4]
 73c:	4770      	bx	lr
 73e:	bf00      	nop
 740:	20002480 	.word	0x20002480

00000744 <call_range_ref(unsigned int)>:
 744:	b500      	push	{lr}
 746:	0301      	lsls	r1, r0, #12
 748:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
 74c:	f7ff fffe 	bl	730 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 750:	f85d fb04 	ldr.w	pc, [sp], #4

00000754 <call_range_ref_port()>:
 754:	b500      	push	{lr}
 756:	200c      	movs	r0, #12
 758:	f7ff fffe 	bl	744 <call_range_ref(unsigned int)>
 75c:	f85d fb04 	ldr.w	pc, [sp], #4

00000760 <check_array_range_pass(unsigned int)>:
 760:	2816      	cmp	r0, #22
 762:	4b03      	ldr	r3, [pc, #12]	; (770 <check_array_range_pass(unsigned int)+0x10>)
 764:	bf94      	ite	ls
 766:	227f      	movls	r2, #127	; 0x7f
 768:	2283      	movhi	r2, #131	; 0x83
 76a:	62da      	str	r2, [r3, #44]	; 0x2c
 76c:	4770      	bx	lr
 76e:	bf00      	nop
 770:	200022c0 	.word	0x200022c0

00000774 <check_array_range_fail(unsigned int)>:
 774:	2816      	cmp	r0, #22
 776:	4b03      	ldr	r3, [pc, #12]	; (784 <check_array_range_fail(unsigned int)+0x10>)
 778:	bf94      	ite	ls
 77a:	2295      	movls	r2, #149	; 0x95
 77c:	2297      	movhi	r2, #151	; 0x97
 77e:	62da      	str	r2, [r3, #44]	; 0x2c
 780:	4770      	bx	lr
 782:	bf00      	nop
 784:	200022c0 	.word	0x200022c0

00000788 <check_bits_range_pass(unsigned int)>:
 788:	280f      	cmp	r0, #15
 78a:	4b03      	ldr	r3, [pc, #12]	; (798 <check_bits_range_pass(unsigned int)+0x10>)
 78c:	bf94      	ite	ls
 78e:	229d      	movls	r2, #157	; 0x9d
 790:	22a3      	movhi	r2, #163	; 0xa3
 792:	62da      	str	r2, [r3, #44]	; 0x2c
 794:	4770      	bx	lr
 796:	bf00      	nop
 798:	200022c0 	.word	0x200022c0

0000079c <check_bits_range_fail(unsigned int)>:
 79c:	280f      	cmp	r0, #15
 79e:	4b03      	ldr	r3, [pc, #12]	; (7ac <check_bits_range_fail(unsigned int)+0x10>)
 7a0:	bf94      	ite	ls
 7a2:	22a7      	movls	r2, #167	; 0xa7
 7a4:	22ad      	movhi	r2, #173	; 0xad
 7a6:	62da      	str	r2, [r3, #44]	; 0x2c
 7a8:	4770      	bx	lr
 7aa:	bf00      	nop
 7ac:	200022c0 	.word	0x200022c0

000007b0 <check_mskd_range_pass(unsigned int)>:
 7b0:	281f      	cmp	r0, #31
 7b2:	4b03      	ldr	r3, [pc, #12]	; (7c0 <check_mskd_range_pass(unsigned int)+0x10>)
 7b4:	bf94      	ite	ls
 7b6:	22b3      	movls	r2, #179	; 0xb3
 7b8:	22b5      	movhi	r2, #181	; 0xb5
 7ba:	62da      	str	r2, [r3, #44]	; 0x2c
 7bc:	4770      	bx	lr
 7be:	bf00      	nop
 7c0:	200022c0 	.word	0x200022c0

000007c4 <check_mskd_range_fail(unsigned int)>:
 7c4:	281f      	cmp	r0, #31
 7c6:	4b03      	ldr	r3, [pc, #12]	; (7d4 <check_mskd_range_fail(unsigned int)+0x10>)
 7c8:	bf94      	ite	ls
 7ca:	22bf      	movls	r2, #191	; 0xbf
 7cc:	22c1      	movhi	r2, #193	; 0xc1
 7ce:	62da      	str	r2, [r3, #44]	; 0x2c
 7d0:	4770      	bx	lr
 7d2:	bf00      	nop
 7d4:	200022c0 	.word	0x200022c0

000007d8 <prescaler_low()>:
 7d8:	4b04      	ldr	r3, [pc, #16]	; (7ec <prescaler_low()+0x14>)
 7da:	2277      	movs	r2, #119	; 0x77
 7dc:	605a      	str	r2, [r3, #4]
 7de:	685b      	ldr	r3, [r3, #4]
 7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 7e4:	4a02      	ldr	r2, [pc, #8]	; (7f0 <prescaler_low()+0x18>)
 7e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 7e8:	4770      	bx	lr
 7ea:	bf00      	nop
 7ec:	200023e0 	.word	0x200023e0
 7f0:	200022c0 	.word	0x200022c0

000007f4 <prescaler_high()>:
 7f4:	4b04      	ldr	r3, [pc, #16]	; (808 <prescaler_high()+0x14>)
 7f6:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 7fa:	605a      	str	r2, [r3, #4]
 7fc:	685b      	ldr	r3, [r3, #4]
 7fe:	f3c3 6344 	ubfx	r3, r3, #25, #5
 802:	4a02      	ldr	r2, [pc, #8]	; (80c <prescaler_high()+0x18>)
 804:	62d3      	str	r3, [r2, #44]	; 0x2c
 806:	4770      	bx	lr
 808:	200023e0 	.word	0x200023e0
 80c:	200022c0 	.word	0x200022c0

00000810 <reg_mskd_lss()>:
 810:	4b07      	ldr	r3, [pc, #28]	; (830 <reg_mskd_lss()+0x20>)
 812:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
 816:	605a      	str	r2, [r3, #4]
 818:	685b      	ldr	r3, [r3, #4]
 81a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 81e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
 822:	4b04      	ldr	r3, [pc, #16]	; (834 <reg_mskd_lss()+0x24>)
 824:	bf34      	ite	cc
 826:	2202      	movcc	r2, #2
 828:	2204      	movcs	r2, #4
 82a:	605a      	str	r2, [r3, #4]
 82c:	4770      	bx	lr
 82e:	bf00      	nop
 830:	200023e0 	.word	0x200023e0
 834:	20002480 	.word	0x20002480

00000838 <reg_mskd_leq()>:
 838:	4b0b      	ldr	r3, [pc, #44]	; (868 <reg_mskd_leq()+0x30>)
 83a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 83e:	605a      	str	r2, [r3, #4]
 840:	685b      	ldr	r3, [r3, #4]
 842:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 846:	4293      	cmp	r3, r2
 848:	d80a      	bhi.n	860 <reg_mskd_leq()+0x28>
 84a:	4b07      	ldr	r3, [pc, #28]	; (868 <reg_mskd_leq()+0x30>)
 84c:	685b      	ldr	r3, [r3, #4]
 84e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 856:	d803      	bhi.n	860 <reg_mskd_leq()+0x28>
 858:	4b04      	ldr	r3, [pc, #16]	; (86c <reg_mskd_leq()+0x34>)
 85a:	2202      	movs	r2, #2
 85c:	605a      	str	r2, [r3, #4]
 85e:	4770      	bx	lr
 860:	4b02      	ldr	r3, [pc, #8]	; (86c <reg_mskd_leq()+0x34>)
 862:	2204      	movs	r2, #4
 864:	605a      	str	r2, [r3, #4]
 866:	4770      	bx	lr
 868:	200023e0 	.word	0x200023e0
 86c:	20002480 	.word	0x20002480

00000870 <reg_mskd_gtr()>:
 870:	4b07      	ldr	r3, [pc, #28]	; (890 <reg_mskd_gtr()+0x20>)
 872:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
 876:	605a      	str	r2, [r3, #4]
 878:	685b      	ldr	r3, [r3, #4]
 87a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 87e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 882:	4b04      	ldr	r3, [pc, #16]	; (894 <reg_mskd_gtr()+0x24>)
 884:	bf8c      	ite	hi
 886:	2202      	movhi	r2, #2
 888:	2204      	movls	r2, #4
 88a:	605a      	str	r2, [r3, #4]
 88c:	4770      	bx	lr
 88e:	bf00      	nop
 890:	200023e0 	.word	0x200023e0
 894:	20002480 	.word	0x20002480

00000898 <reg_mskd_geq()>:
 898:	4b0b      	ldr	r3, [pc, #44]	; (8c8 <reg_mskd_geq()+0x30>)
 89a:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 89e:	605a      	str	r2, [r3, #4]
 8a0:	685b      	ldr	r3, [r3, #4]
 8a2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8aa:	d309      	bcc.n	8c0 <reg_mskd_geq()+0x28>
 8ac:	4b06      	ldr	r3, [pc, #24]	; (8c8 <reg_mskd_geq()+0x30>)
 8ae:	685b      	ldr	r3, [r3, #4]
 8b0:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 8b4:	4293      	cmp	r3, r2
 8b6:	d303      	bcc.n	8c0 <reg_mskd_geq()+0x28>
 8b8:	4b04      	ldr	r3, [pc, #16]	; (8cc <reg_mskd_geq()+0x34>)
 8ba:	2202      	movs	r2, #2
 8bc:	605a      	str	r2, [r3, #4]
 8be:	4770      	bx	lr
 8c0:	4b02      	ldr	r3, [pc, #8]	; (8cc <reg_mskd_geq()+0x34>)
 8c2:	2204      	movs	r2, #4
 8c4:	605a      	str	r2, [r3, #4]
 8c6:	4770      	bx	lr
 8c8:	200023e0 	.word	0x200023e0
 8cc:	20002480 	.word	0x20002480

000008d0 <pos_cmp_eq()>:
 8d0:	4b01      	ldr	r3, [pc, #4]	; (8d8 <pos_cmp_eq()+0x8>)
 8d2:	2202      	movs	r2, #2
 8d4:	605a      	str	r2, [r3, #4]
 8d6:	4770      	bx	lr
 8d8:	20002480 	.word	0x20002480

000008dc <pos_cmp_ne()>:
 8dc:	4b01      	ldr	r3, [pc, #4]	; (8e4 <pos_cmp_ne()+0x8>)
 8de:	2202      	movs	r2, #2
 8e0:	605a      	str	r2, [r3, #4]
 8e2:	4770      	bx	lr
 8e4:	20002480 	.word	0x20002480

000008e8 <bits_extract_eq()>:
 8e8:	4b05      	ldr	r3, [pc, #20]	; (900 <bits_extract_eq()+0x18>)
 8ea:	2240      	movs	r2, #64	; 0x40
 8ec:	605a      	str	r2, [r3, #4]
 8ee:	685b      	ldr	r3, [r3, #4]
 8f0:	4293      	cmp	r3, r2
 8f2:	4b03      	ldr	r3, [pc, #12]	; (900 <bits_extract_eq()+0x18>)
 8f4:	bf0c      	ite	eq
 8f6:	2202      	moveq	r2, #2
 8f8:	2204      	movne	r2, #4
 8fa:	605a      	str	r2, [r3, #4]
 8fc:	4770      	bx	lr
 8fe:	bf00      	nop
 900:	20002480 	.word	0x20002480

00000904 <bits_extract_ne()>:
 904:	4b05      	ldr	r3, [pc, #20]	; (91c <bits_extract_ne()+0x18>)
 906:	2220      	movs	r2, #32
 908:	605a      	str	r2, [r3, #4]
 90a:	685b      	ldr	r3, [r3, #4]
 90c:	4293      	cmp	r3, r2
 90e:	4b03      	ldr	r3, [pc, #12]	; (91c <bits_extract_ne()+0x18>)
 910:	bf14      	ite	ne
 912:	2202      	movne	r2, #2
 914:	2204      	moveq	r2, #4
 916:	605a      	str	r2, [r3, #4]
 918:	4770      	bx	lr
 91a:	bf00      	nop
 91c:	20002480 	.word	0x20002480

00000920 <mskd_extract_eq()>:
 920:	4b05      	ldr	r3, [pc, #20]	; (938 <mskd_extract_eq()+0x18>)
 922:	2202      	movs	r2, #2
 924:	605a      	str	r2, [r3, #4]
 926:	685b      	ldr	r3, [r3, #4]
 928:	4293      	cmp	r3, r2
 92a:	4b03      	ldr	r3, [pc, #12]	; (938 <mskd_extract_eq()+0x18>)
 92c:	bf0c      	ite	eq
 92e:	2220      	moveq	r2, #32
 930:	2240      	movne	r2, #64	; 0x40
 932:	605a      	str	r2, [r3, #4]
 934:	4770      	bx	lr
 936:	bf00      	nop
 938:	20002480 	.word	0x20002480

0000093c <mskd_extract_ne()>:
 93c:	4b05      	ldr	r3, [pc, #20]	; (954 <mskd_extract_ne()+0x18>)
 93e:	2204      	movs	r2, #4
 940:	605a      	str	r2, [r3, #4]
 942:	685b      	ldr	r3, [r3, #4]
 944:	4293      	cmp	r3, r2
 946:	4b03      	ldr	r3, [pc, #12]	; (954 <mskd_extract_ne()+0x18>)
 948:	bf0c      	ite	eq
 94a:	2240      	moveq	r2, #64	; 0x40
 94c:	2220      	movne	r2, #32
 94e:	605a      	str	r2, [r3, #4]
 950:	4770      	bx	lr
 952:	bf00      	nop
 954:	20002480 	.word	0x20002480

00000958 <mskd_extract_lss()>:
 958:	4b06      	ldr	r3, [pc, #24]	; (974 <mskd_extract_lss()+0x1c>)
 95a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 95e:	605a      	str	r2, [r3, #4]
 960:	685b      	ldr	r3, [r3, #4]
 962:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 966:	4b04      	ldr	r3, [pc, #16]	; (978 <mskd_extract_lss()+0x20>)
 968:	bf34      	ite	cc
 96a:	2220      	movcc	r2, #32
 96c:	2240      	movcs	r2, #64	; 0x40
 96e:	605a      	str	r2, [r3, #4]
 970:	4770      	bx	lr
 972:	bf00      	nop
 974:	200023e0 	.word	0x200023e0
 978:	20002480 	.word	0x20002480

0000097c <mskd_extract_leq()>:
 97c:	4b05      	ldr	r3, [pc, #20]	; (994 <mskd_extract_leq()+0x18>)
 97e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 982:	605a      	str	r2, [r3, #4]
 984:	685b      	ldr	r3, [r3, #4]
 986:	4293      	cmp	r3, r2
 988:	4b03      	ldr	r3, [pc, #12]	; (998 <mskd_extract_leq()+0x1c>)
 98a:	bf94      	ite	ls
 98c:	2220      	movls	r2, #32
 98e:	2240      	movhi	r2, #64	; 0x40
 990:	605a      	str	r2, [r3, #4]
 992:	4770      	bx	lr
 994:	200023e0 	.word	0x200023e0
 998:	20002480 	.word	0x20002480

0000099c <mskd_extract_gtr()>:
 99c:	4b06      	ldr	r3, [pc, #24]	; (9b8 <mskd_extract_gtr()+0x1c>)
 99e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
 9a2:	605a      	str	r2, [r3, #4]
 9a4:	685b      	ldr	r3, [r3, #4]
 9a6:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 9aa:	4b04      	ldr	r3, [pc, #16]	; (9bc <mskd_extract_gtr()+0x20>)
 9ac:	bf8c      	ite	hi
 9ae:	2220      	movhi	r2, #32
 9b0:	2240      	movls	r2, #64	; 0x40
 9b2:	605a      	str	r2, [r3, #4]
 9b4:	4770      	bx	lr
 9b6:	bf00      	nop
 9b8:	200023e0 	.word	0x200023e0
 9bc:	20002480 	.word	0x20002480

000009c0 <mskd_extract_geq()>:
 9c0:	4b05      	ldr	r3, [pc, #20]	; (9d8 <mskd_extract_geq()+0x18>)
 9c2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 9c6:	605a      	str	r2, [r3, #4]
 9c8:	685b      	ldr	r3, [r3, #4]
 9ca:	4293      	cmp	r3, r2
 9cc:	4b03      	ldr	r3, [pc, #12]	; (9dc <mskd_extract_geq()+0x1c>)
 9ce:	bf2c      	ite	cs
 9d0:	2220      	movcs	r2, #32
 9d2:	2240      	movcc	r2, #64	; 0x40
 9d4:	605a      	str	r2, [r3, #4]
 9d6:	4770      	bx	lr
 9d8:	200023e0 	.word	0x200023e0
 9dc:	20002480 	.word	0x20002480

000009e0 <set_bits_global()>:
 9e0:	4a02      	ldr	r2, [pc, #8]	; (9ec <set_bits_global()+0xc>)
 9e2:	6853      	ldr	r3, [r2, #4]
 9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 9e8:	6053      	str	r3, [r2, #4]
 9ea:	4770      	bx	lr
 9ec:	20002480 	.word	0x20002480

000009f0 <ins_mskd_global()>:
 9f0:	4a03      	ldr	r2, [pc, #12]	; (a00 <ins_mskd_global()+0x10>)
 9f2:	6853      	ldr	r3, [r2, #4]
 9f4:	f023 0306 	bic.w	r3, r3, #6
 9f8:	f043 0302 	orr.w	r3, r3, #2
 9fc:	6053      	str	r3, [r2, #4]
 9fe:	4770      	bx	lr
 a00:	20002480 	.word	0x20002480

00000a04 <assign_array_global()>:
 a04:	4b01      	ldr	r3, [pc, #4]	; (a0c <assign_array_global()+0x8>)
 a06:	22bd      	movs	r2, #189	; 0xbd
 a08:	601a      	str	r2, [r3, #0]
 a0a:	4770      	bx	lr
 a0c:	200022ec 	.word	0x200022ec

00000a10 <shifted_global()>:
 a10:	4b04      	ldr	r3, [pc, #16]	; (a24 <shifted_global()+0x14>)
 a12:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 a16:	605a      	str	r2, [r3, #4]
 a18:	685b      	ldr	r3, [r3, #4]
 a1a:	f3c3 6344 	ubfx	r3, r3, #25, #5
 a1e:	4a02      	ldr	r2, [pc, #8]	; (a28 <shifted_global()+0x18>)
 a20:	62d3      	str	r3, [r2, #44]	; 0x2c
 a22:	4770      	bx	lr
 a24:	200023e0 	.word	0x200023e0
 a28:	200022c0 	.word	0x200022c0

00000a2c <assign_register_global()>:
 a2c:	4b01      	ldr	r3, [pc, #4]	; (a34 <assign_register_global()+0x8>)
 a2e:	2204      	movs	r2, #4
 a30:	605a      	str	r2, [r3, #4]
 a32:	4770      	bx	lr
 a34:	20002480 	.word	0x20002480

00000a38 <call_pos_val_global()>:
 a38:	b500      	push	{lr}
 a3a:	2006      	movs	r0, #6
 a3c:	f7ff fffe 	bl	694 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
 a40:	f85d fb04 	ldr.w	pc, [sp], #4

00000a44 <call_pos_ref_global()>:
 a44:	b500      	push	{lr}
 a46:	b081      	sub	sp, #4
 a48:	2306      	movs	r3, #6
 a4a:	9300      	str	r3, [sp, #0]
 a4c:	4668      	mov	r0, sp
 a4e:	f7ff fffe 	bl	6c6 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
 a52:	b001      	add	sp, #4
 a54:	f85d fb04 	ldr.w	pc, [sp], #4

00000a58 <call_bits_val_global()>:
 a58:	b500      	push	{lr}
 a5a:	2040      	movs	r0, #64	; 0x40
 a5c:	f7ff fffe 	bl	378 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
 a60:	f85d fb04 	ldr.w	pc, [sp], #4

00000a64 <call_bits_ref_global()>:
 a64:	b500      	push	{lr}
 a66:	b081      	sub	sp, #4
 a68:	2340      	movs	r3, #64	; 0x40
 a6a:	9300      	str	r3, [sp, #0]
 a6c:	4668      	mov	r0, sp
 a6e:	f7ff fffe 	bl	3dc <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
 a72:	b001      	add	sp, #4
 a74:	f85d fb04 	ldr.w	pc, [sp], #4

00000a78 <call_mskd_val_global()>:
 a78:	b500      	push	{lr}
 a7a:	2006      	movs	r0, #6
 a7c:	2102      	movs	r1, #2
 a7e:	f7ff fffe 	bl	414 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
 a82:	f85d fb04 	ldr.w	pc, [sp], #4

00000a86 <call_mskd_ref_global()>:
 a86:	b500      	push	{lr}
 a88:	b082      	sub	sp, #8
 a8a:	2306      	movs	r3, #6
 a8c:	9300      	str	r3, [sp, #0]
 a8e:	2302      	movs	r3, #2
 a90:	9301      	str	r3, [sp, #4]
 a92:	4668      	mov	r0, sp
 a94:	f7ff fffe 	bl	444 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
 a98:	b002      	add	sp, #8
 a9a:	f85d fb04 	ldr.w	pc, [sp], #4

00000a9e <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
 a9e:	4b05      	ldr	r3, [pc, #20]	; (ab4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x16>)
 aa0:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 aa4:	605a      	str	r2, [r3, #4]
 aa6:	685b      	ldr	r3, [r3, #4]
 aa8:	4018      	ands	r0, r3
 aaa:	40c8      	lsrs	r0, r1
 aac:	4b02      	ldr	r3, [pc, #8]	; (ab8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1a>)
 aae:	62d8      	str	r0, [r3, #44]	; 0x2c
 ab0:	4770      	bx	lr
 ab2:	bf00      	nop
 ab4:	200023e0 	.word	0x200023e0
 ab8:	200022c0 	.word	0x200022c0

00000abc <call_shifted_const_val()>:
 abc:	b500      	push	{lr}
 abe:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
 ac2:	2119      	movs	r1, #25
 ac4:	f7ff fffe 	bl	a9e <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
 ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00000acc <call_shifted_var_val()>:
 acc:	b500      	push	{lr}
 ace:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
 ad2:	2119      	movs	r1, #25
 ad4:	f7ff fffe 	bl	a9e <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
 ad8:	f85d fb04 	ldr.w	pc, [sp], #4

00000adc <call_shifted_global_val()>:
 adc:	b500      	push	{lr}
 ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <call_shifted_global_val()+0x14>)
 ae0:	f103 0108 	add.w	r1, r3, #8
 ae4:	c903      	ldmia	r1, {r0, r1}
 ae6:	f7ff fffe 	bl	a9e <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
 aea:	f85d fb04 	ldr.w	pc, [sp], #4
 aee:	bf00      	nop
 af0:	00000000 	.word	0x00000000

00000af4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
 af4:	4b05      	ldr	r3, [pc, #20]	; (b0c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
 af6:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 afa:	605a      	str	r2, [r3, #4]
 afc:	685b      	ldr	r3, [r3, #4]
 afe:	6802      	ldr	r2, [r0, #0]
 b00:	4013      	ands	r3, r2
 b02:	6842      	ldr	r2, [r0, #4]
 b04:	40d3      	lsrs	r3, r2
 b06:	4a02      	ldr	r2, [pc, #8]	; (b10 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
 b08:	62d3      	str	r3, [r2, #44]	; 0x2c
 b0a:	4770      	bx	lr
 b0c:	200023e0 	.word	0x200023e0
 b10:	200022c0 	.word	0x200022c0

00000b14 <call_shifted_const_ref()>:
 b14:	b500      	push	{lr}
 b16:	b082      	sub	sp, #8
 b18:	4b05      	ldr	r3, [pc, #20]	; (b30 <call_shifted_const_ref()+0x1c>)
 b1a:	f103 0310 	add.w	r3, r3, #16
 b1e:	cb0c      	ldmia	r3, {r2, r3}
 b20:	e88d 000c 	stmia.w	sp, {r2, r3}
 b24:	4668      	mov	r0, sp
 b26:	f7ff fffe 	bl	af4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
 b2a:	b002      	add	sp, #8
 b2c:	f85d fb04 	ldr.w	pc, [sp], #4
 b30:	00000000 	.word	0x00000000

00000b34 <call_shifted_var_ref()>:
 b34:	b500      	push	{lr}
 b36:	b082      	sub	sp, #8
 b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <call_shifted_var_ref()+0x1c>)
 b3a:	f103 0318 	add.w	r3, r3, #24
 b3e:	cb0c      	ldmia	r3, {r2, r3}
 b40:	e88d 000c 	stmia.w	sp, {r2, r3}
 b44:	4668      	mov	r0, sp
 b46:	f7ff fffe 	bl	af4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
 b4a:	b002      	add	sp, #8
 b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 b50:	00000000 	.word	0x00000000

00000b54 <call_shifted_global_ref()>:
 b54:	b500      	push	{lr}
 b56:	b082      	sub	sp, #8
 b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <call_shifted_global_ref()+0x1c>)
 b5a:	f103 0308 	add.w	r3, r3, #8
 b5e:	cb0c      	ldmia	r3, {r2, r3}
 b60:	e88d 000c 	stmia.w	sp, {r2, r3}
 b64:	4668      	mov	r0, sp
 b66:	f7ff fffe 	bl	af4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
 b6a:	b002      	add	sp, #8
 b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 b70:	00000000 	.word	0x00000000

00000b74 <copy_bits_equ()>:
 b74:	4b05      	ldr	r3, [pc, #20]	; (b8c <copy_bits_equ()+0x18>)
 b76:	2240      	movs	r2, #64	; 0x40
 b78:	605a      	str	r2, [r3, #4]
 b7a:	685b      	ldr	r3, [r3, #4]
 b7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 b80:	4b02      	ldr	r3, [pc, #8]	; (b8c <copy_bits_equ()+0x18>)
 b82:	bf14      	ite	ne
 b84:	2202      	movne	r2, #2
 b86:	2204      	moveq	r2, #4
 b88:	605a      	str	r2, [r3, #4]
 b8a:	4770      	bx	lr
 b8c:	20002480 	.word	0x20002480

00000b90 <copy_bits_neq()>:
 b90:	4b05      	ldr	r3, [pc, #20]	; (ba8 <copy_bits_neq()+0x18>)
 b92:	2240      	movs	r2, #64	; 0x40
 b94:	605a      	str	r2, [r3, #4]
 b96:	685b      	ldr	r3, [r3, #4]
 b98:	f013 0f40 	tst.w	r3, #64	; 0x40
 b9c:	4b02      	ldr	r3, [pc, #8]	; (ba8 <copy_bits_neq()+0x18>)
 b9e:	bf0c      	ite	eq
 ba0:	2202      	moveq	r2, #2
 ba2:	2204      	movne	r2, #4
 ba4:	605a      	str	r2, [r3, #4]
 ba6:	4770      	bx	lr
 ba8:	20002480 	.word	0x20002480

00000bac <copy_mskd_equ()>:
 bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <copy_mskd_equ()+0x1c>)
 bae:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 bb2:	605a      	str	r2, [r3, #4]
 bb4:	685b      	ldr	r3, [r3, #4]
 bb6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 bba:	4293      	cmp	r3, r2
 bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <copy_mskd_equ()+0x20>)
 bbe:	bf0c      	ite	eq
 bc0:	2202      	moveq	r2, #2
 bc2:	2204      	movne	r2, #4
 bc4:	605a      	str	r2, [r3, #4]
 bc6:	4770      	bx	lr
 bc8:	200023e0 	.word	0x200023e0
 bcc:	20002480 	.word	0x20002480

00000bd0 <copy_mskd_neq()>:
 bd0:	4b06      	ldr	r3, [pc, #24]	; (bec <copy_mskd_neq()+0x1c>)
 bd2:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
 bd6:	605a      	str	r2, [r3, #4]
 bd8:	685b      	ldr	r3, [r3, #4]
 bda:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 bde:	4293      	cmp	r3, r2
 be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <copy_mskd_neq()+0x20>)
 be2:	bf14      	ite	ne
 be4:	2202      	movne	r2, #2
 be6:	2204      	moveq	r2, #4
 be8:	605a      	str	r2, [r3, #4]
 bea:	4770      	bx	lr
 bec:	200023e0 	.word	0x200023e0
 bf0:	20002480 	.word	0x20002480

00000bf4 <copy_mskd_lss()>:
 bf4:	4b07      	ldr	r3, [pc, #28]	; (c14 <copy_mskd_lss()+0x20>)
 bf6:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
 bfa:	605a      	str	r2, [r3, #4]
 bfc:	685b      	ldr	r3, [r3, #4]
 bfe:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 c02:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
 c06:	4b04      	ldr	r3, [pc, #16]	; (c18 <copy_mskd_lss()+0x24>)
 c08:	bf34      	ite	cc
 c0a:	2202      	movcc	r2, #2
 c0c:	2204      	movcs	r2, #4
 c0e:	605a      	str	r2, [r3, #4]
 c10:	4770      	bx	lr
 c12:	bf00      	nop
 c14:	200023e0 	.word	0x200023e0
 c18:	20002480 	.word	0x20002480

00000c1c <copy_mskd_leq()>:
 c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <copy_mskd_leq()+0x1c>)
 c1e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
 c22:	605a      	str	r2, [r3, #4]
 c24:	685b      	ldr	r3, [r3, #4]
 c26:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 c2a:	4293      	cmp	r3, r2
 c2c:	4b03      	ldr	r3, [pc, #12]	; (c3c <copy_mskd_leq()+0x20>)
 c2e:	bf94      	ite	ls
 c30:	2202      	movls	r2, #2
 c32:	2204      	movhi	r2, #4
 c34:	605a      	str	r2, [r3, #4]
 c36:	4770      	bx	lr
 c38:	200023e0 	.word	0x200023e0
 c3c:	20002480 	.word	0x20002480

00000c40 <copy_mskd_gtr()>:
 c40:	4b07      	ldr	r3, [pc, #28]	; (c60 <copy_mskd_gtr()+0x20>)
 c42:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
 c46:	605a      	str	r2, [r3, #4]
 c48:	685b      	ldr	r3, [r3, #4]
 c4a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 c4e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <copy_mskd_gtr()+0x24>)
 c54:	bf8c      	ite	hi
 c56:	2202      	movhi	r2, #2
 c58:	2204      	movls	r2, #4
 c5a:	605a      	str	r2, [r3, #4]
 c5c:	4770      	bx	lr
 c5e:	bf00      	nop
 c60:	200023e0 	.word	0x200023e0
 c64:	20002480 	.word	0x20002480

00000c68 <copy_mskd_geq()>:
 c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <copy_mskd_geq()+0x1c>)
 c6a:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 c6e:	605a      	str	r2, [r3, #4]
 c70:	685b      	ldr	r3, [r3, #4]
 c72:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
 c76:	4293      	cmp	r3, r2
 c78:	4b03      	ldr	r3, [pc, #12]	; (c88 <copy_mskd_geq()+0x20>)
 c7a:	bf2c      	ite	cs
 c7c:	2202      	movcs	r2, #2
 c7e:	2204      	movcc	r2, #4
 c80:	605a      	str	r2, [r3, #4]
 c82:	4770      	bx	lr
 c84:	200023e0 	.word	0x200023e0
 c88:	20002480 	.word	0x20002480

00000c8c <copy_shifted()>:
 c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <copy_shifted()+0x1c>)
 c8e:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 c92:	605a      	str	r2, [r3, #4]
 c94:	685b      	ldr	r3, [r3, #4]
 c96:	f3c3 6344 	ubfx	r3, r3, #25, #5
 c9a:	2b0b      	cmp	r3, #11
 c9c:	4b03      	ldr	r3, [pc, #12]	; (cac <copy_shifted()+0x20>)
 c9e:	bf0c      	ite	eq
 ca0:	2202      	moveq	r2, #2
 ca2:	2204      	movne	r2, #4
 ca4:	605a      	str	r2, [r3, #4]
 ca6:	4770      	bx	lr
 ca8:	200023e0 	.word	0x200023e0
 cac:	20002480 	.word	0x20002480

00000cb0 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
 cb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 cb4:	4b02      	ldr	r3, [pc, #8]	; (cc0 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x10>)
 cb6:	bf14      	ite	ne
 cb8:	2202      	movne	r2, #2
 cba:	2204      	moveq	r2, #4
 cbc:	605a      	str	r2, [r3, #4]
 cbe:	4770      	bx	lr
 cc0:	20002480 	.word	0x20002480

00000cc4 <call_copy_bits_val()>:
 cc4:	b500      	push	{lr}
 cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <call_copy_bits_val()+0x14>)
 cc8:	2240      	movs	r2, #64	; 0x40
 cca:	605a      	str	r2, [r3, #4]
 ccc:	6858      	ldr	r0, [r3, #4]
 cce:	f7ff fffe 	bl	cb0 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
 cd2:	f85d fb04 	ldr.w	pc, [sp], #4
 cd6:	bf00      	nop
 cd8:	20002480 	.word	0x20002480

00000cdc <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
 cdc:	6803      	ldr	r3, [r0, #0]
 cde:	f013 0f40 	tst.w	r3, #64	; 0x40
 ce2:	4b03      	ldr	r3, [pc, #12]	; (cf0 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x14>)
 ce4:	bf14      	ite	ne
 ce6:	2202      	movne	r2, #2
 ce8:	2204      	moveq	r2, #4
 cea:	605a      	str	r2, [r3, #4]
 cec:	4770      	bx	lr
 cee:	bf00      	nop
 cf0:	20002480 	.word	0x20002480

00000cf4 <call_copy_bits_ref()>:
 cf4:	b500      	push	{lr}
 cf6:	b081      	sub	sp, #4
 cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <call_copy_bits_ref()+0x1c>)
 cfa:	2240      	movs	r2, #64	; 0x40
 cfc:	605a      	str	r2, [r3, #4]
 cfe:	685b      	ldr	r3, [r3, #4]
 d00:	9300      	str	r3, [sp, #0]
 d02:	4668      	mov	r0, sp
 d04:	f7ff fffe 	bl	cdc <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
 d08:	b001      	add	sp, #4
 d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 d0e:	bf00      	nop
 d10:	20002480 	.word	0x20002480

00000d14 <run>:
 d14:	b510      	push	{r4, lr}
 d16:	4b7e      	ldr	r3, [pc, #504]	; (f10 <run+0x1fc>)
 d18:	781b      	ldrb	r3, [r3, #0]
 d1a:	b923      	cbnz	r3, d26 <run+0x12>
 d1c:	4b7c      	ldr	r3, [pc, #496]	; (f10 <run+0x1fc>)
 d1e:	4a7d      	ldr	r2, [pc, #500]	; (f14 <run+0x200>)
 d20:	609a      	str	r2, [r3, #8]
 d22:	2201      	movs	r2, #1
 d24:	701a      	strb	r2, [r3, #0]
 d26:	4b7a      	ldr	r3, [pc, #488]	; (f10 <run+0x1fc>)
 d28:	7b1b      	ldrb	r3, [r3, #12]
 d2a:	b923      	cbnz	r3, d36 <run+0x22>
 d2c:	4b78      	ldr	r3, [pc, #480]	; (f10 <run+0x1fc>)
 d2e:	4a7a      	ldr	r2, [pc, #488]	; (f18 <run+0x204>)
 d30:	615a      	str	r2, [r3, #20]
 d32:	2201      	movs	r2, #1
 d34:	731a      	strb	r2, [r3, #12]
 d36:	4b76      	ldr	r3, [pc, #472]	; (f10 <run+0x1fc>)
 d38:	7e1b      	ldrb	r3, [r3, #24]
 d3a:	b913      	cbnz	r3, d42 <run+0x2e>
 d3c:	4b74      	ldr	r3, [pc, #464]	; (f10 <run+0x1fc>)
 d3e:	2201      	movs	r2, #1
 d40:	761a      	strb	r2, [r3, #24]
 d42:	4b73      	ldr	r3, [pc, #460]	; (f10 <run+0x1fc>)
 d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 d48:	b91b      	cbnz	r3, d52 <run+0x3e>
 d4a:	4b71      	ldr	r3, [pc, #452]	; (f10 <run+0x1fc>)
 d4c:	2201      	movs	r2, #1
 d4e:	f883 2020 	strb.w	r2, [r3, #32]
 d52:	4c6f      	ldr	r4, [pc, #444]	; (f10 <run+0x1fc>)
 d54:	2200      	movs	r2, #0
 d56:	68a1      	ldr	r1, [r4, #8]
 d58:	4870      	ldr	r0, [pc, #448]	; (f1c <run+0x208>)
 d5a:	f7ff fffe 	bl	0 <do_test>
 d5e:	2201      	movs	r2, #1
 d60:	68a1      	ldr	r1, [r4, #8]
 d62:	486f      	ldr	r0, [pc, #444]	; (f20 <run+0x20c>)
 d64:	f7ff fffe 	bl	0 <do_test>
 d68:	2202      	movs	r2, #2
 d6a:	68a1      	ldr	r1, [r4, #8]
 d6c:	486d      	ldr	r0, [pc, #436]	; (f24 <run+0x210>)
 d6e:	f7ff fffe 	bl	0 <do_test>
 d72:	2203      	movs	r2, #3
 d74:	68a1      	ldr	r1, [r4, #8]
 d76:	486c      	ldr	r0, [pc, #432]	; (f28 <run+0x214>)
 d78:	f7ff fffe 	bl	0 <do_test>
 d7c:	2204      	movs	r2, #4
 d7e:	68a1      	ldr	r1, [r4, #8]
 d80:	486a      	ldr	r0, [pc, #424]	; (f2c <run+0x218>)
 d82:	f7ff fffe 	bl	0 <do_test>
 d86:	2205      	movs	r2, #5
 d88:	68a1      	ldr	r1, [r4, #8]
 d8a:	4869      	ldr	r0, [pc, #420]	; (f30 <run+0x21c>)
 d8c:	f7ff fffe 	bl	0 <do_test>
 d90:	2206      	movs	r2, #6
 d92:	68a1      	ldr	r1, [r4, #8]
 d94:	4867      	ldr	r0, [pc, #412]	; (f34 <run+0x220>)
 d96:	f7ff fffe 	bl	0 <do_test>
 d9a:	2207      	movs	r2, #7
 d9c:	68a1      	ldr	r1, [r4, #8]
 d9e:	4866      	ldr	r0, [pc, #408]	; (f38 <run+0x224>)
 da0:	f7ff fffe 	bl	0 <do_test>
 da4:	2208      	movs	r2, #8
 da6:	68a1      	ldr	r1, [r4, #8]
 da8:	4864      	ldr	r0, [pc, #400]	; (f3c <run+0x228>)
 daa:	f7ff fffe 	bl	0 <do_test>
 dae:	2209      	movs	r2, #9
 db0:	68a1      	ldr	r1, [r4, #8]
 db2:	4863      	ldr	r0, [pc, #396]	; (f40 <run+0x22c>)
 db4:	f7ff fffe 	bl	0 <do_test>
 db8:	220a      	movs	r2, #10
 dba:	68a1      	ldr	r1, [r4, #8]
 dbc:	4861      	ldr	r0, [pc, #388]	; (f44 <run+0x230>)
 dbe:	f7ff fffe 	bl	0 <do_test>
 dc2:	220b      	movs	r2, #11
 dc4:	68a1      	ldr	r1, [r4, #8]
 dc6:	4860      	ldr	r0, [pc, #384]	; (f48 <run+0x234>)
 dc8:	f7ff fffe 	bl	0 <do_test>
 dcc:	220c      	movs	r2, #12
 dce:	68a1      	ldr	r1, [r4, #8]
 dd0:	485e      	ldr	r0, [pc, #376]	; (f4c <run+0x238>)
 dd2:	f7ff fffe 	bl	0 <do_test>
 dd6:	220d      	movs	r2, #13
 dd8:	68a1      	ldr	r1, [r4, #8]
 dda:	485d      	ldr	r0, [pc, #372]	; (f50 <run+0x23c>)
 ddc:	f7ff fffe 	bl	0 <do_test>
 de0:	220e      	movs	r2, #14
 de2:	68a1      	ldr	r1, [r4, #8]
 de4:	485b      	ldr	r0, [pc, #364]	; (f54 <run+0x240>)
 de6:	f7ff fffe 	bl	0 <do_test>
 dea:	220f      	movs	r2, #15
 dec:	68a1      	ldr	r1, [r4, #8]
 dee:	485a      	ldr	r0, [pc, #360]	; (f58 <run+0x244>)
 df0:	f7ff fffe 	bl	0 <do_test>
 df4:	2210      	movs	r2, #16
 df6:	68a1      	ldr	r1, [r4, #8]
 df8:	4858      	ldr	r0, [pc, #352]	; (f5c <run+0x248>)
 dfa:	f7ff fffe 	bl	0 <do_test>
 dfe:	2211      	movs	r2, #17
 e00:	68a1      	ldr	r1, [r4, #8]
 e02:	4857      	ldr	r0, [pc, #348]	; (f60 <run+0x24c>)
 e04:	f7ff fffe 	bl	0 <do_test>
 e08:	2212      	movs	r2, #18
 e0a:	68a1      	ldr	r1, [r4, #8]
 e0c:	4855      	ldr	r0, [pc, #340]	; (f64 <run+0x250>)
 e0e:	f7ff fffe 	bl	0 <do_test>
 e12:	2213      	movs	r2, #19
 e14:	68a1      	ldr	r1, [r4, #8]
 e16:	4854      	ldr	r0, [pc, #336]	; (f68 <run+0x254>)
 e18:	f7ff fffe 	bl	0 <do_test>
 e1c:	2214      	movs	r2, #20
 e1e:	68a1      	ldr	r1, [r4, #8]
 e20:	4852      	ldr	r0, [pc, #328]	; (f6c <run+0x258>)
 e22:	f7ff fffe 	bl	0 <do_test>
 e26:	2215      	movs	r2, #21
 e28:	68a1      	ldr	r1, [r4, #8]
 e2a:	4851      	ldr	r0, [pc, #324]	; (f70 <run+0x25c>)
 e2c:	f7ff fffe 	bl	0 <do_test>
 e30:	2216      	movs	r2, #22
 e32:	68a1      	ldr	r1, [r4, #8]
 e34:	484f      	ldr	r0, [pc, #316]	; (f74 <run+0x260>)
 e36:	f7ff fffe 	bl	0 <do_test>
 e3a:	2217      	movs	r2, #23
 e3c:	68a1      	ldr	r1, [r4, #8]
 e3e:	484e      	ldr	r0, [pc, #312]	; (f78 <run+0x264>)
 e40:	f7ff fffe 	bl	0 <do_test>
 e44:	2218      	movs	r2, #24
 e46:	68a1      	ldr	r1, [r4, #8]
 e48:	484c      	ldr	r0, [pc, #304]	; (f7c <run+0x268>)
 e4a:	f7ff fffe 	bl	0 <do_test>
 e4e:	2219      	movs	r2, #25
 e50:	68a1      	ldr	r1, [r4, #8]
 e52:	484b      	ldr	r0, [pc, #300]	; (f80 <run+0x26c>)
 e54:	f7ff fffe 	bl	0 <do_test>
 e58:	221a      	movs	r2, #26
 e5a:	68a1      	ldr	r1, [r4, #8]
 e5c:	4849      	ldr	r0, [pc, #292]	; (f84 <run+0x270>)
 e5e:	f7ff fffe 	bl	0 <do_test>
 e62:	221b      	movs	r2, #27
 e64:	68a1      	ldr	r1, [r4, #8]
 e66:	4848      	ldr	r0, [pc, #288]	; (f88 <run+0x274>)
 e68:	f7ff fffe 	bl	0 <do_test>
 e6c:	221c      	movs	r2, #28
 e6e:	68a1      	ldr	r1, [r4, #8]
 e70:	4846      	ldr	r0, [pc, #280]	; (f8c <run+0x278>)
 e72:	f7ff fffe 	bl	0 <do_test>
 e76:	221d      	movs	r2, #29
 e78:	68a1      	ldr	r1, [r4, #8]
 e7a:	4845      	ldr	r0, [pc, #276]	; (f90 <run+0x27c>)
 e7c:	f7ff fffe 	bl	0 <do_test>
 e80:	221e      	movs	r2, #30
 e82:	68a1      	ldr	r1, [r4, #8]
 e84:	4843      	ldr	r0, [pc, #268]	; (f94 <run+0x280>)
 e86:	f7ff fffe 	bl	0 <do_test>
 e8a:	221f      	movs	r2, #31
 e8c:	68a1      	ldr	r1, [r4, #8]
 e8e:	4842      	ldr	r0, [pc, #264]	; (f98 <run+0x284>)
 e90:	f7ff fffe 	bl	0 <do_test>
 e94:	2220      	movs	r2, #32
 e96:	68a1      	ldr	r1, [r4, #8]
 e98:	4840      	ldr	r0, [pc, #256]	; (f9c <run+0x288>)
 e9a:	f7ff fffe 	bl	0 <do_test>
 e9e:	2221      	movs	r2, #33	; 0x21
 ea0:	68a1      	ldr	r1, [r4, #8]
 ea2:	483f      	ldr	r0, [pc, #252]	; (fa0 <run+0x28c>)
 ea4:	f7ff fffe 	bl	0 <do_test>
 ea8:	2222      	movs	r2, #34	; 0x22
 eaa:	68a1      	ldr	r1, [r4, #8]
 eac:	483d      	ldr	r0, [pc, #244]	; (fa4 <run+0x290>)
 eae:	f7ff fffe 	bl	0 <do_test>
 eb2:	2223      	movs	r2, #35	; 0x23
 eb4:	68a1      	ldr	r1, [r4, #8]
 eb6:	483c      	ldr	r0, [pc, #240]	; (fa8 <run+0x294>)
 eb8:	f7ff fffe 	bl	0 <do_test>
 ebc:	2224      	movs	r2, #36	; 0x24
 ebe:	68a1      	ldr	r1, [r4, #8]
 ec0:	483a      	ldr	r0, [pc, #232]	; (fac <run+0x298>)
 ec2:	f7ff fffe 	bl	0 <do_test>
 ec6:	2225      	movs	r2, #37	; 0x25
 ec8:	6961      	ldr	r1, [r4, #20]
 eca:	4839      	ldr	r0, [pc, #228]	; (fb0 <run+0x29c>)
 ecc:	f7ff fffe 	bl	0 <do_test>
 ed0:	2226      	movs	r2, #38	; 0x26
 ed2:	6961      	ldr	r1, [r4, #20]
 ed4:	4837      	ldr	r0, [pc, #220]	; (fb4 <run+0x2a0>)
 ed6:	f7ff fffe 	bl	0 <do_test>
 eda:	2227      	movs	r2, #39	; 0x27
 edc:	6961      	ldr	r1, [r4, #20]
 ede:	4836      	ldr	r0, [pc, #216]	; (fb8 <run+0x2a4>)
 ee0:	f7ff fffe 	bl	0 <do_test>
 ee4:	2228      	movs	r2, #40	; 0x28
 ee6:	68a1      	ldr	r1, [r4, #8]
 ee8:	4834      	ldr	r0, [pc, #208]	; (fbc <run+0x2a8>)
 eea:	f7ff fffe 	bl	0 <do_test>
 eee:	2229      	movs	r2, #41	; 0x29
 ef0:	68a1      	ldr	r1, [r4, #8]
 ef2:	4833      	ldr	r0, [pc, #204]	; (fc0 <run+0x2ac>)
 ef4:	f7ff fffe 	bl	0 <do_test>
 ef8:	222a      	movs	r2, #42	; 0x2a
 efa:	68a1      	ldr	r1, [r4, #8]
 efc:	4831      	ldr	r0, [pc, #196]	; (fc4 <run+0x2b0>)
 efe:	f7ff fffe 	bl	0 <do_test>
 f02:	222b      	movs	r2, #43	; 0x2b
 f04:	68a1      	ldr	r1, [r4, #8]
 f06:	4830      	ldr	r0, [pc, #192]	; (fc8 <run+0x2b4>)
 f08:	f7ff fffe 	bl	0 <do_test>
 f0c:	bd10      	pop	{r4, pc}
 f0e:	bf00      	nop
 f10:	00000000 	.word	0x00000000
 f14:	20002484 	.word	0x20002484
 f18:	200023e4 	.word	0x200023e4
	...

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	00000000                                ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	00000000                                ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <guard variable for run::gpio1_set>:
	...

Disassembly of section .rodata:

00000000 <app_config::TIMER_PRESCALER_SHIFT-0x8>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002

00000008 <app_config::TIMER_PRESCALER_SHIFT>:
   8:	3e000000 00000019 3e000000 00000019     ...>.......>....
  18:	3e000000 00000019                       ...>....
