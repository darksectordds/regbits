
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	6853      	ldr	r3, [r2, #4]
     154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     158:	f023 0306 	bic.w	r3, r3, #6
     15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     160:	6053      	str	r3, [r2, #4]
     162:	4770      	bx	lr
     164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16a:	6853      	ldr	r3, [r2, #4]
     16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     170:	f023 0306 	bic.w	r3, r3, #6
     174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     178:	6053      	str	r3, [r2, #4]
     17a:	4770      	bx	lr
     17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
     180:	2260      	movs	r2, #96	; 0x60
     182:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
     18c:	2260      	movs	r2, #96	; 0x60
     18e:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
     198:	f44f 7242 	mov.w	r2, #776	; 0x308
     19c:	4b01      	ldr	r3, [pc, #4]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
     1a8:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ac:	4b01      	ldr	r3, [pc, #4]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
     1b8:	2222      	movs	r2, #34	; 0x22
     1ba:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
     1c4:	2222      	movs	r2, #34	; 0x22
     1c6:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
     1d0:	2244      	movs	r2, #68	; 0x44
     1d2:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
     1dc:	2244      	movs	r2, #68	; 0x44
     1de:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
     1e8:	2140      	movs	r1, #64	; 0x40
     1ea:	2201      	movs	r2, #1
     1ec:	4b01      	ldr	r3, [pc, #4]	; (1f4 <equ_bits_var()+0xc>)
     1ee:	6059      	str	r1, [r3, #4]
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
     1f8:	2102      	movs	r1, #2
     1fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <equ_mskd_var()+0x10>)
     200:	6059      	str	r1, [r3, #4]
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
     20c:	2200      	movs	r2, #0
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21a:	4b05      	ldr	r3, [pc, #20]	; (230 <cmp_equ_zero()+0x24>)
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     224:	4b02      	ldr	r3, [pc, #8]	; (230 <cmp_equ_zero()+0x24>)
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20002480 	.word	0x20002480
     230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
     234:	2200      	movs	r2, #0
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <cmp_neq_zero()+0x18>)
     238:	605a      	str	r2, [r3, #4]
     23a:	685a      	ldr	r2, [r3, #4]
     23c:	b112      	cbz	r2, 244 <cmp_neq_zero()+0x10>
     23e:	2204      	movs	r2, #4
     240:	605a      	str	r2, [r3, #4]
     242:	4770      	bx	lr
     244:	2220      	movs	r2, #32
     246:	605a      	str	r2, [r3, #4]
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	20002480 	.word	0x20002480

00000250 <cmp_equ_bits()>:
     250:	2240      	movs	r2, #64	; 0x40
     252:	4b06      	ldr	r3, [pc, #24]	; (26c <cmp_equ_bits()+0x1c>)
     254:	605a      	str	r2, [r3, #4]
     256:	685b      	ldr	r3, [r3, #4]
     258:	065b      	lsls	r3, r3, #25
     25a:	bf4c      	ite	mi
     25c:	f04f 52b0 	movmi.w	r2, #369098752	; 0x16000000
     260:	f04f 52d0 	movpl.w	r2, #436207616	; 0x1a000000
     264:	4b02      	ldr	r3, [pc, #8]	; (270 <cmp_equ_bits()+0x20>)
     266:	605a      	str	r2, [r3, #4]
     268:	4770      	bx	lr
     26a:	bf00      	nop
     26c:	20002480 	.word	0x20002480
     270:	200023e0 	.word	0x200023e0

00000274 <cmp_neq_bits()>:
     274:	2240      	movs	r2, #64	; 0x40
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <cmp_neq_bits()+0x14>)
     278:	605a      	str	r2, [r3, #4]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	0652      	lsls	r2, r2, #25
     27e:	bf54      	ite	pl
     280:	2202      	movpl	r2, #2
     282:	2220      	movmi	r2, #32
     284:	605a      	str	r2, [r3, #4]
     286:	4770      	bx	lr
     288:	20002480 	.word	0x20002480

0000028c <cmp_equ_multi_bits()>:
     28c:	2260      	movs	r2, #96	; 0x60
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <cmp_equ_multi_bits()+0x1c>)
     290:	605a      	str	r2, [r3, #4]
     292:	685b      	ldr	r3, [r3, #4]
     294:	4013      	ands	r3, r2
     296:	4293      	cmp	r3, r2
     298:	bf0c      	ite	eq
     29a:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     29e:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2a2:	4b02      	ldr	r3, [pc, #8]	; (2ac <cmp_equ_multi_bits()+0x20>)
     2a4:	605a      	str	r2, [r3, #4]
     2a6:	4770      	bx	lr
     2a8:	20002480 	.word	0x20002480
     2ac:	200023e0 	.word	0x200023e0

000002b0 <cmp_neq_multi_bits()>:
     2b0:	2260      	movs	r2, #96	; 0x60
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <cmp_neq_multi_bits()+0x1c>)
     2b4:	605a      	str	r2, [r3, #4]
     2b6:	685b      	ldr	r3, [r3, #4]
     2b8:	4013      	ands	r3, r2
     2ba:	4293      	cmp	r3, r2
     2bc:	bf14      	ite	ne
     2be:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2c2:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <cmp_neq_multi_bits()+0x20>)
     2c8:	605a      	str	r2, [r3, #4]
     2ca:	4770      	bx	lr
     2cc:	20002480 	.word	0x20002480
     2d0:	200023e0 	.word	0x200023e0

000002d4 <cmp_equ_mskd()>:
     2d4:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2d8:	4b08      	ldr	r3, [pc, #32]	; (2fc <cmp_equ_mskd()+0x28>)
     2da:	605a      	str	r2, [r3, #4]
     2dc:	685b      	ldr	r3, [r3, #4]
     2de:	4a08      	ldr	r2, [pc, #32]	; (300 <cmp_equ_mskd()+0x2c>)
     2e0:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2e4:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2e8:	6853      	ldr	r3, [r2, #4]
     2ea:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2ee:	bf0c      	ite	eq
     2f0:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2f4:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     2f8:	6053      	str	r3, [r2, #4]
     2fa:	4770      	bx	lr
     2fc:	20002480 	.word	0x20002480
     300:	200023e0 	.word	0x200023e0

00000304 <cmp_neq_mskd()>:
     304:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     308:	4b08      	ldr	r3, [pc, #32]	; (32c <cmp_neq_mskd()+0x28>)
     30a:	605a      	str	r2, [r3, #4]
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
     312:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
     316:	685a      	ldr	r2, [r3, #4]
     318:	bf1a      	itte	ne
     31a:	f022 0206 	bicne.w	r2, r2, #6
     31e:	f042 0204 	orrne.w	r2, r2, #4
     322:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
     326:	605a      	str	r2, [r3, #4]
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	20002480 	.word	0x20002480

00000330 <cmp_equ_reg()>:
     330:	2222      	movs	r2, #34	; 0x22
     332:	4b06      	ldr	r3, [pc, #24]	; (34c <cmp_equ_reg()+0x1c>)
     334:	605a      	str	r2, [r3, #4]
     336:	685b      	ldr	r3, [r3, #4]
     338:	4293      	cmp	r3, r2
     33a:	bf0c      	ite	eq
     33c:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     340:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     344:	4b02      	ldr	r3, [pc, #8]	; (350 <cmp_equ_reg()+0x20>)
     346:	605a      	str	r2, [r3, #4]
     348:	4770      	bx	lr
     34a:	bf00      	nop
     34c:	20002480 	.word	0x20002480
     350:	200023e0 	.word	0x200023e0

00000354 <cmp_neq_reg()>:
     354:	2222      	movs	r2, #34	; 0x22
     356:	4b04      	ldr	r3, [pc, #16]	; (368 <cmp_neq_reg()+0x14>)
     358:	605a      	str	r2, [r3, #4]
     35a:	685a      	ldr	r2, [r3, #4]
     35c:	2a22      	cmp	r2, #34	; 0x22
     35e:	bf14      	ite	ne
     360:	2202      	movne	r2, #2
     362:	2220      	moveq	r2, #32
     364:	605a      	str	r2, [r3, #4]
     366:	4770      	bx	lr
     368:	20002480 	.word	0x20002480

0000036c <constexpr_bits_array()>:
     36c:	2106      	movs	r1, #6
     36e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     372:	4b02      	ldr	r3, [pc, #8]	; (37c <constexpr_bits_array()+0x10>)
     374:	62d9      	str	r1, [r3, #44]	; 0x2c
     376:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     37a:	4770      	bx	lr
     37c:	200022c0 	.word	0x200022c0

00000380 <runtime_bits_array()>:
     380:	2203      	movs	r2, #3
     382:	b410      	push	{r4}
     384:	2007      	movs	r0, #7
     386:	2421      	movs	r4, #33	; 0x21
     388:	2301      	movs	r3, #1
     38a:	b081      	sub	sp, #4
     38c:	9200      	str	r2, [sp, #0]
     38e:	9a00      	ldr	r2, [sp, #0]
     390:	4905      	ldr	r1, [pc, #20]	; (3a8 <runtime_bits_array()+0x28>)
     392:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     396:	6214      	str	r4, [r2, #32]
     398:	9000      	str	r0, [sp, #0]
     39a:	9a00      	ldr	r2, [sp, #0]
     39c:	4093      	lsls	r3, r2
     39e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
     3a2:	b001      	add	sp, #4
     3a4:	bc10      	pop	{r4}
     3a6:	4770      	bx	lr
     3a8:	200022c0 	.word	0x200022c0

000003ac <prescaler_low()>:
     3ac:	2177      	movs	r1, #119	; 0x77
     3ae:	4b04      	ldr	r3, [pc, #16]	; (3c0 <prescaler_low()+0x14>)
     3b0:	4a04      	ldr	r2, [pc, #16]	; (3c4 <prescaler_low()+0x18>)
     3b2:	6059      	str	r1, [r3, #4]
     3b4:	685b      	ldr	r3, [r3, #4]
     3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3ba:	62d3      	str	r3, [r2, #44]	; 0x2c
     3bc:	4770      	bx	lr
     3be:	bf00      	nop
     3c0:	200023e0 	.word	0x200023e0
     3c4:	200022c0 	.word	0x200022c0

000003c8 <prescaler_high()>:
     3c8:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     3cc:	4b03      	ldr	r3, [pc, #12]	; (3dc <prescaler_high()+0x14>)
     3ce:	4a04      	ldr	r2, [pc, #16]	; (3e0 <prescaler_high()+0x18>)
     3d0:	6059      	str	r1, [r3, #4]
     3d2:	685b      	ldr	r3, [r3, #4]
     3d4:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3d8:	62d3      	str	r3, [r2, #44]	; 0x2c
     3da:	4770      	bx	lr
     3dc:	200023e0 	.word	0x200023e0
     3e0:	200022c0 	.word	0x200022c0

000003e4 <reg_mskd_lss()>:
     3e4:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3e8:	4b06      	ldr	r3, [pc, #24]	; (404 <reg_mskd_lss()+0x20>)
     3ea:	605a      	str	r2, [r3, #4]
     3ec:	685b      	ldr	r3, [r3, #4]
     3ee:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3f6:	bf34      	ite	cc
     3f8:	2202      	movcc	r2, #2
     3fa:	2204      	movcs	r2, #4
     3fc:	4b02      	ldr	r3, [pc, #8]	; (408 <reg_mskd_lss()+0x24>)
     3fe:	605a      	str	r2, [r3, #4]
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	200023e0 	.word	0x200023e0
     408:	20002480 	.word	0x20002480

0000040c <reg_mskd_leq()>:
     40c:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
     410:	4a0a      	ldr	r2, [pc, #40]	; (43c <reg_mskd_leq()+0x30>)
     412:	6053      	str	r3, [r2, #4]
     414:	6853      	ldr	r3, [r2, #4]
     416:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41a:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
     41e:	d809      	bhi.n	434 <reg_mskd_leq()+0x28>
     420:	6853      	ldr	r3, [r2, #4]
     422:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     42a:	d803      	bhi.n	434 <reg_mskd_leq()+0x28>
     42c:	2202      	movs	r2, #2
     42e:	4b04      	ldr	r3, [pc, #16]	; (440 <reg_mskd_leq()+0x34>)
     430:	605a      	str	r2, [r3, #4]
     432:	4770      	bx	lr
     434:	2204      	movs	r2, #4
     436:	4b02      	ldr	r3, [pc, #8]	; (440 <reg_mskd_leq()+0x34>)
     438:	605a      	str	r2, [r3, #4]
     43a:	4770      	bx	lr
     43c:	200023e0 	.word	0x200023e0
     440:	20002480 	.word	0x20002480

00000444 <reg_mskd_gtr()>:
     444:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     448:	4b06      	ldr	r3, [pc, #24]	; (464 <reg_mskd_gtr()+0x20>)
     44a:	605a      	str	r2, [r3, #4]
     44c:	685b      	ldr	r3, [r3, #4]
     44e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     452:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     456:	bf8c      	ite	hi
     458:	2202      	movhi	r2, #2
     45a:	2204      	movls	r2, #4
     45c:	4b02      	ldr	r3, [pc, #8]	; (468 <reg_mskd_gtr()+0x24>)
     45e:	605a      	str	r2, [r3, #4]
     460:	4770      	bx	lr
     462:	bf00      	nop
     464:	200023e0 	.word	0x200023e0
     468:	20002480 	.word	0x20002480

0000046c <reg_mskd_geq()>:
     46c:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
     470:	4a0a      	ldr	r2, [pc, #40]	; (49c <reg_mskd_geq()+0x30>)
     472:	6053      	str	r3, [r2, #4]
     474:	6853      	ldr	r3, [r2, #4]
     476:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     47e:	d309      	bcc.n	494 <reg_mskd_geq()+0x28>
     480:	6853      	ldr	r3, [r2, #4]
     482:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     486:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
     48a:	d303      	bcc.n	494 <reg_mskd_geq()+0x28>
     48c:	2202      	movs	r2, #2
     48e:	4b04      	ldr	r3, [pc, #16]	; (4a0 <reg_mskd_geq()+0x34>)
     490:	605a      	str	r2, [r3, #4]
     492:	4770      	bx	lr
     494:	2204      	movs	r2, #4
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <reg_mskd_geq()+0x34>)
     498:	605a      	str	r2, [r3, #4]
     49a:	4770      	bx	lr
     49c:	200023e0 	.word	0x200023e0
     4a0:	20002480 	.word	0x20002480

000004a4 <pos_cmp_eq()>:
     4a4:	2202      	movs	r2, #2
     4a6:	4b01      	ldr	r3, [pc, #4]	; (4ac <pos_cmp_eq()+0x8>)
     4a8:	605a      	str	r2, [r3, #4]
     4aa:	4770      	bx	lr
     4ac:	20002480 	.word	0x20002480

000004b0 <pos_cmp_ne()>:
     4b0:	2202      	movs	r2, #2
     4b2:	4b01      	ldr	r3, [pc, #4]	; (4b8 <pos_cmp_ne()+0x8>)
     4b4:	605a      	str	r2, [r3, #4]
     4b6:	4770      	bx	lr
     4b8:	20002480 	.word	0x20002480

000004bc <bits_extract_eq()>:
     4bc:	2240      	movs	r2, #64	; 0x40
     4be:	4b04      	ldr	r3, [pc, #16]	; (4d0 <bits_extract_eq()+0x14>)
     4c0:	605a      	str	r2, [r3, #4]
     4c2:	685a      	ldr	r2, [r3, #4]
     4c4:	2a40      	cmp	r2, #64	; 0x40
     4c6:	bf0c      	ite	eq
     4c8:	2202      	moveq	r2, #2
     4ca:	2204      	movne	r2, #4
     4cc:	605a      	str	r2, [r3, #4]
     4ce:	4770      	bx	lr
     4d0:	20002480 	.word	0x20002480

000004d4 <mskd_extract_eq()>:
     4d4:	2202      	movs	r2, #2
     4d6:	4b04      	ldr	r3, [pc, #16]	; (4e8 <mskd_extract_eq()+0x14>)
     4d8:	605a      	str	r2, [r3, #4]
     4da:	685a      	ldr	r2, [r3, #4]
     4dc:	2a02      	cmp	r2, #2
     4de:	bf0c      	ite	eq
     4e0:	2220      	moveq	r2, #32
     4e2:	2240      	movne	r2, #64	; 0x40
     4e4:	605a      	str	r2, [r3, #4]
     4e6:	4770      	bx	lr
     4e8:	20002480 	.word	0x20002480

000004ec <mskd_extract_ne()>:
     4ec:	2204      	movs	r2, #4
     4ee:	4b04      	ldr	r3, [pc, #16]	; (500 <mskd_extract_ne()+0x14>)
     4f0:	605a      	str	r2, [r3, #4]
     4f2:	685a      	ldr	r2, [r3, #4]
     4f4:	2a04      	cmp	r2, #4
     4f6:	bf0c      	ite	eq
     4f8:	2240      	moveq	r2, #64	; 0x40
     4fa:	2220      	movne	r2, #32
     4fc:	605a      	str	r2, [r3, #4]
     4fe:	4770      	bx	lr
     500:	20002480 	.word	0x20002480

00000504 <mskd_extract_lss()>:
     504:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     508:	4b05      	ldr	r3, [pc, #20]	; (520 <mskd_extract_lss()+0x1c>)
     50a:	605a      	str	r2, [r3, #4]
     50c:	685b      	ldr	r3, [r3, #4]
     50e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     512:	bf34      	ite	cc
     514:	2220      	movcc	r2, #32
     516:	2240      	movcs	r2, #64	; 0x40
     518:	4b02      	ldr	r3, [pc, #8]	; (524 <mskd_extract_lss()+0x20>)
     51a:	605a      	str	r2, [r3, #4]
     51c:	4770      	bx	lr
     51e:	bf00      	nop
     520:	200023e0 	.word	0x200023e0
     524:	20002480 	.word	0x20002480

00000528 <mskd_extract_leq()>:
     528:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     52c:	4b04      	ldr	r3, [pc, #16]	; (540 <mskd_extract_leq()+0x18>)
     52e:	605a      	str	r2, [r3, #4]
     530:	685b      	ldr	r3, [r3, #4]
     532:	4293      	cmp	r3, r2
     534:	bf94      	ite	ls
     536:	2220      	movls	r2, #32
     538:	2240      	movhi	r2, #64	; 0x40
     53a:	4b02      	ldr	r3, [pc, #8]	; (544 <mskd_extract_leq()+0x1c>)
     53c:	605a      	str	r2, [r3, #4]
     53e:	4770      	bx	lr
     540:	200023e0 	.word	0x200023e0
     544:	20002480 	.word	0x20002480

00000548 <mskd_extract_gtr()>:
     548:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <mskd_extract_gtr()+0x1c>)
     54e:	605a      	str	r2, [r3, #4]
     550:	685b      	ldr	r3, [r3, #4]
     552:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     556:	bf8c      	ite	hi
     558:	2220      	movhi	r2, #32
     55a:	2240      	movls	r2, #64	; 0x40
     55c:	4b02      	ldr	r3, [pc, #8]	; (568 <mskd_extract_gtr()+0x20>)
     55e:	605a      	str	r2, [r3, #4]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	200023e0 	.word	0x200023e0
     568:	20002480 	.word	0x20002480

0000056c <set_bits_global()>:
     56c:	4a02      	ldr	r2, [pc, #8]	; (578 <set_bits_global()+0xc>)
     56e:	6853      	ldr	r3, [r2, #4]
     570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     574:	6053      	str	r3, [r2, #4]
     576:	4770      	bx	lr
     578:	20002480 	.word	0x20002480

0000057c <ins_mskd_global()>:
     57c:	4a03      	ldr	r2, [pc, #12]	; (58c <ins_mskd_global()+0x10>)
     57e:	6853      	ldr	r3, [r2, #4]
     580:	f023 0306 	bic.w	r3, r3, #6
     584:	f043 0302 	orr.w	r3, r3, #2
     588:	6053      	str	r3, [r2, #4]
     58a:	4770      	bx	lr
     58c:	20002480 	.word	0x20002480

00000590 <assign_array_global()>:
     590:	22bd      	movs	r2, #189	; 0xbd
     592:	4b01      	ldr	r3, [pc, #4]	; (598 <assign_array_global()+0x8>)
     594:	601a      	str	r2, [r3, #0]
     596:	4770      	bx	lr
     598:	200022ec 	.word	0x200022ec

0000059c <shifted_global()>:
     59c:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     5a0:	4b03      	ldr	r3, [pc, #12]	; (5b0 <shifted_global()+0x14>)
     5a2:	4a04      	ldr	r2, [pc, #16]	; (5b4 <shifted_global()+0x18>)
     5a4:	6059      	str	r1, [r3, #4]
     5a6:	685b      	ldr	r3, [r3, #4]
     5a8:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5ac:	62d3      	str	r3, [r2, #44]	; 0x2c
     5ae:	4770      	bx	lr
     5b0:	200023e0 	.word	0x200023e0
     5b4:	200022c0 	.word	0x200022c0

000005b8 <assign_register_global()>:
     5b8:	2204      	movs	r2, #4
     5ba:	4b01      	ldr	r3, [pc, #4]	; (5c0 <assign_register_global()+0x8>)
     5bc:	605a      	str	r2, [r3, #4]
     5be:	4770      	bx	lr
     5c0:	20002480 	.word	0x20002480

000005c4 <copy_bits_equ()>:
     5c4:	2240      	movs	r2, #64	; 0x40
     5c6:	4b04      	ldr	r3, [pc, #16]	; (5d8 <copy_bits_equ()+0x14>)
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	685a      	ldr	r2, [r3, #4]
     5cc:	0652      	lsls	r2, r2, #25
     5ce:	bf4c      	ite	mi
     5d0:	2202      	movmi	r2, #2
     5d2:	2204      	movpl	r2, #4
     5d4:	605a      	str	r2, [r3, #4]
     5d6:	4770      	bx	lr
     5d8:	20002480 	.word	0x20002480

000005dc <copy_bits_neq()>:
     5dc:	2240      	movs	r2, #64	; 0x40
     5de:	4b04      	ldr	r3, [pc, #16]	; (5f0 <copy_bits_neq()+0x14>)
     5e0:	605a      	str	r2, [r3, #4]
     5e2:	685a      	ldr	r2, [r3, #4]
     5e4:	0652      	lsls	r2, r2, #25
     5e6:	bf54      	ite	pl
     5e8:	2202      	movpl	r2, #2
     5ea:	2204      	movmi	r2, #4
     5ec:	605a      	str	r2, [r3, #4]
     5ee:	4770      	bx	lr
     5f0:	20002480 	.word	0x20002480

000005f4 <copy_mskd_equ()>:
     5f4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     5f8:	4b05      	ldr	r3, [pc, #20]	; (610 <copy_mskd_equ()+0x1c>)
     5fa:	605a      	str	r2, [r3, #4]
     5fc:	685b      	ldr	r3, [r3, #4]
     5fe:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     602:	4293      	cmp	r3, r2
     604:	bf0c      	ite	eq
     606:	2202      	moveq	r2, #2
     608:	2204      	movne	r2, #4
     60a:	4b02      	ldr	r3, [pc, #8]	; (614 <copy_mskd_equ()+0x20>)
     60c:	605a      	str	r2, [r3, #4]
     60e:	4770      	bx	lr
     610:	200023e0 	.word	0x200023e0
     614:	20002480 	.word	0x20002480

00000618 <copy_mskd_neq()>:
     618:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     61c:	4b05      	ldr	r3, [pc, #20]	; (634 <copy_mskd_neq()+0x1c>)
     61e:	605a      	str	r2, [r3, #4]
     620:	685b      	ldr	r3, [r3, #4]
     622:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     626:	4293      	cmp	r3, r2
     628:	bf14      	ite	ne
     62a:	2202      	movne	r2, #2
     62c:	2204      	moveq	r2, #4
     62e:	4b02      	ldr	r3, [pc, #8]	; (638 <copy_mskd_neq()+0x20>)
     630:	605a      	str	r2, [r3, #4]
     632:	4770      	bx	lr
     634:	200023e0 	.word	0x200023e0
     638:	20002480 	.word	0x20002480

0000063c <copy_mskd_lss()>:
     63c:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     640:	4b06      	ldr	r3, [pc, #24]	; (65c <copy_mskd_lss()+0x20>)
     642:	605a      	str	r2, [r3, #4]
     644:	685b      	ldr	r3, [r3, #4]
     646:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     64a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     64e:	bf34      	ite	cc
     650:	2202      	movcc	r2, #2
     652:	2204      	movcs	r2, #4
     654:	4b02      	ldr	r3, [pc, #8]	; (660 <copy_mskd_lss()+0x24>)
     656:	605a      	str	r2, [r3, #4]
     658:	4770      	bx	lr
     65a:	bf00      	nop
     65c:	200023e0 	.word	0x200023e0
     660:	20002480 	.word	0x20002480

00000664 <copy_mskd_leq()>:
     664:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     668:	4b05      	ldr	r3, [pc, #20]	; (680 <copy_mskd_leq()+0x1c>)
     66a:	605a      	str	r2, [r3, #4]
     66c:	685b      	ldr	r3, [r3, #4]
     66e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     672:	4293      	cmp	r3, r2
     674:	bf94      	ite	ls
     676:	2202      	movls	r2, #2
     678:	2204      	movhi	r2, #4
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <copy_mskd_leq()+0x20>)
     67c:	605a      	str	r2, [r3, #4]
     67e:	4770      	bx	lr
     680:	200023e0 	.word	0x200023e0
     684:	20002480 	.word	0x20002480

00000688 <copy_mskd_gtr()>:
     688:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     68c:	4b06      	ldr	r3, [pc, #24]	; (6a8 <copy_mskd_gtr()+0x20>)
     68e:	605a      	str	r2, [r3, #4]
     690:	685b      	ldr	r3, [r3, #4]
     692:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     696:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     69a:	bf8c      	ite	hi
     69c:	2202      	movhi	r2, #2
     69e:	2204      	movls	r2, #4
     6a0:	4b02      	ldr	r3, [pc, #8]	; (6ac <copy_mskd_gtr()+0x24>)
     6a2:	605a      	str	r2, [r3, #4]
     6a4:	4770      	bx	lr
     6a6:	bf00      	nop
     6a8:	200023e0 	.word	0x200023e0
     6ac:	20002480 	.word	0x20002480

000006b0 <copy_mskd_geq()>:
     6b0:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6b4:	4b05      	ldr	r3, [pc, #20]	; (6cc <copy_mskd_geq()+0x1c>)
     6b6:	605a      	str	r2, [r3, #4]
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6be:	4293      	cmp	r3, r2
     6c0:	bf2c      	ite	cs
     6c2:	2202      	movcs	r2, #2
     6c4:	2204      	movcc	r2, #4
     6c6:	4b02      	ldr	r3, [pc, #8]	; (6d0 <copy_mskd_geq()+0x20>)
     6c8:	605a      	str	r2, [r3, #4]
     6ca:	4770      	bx	lr
     6cc:	200023e0 	.word	0x200023e0
     6d0:	20002480 	.word	0x20002480

000006d4 <copy_shifted()>:
     6d4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6d8:	4b05      	ldr	r3, [pc, #20]	; (6f0 <copy_shifted()+0x1c>)
     6da:	605a      	str	r2, [r3, #4]
     6dc:	685b      	ldr	r3, [r3, #4]
     6de:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6e2:	2b0b      	cmp	r3, #11
     6e4:	bf0c      	ite	eq
     6e6:	2202      	moveq	r2, #2
     6e8:	2204      	movne	r2, #4
     6ea:	4b02      	ldr	r3, [pc, #8]	; (6f4 <copy_shifted()+0x20>)
     6ec:	605a      	str	r2, [r3, #4]
     6ee:	4770      	bx	lr
     6f0:	200023e0 	.word	0x200023e0
     6f4:	20002480 	.word	0x20002480

000006f8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>:
     6f8:	2266      	movs	r2, #102	; 0x66
     6fa:	4b01      	ldr	r3, [pc, #4]	; (700 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]+0x8>)
     6fc:	62da      	str	r2, [r3, #44]	; 0x2c
     6fe:	4770      	bx	lr
     700:	200022c0 	.word	0x200022c0

00000704 <call_pos_ref()>:
     704:	2105      	movs	r1, #5
     706:	b500      	push	{lr}
     708:	b081      	sub	sp, #4
     70a:	4668      	mov	r0, sp
     70c:	9100      	str	r1, [sp, #0]
     70e:	f7ff fff3 	bl	6f8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     712:	4668      	mov	r0, sp
     714:	9100      	str	r1, [sp, #0]
     716:	f7ff ffef 	bl	6f8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     71a:	b001      	add	sp, #4
     71c:	f85d fb04 	ldr.w	pc, [sp], #4

00000720 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>:
     720:	2277      	movs	r2, #119	; 0x77
     722:	4b01      	ldr	r3, [pc, #4]	; (728 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]+0x8>)
     724:	62da      	str	r2, [r3, #44]	; 0x2c
     726:	4770      	bx	lr
     728:	200022c0 	.word	0x200022c0

0000072c <call_pos_ref_global()>:
     72c:	2306      	movs	r3, #6
     72e:	b500      	push	{lr}
     730:	b081      	sub	sp, #4
     732:	4668      	mov	r0, sp
     734:	9300      	str	r3, [sp, #0]
     736:	f7ff fff3 	bl	720 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>
     73a:	b001      	add	sp, #4
     73c:	f85d fb04 	ldr.w	pc, [sp], #4

00000740 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     740:	2233      	movs	r2, #51	; 0x33
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x8>)
     744:	62da      	str	r2, [r3, #44]	; 0x2c
     746:	4770      	bx	lr
     748:	200022c0 	.word	0x200022c0

0000074c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     74c:	2244      	movs	r2, #68	; 0x44
     74e:	4b01      	ldr	r3, [pc, #4]	; (754 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
     750:	62da      	str	r2, [r3, #44]	; 0x2c
     752:	4770      	bx	lr
     754:	200022c0 	.word	0x200022c0

00000758 <call_pos_val()>:
     758:	b500      	push	{lr}
     75a:	2005      	movs	r0, #5
     75c:	f7ff fff0 	bl	740 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     760:	2006      	movs	r0, #6
     762:	f85d eb04 	ldr.w	lr, [sp], #4
     766:	e7f1      	b.n	74c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

00000768 <call_pos_val_global()>:
     768:	2006      	movs	r0, #6
     76a:	e7ef      	b.n	74c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

0000076c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>:
     76c:	4a03      	ldr	r2, [pc, #12]	; (77c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]+0x10>)
     76e:	6853      	ldr	r3, [r2, #4]
     770:	f023 0306 	bic.w	r3, r3, #6
     774:	f043 0302 	orr.w	r3, r3, #2
     778:	6053      	str	r3, [r2, #4]
     77a:	4770      	bx	lr
     77c:	20002480 	.word	0x20002480

00000780 <call_mskd_val_const()>:
     780:	2006      	movs	r0, #6
     782:	2102      	movs	r1, #2
     784:	e7f2      	b.n	76c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     786:	bf00      	nop

00000788 <call_mskd_val_var()>:
     788:	2006      	movs	r0, #6
     78a:	2102      	movs	r1, #2
     78c:	e7ee      	b.n	76c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     78e:	bf00      	nop

00000790 <call_mskd_val_global()>:
     790:	2006      	movs	r0, #6
     792:	2102      	movs	r1, #2
     794:	e7ea      	b.n	76c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     796:	bf00      	nop

00000798 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>:
     798:	4a02      	ldr	r2, [pc, #8]	; (7a4 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]+0xc>)
     79a:	6853      	ldr	r3, [r2, #4]
     79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7a0:	6053      	str	r3, [r2, #4]
     7a2:	4770      	bx	lr
     7a4:	20002480 	.word	0x20002480

000007a8 <call_bits_val_const()>:
     7a8:	2040      	movs	r0, #64	; 0x40
     7aa:	e7f5      	b.n	798 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

000007ac <call_bits_val_var()>:
     7ac:	2040      	movs	r0, #64	; 0x40
     7ae:	e7f3      	b.n	798 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

000007b0 <call_bits_val_global()>:
     7b0:	2040      	movs	r0, #64	; 0x40
     7b2:	e7f1      	b.n	798 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

000007b4 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     7b4:	4a02      	ldr	r2, [pc, #8]	; (7c0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     7b6:	6853      	ldr	r3, [r2, #4]
     7b8:	4318      	orrs	r0, r3
     7ba:	6050      	str	r0, [r2, #4]
     7bc:	4770      	bx	lr
     7be:	bf00      	nop
     7c0:	20002480 	.word	0x20002480

000007c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     7c4:	4a02      	ldr	r2, [pc, #8]	; (7d0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     7c6:	6801      	ldr	r1, [r0, #0]
     7c8:	6853      	ldr	r3, [r2, #4]
     7ca:	430b      	orrs	r3, r1
     7cc:	6053      	str	r3, [r2, #4]
     7ce:	4770      	bx	lr
     7d0:	20002480 	.word	0x20002480

000007d4 <call_bits_ref_var()>:
     7d4:	2301      	movs	r3, #1
     7d6:	b500      	push	{lr}
     7d8:	b081      	sub	sp, #4
     7da:	4668      	mov	r0, sp
     7dc:	9300      	str	r3, [sp, #0]
     7de:	f7ff fffe 	bl	7c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7e2:	b001      	add	sp, #4
     7e4:	f85d fb04 	ldr.w	pc, [sp], #4

000007e8 <call_bits_ref_const()>:
     7e8:	2301      	movs	r3, #1
     7ea:	b500      	push	{lr}
     7ec:	b081      	sub	sp, #4
     7ee:	4668      	mov	r0, sp
     7f0:	9300      	str	r3, [sp, #0]
     7f2:	f7ff fffe 	bl	7c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7f6:	b001      	add	sp, #4
     7f8:	f85d fb04 	ldr.w	pc, [sp], #4

000007fc <call_bits_ref_global()>:
     7fc:	2340      	movs	r3, #64	; 0x40
     7fe:	b500      	push	{lr}
     800:	b081      	sub	sp, #4
     802:	4668      	mov	r0, sp
     804:	9300      	str	r3, [sp, #0]
     806:	f7ff fffe 	bl	7c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     80a:	b001      	add	sp, #4
     80c:	f85d fb04 	ldr.w	pc, [sp], #4

00000810 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     810:	4a03      	ldr	r2, [pc, #12]	; (820 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     812:	6853      	ldr	r3, [r2, #4]
     814:	ea23 0000 	bic.w	r0, r3, r0
     818:	4308      	orrs	r0, r1
     81a:	6050      	str	r0, [r2, #4]
     81c:	4770      	bx	lr
     81e:	bf00      	nop
     820:	20002480 	.word	0x20002480

00000824 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     824:	4a05      	ldr	r2, [pc, #20]	; (83c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
     826:	b410      	push	{r4}
     828:	6853      	ldr	r3, [r2, #4]
     82a:	6804      	ldr	r4, [r0, #0]
     82c:	6841      	ldr	r1, [r0, #4]
     82e:	ea23 0304 	bic.w	r3, r3, r4
     832:	430b      	orrs	r3, r1
     834:	6053      	str	r3, [r2, #4]
     836:	bc10      	pop	{r4}
     838:	4770      	bx	lr
     83a:	bf00      	nop
     83c:	20002480 	.word	0x20002480

00000840 <call_mskd_ref_var()>:
     840:	b500      	push	{lr}
     842:	4b05      	ldr	r3, [pc, #20]	; (858 <call_mskd_ref_var()+0x18>)
     844:	b082      	sub	sp, #8
     846:	4668      	mov	r0, sp
     848:	cb0c      	ldmia	r3, {r2, r3}
     84a:	e88d 000c 	stmia.w	sp, {r2, r3}
     84e:	f7ff fffe 	bl	824 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     852:	b002      	add	sp, #8
     854:	f85d fb04 	ldr.w	pc, [sp], #4
     858:	00000000 	.word	0x00000000

0000085c <call_mskd_ref_const()>:
     85c:	2206      	movs	r2, #6
     85e:	2304      	movs	r3, #4
     860:	b500      	push	{lr}
     862:	b082      	sub	sp, #8
     864:	4668      	mov	r0, sp
     866:	e88d 000c 	stmia.w	sp, {r2, r3}
     86a:	f7ff fffe 	bl	824 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     86e:	b002      	add	sp, #8
     870:	f85d fb04 	ldr.w	pc, [sp], #4

00000874 <call_mskd_ref_global()>:
     874:	2206      	movs	r2, #6
     876:	2302      	movs	r3, #2
     878:	b500      	push	{lr}
     87a:	b082      	sub	sp, #8
     87c:	4668      	mov	r0, sp
     87e:	e88d 000c 	stmia.w	sp, {r2, r3}
     882:	f7ff fffe 	bl	824 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     886:	b002      	add	sp, #8
     888:	f85d fb04 	ldr.w	pc, [sp], #4

0000088c <periph_bits(mcu::Serial*)>:
     88c:	6843      	ldr	r3, [r0, #4]
     88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     892:	6043      	str	r3, [r0, #4]
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <call_periph_bits()>:
     898:	4801      	ldr	r0, [pc, #4]	; (8a0 <call_periph_bits()+0x8>)
     89a:	f7ff bffe 	b.w	88c <periph_bits(mcu::Serial*)>
     89e:	bf00      	nop
     8a0:	20002480 	.word	0x20002480

000008a4 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     8a4:	6843      	ldr	r3, [r0, #4]
     8a6:	4319      	orrs	r1, r3
     8a8:	6041      	str	r1, [r0, #4]
     8aa:	4770      	bx	lr

000008ac <call_periph_bits_val()>:
     8ac:	2140      	movs	r1, #64	; 0x40
     8ae:	4801      	ldr	r0, [pc, #4]	; (8b4 <call_periph_bits_val()+0x8>)
     8b0:	f7ff bffe 	b.w	8a4 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8b4:	20002480 	.word	0x20002480

000008b8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     8b8:	6803      	ldr	r3, [r0, #0]
     8ba:	4319      	orrs	r1, r3
     8bc:	6001      	str	r1, [r0, #0]
     8be:	4770      	bx	lr

000008c0 <call_reg_bits_val()>:
     8c0:	2140      	movs	r1, #64	; 0x40
     8c2:	4801      	ldr	r0, [pc, #4]	; (8c8 <call_reg_bits_val()+0x8>)
     8c4:	f7ff bffe 	b.w	8b8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8c8:	20002484 	.word	0x20002484

000008cc <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8cc:	680a      	ldr	r2, [r1, #0]
     8ce:	6843      	ldr	r3, [r0, #4]
     8d0:	4313      	orrs	r3, r2
     8d2:	6043      	str	r3, [r0, #4]
     8d4:	4770      	bx	lr
     8d6:	bf00      	nop

000008d8 <call_periph_bits_ref()>:
     8d8:	2340      	movs	r3, #64	; 0x40
     8da:	b500      	push	{lr}
     8dc:	b081      	sub	sp, #4
     8de:	4669      	mov	r1, sp
     8e0:	4803      	ldr	r0, [pc, #12]	; (8f0 <call_periph_bits_ref()+0x18>)
     8e2:	9300      	str	r3, [sp, #0]
     8e4:	f7ff fffe 	bl	8cc <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8e8:	b001      	add	sp, #4
     8ea:	f85d fb04 	ldr.w	pc, [sp], #4
     8ee:	bf00      	nop
     8f0:	20002480 	.word	0x20002480

000008f4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8f4:	680a      	ldr	r2, [r1, #0]
     8f6:	6803      	ldr	r3, [r0, #0]
     8f8:	4313      	orrs	r3, r2
     8fa:	6003      	str	r3, [r0, #0]
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop

00000900 <call_reg_bits_ref()>:
     900:	2340      	movs	r3, #64	; 0x40
     902:	b500      	push	{lr}
     904:	b081      	sub	sp, #4
     906:	4669      	mov	r1, sp
     908:	4803      	ldr	r0, [pc, #12]	; (918 <call_reg_bits_ref()+0x18>)
     90a:	9300      	str	r3, [sp, #0]
     90c:	f7ff fffe 	bl	8f4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     910:	b001      	add	sp, #4
     912:	f85d fb04 	ldr.w	pc, [sp], #4
     916:	bf00      	nop
     918:	20002484 	.word	0x20002484

0000091c <periph_mskd(mcu::Serial*)>:
     91c:	6843      	ldr	r3, [r0, #4]
     91e:	f023 0306 	bic.w	r3, r3, #6
     922:	f043 0302 	orr.w	r3, r3, #2
     926:	6043      	str	r3, [r0, #4]
     928:	4770      	bx	lr
     92a:	bf00      	nop

0000092c <call_periph_mskd()>:
     92c:	4801      	ldr	r0, [pc, #4]	; (934 <call_periph_mskd()+0x8>)
     92e:	f7ff bffe 	b.w	91c <periph_mskd(mcu::Serial*)>
     932:	bf00      	nop
     934:	20002480 	.word	0x20002480

00000938 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     938:	6843      	ldr	r3, [r0, #4]
     93a:	ea23 0101 	bic.w	r1, r3, r1
     93e:	4311      	orrs	r1, r2
     940:	6041      	str	r1, [r0, #4]
     942:	4770      	bx	lr

00000944 <call_periph_mskd_val()>:
     944:	2106      	movs	r1, #6
     946:	2202      	movs	r2, #2
     948:	4801      	ldr	r0, [pc, #4]	; (950 <call_periph_mskd_val()+0xc>)
     94a:	f7ff bffe 	b.w	938 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     94e:	bf00      	nop
     950:	20002480 	.word	0x20002480

00000954 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     954:	6803      	ldr	r3, [r0, #0]
     956:	ea23 0101 	bic.w	r1, r3, r1
     95a:	4311      	orrs	r1, r2
     95c:	6001      	str	r1, [r0, #0]
     95e:	4770      	bx	lr

00000960 <call_reg_mskd_val()>:
     960:	2106      	movs	r1, #6
     962:	2202      	movs	r2, #2
     964:	4801      	ldr	r0, [pc, #4]	; (96c <call_reg_mskd_val()+0xc>)
     966:	f7ff bffe 	b.w	954 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     96a:	bf00      	nop
     96c:	20002484 	.word	0x20002484

00000970 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     970:	6843      	ldr	r3, [r0, #4]
     972:	ea23 0101 	bic.w	r1, r3, r1
     976:	4311      	orrs	r1, r2
     978:	6041      	str	r1, [r0, #4]
     97a:	4770      	bx	lr

0000097c <call_periph_mskd_ref()>:
     97c:	2106      	movs	r1, #6
     97e:	2202      	movs	r2, #2
     980:	4801      	ldr	r0, [pc, #4]	; (988 <call_periph_mskd_ref()+0xc>)
     982:	f7ff bffe 	b.w	970 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     986:	bf00      	nop
     988:	20002480 	.word	0x20002480

0000098c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     98c:	6803      	ldr	r3, [r0, #0]
     98e:	ea23 0101 	bic.w	r1, r3, r1
     992:	4311      	orrs	r1, r2
     994:	6001      	str	r1, [r0, #0]
     996:	4770      	bx	lr

00000998 <call_reg_mskd_ref()>:
     998:	2106      	movs	r1, #6
     99a:	2202      	movs	r2, #2
     99c:	4801      	ldr	r0, [pc, #4]	; (9a4 <call_reg_mskd_ref()+0xc>)
     99e:	f7ff bffe 	b.w	98c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     9a2:	bf00      	nop
     9a4:	20002484 	.word	0x20002484

000009a8 <return_bits()>:
     9a8:	2020      	movs	r0, #32
     9aa:	4770      	bx	lr

000009ac <call_return_bits()>:
     9ac:	b500      	push	{lr}
     9ae:	f7ff fffe 	bl	9a8 <return_bits()>
     9b2:	2820      	cmp	r0, #32
     9b4:	bf0c      	ite	eq
     9b6:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     9ba:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <call_return_bits()+0x1c>)
     9c0:	605a      	str	r2, [r3, #4]
     9c2:	f85d fb04 	ldr.w	pc, [sp], #4
     9c6:	bf00      	nop
     9c8:	200023e0 	.word	0x200023e0

000009cc <return_mskd()>:
     9cc:	2118      	movs	r1, #24
     9ce:	2208      	movs	r2, #8
     9d0:	e880 0006 	stmia.w	r0, {r1, r2}
     9d4:	4770      	bx	lr
     9d6:	bf00      	nop

000009d8 <call_return_mskd()>:
     9d8:	b500      	push	{lr}
     9da:	b082      	sub	sp, #8
     9dc:	4668      	mov	r0, sp
     9de:	f7ff fffe 	bl	9cc <return_mskd()>
     9e2:	9b00      	ldr	r3, [sp, #0]
     9e4:	9a01      	ldr	r2, [sp, #4]
     9e6:	2b18      	cmp	r3, #24
     9e8:	d006      	beq.n	9f8 <call_return_mskd()+0x20>
     9ea:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9ee:	4b07      	ldr	r3, [pc, #28]	; (a0c <call_return_mskd()+0x34>)
     9f0:	605a      	str	r2, [r3, #4]
     9f2:	b002      	add	sp, #8
     9f4:	f85d fb04 	ldr.w	pc, [sp], #4
     9f8:	2a08      	cmp	r2, #8
     9fa:	d1f6      	bne.n	9ea <call_return_mskd()+0x12>
     9fc:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     a00:	4b02      	ldr	r3, [pc, #8]	; (a0c <call_return_mskd()+0x34>)
     a02:	605a      	str	r2, [r3, #4]
     a04:	b002      	add	sp, #8
     a06:	f85d fb04 	ldr.w	pc, [sp], #4
     a0a:	bf00      	nop
     a0c:	200023e0 	.word	0x200023e0

00000a10 <return_reg()>:
     a10:	2240      	movs	r2, #64	; 0x40
     a12:	4b02      	ldr	r3, [pc, #8]	; (a1c <return_reg()+0xc>)
     a14:	4802      	ldr	r0, [pc, #8]	; (a20 <return_reg()+0x10>)
     a16:	605a      	str	r2, [r3, #4]
     a18:	4770      	bx	lr
     a1a:	bf00      	nop
     a1c:	20002480 	.word	0x20002480
     a20:	20002484 	.word	0x20002484

00000a24 <call_return_reg()>:
     a24:	b500      	push	{lr}
     a26:	f7ff fffe 	bl	a10 <return_reg()>
     a2a:	6803      	ldr	r3, [r0, #0]
     a2c:	065b      	lsls	r3, r3, #25
     a2e:	bf4c      	ite	mi
     a30:	f04f 52f0 	movmi.w	r2, #503316480	; 0x1e000000
     a34:	f04f 5238 	movpl.w	r2, #771751936	; 0x2e000000
     a38:	4b01      	ldr	r3, [pc, #4]	; (a40 <call_return_reg()+0x1c>)
     a3a:	605a      	str	r2, [r3, #4]
     a3c:	f85d fb04 	ldr.w	pc, [sp], #4
     a40:	200023e0 	.word	0x200023e0

00000a44 <return_periph()>:
     a44:	2340      	movs	r3, #64	; 0x40
     a46:	4801      	ldr	r0, [pc, #4]	; (a4c <return_periph()+0x8>)
     a48:	6043      	str	r3, [r0, #4]
     a4a:	4770      	bx	lr
     a4c:	20002480 	.word	0x20002480

00000a50 <call_return_periph()>:
     a50:	b500      	push	{lr}
     a52:	f7ff fffe 	bl	a44 <return_periph()>
     a56:	6843      	ldr	r3, [r0, #4]
     a58:	065b      	lsls	r3, r3, #25
     a5a:	bf4c      	ite	mi
     a5c:	f04f 5218 	movmi.w	r2, #637534208	; 0x26000000
     a60:	f04f 5228 	movpl.w	r2, #704643072	; 0x2a000000
     a64:	4b01      	ldr	r3, [pc, #4]	; (a6c <call_return_periph()+0x1c>)
     a66:	605a      	str	r2, [r3, #4]
     a68:	f85d fb04 	ldr.w	pc, [sp], #4
     a6c:	200023e0 	.word	0x200023e0

00000a70 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a70:	2805      	cmp	r0, #5
     a72:	d006      	beq.n	a82 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a74:	2806      	cmp	r0, #6
     a76:	bf0c      	ite	eq
     a78:	2244      	moveq	r2, #68	; 0x44
     a7a:	2255      	movne	r2, #85	; 0x55
     a7c:	4b03      	ldr	r3, [pc, #12]	; (a8c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a7e:	62da      	str	r2, [r3, #44]	; 0x2c
     a80:	4770      	bx	lr
     a82:	2233      	movs	r2, #51	; 0x33
     a84:	4b01      	ldr	r3, [pc, #4]	; (a8c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a86:	62da      	str	r2, [r3, #44]	; 0x2c
     a88:	4770      	bx	lr
     a8a:	bf00      	nop
     a8c:	200022c0 	.word	0x200022c0

00000a90 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a90:	6803      	ldr	r3, [r0, #0]
     a92:	2b05      	cmp	r3, #5
     a94:	d006      	beq.n	aa4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a96:	2b06      	cmp	r3, #6
     a98:	bf0c      	ite	eq
     a9a:	2277      	moveq	r2, #119	; 0x77
     a9c:	2288      	movne	r2, #136	; 0x88
     a9e:	4b03      	ldr	r3, [pc, #12]	; (aac <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     aa0:	62da      	str	r2, [r3, #44]	; 0x2c
     aa2:	4770      	bx	lr
     aa4:	2266      	movs	r2, #102	; 0x66
     aa6:	4b01      	ldr	r3, [pc, #4]	; (aac <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     aa8:	62da      	str	r2, [r3, #44]	; 0x2c
     aaa:	4770      	bx	lr
     aac:	200022c0 	.word	0x200022c0

00000ab0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ab0:	4a03      	ldr	r2, [pc, #12]	; (ac0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     ab2:	6853      	ldr	r3, [r2, #4]
     ab4:	ea23 0000 	bic.w	r0, r3, r0
     ab8:	4308      	orrs	r0, r1
     aba:	6050      	str	r0, [r2, #4]
     abc:	4770      	bx	lr
     abe:	bf00      	nop
     ac0:	20002480 	.word	0x20002480

00000ac4 <call_range_val(unsigned int)>:
     ac4:	0301      	lsls	r1, r0, #12
     ac6:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     aca:	f7ff bffe 	b.w	ab0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     ace:	bf00      	nop

00000ad0 <call_range_val_port()>:
     ad0:	201f      	movs	r0, #31
     ad2:	f7ff bffe 	b.w	ac4 <call_range_val(unsigned int)>
     ad6:	bf00      	nop

00000ad8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ad8:	4a03      	ldr	r2, [pc, #12]	; (ae8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     ada:	6853      	ldr	r3, [r2, #4]
     adc:	ea23 0000 	bic.w	r0, r3, r0
     ae0:	4308      	orrs	r0, r1
     ae2:	6050      	str	r0, [r2, #4]
     ae4:	4770      	bx	lr
     ae6:	bf00      	nop
     ae8:	20002480 	.word	0x20002480

00000aec <call_range_ref(unsigned int)>:
     aec:	0301      	lsls	r1, r0, #12
     aee:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     af2:	f7ff bffe 	b.w	ad8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     af6:	bf00      	nop

00000af8 <call_range_ref_port()>:
     af8:	200c      	movs	r0, #12
     afa:	f7ff bffe 	b.w	aec <call_range_ref(unsigned int)>
     afe:	bf00      	nop

00000b00 <check_array_range_pass(unsigned int)>:
     b00:	2816      	cmp	r0, #22
     b02:	bf94      	ite	ls
     b04:	227f      	movls	r2, #127	; 0x7f
     b06:	2283      	movhi	r2, #131	; 0x83
     b08:	4b01      	ldr	r3, [pc, #4]	; (b10 <check_array_range_pass(unsigned int)+0x10>)
     b0a:	62da      	str	r2, [r3, #44]	; 0x2c
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	200022c0 	.word	0x200022c0

00000b14 <check_array_range_fail(unsigned int)>:
     b14:	2816      	cmp	r0, #22
     b16:	bf94      	ite	ls
     b18:	2295      	movls	r2, #149	; 0x95
     b1a:	2297      	movhi	r2, #151	; 0x97
     b1c:	4b01      	ldr	r3, [pc, #4]	; (b24 <check_array_range_fail(unsigned int)+0x10>)
     b1e:	62da      	str	r2, [r3, #44]	; 0x2c
     b20:	4770      	bx	lr
     b22:	bf00      	nop
     b24:	200022c0 	.word	0x200022c0

00000b28 <check_bits_range_pass(unsigned int)>:
     b28:	280f      	cmp	r0, #15
     b2a:	bf94      	ite	ls
     b2c:	229d      	movls	r2, #157	; 0x9d
     b2e:	22a3      	movhi	r2, #163	; 0xa3
     b30:	4b01      	ldr	r3, [pc, #4]	; (b38 <check_bits_range_pass(unsigned int)+0x10>)
     b32:	62da      	str	r2, [r3, #44]	; 0x2c
     b34:	4770      	bx	lr
     b36:	bf00      	nop
     b38:	200022c0 	.word	0x200022c0

00000b3c <check_bits_range_fail(unsigned int)>:
     b3c:	280f      	cmp	r0, #15
     b3e:	bf94      	ite	ls
     b40:	22a7      	movls	r2, #167	; 0xa7
     b42:	22ad      	movhi	r2, #173	; 0xad
     b44:	4b01      	ldr	r3, [pc, #4]	; (b4c <check_bits_range_fail(unsigned int)+0x10>)
     b46:	62da      	str	r2, [r3, #44]	; 0x2c
     b48:	4770      	bx	lr
     b4a:	bf00      	nop
     b4c:	200022c0 	.word	0x200022c0

00000b50 <check_mskd_range_pass(unsigned int)>:
     b50:	281f      	cmp	r0, #31
     b52:	bf94      	ite	ls
     b54:	22b3      	movls	r2, #179	; 0xb3
     b56:	22b5      	movhi	r2, #181	; 0xb5
     b58:	4b01      	ldr	r3, [pc, #4]	; (b60 <check_mskd_range_pass(unsigned int)+0x10>)
     b5a:	62da      	str	r2, [r3, #44]	; 0x2c
     b5c:	4770      	bx	lr
     b5e:	bf00      	nop
     b60:	200022c0 	.word	0x200022c0

00000b64 <check_mskd_range_fail(unsigned int)>:
     b64:	281f      	cmp	r0, #31
     b66:	bf94      	ite	ls
     b68:	22bf      	movls	r2, #191	; 0xbf
     b6a:	22c1      	movhi	r2, #193	; 0xc1
     b6c:	4b01      	ldr	r3, [pc, #4]	; (b74 <check_mskd_range_fail(unsigned int)+0x10>)
     b6e:	62da      	str	r2, [r3, #44]	; 0x2c
     b70:	4770      	bx	lr
     b72:	bf00      	nop
     b74:	200022c0 	.word	0x200022c0

00000b78 <bits_extract_ne()>:
     b78:	2220      	movs	r2, #32
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <bits_extract_ne()+0x14>)
     b7c:	605a      	str	r2, [r3, #4]
     b7e:	685a      	ldr	r2, [r3, #4]
     b80:	2a20      	cmp	r2, #32
     b82:	bf14      	ite	ne
     b84:	2202      	movne	r2, #2
     b86:	2204      	moveq	r2, #4
     b88:	605a      	str	r2, [r3, #4]
     b8a:	4770      	bx	lr
     b8c:	20002480 	.word	0x20002480

00000b90 <mskd_extract_geq()>:
     b90:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     b94:	4b04      	ldr	r3, [pc, #16]	; (ba8 <mskd_extract_geq()+0x18>)
     b96:	605a      	str	r2, [r3, #4]
     b98:	685b      	ldr	r3, [r3, #4]
     b9a:	4293      	cmp	r3, r2
     b9c:	bf2c      	ite	cs
     b9e:	2220      	movcs	r2, #32
     ba0:	2240      	movcc	r2, #64	; 0x40
     ba2:	4b02      	ldr	r3, [pc, #8]	; (bac <mskd_extract_geq()+0x1c>)
     ba4:	605a      	str	r2, [r3, #4]
     ba6:	4770      	bx	lr
     ba8:	200023e0 	.word	0x200023e0
     bac:	20002480 	.word	0x20002480

00000bb0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     bb0:	b410      	push	{r4}
     bb2:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
     bb6:	4b04      	ldr	r3, [pc, #16]	; (bc8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     bb8:	4a04      	ldr	r2, [pc, #16]	; (bcc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
     bba:	605c      	str	r4, [r3, #4]
     bbc:	685b      	ldr	r3, [r3, #4]
     bbe:	bc10      	pop	{r4}
     bc0:	4018      	ands	r0, r3
     bc2:	40c8      	lsrs	r0, r1
     bc4:	62d0      	str	r0, [r2, #44]	; 0x2c
     bc6:	4770      	bx	lr
     bc8:	200023e0 	.word	0x200023e0
     bcc:	200022c0 	.word	0x200022c0

00000bd0 <call_shifted_const_val()>:
     bd0:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bd4:	2119      	movs	r1, #25
     bd6:	f7ff bffe 	b.w	bb0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bda:	bf00      	nop

00000bdc <call_shifted_var_val()>:
     bdc:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     be0:	2119      	movs	r1, #25
     be2:	f7ff bffe 	b.w	bb0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     be6:	bf00      	nop

00000be8 <call_shifted_global_val()>:
     be8:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bec:	2119      	movs	r1, #25
     bee:	f7ff bffe 	b.w	bb0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bf2:	bf00      	nop

00000bf4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     bf4:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     bfa:	b410      	push	{r4}
     bfc:	6059      	str	r1, [r3, #4]
     bfe:	6804      	ldr	r4, [r0, #0]
     c00:	685b      	ldr	r3, [r3, #4]
     c02:	6841      	ldr	r1, [r0, #4]
     c04:	4023      	ands	r3, r4
     c06:	4a03      	ldr	r2, [pc, #12]	; (c14 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
     c08:	40cb      	lsrs	r3, r1
     c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
     c0c:	bc10      	pop	{r4}
     c0e:	4770      	bx	lr
     c10:	200023e0 	.word	0x200023e0
     c14:	200022c0 	.word	0x200022c0

00000c18 <call_shifted_const_ref()>:
     c18:	b500      	push	{lr}
     c1a:	4b06      	ldr	r3, [pc, #24]	; (c34 <call_shifted_const_ref()+0x1c>)
     c1c:	b082      	sub	sp, #8
     c1e:	4668      	mov	r0, sp
     c20:	f103 0308 	add.w	r3, r3, #8
     c24:	cb0c      	ldmia	r3, {r2, r3}
     c26:	e88d 000c 	stmia.w	sp, {r2, r3}
     c2a:	f7ff fffe 	bl	bf4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c2e:	b002      	add	sp, #8
     c30:	f85d fb04 	ldr.w	pc, [sp], #4
     c34:	00000000 	.word	0x00000000

00000c38 <call_shifted_var_ref()>:
     c38:	b500      	push	{lr}
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <call_shifted_var_ref()+0x1c>)
     c3c:	b082      	sub	sp, #8
     c3e:	4668      	mov	r0, sp
     c40:	f103 0310 	add.w	r3, r3, #16
     c44:	cb0c      	ldmia	r3, {r2, r3}
     c46:	e88d 000c 	stmia.w	sp, {r2, r3}
     c4a:	f7ff fffe 	bl	bf4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c4e:	b002      	add	sp, #8
     c50:	f85d fb04 	ldr.w	pc, [sp], #4
     c54:	00000000 	.word	0x00000000

00000c58 <call_shifted_global_ref()>:
     c58:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
     c5c:	2319      	movs	r3, #25
     c5e:	b500      	push	{lr}
     c60:	b082      	sub	sp, #8
     c62:	4668      	mov	r0, sp
     c64:	e88d 000c 	stmia.w	sp, {r2, r3}
     c68:	f7ff fffe 	bl	bf4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c6c:	b002      	add	sp, #8
     c6e:	f85d fb04 	ldr.w	pc, [sp], #4
     c72:	bf00      	nop

00000c74 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
     c74:	0643      	lsls	r3, r0, #25
     c76:	bf4c      	ite	mi
     c78:	2202      	movmi	r2, #2
     c7a:	2204      	movpl	r2, #4
     c7c:	4b01      	ldr	r3, [pc, #4]	; (c84 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x10>)
     c7e:	605a      	str	r2, [r3, #4]
     c80:	4770      	bx	lr
     c82:	bf00      	nop
     c84:	20002480 	.word	0x20002480

00000c88 <call_copy_bits_val()>:
     c88:	2240      	movs	r2, #64	; 0x40
     c8a:	4b02      	ldr	r3, [pc, #8]	; (c94 <call_copy_bits_val()+0xc>)
     c8c:	605a      	str	r2, [r3, #4]
     c8e:	6858      	ldr	r0, [r3, #4]
     c90:	f7ff bffe 	b.w	c74 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
     c94:	20002480 	.word	0x20002480

00000c98 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
     c98:	6803      	ldr	r3, [r0, #0]
     c9a:	065b      	lsls	r3, r3, #25
     c9c:	bf4c      	ite	mi
     c9e:	2202      	movmi	r2, #2
     ca0:	2204      	movpl	r2, #4
     ca2:	4b01      	ldr	r3, [pc, #4]	; (ca8 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x10>)
     ca4:	605a      	str	r2, [r3, #4]
     ca6:	4770      	bx	lr
     ca8:	20002480 	.word	0x20002480

00000cac <call_copy_bits_ref()>:
     cac:	2240      	movs	r2, #64	; 0x40
     cae:	b500      	push	{lr}
     cb0:	4b05      	ldr	r3, [pc, #20]	; (cc8 <call_copy_bits_ref()+0x1c>)
     cb2:	b081      	sub	sp, #4
     cb4:	605a      	str	r2, [r3, #4]
     cb6:	685b      	ldr	r3, [r3, #4]
     cb8:	4668      	mov	r0, sp
     cba:	9300      	str	r3, [sp, #0]
     cbc:	f7ff fffe 	bl	c98 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
     cc0:	b001      	add	sp, #4
     cc2:	f85d fb04 	ldr.w	pc, [sp], #4
     cc6:	bf00      	nop
     cc8:	20002480 	.word	0x20002480

00000ccc <run>:
     ccc:	b510      	push	{r4, lr}
     cce:	4cb2      	ldr	r4, [pc, #712]	; (f98 <run+0x2cc>)
     cd0:	7823      	ldrb	r3, [r4, #0]
     cd2:	2b00      	cmp	r3, #0
     cd4:	f000 82e8 	beq.w	12a8 <run+0x5dc>
     cd8:	68a1      	ldr	r1, [r4, #8]
     cda:	7b23      	ldrb	r3, [r4, #12]
     cdc:	b91b      	cbnz	r3, ce6 <run+0x1a>
     cde:	2201      	movs	r2, #1
     ce0:	4bae      	ldr	r3, [pc, #696]	; (f9c <run+0x2d0>)
     ce2:	7322      	strb	r2, [r4, #12]
     ce4:	6163      	str	r3, [r4, #20]
     ce6:	7e23      	ldrb	r3, [r4, #24]
     ce8:	b91b      	cbnz	r3, cf2 <run+0x26>
     cea:	2201      	movs	r2, #1
     cec:	4bac      	ldr	r3, [pc, #688]	; (fa0 <run+0x2d4>)
     cee:	7622      	strb	r2, [r4, #24]
     cf0:	6223      	str	r3, [r4, #32]
     cf2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
     cf6:	b923      	cbnz	r3, d02 <run+0x36>
     cf8:	2201      	movs	r2, #1
     cfa:	4baa      	ldr	r3, [pc, #680]	; (fa4 <run+0x2d8>)
     cfc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
     d00:	62e3      	str	r3, [r4, #44]	; 0x2c
     d02:	2200      	movs	r2, #0
     d04:	48a8      	ldr	r0, [pc, #672]	; (fa8 <run+0x2dc>)
     d06:	f7ff fffe 	bl	0 <do_test>
     d0a:	68a1      	ldr	r1, [r4, #8]
     d0c:	2201      	movs	r2, #1
     d0e:	48a7      	ldr	r0, [pc, #668]	; (fac <run+0x2e0>)
     d10:	f7ff fffe 	bl	0 <do_test>
     d14:	68a1      	ldr	r1, [r4, #8]
     d16:	2202      	movs	r2, #2
     d18:	48a5      	ldr	r0, [pc, #660]	; (fb0 <run+0x2e4>)
     d1a:	f7ff fffe 	bl	0 <do_test>
     d1e:	68a1      	ldr	r1, [r4, #8]
     d20:	2203      	movs	r2, #3
     d22:	48a4      	ldr	r0, [pc, #656]	; (fb4 <run+0x2e8>)
     d24:	f7ff fffe 	bl	0 <do_test>
     d28:	68a1      	ldr	r1, [r4, #8]
     d2a:	2204      	movs	r2, #4
     d2c:	48a2      	ldr	r0, [pc, #648]	; (fb8 <run+0x2ec>)
     d2e:	f7ff fffe 	bl	0 <do_test>
     d32:	68a1      	ldr	r1, [r4, #8]
     d34:	2205      	movs	r2, #5
     d36:	48a1      	ldr	r0, [pc, #644]	; (fbc <run+0x2f0>)
     d38:	f7ff fffe 	bl	0 <do_test>
     d3c:	68a1      	ldr	r1, [r4, #8]
     d3e:	2206      	movs	r2, #6
     d40:	489f      	ldr	r0, [pc, #636]	; (fc0 <run+0x2f4>)
     d42:	f7ff fffe 	bl	0 <do_test>
     d46:	68a1      	ldr	r1, [r4, #8]
     d48:	2207      	movs	r2, #7
     d4a:	489e      	ldr	r0, [pc, #632]	; (fc4 <run+0x2f8>)
     d4c:	f7ff fffe 	bl	0 <do_test>
     d50:	68a1      	ldr	r1, [r4, #8]
     d52:	2208      	movs	r2, #8
     d54:	489c      	ldr	r0, [pc, #624]	; (fc8 <run+0x2fc>)
     d56:	f7ff fffe 	bl	0 <do_test>
     d5a:	68a1      	ldr	r1, [r4, #8]
     d5c:	2209      	movs	r2, #9
     d5e:	489b      	ldr	r0, [pc, #620]	; (fcc <run+0x300>)
     d60:	f7ff fffe 	bl	0 <do_test>
     d64:	68a1      	ldr	r1, [r4, #8]
     d66:	220a      	movs	r2, #10
     d68:	4899      	ldr	r0, [pc, #612]	; (fd0 <run+0x304>)
     d6a:	f7ff fffe 	bl	0 <do_test>
     d6e:	68a1      	ldr	r1, [r4, #8]
     d70:	220b      	movs	r2, #11
     d72:	4898      	ldr	r0, [pc, #608]	; (fd4 <run+0x308>)
     d74:	f7ff fffe 	bl	0 <do_test>
     d78:	68a1      	ldr	r1, [r4, #8]
     d7a:	220c      	movs	r2, #12
     d7c:	4896      	ldr	r0, [pc, #600]	; (fd8 <run+0x30c>)
     d7e:	f7ff fffe 	bl	0 <do_test>
     d82:	68a1      	ldr	r1, [r4, #8]
     d84:	220d      	movs	r2, #13
     d86:	4895      	ldr	r0, [pc, #596]	; (fdc <run+0x310>)
     d88:	f7ff fffe 	bl	0 <do_test>
     d8c:	68a1      	ldr	r1, [r4, #8]
     d8e:	220e      	movs	r2, #14
     d90:	4893      	ldr	r0, [pc, #588]	; (fe0 <run+0x314>)
     d92:	f7ff fffe 	bl	0 <do_test>
     d96:	68a1      	ldr	r1, [r4, #8]
     d98:	220f      	movs	r2, #15
     d9a:	4892      	ldr	r0, [pc, #584]	; (fe4 <run+0x318>)
     d9c:	f7ff fffe 	bl	0 <do_test>
     da0:	68a1      	ldr	r1, [r4, #8]
     da2:	2210      	movs	r2, #16
     da4:	4890      	ldr	r0, [pc, #576]	; (fe8 <run+0x31c>)
     da6:	f7ff fffe 	bl	0 <do_test>
     daa:	68a1      	ldr	r1, [r4, #8]
     dac:	2211      	movs	r2, #17
     dae:	488f      	ldr	r0, [pc, #572]	; (fec <run+0x320>)
     db0:	f7ff fffe 	bl	0 <do_test>
     db4:	68a1      	ldr	r1, [r4, #8]
     db6:	2212      	movs	r2, #18
     db8:	488d      	ldr	r0, [pc, #564]	; (ff0 <run+0x324>)
     dba:	f7ff fffe 	bl	0 <do_test>
     dbe:	68a1      	ldr	r1, [r4, #8]
     dc0:	2213      	movs	r2, #19
     dc2:	488c      	ldr	r0, [pc, #560]	; (ff4 <run+0x328>)
     dc4:	f7ff fffe 	bl	0 <do_test>
     dc8:	68a1      	ldr	r1, [r4, #8]
     dca:	2214      	movs	r2, #20
     dcc:	488a      	ldr	r0, [pc, #552]	; (ff8 <run+0x32c>)
     dce:	f7ff fffe 	bl	0 <do_test>
     dd2:	68a1      	ldr	r1, [r4, #8]
     dd4:	2215      	movs	r2, #21
     dd6:	4889      	ldr	r0, [pc, #548]	; (ffc <run+0x330>)
     dd8:	f7ff fffe 	bl	0 <do_test>
     ddc:	68a1      	ldr	r1, [r4, #8]
     dde:	2216      	movs	r2, #22
     de0:	4887      	ldr	r0, [pc, #540]	; (1000 <run+0x334>)
     de2:	f7ff fffe 	bl	0 <do_test>
     de6:	68a1      	ldr	r1, [r4, #8]
     de8:	2217      	movs	r2, #23
     dea:	4886      	ldr	r0, [pc, #536]	; (1004 <run+0x338>)
     dec:	f7ff fffe 	bl	0 <do_test>
     df0:	68a1      	ldr	r1, [r4, #8]
     df2:	2218      	movs	r2, #24
     df4:	4884      	ldr	r0, [pc, #528]	; (1008 <run+0x33c>)
     df6:	f7ff fffe 	bl	0 <do_test>
     dfa:	68a1      	ldr	r1, [r4, #8]
     dfc:	2219      	movs	r2, #25
     dfe:	4883      	ldr	r0, [pc, #524]	; (100c <run+0x340>)
     e00:	f7ff fffe 	bl	0 <do_test>
     e04:	68a1      	ldr	r1, [r4, #8]
     e06:	221a      	movs	r2, #26
     e08:	4881      	ldr	r0, [pc, #516]	; (1010 <run+0x344>)
     e0a:	f7ff fffe 	bl	0 <do_test>
     e0e:	68a1      	ldr	r1, [r4, #8]
     e10:	221b      	movs	r2, #27
     e12:	4880      	ldr	r0, [pc, #512]	; (1014 <run+0x348>)
     e14:	f7ff fffe 	bl	0 <do_test>
     e18:	68a1      	ldr	r1, [r4, #8]
     e1a:	221c      	movs	r2, #28
     e1c:	487e      	ldr	r0, [pc, #504]	; (1018 <run+0x34c>)
     e1e:	f7ff fffe 	bl	0 <do_test>
     e22:	68a1      	ldr	r1, [r4, #8]
     e24:	221d      	movs	r2, #29
     e26:	487d      	ldr	r0, [pc, #500]	; (101c <run+0x350>)
     e28:	f7ff fffe 	bl	0 <do_test>
     e2c:	68a1      	ldr	r1, [r4, #8]
     e2e:	221e      	movs	r2, #30
     e30:	487b      	ldr	r0, [pc, #492]	; (1020 <run+0x354>)
     e32:	f7ff fffe 	bl	0 <do_test>
     e36:	68a1      	ldr	r1, [r4, #8]
     e38:	221f      	movs	r2, #31
     e3a:	487a      	ldr	r0, [pc, #488]	; (1024 <run+0x358>)
     e3c:	f7ff fffe 	bl	0 <do_test>
     e40:	68a1      	ldr	r1, [r4, #8]
     e42:	2220      	movs	r2, #32
     e44:	4878      	ldr	r0, [pc, #480]	; (1028 <run+0x35c>)
     e46:	f7ff fffe 	bl	0 <do_test>
     e4a:	68a1      	ldr	r1, [r4, #8]
     e4c:	2221      	movs	r2, #33	; 0x21
     e4e:	4877      	ldr	r0, [pc, #476]	; (102c <run+0x360>)
     e50:	f7ff fffe 	bl	0 <do_test>
     e54:	68a1      	ldr	r1, [r4, #8]
     e56:	2222      	movs	r2, #34	; 0x22
     e58:	4875      	ldr	r0, [pc, #468]	; (1030 <run+0x364>)
     e5a:	f7ff fffe 	bl	0 <do_test>
     e5e:	68a1      	ldr	r1, [r4, #8]
     e60:	2223      	movs	r2, #35	; 0x23
     e62:	4874      	ldr	r0, [pc, #464]	; (1034 <run+0x368>)
     e64:	f7ff fffe 	bl	0 <do_test>
     e68:	68a1      	ldr	r1, [r4, #8]
     e6a:	2224      	movs	r2, #36	; 0x24
     e6c:	4872      	ldr	r0, [pc, #456]	; (1038 <run+0x36c>)
     e6e:	f7ff fffe 	bl	0 <do_test>
     e72:	6961      	ldr	r1, [r4, #20]
     e74:	2225      	movs	r2, #37	; 0x25
     e76:	4871      	ldr	r0, [pc, #452]	; (103c <run+0x370>)
     e78:	f7ff fffe 	bl	0 <do_test>
     e7c:	6961      	ldr	r1, [r4, #20]
     e7e:	2226      	movs	r2, #38	; 0x26
     e80:	486f      	ldr	r0, [pc, #444]	; (1040 <run+0x374>)
     e82:	f7ff fffe 	bl	0 <do_test>
     e86:	6961      	ldr	r1, [r4, #20]
     e88:	2227      	movs	r2, #39	; 0x27
     e8a:	486e      	ldr	r0, [pc, #440]	; (1044 <run+0x378>)
     e8c:	f7ff fffe 	bl	0 <do_test>
     e90:	68a1      	ldr	r1, [r4, #8]
     e92:	2228      	movs	r2, #40	; 0x28
     e94:	486c      	ldr	r0, [pc, #432]	; (1048 <run+0x37c>)
     e96:	f7ff fffe 	bl	0 <do_test>
     e9a:	68a1      	ldr	r1, [r4, #8]
     e9c:	2229      	movs	r2, #41	; 0x29
     e9e:	486b      	ldr	r0, [pc, #428]	; (104c <run+0x380>)
     ea0:	f7ff fffe 	bl	0 <do_test>
     ea4:	68a1      	ldr	r1, [r4, #8]
     ea6:	222a      	movs	r2, #42	; 0x2a
     ea8:	4869      	ldr	r0, [pc, #420]	; (1050 <run+0x384>)
     eaa:	f7ff fffe 	bl	0 <do_test>
     eae:	68a1      	ldr	r1, [r4, #8]
     eb0:	222b      	movs	r2, #43	; 0x2b
     eb2:	4868      	ldr	r0, [pc, #416]	; (1054 <run+0x388>)
     eb4:	f7ff fffe 	bl	0 <do_test>
     eb8:	68a1      	ldr	r1, [r4, #8]
     eba:	222c      	movs	r2, #44	; 0x2c
     ebc:	4866      	ldr	r0, [pc, #408]	; (1058 <run+0x38c>)
     ebe:	f7ff fffe 	bl	0 <do_test>
     ec2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     ec4:	222d      	movs	r2, #45	; 0x2d
     ec6:	4865      	ldr	r0, [pc, #404]	; (105c <run+0x390>)
     ec8:	f7ff fffe 	bl	0 <do_test>
     ecc:	68a1      	ldr	r1, [r4, #8]
     ece:	222e      	movs	r2, #46	; 0x2e
     ed0:	4863      	ldr	r0, [pc, #396]	; (1060 <run+0x394>)
     ed2:	f7ff fffe 	bl	0 <do_test>
     ed6:	68a1      	ldr	r1, [r4, #8]
     ed8:	222f      	movs	r2, #47	; 0x2f
     eda:	4862      	ldr	r0, [pc, #392]	; (1064 <run+0x398>)
     edc:	f7ff fffe 	bl	0 <do_test>
     ee0:	68a1      	ldr	r1, [r4, #8]
     ee2:	2230      	movs	r2, #48	; 0x30
     ee4:	4860      	ldr	r0, [pc, #384]	; (1068 <run+0x39c>)
     ee6:	f7ff fffe 	bl	0 <do_test>
     eea:	68a1      	ldr	r1, [r4, #8]
     eec:	2231      	movs	r2, #49	; 0x31
     eee:	485f      	ldr	r0, [pc, #380]	; (106c <run+0x3a0>)
     ef0:	f7ff fffe 	bl	0 <do_test>
     ef4:	68a1      	ldr	r1, [r4, #8]
     ef6:	2232      	movs	r2, #50	; 0x32
     ef8:	485d      	ldr	r0, [pc, #372]	; (1070 <run+0x3a4>)
     efa:	f7ff fffe 	bl	0 <do_test>
     efe:	68a1      	ldr	r1, [r4, #8]
     f00:	2233      	movs	r2, #51	; 0x33
     f02:	485c      	ldr	r0, [pc, #368]	; (1074 <run+0x3a8>)
     f04:	f7ff fffe 	bl	0 <do_test>
     f08:	68a1      	ldr	r1, [r4, #8]
     f0a:	2234      	movs	r2, #52	; 0x34
     f0c:	485a      	ldr	r0, [pc, #360]	; (1078 <run+0x3ac>)
     f0e:	f7ff fffe 	bl	0 <do_test>
     f12:	68a1      	ldr	r1, [r4, #8]
     f14:	2235      	movs	r2, #53	; 0x35
     f16:	4859      	ldr	r0, [pc, #356]	; (107c <run+0x3b0>)
     f18:	f7ff fffe 	bl	0 <do_test>
     f1c:	68a1      	ldr	r1, [r4, #8]
     f1e:	2236      	movs	r2, #54	; 0x36
     f20:	4857      	ldr	r0, [pc, #348]	; (1080 <run+0x3b4>)
     f22:	f7ff fffe 	bl	0 <do_test>
     f26:	68a1      	ldr	r1, [r4, #8]
     f28:	2237      	movs	r2, #55	; 0x37
     f2a:	4856      	ldr	r0, [pc, #344]	; (1084 <run+0x3b8>)
     f2c:	f7ff fffe 	bl	0 <do_test>
     f30:	68a1      	ldr	r1, [r4, #8]
     f32:	2238      	movs	r2, #56	; 0x38
     f34:	4854      	ldr	r0, [pc, #336]	; (1088 <run+0x3bc>)
     f36:	f7ff fffe 	bl	0 <do_test>
     f3a:	68a1      	ldr	r1, [r4, #8]
     f3c:	2239      	movs	r2, #57	; 0x39
     f3e:	4853      	ldr	r0, [pc, #332]	; (108c <run+0x3c0>)
     f40:	f7ff fffe 	bl	0 <do_test>
     f44:	68a1      	ldr	r1, [r4, #8]
     f46:	223a      	movs	r2, #58	; 0x3a
     f48:	4851      	ldr	r0, [pc, #324]	; (1090 <run+0x3c4>)
     f4a:	f7ff fffe 	bl	0 <do_test>
     f4e:	68a1      	ldr	r1, [r4, #8]
     f50:	223b      	movs	r2, #59	; 0x3b
     f52:	4850      	ldr	r0, [pc, #320]	; (1094 <run+0x3c8>)
     f54:	f7ff fffe 	bl	0 <do_test>
     f58:	68a1      	ldr	r1, [r4, #8]
     f5a:	223c      	movs	r2, #60	; 0x3c
     f5c:	484e      	ldr	r0, [pc, #312]	; (1098 <run+0x3cc>)
     f5e:	f7ff fffe 	bl	0 <do_test>
     f62:	68a1      	ldr	r1, [r4, #8]
     f64:	223d      	movs	r2, #61	; 0x3d
     f66:	484d      	ldr	r0, [pc, #308]	; (109c <run+0x3d0>)
     f68:	f7ff fffe 	bl	0 <do_test>
     f6c:	68a1      	ldr	r1, [r4, #8]
     f6e:	223e      	movs	r2, #62	; 0x3e
     f70:	484b      	ldr	r0, [pc, #300]	; (10a0 <run+0x3d4>)
     f72:	f7ff fffe 	bl	0 <do_test>
     f76:	68a1      	ldr	r1, [r4, #8]
     f78:	223f      	movs	r2, #63	; 0x3f
     f7a:	484a      	ldr	r0, [pc, #296]	; (10a4 <run+0x3d8>)
     f7c:	f7ff fffe 	bl	0 <do_test>
     f80:	6961      	ldr	r1, [r4, #20]
     f82:	2240      	movs	r2, #64	; 0x40
     f84:	4848      	ldr	r0, [pc, #288]	; (10a8 <run+0x3dc>)
     f86:	f7ff fffe 	bl	0 <do_test>
     f8a:	6961      	ldr	r1, [r4, #20]
     f8c:	2241      	movs	r2, #65	; 0x41
     f8e:	4847      	ldr	r0, [pc, #284]	; (10ac <run+0x3e0>)
     f90:	f7ff fffe 	bl	0 <do_test>
     f94:	e08c      	b.n	10b0 <run+0x3e4>
     f96:	bf00      	nop
     f98:	00000000 	.word	0x00000000
     f9c:	200023e4 	.word	0x200023e4
     fa0:	200022ec 	.word	0x200022ec
     fa4:	20002360 	.word	0x20002360
	...
    10b0:	6961      	ldr	r1, [r4, #20]
    10b2:	2242      	movs	r2, #66	; 0x42
    10b4:	487f      	ldr	r0, [pc, #508]	; (12b4 <run+0x5e8>)
    10b6:	f7ff fffe 	bl	0 <do_test>
    10ba:	68a1      	ldr	r1, [r4, #8]
    10bc:	2243      	movs	r2, #67	; 0x43
    10be:	487e      	ldr	r0, [pc, #504]	; (12b8 <run+0x5ec>)
    10c0:	f7ff fffe 	bl	0 <do_test>
    10c4:	6a21      	ldr	r1, [r4, #32]
    10c6:	2244      	movs	r2, #68	; 0x44
    10c8:	487c      	ldr	r0, [pc, #496]	; (12bc <run+0x5f0>)
    10ca:	f7ff fffe 	bl	0 <do_test>
    10ce:	6a21      	ldr	r1, [r4, #32]
    10d0:	2245      	movs	r2, #69	; 0x45
    10d2:	487b      	ldr	r0, [pc, #492]	; (12c0 <run+0x5f4>)
    10d4:	f7ff fffe 	bl	0 <do_test>
    10d8:	68a1      	ldr	r1, [r4, #8]
    10da:	2246      	movs	r2, #70	; 0x46
    10dc:	4879      	ldr	r0, [pc, #484]	; (12c4 <run+0x5f8>)
    10de:	f7ff fffe 	bl	0 <do_test>
    10e2:	68a1      	ldr	r1, [r4, #8]
    10e4:	2247      	movs	r2, #71	; 0x47
    10e6:	4878      	ldr	r0, [pc, #480]	; (12c8 <run+0x5fc>)
    10e8:	f7ff fffe 	bl	0 <do_test>
    10ec:	6a21      	ldr	r1, [r4, #32]
    10ee:	2248      	movs	r2, #72	; 0x48
    10f0:	4876      	ldr	r0, [pc, #472]	; (12cc <run+0x600>)
    10f2:	f7ff fffe 	bl	0 <do_test>
    10f6:	6a21      	ldr	r1, [r4, #32]
    10f8:	2249      	movs	r2, #73	; 0x49
    10fa:	4875      	ldr	r0, [pc, #468]	; (12d0 <run+0x604>)
    10fc:	f7ff fffe 	bl	0 <do_test>
    1100:	68a1      	ldr	r1, [r4, #8]
    1102:	224a      	movs	r2, #74	; 0x4a
    1104:	4873      	ldr	r0, [pc, #460]	; (12d4 <run+0x608>)
    1106:	f7ff fffe 	bl	0 <do_test>
    110a:	68a1      	ldr	r1, [r4, #8]
    110c:	224b      	movs	r2, #75	; 0x4b
    110e:	4872      	ldr	r0, [pc, #456]	; (12d8 <run+0x60c>)
    1110:	f7ff fffe 	bl	0 <do_test>
    1114:	68a1      	ldr	r1, [r4, #8]
    1116:	224c      	movs	r2, #76	; 0x4c
    1118:	4870      	ldr	r0, [pc, #448]	; (12dc <run+0x610>)
    111a:	f7ff fffe 	bl	0 <do_test>
    111e:	68a1      	ldr	r1, [r4, #8]
    1120:	224d      	movs	r2, #77	; 0x4d
    1122:	486f      	ldr	r0, [pc, #444]	; (12e0 <run+0x614>)
    1124:	f7ff fffe 	bl	0 <do_test>
    1128:	68a1      	ldr	r1, [r4, #8]
    112a:	224e      	movs	r2, #78	; 0x4e
    112c:	486d      	ldr	r0, [pc, #436]	; (12e4 <run+0x618>)
    112e:	f7ff fffe 	bl	0 <do_test>
    1132:	68a1      	ldr	r1, [r4, #8]
    1134:	224f      	movs	r2, #79	; 0x4f
    1136:	486c      	ldr	r0, [pc, #432]	; (12e8 <run+0x61c>)
    1138:	f7ff fffe 	bl	0 <do_test>
    113c:	68a1      	ldr	r1, [r4, #8]
    113e:	2250      	movs	r2, #80	; 0x50
    1140:	486a      	ldr	r0, [pc, #424]	; (12ec <run+0x620>)
    1142:	f7ff fffe 	bl	0 <do_test>
    1146:	68a1      	ldr	r1, [r4, #8]
    1148:	2251      	movs	r2, #81	; 0x51
    114a:	4868      	ldr	r0, [pc, #416]	; (12ec <run+0x620>)
    114c:	f7ff fffe 	bl	0 <do_test>
    1150:	68a1      	ldr	r1, [r4, #8]
    1152:	2252      	movs	r2, #82	; 0x52
    1154:	4866      	ldr	r0, [pc, #408]	; (12f0 <run+0x624>)
    1156:	f7ff fffe 	bl	0 <do_test>
    115a:	68a1      	ldr	r1, [r4, #8]
    115c:	2253      	movs	r2, #83	; 0x53
    115e:	4865      	ldr	r0, [pc, #404]	; (12f4 <run+0x628>)
    1160:	f7ff fffe 	bl	0 <do_test>
    1164:	68a1      	ldr	r1, [r4, #8]
    1166:	2254      	movs	r2, #84	; 0x54
    1168:	4863      	ldr	r0, [pc, #396]	; (12f8 <run+0x62c>)
    116a:	f7ff fffe 	bl	0 <do_test>
    116e:	68a1      	ldr	r1, [r4, #8]
    1170:	2255      	movs	r2, #85	; 0x55
    1172:	4862      	ldr	r0, [pc, #392]	; (12fc <run+0x630>)
    1174:	f7ff fffe 	bl	0 <do_test>
    1178:	68a1      	ldr	r1, [r4, #8]
    117a:	2256      	movs	r2, #86	; 0x56
    117c:	4860      	ldr	r0, [pc, #384]	; (1300 <run+0x634>)
    117e:	f7ff fffe 	bl	0 <do_test>
    1182:	68a1      	ldr	r1, [r4, #8]
    1184:	2257      	movs	r2, #87	; 0x57
    1186:	485d      	ldr	r0, [pc, #372]	; (12fc <run+0x630>)
    1188:	f7ff fffe 	bl	0 <do_test>
    118c:	68a1      	ldr	r1, [r4, #8]
    118e:	2258      	movs	r2, #88	; 0x58
    1190:	485c      	ldr	r0, [pc, #368]	; (1304 <run+0x638>)
    1192:	f7ff fffe 	bl	0 <do_test>
    1196:	68a1      	ldr	r1, [r4, #8]
    1198:	2259      	movs	r2, #89	; 0x59
    119a:	485b      	ldr	r0, [pc, #364]	; (1308 <run+0x63c>)
    119c:	f7ff fffe 	bl	0 <do_test>
    11a0:	6a21      	ldr	r1, [r4, #32]
    11a2:	225a      	movs	r2, #90	; 0x5a
    11a4:	4859      	ldr	r0, [pc, #356]	; (130c <run+0x640>)
    11a6:	f7ff fffe 	bl	0 <do_test>
    11aa:	6a21      	ldr	r1, [r4, #32]
    11ac:	225b      	movs	r2, #91	; 0x5b
    11ae:	4858      	ldr	r0, [pc, #352]	; (1310 <run+0x644>)
    11b0:	f7ff fffe 	bl	0 <do_test>
    11b4:	68a1      	ldr	r1, [r4, #8]
    11b6:	225c      	movs	r2, #92	; 0x5c
    11b8:	4856      	ldr	r0, [pc, #344]	; (1314 <run+0x648>)
    11ba:	f7ff fffe 	bl	0 <do_test>
    11be:	6a21      	ldr	r1, [r4, #32]
    11c0:	225d      	movs	r2, #93	; 0x5d
    11c2:	4855      	ldr	r0, [pc, #340]	; (1318 <run+0x64c>)
    11c4:	f7ff fffe 	bl	0 <do_test>
    11c8:	6a21      	ldr	r1, [r4, #32]
    11ca:	225e      	movs	r2, #94	; 0x5e
    11cc:	4853      	ldr	r0, [pc, #332]	; (131c <run+0x650>)
    11ce:	f7ff fffe 	bl	0 <do_test>
    11d2:	68a1      	ldr	r1, [r4, #8]
    11d4:	225f      	movs	r2, #95	; 0x5f
    11d6:	4852      	ldr	r0, [pc, #328]	; (1320 <run+0x654>)
    11d8:	f7ff fffe 	bl	0 <do_test>
    11dc:	68a1      	ldr	r1, [r4, #8]
    11de:	2260      	movs	r2, #96	; 0x60
    11e0:	4850      	ldr	r0, [pc, #320]	; (1324 <run+0x658>)
    11e2:	f7ff fffe 	bl	0 <do_test>
    11e6:	68a1      	ldr	r1, [r4, #8]
    11e8:	2261      	movs	r2, #97	; 0x61
    11ea:	484f      	ldr	r0, [pc, #316]	; (1328 <run+0x65c>)
    11ec:	f7ff fffe 	bl	0 <do_test>
    11f0:	68a1      	ldr	r1, [r4, #8]
    11f2:	2262      	movs	r2, #98	; 0x62
    11f4:	484d      	ldr	r0, [pc, #308]	; (132c <run+0x660>)
    11f6:	f7ff fffe 	bl	0 <do_test>
    11fa:	6a21      	ldr	r1, [r4, #32]
    11fc:	2263      	movs	r2, #99	; 0x63
    11fe:	484c      	ldr	r0, [pc, #304]	; (1330 <run+0x664>)
    1200:	f7ff fffe 	bl	0 <do_test>
    1204:	6a21      	ldr	r1, [r4, #32]
    1206:	2264      	movs	r2, #100	; 0x64
    1208:	484a      	ldr	r0, [pc, #296]	; (1334 <run+0x668>)
    120a:	f7ff fffe 	bl	0 <do_test>
    120e:	6a21      	ldr	r1, [r4, #32]
    1210:	2265      	movs	r2, #101	; 0x65
    1212:	4849      	ldr	r0, [pc, #292]	; (1338 <run+0x66c>)
    1214:	f7ff fffe 	bl	0 <do_test>
    1218:	6a21      	ldr	r1, [r4, #32]
    121a:	2266      	movs	r2, #102	; 0x66
    121c:	4847      	ldr	r0, [pc, #284]	; (133c <run+0x670>)
    121e:	f7ff fffe 	bl	0 <do_test>
    1222:	6a21      	ldr	r1, [r4, #32]
    1224:	2267      	movs	r2, #103	; 0x67
    1226:	4846      	ldr	r0, [pc, #280]	; (1340 <run+0x674>)
    1228:	f7ff fffe 	bl	0 <do_test>
    122c:	6a21      	ldr	r1, [r4, #32]
    122e:	2268      	movs	r2, #104	; 0x68
    1230:	4844      	ldr	r0, [pc, #272]	; (1344 <run+0x678>)
    1232:	f7ff fffe 	bl	0 <do_test>
    1236:	68a1      	ldr	r1, [r4, #8]
    1238:	2269      	movs	r2, #105	; 0x69
    123a:	4843      	ldr	r0, [pc, #268]	; (1348 <run+0x67c>)
    123c:	f7ff fffe 	bl	0 <do_test>
    1240:	68a1      	ldr	r1, [r4, #8]
    1242:	226a      	movs	r2, #106	; 0x6a
    1244:	4841      	ldr	r0, [pc, #260]	; (134c <run+0x680>)
    1246:	f7ff fffe 	bl	0 <do_test>
    124a:	68a1      	ldr	r1, [r4, #8]
    124c:	226b      	movs	r2, #107	; 0x6b
    124e:	4840      	ldr	r0, [pc, #256]	; (1350 <run+0x684>)
    1250:	f7ff fffe 	bl	0 <do_test>
    1254:	68a1      	ldr	r1, [r4, #8]
    1256:	226c      	movs	r2, #108	; 0x6c
    1258:	483e      	ldr	r0, [pc, #248]	; (1354 <run+0x688>)
    125a:	f7ff fffe 	bl	0 <do_test>
    125e:	68a1      	ldr	r1, [r4, #8]
    1260:	226d      	movs	r2, #109	; 0x6d
    1262:	483d      	ldr	r0, [pc, #244]	; (1358 <run+0x68c>)
    1264:	f7ff fffe 	bl	0 <do_test>
    1268:	68a1      	ldr	r1, [r4, #8]
    126a:	226e      	movs	r2, #110	; 0x6e
    126c:	483b      	ldr	r0, [pc, #236]	; (135c <run+0x690>)
    126e:	f7ff fffe 	bl	0 <do_test>
    1272:	68a1      	ldr	r1, [r4, #8]
    1274:	226f      	movs	r2, #111	; 0x6f
    1276:	483a      	ldr	r0, [pc, #232]	; (1360 <run+0x694>)
    1278:	f7ff fffe 	bl	0 <do_test>
    127c:	68a1      	ldr	r1, [r4, #8]
    127e:	2270      	movs	r2, #112	; 0x70
    1280:	4838      	ldr	r0, [pc, #224]	; (1364 <run+0x698>)
    1282:	f7ff fffe 	bl	0 <do_test>
    1286:	68a1      	ldr	r1, [r4, #8]
    1288:	2271      	movs	r2, #113	; 0x71
    128a:	4837      	ldr	r0, [pc, #220]	; (1368 <run+0x69c>)
    128c:	f7ff fffe 	bl	0 <do_test>
    1290:	68a1      	ldr	r1, [r4, #8]
    1292:	2272      	movs	r2, #114	; 0x72
    1294:	4835      	ldr	r0, [pc, #212]	; (136c <run+0x6a0>)
    1296:	f7ff fffe 	bl	0 <do_test>
    129a:	68a1      	ldr	r1, [r4, #8]
    129c:	2273      	movs	r2, #115	; 0x73
    129e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12a2:	4833      	ldr	r0, [pc, #204]	; (d0 <do_test+0xd0>)
    12a4:	f7ff bffe 	b.w	0 <do_test>
    12a8:	2301      	movs	r3, #1
    12aa:	4932      	ldr	r1, [pc, #200]	; (1374 <run+0x6a8>)
    12ac:	7023      	strb	r3, [r4, #0]
    12ae:	60a1      	str	r1, [r4, #8]
    12b0:	e513      	b.n	cda <run+0xe>
    12b2:	bf00      	nop
	...
    1374:	20002484 	.word	0x20002484

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
