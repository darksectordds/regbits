
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	6853      	ldr	r3, [r2, #4]
     154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     158:	f023 0306 	bic.w	r3, r3, #6
     15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     160:	6053      	str	r3, [r2, #4]
     162:	4770      	bx	lr
     164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16a:	6853      	ldr	r3, [r2, #4]
     16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     170:	f023 0306 	bic.w	r3, r3, #6
     174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     178:	6053      	str	r3, [r2, #4]
     17a:	4770      	bx	lr
     17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
     180:	2260      	movs	r2, #96	; 0x60
     182:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
     18c:	2260      	movs	r2, #96	; 0x60
     18e:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
     198:	f44f 7242 	mov.w	r2, #776	; 0x308
     19c:	4b01      	ldr	r3, [pc, #4]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
     1a8:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ac:	4b01      	ldr	r3, [pc, #4]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
     1b8:	2222      	movs	r2, #34	; 0x22
     1ba:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
     1c4:	2222      	movs	r2, #34	; 0x22
     1c6:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
     1d0:	2244      	movs	r2, #68	; 0x44
     1d2:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
     1dc:	2244      	movs	r2, #68	; 0x44
     1de:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
     1e8:	2140      	movs	r1, #64	; 0x40
     1ea:	2201      	movs	r2, #1
     1ec:	4b01      	ldr	r3, [pc, #4]	; (1f4 <equ_bits_var()+0xc>)
     1ee:	6059      	str	r1, [r3, #4]
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
     1f8:	2102      	movs	r1, #2
     1fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <equ_mskd_var()+0x10>)
     200:	6059      	str	r1, [r3, #4]
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
     20c:	2200      	movs	r2, #0
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21a:	4b05      	ldr	r3, [pc, #20]	; (230 <cmp_equ_zero()+0x24>)
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     224:	4b02      	ldr	r3, [pc, #8]	; (230 <cmp_equ_zero()+0x24>)
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20002480 	.word	0x20002480
     230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
     234:	2200      	movs	r2, #0
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <cmp_neq_zero()+0x18>)
     238:	605a      	str	r2, [r3, #4]
     23a:	685a      	ldr	r2, [r3, #4]
     23c:	b112      	cbz	r2, 244 <cmp_neq_zero()+0x10>
     23e:	2204      	movs	r2, #4
     240:	605a      	str	r2, [r3, #4]
     242:	4770      	bx	lr
     244:	2220      	movs	r2, #32
     246:	605a      	str	r2, [r3, #4]
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	20002480 	.word	0x20002480

00000250 <cmp_equ_bits()>:
     250:	2240      	movs	r2, #64	; 0x40
     252:	4b06      	ldr	r3, [pc, #24]	; (26c <cmp_equ_bits()+0x1c>)
     254:	605a      	str	r2, [r3, #4]
     256:	685b      	ldr	r3, [r3, #4]
     258:	065b      	lsls	r3, r3, #25
     25a:	bf4c      	ite	mi
     25c:	f04f 52b0 	movmi.w	r2, #369098752	; 0x16000000
     260:	f04f 52d0 	movpl.w	r2, #436207616	; 0x1a000000
     264:	4b02      	ldr	r3, [pc, #8]	; (270 <cmp_equ_bits()+0x20>)
     266:	605a      	str	r2, [r3, #4]
     268:	4770      	bx	lr
     26a:	bf00      	nop
     26c:	20002480 	.word	0x20002480
     270:	200023e0 	.word	0x200023e0

00000274 <cmp_neq_bits()>:
     274:	2240      	movs	r2, #64	; 0x40
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <cmp_neq_bits()+0x14>)
     278:	605a      	str	r2, [r3, #4]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	0652      	lsls	r2, r2, #25
     27e:	bf54      	ite	pl
     280:	2202      	movpl	r2, #2
     282:	2220      	movmi	r2, #32
     284:	605a      	str	r2, [r3, #4]
     286:	4770      	bx	lr
     288:	20002480 	.word	0x20002480

0000028c <cmp_equ_mskd()>:
     28c:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     290:	4b08      	ldr	r3, [pc, #32]	; (2b4 <cmp_equ_mskd()+0x28>)
     292:	605a      	str	r2, [r3, #4]
     294:	685b      	ldr	r3, [r3, #4]
     296:	4a08      	ldr	r2, [pc, #32]	; (2b8 <cmp_equ_mskd()+0x2c>)
     298:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     29c:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2a0:	6853      	ldr	r3, [r2, #4]
     2a2:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2a6:	bf0c      	ite	eq
     2a8:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2ac:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     2b0:	6053      	str	r3, [r2, #4]
     2b2:	4770      	bx	lr
     2b4:	20002480 	.word	0x20002480
     2b8:	200023e0 	.word	0x200023e0

000002bc <cmp_neq_mskd()>:
     2bc:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2c0:	4b08      	ldr	r3, [pc, #32]	; (2e4 <cmp_neq_mskd()+0x28>)
     2c2:	605a      	str	r2, [r3, #4]
     2c4:	685a      	ldr	r2, [r3, #4]
     2c6:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
     2ca:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
     2ce:	685a      	ldr	r2, [r3, #4]
     2d0:	bf1a      	itte	ne
     2d2:	f022 0206 	bicne.w	r2, r2, #6
     2d6:	f042 0204 	orrne.w	r2, r2, #4
     2da:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
     2de:	605a      	str	r2, [r3, #4]
     2e0:	4770      	bx	lr
     2e2:	bf00      	nop
     2e4:	20002480 	.word	0x20002480

000002e8 <cmp_equ_reg()>:
     2e8:	2222      	movs	r2, #34	; 0x22
     2ea:	4b06      	ldr	r3, [pc, #24]	; (304 <cmp_equ_reg()+0x1c>)
     2ec:	605a      	str	r2, [r3, #4]
     2ee:	685b      	ldr	r3, [r3, #4]
     2f0:	4293      	cmp	r3, r2
     2f2:	bf0c      	ite	eq
     2f4:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     2f8:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2fc:	4b02      	ldr	r3, [pc, #8]	; (308 <cmp_equ_reg()+0x20>)
     2fe:	605a      	str	r2, [r3, #4]
     300:	4770      	bx	lr
     302:	bf00      	nop
     304:	20002480 	.word	0x20002480
     308:	200023e0 	.word	0x200023e0

0000030c <cmp_neq_reg()>:
     30c:	2222      	movs	r2, #34	; 0x22
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <cmp_neq_reg()+0x14>)
     310:	605a      	str	r2, [r3, #4]
     312:	685a      	ldr	r2, [r3, #4]
     314:	2a22      	cmp	r2, #34	; 0x22
     316:	bf14      	ite	ne
     318:	2202      	movne	r2, #2
     31a:	2220      	moveq	r2, #32
     31c:	605a      	str	r2, [r3, #4]
     31e:	4770      	bx	lr
     320:	20002480 	.word	0x20002480

00000324 <constexpr_bits_array()>:
     324:	2106      	movs	r1, #6
     326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     32a:	4b02      	ldr	r3, [pc, #8]	; (334 <constexpr_bits_array()+0x10>)
     32c:	62d9      	str	r1, [r3, #44]	; 0x2c
     32e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     332:	4770      	bx	lr
     334:	200022c0 	.word	0x200022c0

00000338 <runtime_bits_array()>:
     338:	2203      	movs	r2, #3
     33a:	b410      	push	{r4}
     33c:	2007      	movs	r0, #7
     33e:	2421      	movs	r4, #33	; 0x21
     340:	2301      	movs	r3, #1
     342:	b081      	sub	sp, #4
     344:	9200      	str	r2, [sp, #0]
     346:	9a00      	ldr	r2, [sp, #0]
     348:	4905      	ldr	r1, [pc, #20]	; (360 <runtime_bits_array()+0x28>)
     34a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     34e:	6214      	str	r4, [r2, #32]
     350:	9000      	str	r0, [sp, #0]
     352:	9a00      	ldr	r2, [sp, #0]
     354:	4093      	lsls	r3, r2
     356:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
     35a:	b001      	add	sp, #4
     35c:	bc10      	pop	{r4}
     35e:	4770      	bx	lr
     360:	200022c0 	.word	0x200022c0

00000364 <prescaler_low()>:
     364:	2177      	movs	r1, #119	; 0x77
     366:	4b04      	ldr	r3, [pc, #16]	; (378 <prescaler_low()+0x14>)
     368:	4a04      	ldr	r2, [pc, #16]	; (37c <prescaler_low()+0x18>)
     36a:	6059      	str	r1, [r3, #4]
     36c:	685b      	ldr	r3, [r3, #4]
     36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     372:	62d3      	str	r3, [r2, #44]	; 0x2c
     374:	4770      	bx	lr
     376:	bf00      	nop
     378:	200023e0 	.word	0x200023e0
     37c:	200022c0 	.word	0x200022c0

00000380 <prescaler_high()>:
     380:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     384:	4b03      	ldr	r3, [pc, #12]	; (394 <prescaler_high()+0x14>)
     386:	4a04      	ldr	r2, [pc, #16]	; (398 <prescaler_high()+0x18>)
     388:	6059      	str	r1, [r3, #4]
     38a:	685b      	ldr	r3, [r3, #4]
     38c:	f3c3 6344 	ubfx	r3, r3, #25, #5
     390:	62d3      	str	r3, [r2, #44]	; 0x2c
     392:	4770      	bx	lr
     394:	200023e0 	.word	0x200023e0
     398:	200022c0 	.word	0x200022c0

0000039c <reg_mskd_lss()>:
     39c:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3a0:	4b06      	ldr	r3, [pc, #24]	; (3bc <reg_mskd_lss()+0x20>)
     3a2:	605a      	str	r2, [r3, #4]
     3a4:	685b      	ldr	r3, [r3, #4]
     3a6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3aa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3ae:	bf34      	ite	cc
     3b0:	2202      	movcc	r2, #2
     3b2:	2204      	movcs	r2, #4
     3b4:	4b02      	ldr	r3, [pc, #8]	; (3c0 <reg_mskd_lss()+0x24>)
     3b6:	605a      	str	r2, [r3, #4]
     3b8:	4770      	bx	lr
     3ba:	bf00      	nop
     3bc:	200023e0 	.word	0x200023e0
     3c0:	20002480 	.word	0x20002480

000003c4 <reg_mskd_leq()>:
     3c4:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
     3c8:	4a0a      	ldr	r2, [pc, #40]	; (3f4 <reg_mskd_leq()+0x30>)
     3ca:	6053      	str	r3, [r2, #4]
     3cc:	6853      	ldr	r3, [r2, #4]
     3ce:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3d2:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
     3d6:	d809      	bhi.n	3ec <reg_mskd_leq()+0x28>
     3d8:	6853      	ldr	r3, [r2, #4]
     3da:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     3e2:	d803      	bhi.n	3ec <reg_mskd_leq()+0x28>
     3e4:	2202      	movs	r2, #2
     3e6:	4b04      	ldr	r3, [pc, #16]	; (3f8 <reg_mskd_leq()+0x34>)
     3e8:	605a      	str	r2, [r3, #4]
     3ea:	4770      	bx	lr
     3ec:	2204      	movs	r2, #4
     3ee:	4b02      	ldr	r3, [pc, #8]	; (3f8 <reg_mskd_leq()+0x34>)
     3f0:	605a      	str	r2, [r3, #4]
     3f2:	4770      	bx	lr
     3f4:	200023e0 	.word	0x200023e0
     3f8:	20002480 	.word	0x20002480

000003fc <reg_mskd_gtr()>:
     3fc:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     400:	4b06      	ldr	r3, [pc, #24]	; (41c <reg_mskd_gtr()+0x20>)
     402:	605a      	str	r2, [r3, #4]
     404:	685b      	ldr	r3, [r3, #4]
     406:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     40a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     40e:	bf8c      	ite	hi
     410:	2202      	movhi	r2, #2
     412:	2204      	movls	r2, #4
     414:	4b02      	ldr	r3, [pc, #8]	; (420 <reg_mskd_gtr()+0x24>)
     416:	605a      	str	r2, [r3, #4]
     418:	4770      	bx	lr
     41a:	bf00      	nop
     41c:	200023e0 	.word	0x200023e0
     420:	20002480 	.word	0x20002480

00000424 <reg_mskd_geq()>:
     424:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
     428:	4a0a      	ldr	r2, [pc, #40]	; (454 <reg_mskd_geq()+0x30>)
     42a:	6053      	str	r3, [r2, #4]
     42c:	6853      	ldr	r3, [r2, #4]
     42e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     436:	d309      	bcc.n	44c <reg_mskd_geq()+0x28>
     438:	6853      	ldr	r3, [r2, #4]
     43a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     43e:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
     442:	d303      	bcc.n	44c <reg_mskd_geq()+0x28>
     444:	2202      	movs	r2, #2
     446:	4b04      	ldr	r3, [pc, #16]	; (458 <reg_mskd_geq()+0x34>)
     448:	605a      	str	r2, [r3, #4]
     44a:	4770      	bx	lr
     44c:	2204      	movs	r2, #4
     44e:	4b02      	ldr	r3, [pc, #8]	; (458 <reg_mskd_geq()+0x34>)
     450:	605a      	str	r2, [r3, #4]
     452:	4770      	bx	lr
     454:	200023e0 	.word	0x200023e0
     458:	20002480 	.word	0x20002480

0000045c <pos_cmp_eq()>:
     45c:	2202      	movs	r2, #2
     45e:	4b01      	ldr	r3, [pc, #4]	; (464 <pos_cmp_eq()+0x8>)
     460:	605a      	str	r2, [r3, #4]
     462:	4770      	bx	lr
     464:	20002480 	.word	0x20002480

00000468 <pos_cmp_ne()>:
     468:	2202      	movs	r2, #2
     46a:	4b01      	ldr	r3, [pc, #4]	; (470 <pos_cmp_ne()+0x8>)
     46c:	605a      	str	r2, [r3, #4]
     46e:	4770      	bx	lr
     470:	20002480 	.word	0x20002480

00000474 <bits_extract_eq()>:
     474:	2240      	movs	r2, #64	; 0x40
     476:	4b04      	ldr	r3, [pc, #16]	; (488 <bits_extract_eq()+0x14>)
     478:	605a      	str	r2, [r3, #4]
     47a:	685a      	ldr	r2, [r3, #4]
     47c:	2a40      	cmp	r2, #64	; 0x40
     47e:	bf0c      	ite	eq
     480:	2202      	moveq	r2, #2
     482:	2204      	movne	r2, #4
     484:	605a      	str	r2, [r3, #4]
     486:	4770      	bx	lr
     488:	20002480 	.word	0x20002480

0000048c <mskd_extract_eq()>:
     48c:	2202      	movs	r2, #2
     48e:	4b04      	ldr	r3, [pc, #16]	; (4a0 <mskd_extract_eq()+0x14>)
     490:	605a      	str	r2, [r3, #4]
     492:	685a      	ldr	r2, [r3, #4]
     494:	2a02      	cmp	r2, #2
     496:	bf0c      	ite	eq
     498:	2220      	moveq	r2, #32
     49a:	2240      	movne	r2, #64	; 0x40
     49c:	605a      	str	r2, [r3, #4]
     49e:	4770      	bx	lr
     4a0:	20002480 	.word	0x20002480

000004a4 <mskd_extract_ne()>:
     4a4:	2204      	movs	r2, #4
     4a6:	4b04      	ldr	r3, [pc, #16]	; (4b8 <mskd_extract_ne()+0x14>)
     4a8:	605a      	str	r2, [r3, #4]
     4aa:	685a      	ldr	r2, [r3, #4]
     4ac:	2a04      	cmp	r2, #4
     4ae:	bf0c      	ite	eq
     4b0:	2240      	moveq	r2, #64	; 0x40
     4b2:	2220      	movne	r2, #32
     4b4:	605a      	str	r2, [r3, #4]
     4b6:	4770      	bx	lr
     4b8:	20002480 	.word	0x20002480

000004bc <mskd_extract_lss()>:
     4bc:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     4c0:	4b05      	ldr	r3, [pc, #20]	; (4d8 <mskd_extract_lss()+0x1c>)
     4c2:	605a      	str	r2, [r3, #4]
     4c4:	685b      	ldr	r3, [r3, #4]
     4c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     4ca:	bf34      	ite	cc
     4cc:	2220      	movcc	r2, #32
     4ce:	2240      	movcs	r2, #64	; 0x40
     4d0:	4b02      	ldr	r3, [pc, #8]	; (4dc <mskd_extract_lss()+0x20>)
     4d2:	605a      	str	r2, [r3, #4]
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop
     4d8:	200023e0 	.word	0x200023e0
     4dc:	20002480 	.word	0x20002480

000004e0 <mskd_extract_leq()>:
     4e0:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     4e4:	4b04      	ldr	r3, [pc, #16]	; (4f8 <mskd_extract_leq()+0x18>)
     4e6:	605a      	str	r2, [r3, #4]
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	4293      	cmp	r3, r2
     4ec:	bf94      	ite	ls
     4ee:	2220      	movls	r2, #32
     4f0:	2240      	movhi	r2, #64	; 0x40
     4f2:	4b02      	ldr	r3, [pc, #8]	; (4fc <mskd_extract_leq()+0x1c>)
     4f4:	605a      	str	r2, [r3, #4]
     4f6:	4770      	bx	lr
     4f8:	200023e0 	.word	0x200023e0
     4fc:	20002480 	.word	0x20002480

00000500 <mskd_extract_gtr()>:
     500:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     504:	4b05      	ldr	r3, [pc, #20]	; (51c <mskd_extract_gtr()+0x1c>)
     506:	605a      	str	r2, [r3, #4]
     508:	685b      	ldr	r3, [r3, #4]
     50a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     50e:	bf8c      	ite	hi
     510:	2220      	movhi	r2, #32
     512:	2240      	movls	r2, #64	; 0x40
     514:	4b02      	ldr	r3, [pc, #8]	; (520 <mskd_extract_gtr()+0x20>)
     516:	605a      	str	r2, [r3, #4]
     518:	4770      	bx	lr
     51a:	bf00      	nop
     51c:	200023e0 	.word	0x200023e0
     520:	20002480 	.word	0x20002480

00000524 <set_bits_global()>:
     524:	4a02      	ldr	r2, [pc, #8]	; (530 <set_bits_global()+0xc>)
     526:	6853      	ldr	r3, [r2, #4]
     528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     52c:	6053      	str	r3, [r2, #4]
     52e:	4770      	bx	lr
     530:	20002480 	.word	0x20002480

00000534 <ins_mskd_global()>:
     534:	4a03      	ldr	r2, [pc, #12]	; (544 <ins_mskd_global()+0x10>)
     536:	6853      	ldr	r3, [r2, #4]
     538:	f023 0306 	bic.w	r3, r3, #6
     53c:	f043 0302 	orr.w	r3, r3, #2
     540:	6053      	str	r3, [r2, #4]
     542:	4770      	bx	lr
     544:	20002480 	.word	0x20002480

00000548 <assign_array_global()>:
     548:	22bd      	movs	r2, #189	; 0xbd
     54a:	4b01      	ldr	r3, [pc, #4]	; (550 <assign_array_global()+0x8>)
     54c:	601a      	str	r2, [r3, #0]
     54e:	4770      	bx	lr
     550:	200022ec 	.word	0x200022ec

00000554 <shifted_global()>:
     554:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     558:	4b03      	ldr	r3, [pc, #12]	; (568 <shifted_global()+0x14>)
     55a:	4a04      	ldr	r2, [pc, #16]	; (56c <shifted_global()+0x18>)
     55c:	6059      	str	r1, [r3, #4]
     55e:	685b      	ldr	r3, [r3, #4]
     560:	f3c3 6344 	ubfx	r3, r3, #25, #5
     564:	62d3      	str	r3, [r2, #44]	; 0x2c
     566:	4770      	bx	lr
     568:	200023e0 	.word	0x200023e0
     56c:	200022c0 	.word	0x200022c0

00000570 <assign_register_global()>:
     570:	2204      	movs	r2, #4
     572:	4b01      	ldr	r3, [pc, #4]	; (578 <assign_register_global()+0x8>)
     574:	605a      	str	r2, [r3, #4]
     576:	4770      	bx	lr
     578:	20002480 	.word	0x20002480

0000057c <copy_bits_equ()>:
     57c:	2240      	movs	r2, #64	; 0x40
     57e:	4b04      	ldr	r3, [pc, #16]	; (590 <copy_bits_equ()+0x14>)
     580:	605a      	str	r2, [r3, #4]
     582:	685a      	ldr	r2, [r3, #4]
     584:	0652      	lsls	r2, r2, #25
     586:	bf4c      	ite	mi
     588:	2202      	movmi	r2, #2
     58a:	2204      	movpl	r2, #4
     58c:	605a      	str	r2, [r3, #4]
     58e:	4770      	bx	lr
     590:	20002480 	.word	0x20002480

00000594 <copy_bits_neq()>:
     594:	2240      	movs	r2, #64	; 0x40
     596:	4b04      	ldr	r3, [pc, #16]	; (5a8 <copy_bits_neq()+0x14>)
     598:	605a      	str	r2, [r3, #4]
     59a:	685a      	ldr	r2, [r3, #4]
     59c:	0652      	lsls	r2, r2, #25
     59e:	bf54      	ite	pl
     5a0:	2202      	movpl	r2, #2
     5a2:	2204      	movmi	r2, #4
     5a4:	605a      	str	r2, [r3, #4]
     5a6:	4770      	bx	lr
     5a8:	20002480 	.word	0x20002480

000005ac <copy_mskd_equ()>:
     5ac:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     5b0:	4b05      	ldr	r3, [pc, #20]	; (5c8 <copy_mskd_equ()+0x1c>)
     5b2:	605a      	str	r2, [r3, #4]
     5b4:	685b      	ldr	r3, [r3, #4]
     5b6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     5ba:	4293      	cmp	r3, r2
     5bc:	bf0c      	ite	eq
     5be:	2202      	moveq	r2, #2
     5c0:	2204      	movne	r2, #4
     5c2:	4b02      	ldr	r3, [pc, #8]	; (5cc <copy_mskd_equ()+0x20>)
     5c4:	605a      	str	r2, [r3, #4]
     5c6:	4770      	bx	lr
     5c8:	200023e0 	.word	0x200023e0
     5cc:	20002480 	.word	0x20002480

000005d0 <copy_mskd_neq()>:
     5d0:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     5d4:	4b05      	ldr	r3, [pc, #20]	; (5ec <copy_mskd_neq()+0x1c>)
     5d6:	605a      	str	r2, [r3, #4]
     5d8:	685b      	ldr	r3, [r3, #4]
     5da:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     5de:	4293      	cmp	r3, r2
     5e0:	bf14      	ite	ne
     5e2:	2202      	movne	r2, #2
     5e4:	2204      	moveq	r2, #4
     5e6:	4b02      	ldr	r3, [pc, #8]	; (5f0 <copy_mskd_neq()+0x20>)
     5e8:	605a      	str	r2, [r3, #4]
     5ea:	4770      	bx	lr
     5ec:	200023e0 	.word	0x200023e0
     5f0:	20002480 	.word	0x20002480

000005f4 <copy_mskd_lss()>:
     5f4:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <copy_mskd_lss()+0x20>)
     5fa:	605a      	str	r2, [r3, #4]
     5fc:	685b      	ldr	r3, [r3, #4]
     5fe:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     602:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     606:	bf34      	ite	cc
     608:	2202      	movcc	r2, #2
     60a:	2204      	movcs	r2, #4
     60c:	4b02      	ldr	r3, [pc, #8]	; (618 <copy_mskd_lss()+0x24>)
     60e:	605a      	str	r2, [r3, #4]
     610:	4770      	bx	lr
     612:	bf00      	nop
     614:	200023e0 	.word	0x200023e0
     618:	20002480 	.word	0x20002480

0000061c <copy_mskd_leq()>:
     61c:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     620:	4b05      	ldr	r3, [pc, #20]	; (638 <copy_mskd_leq()+0x1c>)
     622:	605a      	str	r2, [r3, #4]
     624:	685b      	ldr	r3, [r3, #4]
     626:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     62a:	4293      	cmp	r3, r2
     62c:	bf94      	ite	ls
     62e:	2202      	movls	r2, #2
     630:	2204      	movhi	r2, #4
     632:	4b02      	ldr	r3, [pc, #8]	; (63c <copy_mskd_leq()+0x20>)
     634:	605a      	str	r2, [r3, #4]
     636:	4770      	bx	lr
     638:	200023e0 	.word	0x200023e0
     63c:	20002480 	.word	0x20002480

00000640 <copy_mskd_gtr()>:
     640:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <copy_mskd_gtr()+0x20>)
     646:	605a      	str	r2, [r3, #4]
     648:	685b      	ldr	r3, [r3, #4]
     64a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     64e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     652:	bf8c      	ite	hi
     654:	2202      	movhi	r2, #2
     656:	2204      	movls	r2, #4
     658:	4b02      	ldr	r3, [pc, #8]	; (664 <copy_mskd_gtr()+0x24>)
     65a:	605a      	str	r2, [r3, #4]
     65c:	4770      	bx	lr
     65e:	bf00      	nop
     660:	200023e0 	.word	0x200023e0
     664:	20002480 	.word	0x20002480

00000668 <copy_mskd_geq()>:
     668:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     66c:	4b05      	ldr	r3, [pc, #20]	; (684 <copy_mskd_geq()+0x1c>)
     66e:	605a      	str	r2, [r3, #4]
     670:	685b      	ldr	r3, [r3, #4]
     672:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     676:	4293      	cmp	r3, r2
     678:	bf2c      	ite	cs
     67a:	2202      	movcs	r2, #2
     67c:	2204      	movcc	r2, #4
     67e:	4b02      	ldr	r3, [pc, #8]	; (688 <copy_mskd_geq()+0x20>)
     680:	605a      	str	r2, [r3, #4]
     682:	4770      	bx	lr
     684:	200023e0 	.word	0x200023e0
     688:	20002480 	.word	0x20002480

0000068c <copy_shifted()>:
     68c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     690:	4b05      	ldr	r3, [pc, #20]	; (6a8 <copy_shifted()+0x1c>)
     692:	605a      	str	r2, [r3, #4]
     694:	685b      	ldr	r3, [r3, #4]
     696:	f3c3 6344 	ubfx	r3, r3, #25, #5
     69a:	2b0b      	cmp	r3, #11
     69c:	bf0c      	ite	eq
     69e:	2202      	moveq	r2, #2
     6a0:	2204      	movne	r2, #4
     6a2:	4b02      	ldr	r3, [pc, #8]	; (6ac <copy_shifted()+0x20>)
     6a4:	605a      	str	r2, [r3, #4]
     6a6:	4770      	bx	lr
     6a8:	200023e0 	.word	0x200023e0
     6ac:	20002480 	.word	0x20002480

000006b0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>:
     6b0:	2266      	movs	r2, #102	; 0x66
     6b2:	4b01      	ldr	r3, [pc, #4]	; (6b8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]+0x8>)
     6b4:	62da      	str	r2, [r3, #44]	; 0x2c
     6b6:	4770      	bx	lr
     6b8:	200022c0 	.word	0x200022c0

000006bc <call_pos_ref()>:
     6bc:	2105      	movs	r1, #5
     6be:	b500      	push	{lr}
     6c0:	b081      	sub	sp, #4
     6c2:	4668      	mov	r0, sp
     6c4:	9100      	str	r1, [sp, #0]
     6c6:	f7ff fff3 	bl	6b0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     6ca:	4668      	mov	r0, sp
     6cc:	9100      	str	r1, [sp, #0]
     6ce:	f7ff ffef 	bl	6b0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
     6d2:	b001      	add	sp, #4
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4

000006d8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>:
     6d8:	2277      	movs	r2, #119	; 0x77
     6da:	4b01      	ldr	r3, [pc, #4]	; (6e0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]+0x8>)
     6dc:	62da      	str	r2, [r3, #44]	; 0x2c
     6de:	4770      	bx	lr
     6e0:	200022c0 	.word	0x200022c0

000006e4 <call_pos_ref_global()>:
     6e4:	2306      	movs	r3, #6
     6e6:	b500      	push	{lr}
     6e8:	b081      	sub	sp, #4
     6ea:	4668      	mov	r0, sp
     6ec:	9300      	str	r3, [sp, #0]
     6ee:	f7ff fff3 	bl	6d8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>
     6f2:	b001      	add	sp, #4
     6f4:	f85d fb04 	ldr.w	pc, [sp], #4

000006f8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     6f8:	2233      	movs	r2, #51	; 0x33
     6fa:	4b01      	ldr	r3, [pc, #4]	; (700 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x8>)
     6fc:	62da      	str	r2, [r3, #44]	; 0x2c
     6fe:	4770      	bx	lr
     700:	200022c0 	.word	0x200022c0

00000704 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     704:	2244      	movs	r2, #68	; 0x44
     706:	4b01      	ldr	r3, [pc, #4]	; (70c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
     708:	62da      	str	r2, [r3, #44]	; 0x2c
     70a:	4770      	bx	lr
     70c:	200022c0 	.word	0x200022c0

00000710 <call_pos_val()>:
     710:	b500      	push	{lr}
     712:	2005      	movs	r0, #5
     714:	f7ff fff0 	bl	6f8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     718:	2006      	movs	r0, #6
     71a:	f85d eb04 	ldr.w	lr, [sp], #4
     71e:	e7f1      	b.n	704 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

00000720 <call_pos_val_global()>:
     720:	2006      	movs	r0, #6
     722:	e7ef      	b.n	704 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

00000724 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>:
     724:	4a03      	ldr	r2, [pc, #12]	; (734 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]+0x10>)
     726:	6853      	ldr	r3, [r2, #4]
     728:	f023 0306 	bic.w	r3, r3, #6
     72c:	f043 0302 	orr.w	r3, r3, #2
     730:	6053      	str	r3, [r2, #4]
     732:	4770      	bx	lr
     734:	20002480 	.word	0x20002480

00000738 <call_mskd_val_const()>:
     738:	2006      	movs	r0, #6
     73a:	2102      	movs	r1, #2
     73c:	e7f2      	b.n	724 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     73e:	bf00      	nop

00000740 <call_mskd_val_var()>:
     740:	2006      	movs	r0, #6
     742:	2102      	movs	r1, #2
     744:	e7ee      	b.n	724 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     746:	bf00      	nop

00000748 <call_mskd_val_global()>:
     748:	2006      	movs	r0, #6
     74a:	2102      	movs	r1, #2
     74c:	e7ea      	b.n	724 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
     74e:	bf00      	nop

00000750 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>:
     750:	4a02      	ldr	r2, [pc, #8]	; (75c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]+0xc>)
     752:	6853      	ldr	r3, [r2, #4]
     754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     758:	6053      	str	r3, [r2, #4]
     75a:	4770      	bx	lr
     75c:	20002480 	.word	0x20002480

00000760 <call_bits_val_const()>:
     760:	2040      	movs	r0, #64	; 0x40
     762:	e7f5      	b.n	750 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

00000764 <call_bits_val_var()>:
     764:	2040      	movs	r0, #64	; 0x40
     766:	e7f3      	b.n	750 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

00000768 <call_bits_val_global()>:
     768:	2040      	movs	r0, #64	; 0x40
     76a:	e7f1      	b.n	750 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

0000076c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     76c:	4a02      	ldr	r2, [pc, #8]	; (778 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     76e:	6853      	ldr	r3, [r2, #4]
     770:	4318      	orrs	r0, r3
     772:	6050      	str	r0, [r2, #4]
     774:	4770      	bx	lr
     776:	bf00      	nop
     778:	20002480 	.word	0x20002480

0000077c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     77c:	4a02      	ldr	r2, [pc, #8]	; (788 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     77e:	6801      	ldr	r1, [r0, #0]
     780:	6853      	ldr	r3, [r2, #4]
     782:	430b      	orrs	r3, r1
     784:	6053      	str	r3, [r2, #4]
     786:	4770      	bx	lr
     788:	20002480 	.word	0x20002480

0000078c <call_bits_ref_var()>:
     78c:	2301      	movs	r3, #1
     78e:	b500      	push	{lr}
     790:	b081      	sub	sp, #4
     792:	4668      	mov	r0, sp
     794:	9300      	str	r3, [sp, #0]
     796:	f7ff fffe 	bl	77c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     79a:	b001      	add	sp, #4
     79c:	f85d fb04 	ldr.w	pc, [sp], #4

000007a0 <call_bits_ref_const()>:
     7a0:	2301      	movs	r3, #1
     7a2:	b500      	push	{lr}
     7a4:	b081      	sub	sp, #4
     7a6:	4668      	mov	r0, sp
     7a8:	9300      	str	r3, [sp, #0]
     7aa:	f7ff fffe 	bl	77c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7ae:	b001      	add	sp, #4
     7b0:	f85d fb04 	ldr.w	pc, [sp], #4

000007b4 <call_bits_ref_global()>:
     7b4:	2340      	movs	r3, #64	; 0x40
     7b6:	b500      	push	{lr}
     7b8:	b081      	sub	sp, #4
     7ba:	4668      	mov	r0, sp
     7bc:	9300      	str	r3, [sp, #0]
     7be:	f7ff fffe 	bl	77c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7c2:	b001      	add	sp, #4
     7c4:	f85d fb04 	ldr.w	pc, [sp], #4

000007c8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     7c8:	4a03      	ldr	r2, [pc, #12]	; (7d8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     7ca:	6853      	ldr	r3, [r2, #4]
     7cc:	ea23 0000 	bic.w	r0, r3, r0
     7d0:	4308      	orrs	r0, r1
     7d2:	6050      	str	r0, [r2, #4]
     7d4:	4770      	bx	lr
     7d6:	bf00      	nop
     7d8:	20002480 	.word	0x20002480

000007dc <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     7dc:	4a05      	ldr	r2, [pc, #20]	; (7f4 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
     7de:	b410      	push	{r4}
     7e0:	6853      	ldr	r3, [r2, #4]
     7e2:	6804      	ldr	r4, [r0, #0]
     7e4:	6841      	ldr	r1, [r0, #4]
     7e6:	ea23 0304 	bic.w	r3, r3, r4
     7ea:	430b      	orrs	r3, r1
     7ec:	6053      	str	r3, [r2, #4]
     7ee:	bc10      	pop	{r4}
     7f0:	4770      	bx	lr
     7f2:	bf00      	nop
     7f4:	20002480 	.word	0x20002480

000007f8 <call_mskd_ref_var()>:
     7f8:	b500      	push	{lr}
     7fa:	4b05      	ldr	r3, [pc, #20]	; (810 <call_mskd_ref_var()+0x18>)
     7fc:	b082      	sub	sp, #8
     7fe:	4668      	mov	r0, sp
     800:	cb0c      	ldmia	r3, {r2, r3}
     802:	e88d 000c 	stmia.w	sp, {r2, r3}
     806:	f7ff fffe 	bl	7dc <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     80a:	b002      	add	sp, #8
     80c:	f85d fb04 	ldr.w	pc, [sp], #4
     810:	00000000 	.word	0x00000000

00000814 <call_mskd_ref_const()>:
     814:	2206      	movs	r2, #6
     816:	2304      	movs	r3, #4
     818:	b500      	push	{lr}
     81a:	b082      	sub	sp, #8
     81c:	4668      	mov	r0, sp
     81e:	e88d 000c 	stmia.w	sp, {r2, r3}
     822:	f7ff fffe 	bl	7dc <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     826:	b002      	add	sp, #8
     828:	f85d fb04 	ldr.w	pc, [sp], #4

0000082c <call_mskd_ref_global()>:
     82c:	2206      	movs	r2, #6
     82e:	2302      	movs	r3, #2
     830:	b500      	push	{lr}
     832:	b082      	sub	sp, #8
     834:	4668      	mov	r0, sp
     836:	e88d 000c 	stmia.w	sp, {r2, r3}
     83a:	f7ff fffe 	bl	7dc <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     83e:	b002      	add	sp, #8
     840:	f85d fb04 	ldr.w	pc, [sp], #4

00000844 <periph_bits(mcu::Serial*)>:
     844:	6843      	ldr	r3, [r0, #4]
     846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     84a:	6043      	str	r3, [r0, #4]
     84c:	4770      	bx	lr
     84e:	bf00      	nop

00000850 <call_periph_bits()>:
     850:	4801      	ldr	r0, [pc, #4]	; (858 <call_periph_bits()+0x8>)
     852:	f7ff bffe 	b.w	844 <periph_bits(mcu::Serial*)>
     856:	bf00      	nop
     858:	20002480 	.word	0x20002480

0000085c <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     85c:	6843      	ldr	r3, [r0, #4]
     85e:	4319      	orrs	r1, r3
     860:	6041      	str	r1, [r0, #4]
     862:	4770      	bx	lr

00000864 <call_periph_bits_val()>:
     864:	2140      	movs	r1, #64	; 0x40
     866:	4801      	ldr	r0, [pc, #4]	; (86c <call_periph_bits_val()+0x8>)
     868:	f7ff bffe 	b.w	85c <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     86c:	20002480 	.word	0x20002480

00000870 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     870:	6803      	ldr	r3, [r0, #0]
     872:	4319      	orrs	r1, r3
     874:	6001      	str	r1, [r0, #0]
     876:	4770      	bx	lr

00000878 <call_reg_bits_val()>:
     878:	2140      	movs	r1, #64	; 0x40
     87a:	4801      	ldr	r0, [pc, #4]	; (880 <call_reg_bits_val()+0x8>)
     87c:	f7ff bffe 	b.w	870 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     880:	20002484 	.word	0x20002484

00000884 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     884:	680a      	ldr	r2, [r1, #0]
     886:	6843      	ldr	r3, [r0, #4]
     888:	4313      	orrs	r3, r2
     88a:	6043      	str	r3, [r0, #4]
     88c:	4770      	bx	lr
     88e:	bf00      	nop

00000890 <call_periph_bits_ref()>:
     890:	2340      	movs	r3, #64	; 0x40
     892:	b500      	push	{lr}
     894:	b081      	sub	sp, #4
     896:	4669      	mov	r1, sp
     898:	4803      	ldr	r0, [pc, #12]	; (8a8 <call_periph_bits_ref()+0x18>)
     89a:	9300      	str	r3, [sp, #0]
     89c:	f7ff fffe 	bl	884 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8a0:	b001      	add	sp, #4
     8a2:	f85d fb04 	ldr.w	pc, [sp], #4
     8a6:	bf00      	nop
     8a8:	20002480 	.word	0x20002480

000008ac <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8ac:	680a      	ldr	r2, [r1, #0]
     8ae:	6803      	ldr	r3, [r0, #0]
     8b0:	4313      	orrs	r3, r2
     8b2:	6003      	str	r3, [r0, #0]
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <call_reg_bits_ref()>:
     8b8:	2340      	movs	r3, #64	; 0x40
     8ba:	b500      	push	{lr}
     8bc:	b081      	sub	sp, #4
     8be:	4669      	mov	r1, sp
     8c0:	4803      	ldr	r0, [pc, #12]	; (8d0 <call_reg_bits_ref()+0x18>)
     8c2:	9300      	str	r3, [sp, #0]
     8c4:	f7ff fffe 	bl	8ac <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8c8:	b001      	add	sp, #4
     8ca:	f85d fb04 	ldr.w	pc, [sp], #4
     8ce:	bf00      	nop
     8d0:	20002484 	.word	0x20002484

000008d4 <periph_mskd(mcu::Serial*)>:
     8d4:	6843      	ldr	r3, [r0, #4]
     8d6:	f023 0306 	bic.w	r3, r3, #6
     8da:	f043 0302 	orr.w	r3, r3, #2
     8de:	6043      	str	r3, [r0, #4]
     8e0:	4770      	bx	lr
     8e2:	bf00      	nop

000008e4 <call_periph_mskd()>:
     8e4:	4801      	ldr	r0, [pc, #4]	; (8ec <call_periph_mskd()+0x8>)
     8e6:	f7ff bffe 	b.w	8d4 <periph_mskd(mcu::Serial*)>
     8ea:	bf00      	nop
     8ec:	20002480 	.word	0x20002480

000008f0 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8f0:	6843      	ldr	r3, [r0, #4]
     8f2:	ea23 0101 	bic.w	r1, r3, r1
     8f6:	4311      	orrs	r1, r2
     8f8:	6041      	str	r1, [r0, #4]
     8fa:	4770      	bx	lr

000008fc <call_periph_mskd_val()>:
     8fc:	2106      	movs	r1, #6
     8fe:	2202      	movs	r2, #2
     900:	4801      	ldr	r0, [pc, #4]	; (908 <call_periph_mskd_val()+0xc>)
     902:	f7ff bffe 	b.w	8f0 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     906:	bf00      	nop
     908:	20002480 	.word	0x20002480

0000090c <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     90c:	6803      	ldr	r3, [r0, #0]
     90e:	ea23 0101 	bic.w	r1, r3, r1
     912:	4311      	orrs	r1, r2
     914:	6001      	str	r1, [r0, #0]
     916:	4770      	bx	lr

00000918 <call_reg_mskd_val()>:
     918:	2106      	movs	r1, #6
     91a:	2202      	movs	r2, #2
     91c:	4801      	ldr	r0, [pc, #4]	; (924 <call_reg_mskd_val()+0xc>)
     91e:	f7ff bffe 	b.w	90c <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     922:	bf00      	nop
     924:	20002484 	.word	0x20002484

00000928 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     928:	6843      	ldr	r3, [r0, #4]
     92a:	ea23 0101 	bic.w	r1, r3, r1
     92e:	4311      	orrs	r1, r2
     930:	6041      	str	r1, [r0, #4]
     932:	4770      	bx	lr

00000934 <call_periph_mskd_ref()>:
     934:	2106      	movs	r1, #6
     936:	2202      	movs	r2, #2
     938:	4801      	ldr	r0, [pc, #4]	; (940 <call_periph_mskd_ref()+0xc>)
     93a:	f7ff bffe 	b.w	928 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     93e:	bf00      	nop
     940:	20002480 	.word	0x20002480

00000944 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     944:	6803      	ldr	r3, [r0, #0]
     946:	ea23 0101 	bic.w	r1, r3, r1
     94a:	4311      	orrs	r1, r2
     94c:	6001      	str	r1, [r0, #0]
     94e:	4770      	bx	lr

00000950 <call_reg_mskd_ref()>:
     950:	2106      	movs	r1, #6
     952:	2202      	movs	r2, #2
     954:	4801      	ldr	r0, [pc, #4]	; (95c <call_reg_mskd_ref()+0xc>)
     956:	f7ff bffe 	b.w	944 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     95a:	bf00      	nop
     95c:	20002484 	.word	0x20002484

00000960 <return_bits()>:
     960:	2020      	movs	r0, #32
     962:	4770      	bx	lr

00000964 <call_return_bits()>:
     964:	b500      	push	{lr}
     966:	f7ff fffe 	bl	960 <return_bits()>
     96a:	2820      	cmp	r0, #32
     96c:	bf0c      	ite	eq
     96e:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     972:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     976:	4b02      	ldr	r3, [pc, #8]	; (980 <call_return_bits()+0x1c>)
     978:	605a      	str	r2, [r3, #4]
     97a:	f85d fb04 	ldr.w	pc, [sp], #4
     97e:	bf00      	nop
     980:	200023e0 	.word	0x200023e0

00000984 <return_mskd()>:
     984:	2118      	movs	r1, #24
     986:	2208      	movs	r2, #8
     988:	e880 0006 	stmia.w	r0, {r1, r2}
     98c:	4770      	bx	lr
     98e:	bf00      	nop

00000990 <call_return_mskd()>:
     990:	b500      	push	{lr}
     992:	b082      	sub	sp, #8
     994:	4668      	mov	r0, sp
     996:	f7ff fffe 	bl	984 <return_mskd()>
     99a:	9b00      	ldr	r3, [sp, #0]
     99c:	9a01      	ldr	r2, [sp, #4]
     99e:	2b18      	cmp	r3, #24
     9a0:	d006      	beq.n	9b0 <call_return_mskd()+0x20>
     9a2:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9a6:	4b07      	ldr	r3, [pc, #28]	; (9c4 <call_return_mskd()+0x34>)
     9a8:	605a      	str	r2, [r3, #4]
     9aa:	b002      	add	sp, #8
     9ac:	f85d fb04 	ldr.w	pc, [sp], #4
     9b0:	2a08      	cmp	r2, #8
     9b2:	d1f6      	bne.n	9a2 <call_return_mskd()+0x12>
     9b4:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9b8:	4b02      	ldr	r3, [pc, #8]	; (9c4 <call_return_mskd()+0x34>)
     9ba:	605a      	str	r2, [r3, #4]
     9bc:	b002      	add	sp, #8
     9be:	f85d fb04 	ldr.w	pc, [sp], #4
     9c2:	bf00      	nop
     9c4:	200023e0 	.word	0x200023e0

000009c8 <return_reg()>:
     9c8:	2240      	movs	r2, #64	; 0x40
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <return_reg()+0xc>)
     9cc:	4802      	ldr	r0, [pc, #8]	; (9d8 <return_reg()+0x10>)
     9ce:	605a      	str	r2, [r3, #4]
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop
     9d4:	20002480 	.word	0x20002480
     9d8:	20002484 	.word	0x20002484

000009dc <call_return_reg()>:
     9dc:	b500      	push	{lr}
     9de:	f7ff fffe 	bl	9c8 <return_reg()>
     9e2:	6803      	ldr	r3, [r0, #0]
     9e4:	065b      	lsls	r3, r3, #25
     9e6:	bf4c      	ite	mi
     9e8:	f04f 52f0 	movmi.w	r2, #503316480	; 0x1e000000
     9ec:	f04f 5238 	movpl.w	r2, #771751936	; 0x2e000000
     9f0:	4b01      	ldr	r3, [pc, #4]	; (9f8 <call_return_reg()+0x1c>)
     9f2:	605a      	str	r2, [r3, #4]
     9f4:	f85d fb04 	ldr.w	pc, [sp], #4
     9f8:	200023e0 	.word	0x200023e0

000009fc <return_periph()>:
     9fc:	2340      	movs	r3, #64	; 0x40
     9fe:	4801      	ldr	r0, [pc, #4]	; (a04 <return_periph()+0x8>)
     a00:	6043      	str	r3, [r0, #4]
     a02:	4770      	bx	lr
     a04:	20002480 	.word	0x20002480

00000a08 <call_return_periph()>:
     a08:	b500      	push	{lr}
     a0a:	f7ff fffe 	bl	9fc <return_periph()>
     a0e:	6843      	ldr	r3, [r0, #4]
     a10:	065b      	lsls	r3, r3, #25
     a12:	bf4c      	ite	mi
     a14:	f04f 5218 	movmi.w	r2, #637534208	; 0x26000000
     a18:	f04f 5228 	movpl.w	r2, #704643072	; 0x2a000000
     a1c:	4b01      	ldr	r3, [pc, #4]	; (a24 <call_return_periph()+0x1c>)
     a1e:	605a      	str	r2, [r3, #4]
     a20:	f85d fb04 	ldr.w	pc, [sp], #4
     a24:	200023e0 	.word	0x200023e0

00000a28 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a28:	2805      	cmp	r0, #5
     a2a:	d006      	beq.n	a3a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a2c:	2806      	cmp	r0, #6
     a2e:	bf0c      	ite	eq
     a30:	2244      	moveq	r2, #68	; 0x44
     a32:	2255      	movne	r2, #85	; 0x55
     a34:	4b03      	ldr	r3, [pc, #12]	; (a44 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a36:	62da      	str	r2, [r3, #44]	; 0x2c
     a38:	4770      	bx	lr
     a3a:	2233      	movs	r2, #51	; 0x33
     a3c:	4b01      	ldr	r3, [pc, #4]	; (a44 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a3e:	62da      	str	r2, [r3, #44]	; 0x2c
     a40:	4770      	bx	lr
     a42:	bf00      	nop
     a44:	200022c0 	.word	0x200022c0

00000a48 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a48:	6803      	ldr	r3, [r0, #0]
     a4a:	2b05      	cmp	r3, #5
     a4c:	d006      	beq.n	a5c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a4e:	2b06      	cmp	r3, #6
     a50:	bf0c      	ite	eq
     a52:	2277      	moveq	r2, #119	; 0x77
     a54:	2288      	movne	r2, #136	; 0x88
     a56:	4b03      	ldr	r3, [pc, #12]	; (a64 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a58:	62da      	str	r2, [r3, #44]	; 0x2c
     a5a:	4770      	bx	lr
     a5c:	2266      	movs	r2, #102	; 0x66
     a5e:	4b01      	ldr	r3, [pc, #4]	; (a64 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a60:	62da      	str	r2, [r3, #44]	; 0x2c
     a62:	4770      	bx	lr
     a64:	200022c0 	.word	0x200022c0

00000a68 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a68:	4a03      	ldr	r2, [pc, #12]	; (a78 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     a6a:	6853      	ldr	r3, [r2, #4]
     a6c:	ea23 0000 	bic.w	r0, r3, r0
     a70:	4308      	orrs	r0, r1
     a72:	6050      	str	r0, [r2, #4]
     a74:	4770      	bx	lr
     a76:	bf00      	nop
     a78:	20002480 	.word	0x20002480

00000a7c <call_range_val(unsigned int)>:
     a7c:	0301      	lsls	r1, r0, #12
     a7e:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     a82:	f7ff bffe 	b.w	a68 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a86:	bf00      	nop

00000a88 <call_range_val_port()>:
     a88:	201f      	movs	r0, #31
     a8a:	f7ff bffe 	b.w	a7c <call_range_val(unsigned int)>
     a8e:	bf00      	nop

00000a90 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a90:	4a03      	ldr	r2, [pc, #12]	; (aa0 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     a92:	6853      	ldr	r3, [r2, #4]
     a94:	ea23 0000 	bic.w	r0, r3, r0
     a98:	4308      	orrs	r0, r1
     a9a:	6050      	str	r0, [r2, #4]
     a9c:	4770      	bx	lr
     a9e:	bf00      	nop
     aa0:	20002480 	.word	0x20002480

00000aa4 <call_range_ref(unsigned int)>:
     aa4:	0301      	lsls	r1, r0, #12
     aa6:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     aaa:	f7ff bffe 	b.w	a90 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     aae:	bf00      	nop

00000ab0 <call_range_ref_port()>:
     ab0:	200c      	movs	r0, #12
     ab2:	f7ff bffe 	b.w	aa4 <call_range_ref(unsigned int)>
     ab6:	bf00      	nop

00000ab8 <check_array_range_pass(unsigned int)>:
     ab8:	2816      	cmp	r0, #22
     aba:	bf94      	ite	ls
     abc:	227f      	movls	r2, #127	; 0x7f
     abe:	2283      	movhi	r2, #131	; 0x83
     ac0:	4b01      	ldr	r3, [pc, #4]	; (ac8 <check_array_range_pass(unsigned int)+0x10>)
     ac2:	62da      	str	r2, [r3, #44]	; 0x2c
     ac4:	4770      	bx	lr
     ac6:	bf00      	nop
     ac8:	200022c0 	.word	0x200022c0

00000acc <check_array_range_fail(unsigned int)>:
     acc:	2816      	cmp	r0, #22
     ace:	bf94      	ite	ls
     ad0:	2295      	movls	r2, #149	; 0x95
     ad2:	2297      	movhi	r2, #151	; 0x97
     ad4:	4b01      	ldr	r3, [pc, #4]	; (adc <check_array_range_fail(unsigned int)+0x10>)
     ad6:	62da      	str	r2, [r3, #44]	; 0x2c
     ad8:	4770      	bx	lr
     ada:	bf00      	nop
     adc:	200022c0 	.word	0x200022c0

00000ae0 <check_bits_range_pass(unsigned int)>:
     ae0:	280f      	cmp	r0, #15
     ae2:	bf94      	ite	ls
     ae4:	229d      	movls	r2, #157	; 0x9d
     ae6:	22a3      	movhi	r2, #163	; 0xa3
     ae8:	4b01      	ldr	r3, [pc, #4]	; (af0 <check_bits_range_pass(unsigned int)+0x10>)
     aea:	62da      	str	r2, [r3, #44]	; 0x2c
     aec:	4770      	bx	lr
     aee:	bf00      	nop
     af0:	200022c0 	.word	0x200022c0

00000af4 <check_bits_range_fail(unsigned int)>:
     af4:	280f      	cmp	r0, #15
     af6:	bf94      	ite	ls
     af8:	22a7      	movls	r2, #167	; 0xa7
     afa:	22ad      	movhi	r2, #173	; 0xad
     afc:	4b01      	ldr	r3, [pc, #4]	; (b04 <check_bits_range_fail(unsigned int)+0x10>)
     afe:	62da      	str	r2, [r3, #44]	; 0x2c
     b00:	4770      	bx	lr
     b02:	bf00      	nop
     b04:	200022c0 	.word	0x200022c0

00000b08 <check_mskd_range_pass(unsigned int)>:
     b08:	281f      	cmp	r0, #31
     b0a:	bf94      	ite	ls
     b0c:	22b3      	movls	r2, #179	; 0xb3
     b0e:	22b5      	movhi	r2, #181	; 0xb5
     b10:	4b01      	ldr	r3, [pc, #4]	; (b18 <check_mskd_range_pass(unsigned int)+0x10>)
     b12:	62da      	str	r2, [r3, #44]	; 0x2c
     b14:	4770      	bx	lr
     b16:	bf00      	nop
     b18:	200022c0 	.word	0x200022c0

00000b1c <check_mskd_range_fail(unsigned int)>:
     b1c:	281f      	cmp	r0, #31
     b1e:	bf94      	ite	ls
     b20:	22bf      	movls	r2, #191	; 0xbf
     b22:	22c1      	movhi	r2, #193	; 0xc1
     b24:	4b01      	ldr	r3, [pc, #4]	; (b2c <check_mskd_range_fail(unsigned int)+0x10>)
     b26:	62da      	str	r2, [r3, #44]	; 0x2c
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	200022c0 	.word	0x200022c0

00000b30 <bits_extract_ne()>:
     b30:	2220      	movs	r2, #32
     b32:	4b04      	ldr	r3, [pc, #16]	; (b44 <bits_extract_ne()+0x14>)
     b34:	605a      	str	r2, [r3, #4]
     b36:	685a      	ldr	r2, [r3, #4]
     b38:	2a20      	cmp	r2, #32
     b3a:	bf14      	ite	ne
     b3c:	2202      	movne	r2, #2
     b3e:	2204      	moveq	r2, #4
     b40:	605a      	str	r2, [r3, #4]
     b42:	4770      	bx	lr
     b44:	20002480 	.word	0x20002480

00000b48 <mskd_extract_geq()>:
     b48:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     b4c:	4b04      	ldr	r3, [pc, #16]	; (b60 <mskd_extract_geq()+0x18>)
     b4e:	605a      	str	r2, [r3, #4]
     b50:	685b      	ldr	r3, [r3, #4]
     b52:	4293      	cmp	r3, r2
     b54:	bf2c      	ite	cs
     b56:	2220      	movcs	r2, #32
     b58:	2240      	movcc	r2, #64	; 0x40
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <mskd_extract_geq()+0x1c>)
     b5c:	605a      	str	r2, [r3, #4]
     b5e:	4770      	bx	lr
     b60:	200023e0 	.word	0x200023e0
     b64:	20002480 	.word	0x20002480

00000b68 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     b68:	b410      	push	{r4}
     b6a:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
     b6e:	4b04      	ldr	r3, [pc, #16]	; (b80 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     b70:	4a04      	ldr	r2, [pc, #16]	; (b84 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
     b72:	605c      	str	r4, [r3, #4]
     b74:	685b      	ldr	r3, [r3, #4]
     b76:	bc10      	pop	{r4}
     b78:	4018      	ands	r0, r3
     b7a:	40c8      	lsrs	r0, r1
     b7c:	62d0      	str	r0, [r2, #44]	; 0x2c
     b7e:	4770      	bx	lr
     b80:	200023e0 	.word	0x200023e0
     b84:	200022c0 	.word	0x200022c0

00000b88 <call_shifted_const_val()>:
     b88:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     b8c:	2119      	movs	r1, #25
     b8e:	f7ff bffe 	b.w	b68 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     b92:	bf00      	nop

00000b94 <call_shifted_var_val()>:
     b94:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     b98:	2119      	movs	r1, #25
     b9a:	f7ff bffe 	b.w	b68 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     b9e:	bf00      	nop

00000ba0 <call_shifted_global_val()>:
     ba0:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     ba4:	2119      	movs	r1, #25
     ba6:	f7ff bffe 	b.w	b68 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     baa:	bf00      	nop

00000bac <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     bac:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     bb0:	4b05      	ldr	r3, [pc, #20]	; (bc8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     bb2:	b410      	push	{r4}
     bb4:	6059      	str	r1, [r3, #4]
     bb6:	6804      	ldr	r4, [r0, #0]
     bb8:	685b      	ldr	r3, [r3, #4]
     bba:	6841      	ldr	r1, [r0, #4]
     bbc:	4023      	ands	r3, r4
     bbe:	4a03      	ldr	r2, [pc, #12]	; (bcc <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
     bc0:	40cb      	lsrs	r3, r1
     bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
     bc4:	bc10      	pop	{r4}
     bc6:	4770      	bx	lr
     bc8:	200023e0 	.word	0x200023e0
     bcc:	200022c0 	.word	0x200022c0

00000bd0 <call_shifted_const_ref()>:
     bd0:	b500      	push	{lr}
     bd2:	4b06      	ldr	r3, [pc, #24]	; (bec <call_shifted_const_ref()+0x1c>)
     bd4:	b082      	sub	sp, #8
     bd6:	4668      	mov	r0, sp
     bd8:	f103 0308 	add.w	r3, r3, #8
     bdc:	cb0c      	ldmia	r3, {r2, r3}
     bde:	e88d 000c 	stmia.w	sp, {r2, r3}
     be2:	f7ff fffe 	bl	bac <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     be6:	b002      	add	sp, #8
     be8:	f85d fb04 	ldr.w	pc, [sp], #4
     bec:	00000000 	.word	0x00000000

00000bf0 <call_shifted_var_ref()>:
     bf0:	b500      	push	{lr}
     bf2:	4b06      	ldr	r3, [pc, #24]	; (c0c <call_shifted_var_ref()+0x1c>)
     bf4:	b082      	sub	sp, #8
     bf6:	4668      	mov	r0, sp
     bf8:	f103 0310 	add.w	r3, r3, #16
     bfc:	cb0c      	ldmia	r3, {r2, r3}
     bfe:	e88d 000c 	stmia.w	sp, {r2, r3}
     c02:	f7ff fffe 	bl	bac <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c06:	b002      	add	sp, #8
     c08:	f85d fb04 	ldr.w	pc, [sp], #4
     c0c:	00000000 	.word	0x00000000

00000c10 <call_shifted_global_ref()>:
     c10:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
     c14:	2319      	movs	r3, #25
     c16:	b500      	push	{lr}
     c18:	b082      	sub	sp, #8
     c1a:	4668      	mov	r0, sp
     c1c:	e88d 000c 	stmia.w	sp, {r2, r3}
     c20:	f7ff fffe 	bl	bac <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c24:	b002      	add	sp, #8
     c26:	f85d fb04 	ldr.w	pc, [sp], #4
     c2a:	bf00      	nop

00000c2c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
     c2c:	0643      	lsls	r3, r0, #25
     c2e:	bf4c      	ite	mi
     c30:	2202      	movmi	r2, #2
     c32:	2204      	movpl	r2, #4
     c34:	4b01      	ldr	r3, [pc, #4]	; (c3c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x10>)
     c36:	605a      	str	r2, [r3, #4]
     c38:	4770      	bx	lr
     c3a:	bf00      	nop
     c3c:	20002480 	.word	0x20002480

00000c40 <call_copy_bits_val()>:
     c40:	2240      	movs	r2, #64	; 0x40
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <call_copy_bits_val()+0xc>)
     c44:	605a      	str	r2, [r3, #4]
     c46:	6858      	ldr	r0, [r3, #4]
     c48:	f7ff bffe 	b.w	c2c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
     c4c:	20002480 	.word	0x20002480

00000c50 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
     c50:	6803      	ldr	r3, [r0, #0]
     c52:	065b      	lsls	r3, r3, #25
     c54:	bf4c      	ite	mi
     c56:	2202      	movmi	r2, #2
     c58:	2204      	movpl	r2, #4
     c5a:	4b01      	ldr	r3, [pc, #4]	; (c60 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x10>)
     c5c:	605a      	str	r2, [r3, #4]
     c5e:	4770      	bx	lr
     c60:	20002480 	.word	0x20002480

00000c64 <call_copy_bits_ref()>:
     c64:	2240      	movs	r2, #64	; 0x40
     c66:	b500      	push	{lr}
     c68:	4b05      	ldr	r3, [pc, #20]	; (c80 <call_copy_bits_ref()+0x1c>)
     c6a:	b081      	sub	sp, #4
     c6c:	605a      	str	r2, [r3, #4]
     c6e:	685b      	ldr	r3, [r3, #4]
     c70:	4668      	mov	r0, sp
     c72:	9300      	str	r3, [sp, #0]
     c74:	f7ff fffe 	bl	c50 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
     c78:	b001      	add	sp, #4
     c7a:	f85d fb04 	ldr.w	pc, [sp], #4
     c7e:	bf00      	nop
     c80:	20002480 	.word	0x20002480

00000c84 <run>:
     c84:	b510      	push	{r4, lr}
     c86:	4cb2      	ldr	r4, [pc, #712]	; (f50 <run+0x2cc>)
     c88:	7823      	ldrb	r3, [r4, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	f000 82de 	beq.w	124c <run+0x5c8>
     c90:	68a1      	ldr	r1, [r4, #8]
     c92:	7b23      	ldrb	r3, [r4, #12]
     c94:	b91b      	cbnz	r3, c9e <run+0x1a>
     c96:	2201      	movs	r2, #1
     c98:	4bae      	ldr	r3, [pc, #696]	; (f54 <run+0x2d0>)
     c9a:	7322      	strb	r2, [r4, #12]
     c9c:	6163      	str	r3, [r4, #20]
     c9e:	7e23      	ldrb	r3, [r4, #24]
     ca0:	b91b      	cbnz	r3, caa <run+0x26>
     ca2:	2201      	movs	r2, #1
     ca4:	4bac      	ldr	r3, [pc, #688]	; (f58 <run+0x2d4>)
     ca6:	7622      	strb	r2, [r4, #24]
     ca8:	6223      	str	r3, [r4, #32]
     caa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
     cae:	b923      	cbnz	r3, cba <run+0x36>
     cb0:	2201      	movs	r2, #1
     cb2:	4baa      	ldr	r3, [pc, #680]	; (f5c <run+0x2d8>)
     cb4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
     cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
     cba:	2200      	movs	r2, #0
     cbc:	48a8      	ldr	r0, [pc, #672]	; (f60 <run+0x2dc>)
     cbe:	f7ff fffe 	bl	0 <do_test>
     cc2:	68a1      	ldr	r1, [r4, #8]
     cc4:	2201      	movs	r2, #1
     cc6:	48a7      	ldr	r0, [pc, #668]	; (f64 <run+0x2e0>)
     cc8:	f7ff fffe 	bl	0 <do_test>
     ccc:	68a1      	ldr	r1, [r4, #8]
     cce:	2202      	movs	r2, #2
     cd0:	48a5      	ldr	r0, [pc, #660]	; (f68 <run+0x2e4>)
     cd2:	f7ff fffe 	bl	0 <do_test>
     cd6:	68a1      	ldr	r1, [r4, #8]
     cd8:	2203      	movs	r2, #3
     cda:	48a4      	ldr	r0, [pc, #656]	; (f6c <run+0x2e8>)
     cdc:	f7ff fffe 	bl	0 <do_test>
     ce0:	68a1      	ldr	r1, [r4, #8]
     ce2:	2204      	movs	r2, #4
     ce4:	48a2      	ldr	r0, [pc, #648]	; (f70 <run+0x2ec>)
     ce6:	f7ff fffe 	bl	0 <do_test>
     cea:	68a1      	ldr	r1, [r4, #8]
     cec:	2205      	movs	r2, #5
     cee:	48a1      	ldr	r0, [pc, #644]	; (f74 <run+0x2f0>)
     cf0:	f7ff fffe 	bl	0 <do_test>
     cf4:	68a1      	ldr	r1, [r4, #8]
     cf6:	2206      	movs	r2, #6
     cf8:	489f      	ldr	r0, [pc, #636]	; (f78 <run+0x2f4>)
     cfa:	f7ff fffe 	bl	0 <do_test>
     cfe:	68a1      	ldr	r1, [r4, #8]
     d00:	2207      	movs	r2, #7
     d02:	489e      	ldr	r0, [pc, #632]	; (f7c <run+0x2f8>)
     d04:	f7ff fffe 	bl	0 <do_test>
     d08:	68a1      	ldr	r1, [r4, #8]
     d0a:	2208      	movs	r2, #8
     d0c:	489c      	ldr	r0, [pc, #624]	; (f80 <run+0x2fc>)
     d0e:	f7ff fffe 	bl	0 <do_test>
     d12:	68a1      	ldr	r1, [r4, #8]
     d14:	2209      	movs	r2, #9
     d16:	489b      	ldr	r0, [pc, #620]	; (f84 <run+0x300>)
     d18:	f7ff fffe 	bl	0 <do_test>
     d1c:	68a1      	ldr	r1, [r4, #8]
     d1e:	220a      	movs	r2, #10
     d20:	4899      	ldr	r0, [pc, #612]	; (f88 <run+0x304>)
     d22:	f7ff fffe 	bl	0 <do_test>
     d26:	68a1      	ldr	r1, [r4, #8]
     d28:	220b      	movs	r2, #11
     d2a:	4898      	ldr	r0, [pc, #608]	; (f8c <run+0x308>)
     d2c:	f7ff fffe 	bl	0 <do_test>
     d30:	68a1      	ldr	r1, [r4, #8]
     d32:	220c      	movs	r2, #12
     d34:	4896      	ldr	r0, [pc, #600]	; (f90 <run+0x30c>)
     d36:	f7ff fffe 	bl	0 <do_test>
     d3a:	68a1      	ldr	r1, [r4, #8]
     d3c:	220d      	movs	r2, #13
     d3e:	4895      	ldr	r0, [pc, #596]	; (f94 <run+0x310>)
     d40:	f7ff fffe 	bl	0 <do_test>
     d44:	68a1      	ldr	r1, [r4, #8]
     d46:	220e      	movs	r2, #14
     d48:	4893      	ldr	r0, [pc, #588]	; (f98 <run+0x314>)
     d4a:	f7ff fffe 	bl	0 <do_test>
     d4e:	68a1      	ldr	r1, [r4, #8]
     d50:	220f      	movs	r2, #15
     d52:	4892      	ldr	r0, [pc, #584]	; (f9c <run+0x318>)
     d54:	f7ff fffe 	bl	0 <do_test>
     d58:	68a1      	ldr	r1, [r4, #8]
     d5a:	2210      	movs	r2, #16
     d5c:	4890      	ldr	r0, [pc, #576]	; (fa0 <run+0x31c>)
     d5e:	f7ff fffe 	bl	0 <do_test>
     d62:	68a1      	ldr	r1, [r4, #8]
     d64:	2211      	movs	r2, #17
     d66:	488f      	ldr	r0, [pc, #572]	; (fa4 <run+0x320>)
     d68:	f7ff fffe 	bl	0 <do_test>
     d6c:	68a1      	ldr	r1, [r4, #8]
     d6e:	2212      	movs	r2, #18
     d70:	488d      	ldr	r0, [pc, #564]	; (fa8 <run+0x324>)
     d72:	f7ff fffe 	bl	0 <do_test>
     d76:	68a1      	ldr	r1, [r4, #8]
     d78:	2213      	movs	r2, #19
     d7a:	488c      	ldr	r0, [pc, #560]	; (fac <run+0x328>)
     d7c:	f7ff fffe 	bl	0 <do_test>
     d80:	68a1      	ldr	r1, [r4, #8]
     d82:	2214      	movs	r2, #20
     d84:	488a      	ldr	r0, [pc, #552]	; (fb0 <run+0x32c>)
     d86:	f7ff fffe 	bl	0 <do_test>
     d8a:	68a1      	ldr	r1, [r4, #8]
     d8c:	2215      	movs	r2, #21
     d8e:	4889      	ldr	r0, [pc, #548]	; (fb4 <run+0x330>)
     d90:	f7ff fffe 	bl	0 <do_test>
     d94:	68a1      	ldr	r1, [r4, #8]
     d96:	2216      	movs	r2, #22
     d98:	4887      	ldr	r0, [pc, #540]	; (fb8 <run+0x334>)
     d9a:	f7ff fffe 	bl	0 <do_test>
     d9e:	68a1      	ldr	r1, [r4, #8]
     da0:	2217      	movs	r2, #23
     da2:	4886      	ldr	r0, [pc, #536]	; (fbc <run+0x338>)
     da4:	f7ff fffe 	bl	0 <do_test>
     da8:	68a1      	ldr	r1, [r4, #8]
     daa:	2218      	movs	r2, #24
     dac:	4884      	ldr	r0, [pc, #528]	; (fc0 <run+0x33c>)
     dae:	f7ff fffe 	bl	0 <do_test>
     db2:	68a1      	ldr	r1, [r4, #8]
     db4:	2219      	movs	r2, #25
     db6:	4883      	ldr	r0, [pc, #524]	; (fc4 <run+0x340>)
     db8:	f7ff fffe 	bl	0 <do_test>
     dbc:	68a1      	ldr	r1, [r4, #8]
     dbe:	221a      	movs	r2, #26
     dc0:	4881      	ldr	r0, [pc, #516]	; (fc8 <run+0x344>)
     dc2:	f7ff fffe 	bl	0 <do_test>
     dc6:	68a1      	ldr	r1, [r4, #8]
     dc8:	221b      	movs	r2, #27
     dca:	4880      	ldr	r0, [pc, #512]	; (fcc <run+0x348>)
     dcc:	f7ff fffe 	bl	0 <do_test>
     dd0:	68a1      	ldr	r1, [r4, #8]
     dd2:	221c      	movs	r2, #28
     dd4:	487e      	ldr	r0, [pc, #504]	; (fd0 <run+0x34c>)
     dd6:	f7ff fffe 	bl	0 <do_test>
     dda:	68a1      	ldr	r1, [r4, #8]
     ddc:	221d      	movs	r2, #29
     dde:	487d      	ldr	r0, [pc, #500]	; (fd4 <run+0x350>)
     de0:	f7ff fffe 	bl	0 <do_test>
     de4:	68a1      	ldr	r1, [r4, #8]
     de6:	221e      	movs	r2, #30
     de8:	487b      	ldr	r0, [pc, #492]	; (fd8 <run+0x354>)
     dea:	f7ff fffe 	bl	0 <do_test>
     dee:	68a1      	ldr	r1, [r4, #8]
     df0:	221f      	movs	r2, #31
     df2:	487a      	ldr	r0, [pc, #488]	; (fdc <run+0x358>)
     df4:	f7ff fffe 	bl	0 <do_test>
     df8:	68a1      	ldr	r1, [r4, #8]
     dfa:	2220      	movs	r2, #32
     dfc:	4878      	ldr	r0, [pc, #480]	; (fe0 <run+0x35c>)
     dfe:	f7ff fffe 	bl	0 <do_test>
     e02:	68a1      	ldr	r1, [r4, #8]
     e04:	2221      	movs	r2, #33	; 0x21
     e06:	4877      	ldr	r0, [pc, #476]	; (fe4 <run+0x360>)
     e08:	f7ff fffe 	bl	0 <do_test>
     e0c:	68a1      	ldr	r1, [r4, #8]
     e0e:	2222      	movs	r2, #34	; 0x22
     e10:	4875      	ldr	r0, [pc, #468]	; (fe8 <run+0x364>)
     e12:	f7ff fffe 	bl	0 <do_test>
     e16:	68a1      	ldr	r1, [r4, #8]
     e18:	2223      	movs	r2, #35	; 0x23
     e1a:	4874      	ldr	r0, [pc, #464]	; (fec <run+0x368>)
     e1c:	f7ff fffe 	bl	0 <do_test>
     e20:	68a1      	ldr	r1, [r4, #8]
     e22:	2224      	movs	r2, #36	; 0x24
     e24:	4872      	ldr	r0, [pc, #456]	; (ff0 <run+0x36c>)
     e26:	f7ff fffe 	bl	0 <do_test>
     e2a:	68a1      	ldr	r1, [r4, #8]
     e2c:	2225      	movs	r2, #37	; 0x25
     e2e:	4871      	ldr	r0, [pc, #452]	; (ff4 <run+0x370>)
     e30:	f7ff fffe 	bl	0 <do_test>
     e34:	68a1      	ldr	r1, [r4, #8]
     e36:	2226      	movs	r2, #38	; 0x26
     e38:	486f      	ldr	r0, [pc, #444]	; (ff8 <run+0x374>)
     e3a:	f7ff fffe 	bl	0 <do_test>
     e3e:	68a1      	ldr	r1, [r4, #8]
     e40:	2227      	movs	r2, #39	; 0x27
     e42:	486e      	ldr	r0, [pc, #440]	; (ffc <run+0x378>)
     e44:	f7ff fffe 	bl	0 <do_test>
     e48:	68a1      	ldr	r1, [r4, #8]
     e4a:	2228      	movs	r2, #40	; 0x28
     e4c:	486c      	ldr	r0, [pc, #432]	; (1000 <run+0x37c>)
     e4e:	f7ff fffe 	bl	0 <do_test>
     e52:	68a1      	ldr	r1, [r4, #8]
     e54:	2229      	movs	r2, #41	; 0x29
     e56:	486b      	ldr	r0, [pc, #428]	; (1004 <run+0x380>)
     e58:	f7ff fffe 	bl	0 <do_test>
     e5c:	68a1      	ldr	r1, [r4, #8]
     e5e:	222a      	movs	r2, #42	; 0x2a
     e60:	4869      	ldr	r0, [pc, #420]	; (1008 <run+0x384>)
     e62:	f7ff fffe 	bl	0 <do_test>
     e66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     e68:	222b      	movs	r2, #43	; 0x2b
     e6a:	4868      	ldr	r0, [pc, #416]	; (100c <run+0x388>)
     e6c:	f7ff fffe 	bl	0 <do_test>
     e70:	68a1      	ldr	r1, [r4, #8]
     e72:	222c      	movs	r2, #44	; 0x2c
     e74:	4866      	ldr	r0, [pc, #408]	; (1010 <run+0x38c>)
     e76:	f7ff fffe 	bl	0 <do_test>
     e7a:	68a1      	ldr	r1, [r4, #8]
     e7c:	222d      	movs	r2, #45	; 0x2d
     e7e:	4865      	ldr	r0, [pc, #404]	; (1014 <run+0x390>)
     e80:	f7ff fffe 	bl	0 <do_test>
     e84:	68a1      	ldr	r1, [r4, #8]
     e86:	222e      	movs	r2, #46	; 0x2e
     e88:	4863      	ldr	r0, [pc, #396]	; (1018 <run+0x394>)
     e8a:	f7ff fffe 	bl	0 <do_test>
     e8e:	68a1      	ldr	r1, [r4, #8]
     e90:	222f      	movs	r2, #47	; 0x2f
     e92:	4862      	ldr	r0, [pc, #392]	; (101c <run+0x398>)
     e94:	f7ff fffe 	bl	0 <do_test>
     e98:	68a1      	ldr	r1, [r4, #8]
     e9a:	2230      	movs	r2, #48	; 0x30
     e9c:	4860      	ldr	r0, [pc, #384]	; (1020 <run+0x39c>)
     e9e:	f7ff fffe 	bl	0 <do_test>
     ea2:	68a1      	ldr	r1, [r4, #8]
     ea4:	2231      	movs	r2, #49	; 0x31
     ea6:	485f      	ldr	r0, [pc, #380]	; (1024 <run+0x3a0>)
     ea8:	f7ff fffe 	bl	0 <do_test>
     eac:	68a1      	ldr	r1, [r4, #8]
     eae:	2232      	movs	r2, #50	; 0x32
     eb0:	485d      	ldr	r0, [pc, #372]	; (1028 <run+0x3a4>)
     eb2:	f7ff fffe 	bl	0 <do_test>
     eb6:	68a1      	ldr	r1, [r4, #8]
     eb8:	2233      	movs	r2, #51	; 0x33
     eba:	485c      	ldr	r0, [pc, #368]	; (102c <run+0x3a8>)
     ebc:	f7ff fffe 	bl	0 <do_test>
     ec0:	68a1      	ldr	r1, [r4, #8]
     ec2:	2234      	movs	r2, #52	; 0x34
     ec4:	485a      	ldr	r0, [pc, #360]	; (1030 <run+0x3ac>)
     ec6:	f7ff fffe 	bl	0 <do_test>
     eca:	68a1      	ldr	r1, [r4, #8]
     ecc:	2235      	movs	r2, #53	; 0x35
     ece:	4859      	ldr	r0, [pc, #356]	; (1034 <run+0x3b0>)
     ed0:	f7ff fffe 	bl	0 <do_test>
     ed4:	68a1      	ldr	r1, [r4, #8]
     ed6:	2236      	movs	r2, #54	; 0x36
     ed8:	4857      	ldr	r0, [pc, #348]	; (1038 <run+0x3b4>)
     eda:	f7ff fffe 	bl	0 <do_test>
     ede:	68a1      	ldr	r1, [r4, #8]
     ee0:	2237      	movs	r2, #55	; 0x37
     ee2:	4856      	ldr	r0, [pc, #344]	; (103c <run+0x3b8>)
     ee4:	f7ff fffe 	bl	0 <do_test>
     ee8:	68a1      	ldr	r1, [r4, #8]
     eea:	2238      	movs	r2, #56	; 0x38
     eec:	4854      	ldr	r0, [pc, #336]	; (1040 <run+0x3bc>)
     eee:	f7ff fffe 	bl	0 <do_test>
     ef2:	68a1      	ldr	r1, [r4, #8]
     ef4:	2239      	movs	r2, #57	; 0x39
     ef6:	4853      	ldr	r0, [pc, #332]	; (1044 <run+0x3c0>)
     ef8:	f7ff fffe 	bl	0 <do_test>
     efc:	68a1      	ldr	r1, [r4, #8]
     efe:	223a      	movs	r2, #58	; 0x3a
     f00:	4851      	ldr	r0, [pc, #324]	; (1048 <run+0x3c4>)
     f02:	f7ff fffe 	bl	0 <do_test>
     f06:	68a1      	ldr	r1, [r4, #8]
     f08:	223b      	movs	r2, #59	; 0x3b
     f0a:	4850      	ldr	r0, [pc, #320]	; (104c <run+0x3c8>)
     f0c:	f7ff fffe 	bl	0 <do_test>
     f10:	68a1      	ldr	r1, [r4, #8]
     f12:	223c      	movs	r2, #60	; 0x3c
     f14:	484e      	ldr	r0, [pc, #312]	; (1050 <run+0x3cc>)
     f16:	f7ff fffe 	bl	0 <do_test>
     f1a:	68a1      	ldr	r1, [r4, #8]
     f1c:	223d      	movs	r2, #61	; 0x3d
     f1e:	484d      	ldr	r0, [pc, #308]	; (1054 <run+0x3d0>)
     f20:	f7ff fffe 	bl	0 <do_test>
     f24:	6961      	ldr	r1, [r4, #20]
     f26:	223e      	movs	r2, #62	; 0x3e
     f28:	484b      	ldr	r0, [pc, #300]	; (1058 <run+0x3d4>)
     f2a:	f7ff fffe 	bl	0 <do_test>
     f2e:	6961      	ldr	r1, [r4, #20]
     f30:	223f      	movs	r2, #63	; 0x3f
     f32:	484a      	ldr	r0, [pc, #296]	; (105c <run+0x3d8>)
     f34:	f7ff fffe 	bl	0 <do_test>
     f38:	6961      	ldr	r1, [r4, #20]
     f3a:	2240      	movs	r2, #64	; 0x40
     f3c:	4848      	ldr	r0, [pc, #288]	; (1060 <run+0x3dc>)
     f3e:	f7ff fffe 	bl	0 <do_test>
     f42:	68a1      	ldr	r1, [r4, #8]
     f44:	2241      	movs	r2, #65	; 0x41
     f46:	4847      	ldr	r0, [pc, #284]	; (1064 <run+0x3e0>)
     f48:	f7ff fffe 	bl	0 <do_test>
     f4c:	e08c      	b.n	1068 <run+0x3e4>
     f4e:	bf00      	nop
     f50:	00000000 	.word	0x00000000
     f54:	200023e4 	.word	0x200023e4
     f58:	200022ec 	.word	0x200022ec
     f5c:	20002360 	.word	0x20002360
	...
    1068:	6a21      	ldr	r1, [r4, #32]
    106a:	2242      	movs	r2, #66	; 0x42
    106c:	487a      	ldr	r0, [pc, #488]	; (1258 <run+0x5d4>)
    106e:	f7ff fffe 	bl	0 <do_test>
    1072:	6a21      	ldr	r1, [r4, #32]
    1074:	2243      	movs	r2, #67	; 0x43
    1076:	4879      	ldr	r0, [pc, #484]	; (125c <run+0x5d8>)
    1078:	f7ff fffe 	bl	0 <do_test>
    107c:	68a1      	ldr	r1, [r4, #8]
    107e:	2244      	movs	r2, #68	; 0x44
    1080:	4877      	ldr	r0, [pc, #476]	; (1260 <run+0x5dc>)
    1082:	f7ff fffe 	bl	0 <do_test>
    1086:	68a1      	ldr	r1, [r4, #8]
    1088:	2245      	movs	r2, #69	; 0x45
    108a:	4876      	ldr	r0, [pc, #472]	; (1264 <run+0x5e0>)
    108c:	f7ff fffe 	bl	0 <do_test>
    1090:	6a21      	ldr	r1, [r4, #32]
    1092:	2246      	movs	r2, #70	; 0x46
    1094:	4874      	ldr	r0, [pc, #464]	; (1268 <run+0x5e4>)
    1096:	f7ff fffe 	bl	0 <do_test>
    109a:	6a21      	ldr	r1, [r4, #32]
    109c:	2247      	movs	r2, #71	; 0x47
    109e:	4873      	ldr	r0, [pc, #460]	; (126c <run+0x5e8>)
    10a0:	f7ff fffe 	bl	0 <do_test>
    10a4:	68a1      	ldr	r1, [r4, #8]
    10a6:	2248      	movs	r2, #72	; 0x48
    10a8:	4871      	ldr	r0, [pc, #452]	; (1270 <run+0x5ec>)
    10aa:	f7ff fffe 	bl	0 <do_test>
    10ae:	68a1      	ldr	r1, [r4, #8]
    10b0:	2249      	movs	r2, #73	; 0x49
    10b2:	4870      	ldr	r0, [pc, #448]	; (1274 <run+0x5f0>)
    10b4:	f7ff fffe 	bl	0 <do_test>
    10b8:	68a1      	ldr	r1, [r4, #8]
    10ba:	224a      	movs	r2, #74	; 0x4a
    10bc:	486e      	ldr	r0, [pc, #440]	; (1278 <run+0x5f4>)
    10be:	f7ff fffe 	bl	0 <do_test>
    10c2:	68a1      	ldr	r1, [r4, #8]
    10c4:	224b      	movs	r2, #75	; 0x4b
    10c6:	486d      	ldr	r0, [pc, #436]	; (127c <run+0x5f8>)
    10c8:	f7ff fffe 	bl	0 <do_test>
    10cc:	68a1      	ldr	r1, [r4, #8]
    10ce:	224c      	movs	r2, #76	; 0x4c
    10d0:	486b      	ldr	r0, [pc, #428]	; (1280 <run+0x5fc>)
    10d2:	f7ff fffe 	bl	0 <do_test>
    10d6:	68a1      	ldr	r1, [r4, #8]
    10d8:	224d      	movs	r2, #77	; 0x4d
    10da:	486a      	ldr	r0, [pc, #424]	; (1284 <run+0x600>)
    10dc:	f7ff fffe 	bl	0 <do_test>
    10e0:	68a1      	ldr	r1, [r4, #8]
    10e2:	224e      	movs	r2, #78	; 0x4e
    10e4:	4868      	ldr	r0, [pc, #416]	; (1288 <run+0x604>)
    10e6:	f7ff fffe 	bl	0 <do_test>
    10ea:	68a1      	ldr	r1, [r4, #8]
    10ec:	224f      	movs	r2, #79	; 0x4f
    10ee:	4866      	ldr	r0, [pc, #408]	; (1288 <run+0x604>)
    10f0:	f7ff fffe 	bl	0 <do_test>
    10f4:	68a1      	ldr	r1, [r4, #8]
    10f6:	2250      	movs	r2, #80	; 0x50
    10f8:	4864      	ldr	r0, [pc, #400]	; (128c <run+0x608>)
    10fa:	f7ff fffe 	bl	0 <do_test>
    10fe:	68a1      	ldr	r1, [r4, #8]
    1100:	2251      	movs	r2, #81	; 0x51
    1102:	4863      	ldr	r0, [pc, #396]	; (1290 <run+0x60c>)
    1104:	f7ff fffe 	bl	0 <do_test>
    1108:	68a1      	ldr	r1, [r4, #8]
    110a:	2252      	movs	r2, #82	; 0x52
    110c:	4861      	ldr	r0, [pc, #388]	; (1294 <run+0x610>)
    110e:	f7ff fffe 	bl	0 <do_test>
    1112:	68a1      	ldr	r1, [r4, #8]
    1114:	2253      	movs	r2, #83	; 0x53
    1116:	4860      	ldr	r0, [pc, #384]	; (1298 <run+0x614>)
    1118:	f7ff fffe 	bl	0 <do_test>
    111c:	68a1      	ldr	r1, [r4, #8]
    111e:	2254      	movs	r2, #84	; 0x54
    1120:	485e      	ldr	r0, [pc, #376]	; (129c <run+0x618>)
    1122:	f7ff fffe 	bl	0 <do_test>
    1126:	68a1      	ldr	r1, [r4, #8]
    1128:	2255      	movs	r2, #85	; 0x55
    112a:	485b      	ldr	r0, [pc, #364]	; (1298 <run+0x614>)
    112c:	f7ff fffe 	bl	0 <do_test>
    1130:	68a1      	ldr	r1, [r4, #8]
    1132:	2256      	movs	r2, #86	; 0x56
    1134:	485a      	ldr	r0, [pc, #360]	; (12a0 <run+0x61c>)
    1136:	f7ff fffe 	bl	0 <do_test>
    113a:	68a1      	ldr	r1, [r4, #8]
    113c:	2257      	movs	r2, #87	; 0x57
    113e:	4859      	ldr	r0, [pc, #356]	; (12a4 <run+0x620>)
    1140:	f7ff fffe 	bl	0 <do_test>
    1144:	6a21      	ldr	r1, [r4, #32]
    1146:	2258      	movs	r2, #88	; 0x58
    1148:	4857      	ldr	r0, [pc, #348]	; (12a8 <run+0x624>)
    114a:	f7ff fffe 	bl	0 <do_test>
    114e:	6a21      	ldr	r1, [r4, #32]
    1150:	2259      	movs	r2, #89	; 0x59
    1152:	4856      	ldr	r0, [pc, #344]	; (12ac <run+0x628>)
    1154:	f7ff fffe 	bl	0 <do_test>
    1158:	68a1      	ldr	r1, [r4, #8]
    115a:	225a      	movs	r2, #90	; 0x5a
    115c:	4854      	ldr	r0, [pc, #336]	; (12b0 <run+0x62c>)
    115e:	f7ff fffe 	bl	0 <do_test>
    1162:	6a21      	ldr	r1, [r4, #32]
    1164:	225b      	movs	r2, #91	; 0x5b
    1166:	4853      	ldr	r0, [pc, #332]	; (12b4 <run+0x630>)
    1168:	f7ff fffe 	bl	0 <do_test>
    116c:	6a21      	ldr	r1, [r4, #32]
    116e:	225c      	movs	r2, #92	; 0x5c
    1170:	4851      	ldr	r0, [pc, #324]	; (12b8 <run+0x634>)
    1172:	f7ff fffe 	bl	0 <do_test>
    1176:	68a1      	ldr	r1, [r4, #8]
    1178:	225d      	movs	r2, #93	; 0x5d
    117a:	4850      	ldr	r0, [pc, #320]	; (12bc <run+0x638>)
    117c:	f7ff fffe 	bl	0 <do_test>
    1180:	68a1      	ldr	r1, [r4, #8]
    1182:	225e      	movs	r2, #94	; 0x5e
    1184:	484e      	ldr	r0, [pc, #312]	; (12c0 <run+0x63c>)
    1186:	f7ff fffe 	bl	0 <do_test>
    118a:	68a1      	ldr	r1, [r4, #8]
    118c:	225f      	movs	r2, #95	; 0x5f
    118e:	484d      	ldr	r0, [pc, #308]	; (12c4 <run+0x640>)
    1190:	f7ff fffe 	bl	0 <do_test>
    1194:	68a1      	ldr	r1, [r4, #8]
    1196:	2260      	movs	r2, #96	; 0x60
    1198:	484b      	ldr	r0, [pc, #300]	; (12c8 <run+0x644>)
    119a:	f7ff fffe 	bl	0 <do_test>
    119e:	6a21      	ldr	r1, [r4, #32]
    11a0:	2261      	movs	r2, #97	; 0x61
    11a2:	484a      	ldr	r0, [pc, #296]	; (12cc <run+0x648>)
    11a4:	f7ff fffe 	bl	0 <do_test>
    11a8:	6a21      	ldr	r1, [r4, #32]
    11aa:	2262      	movs	r2, #98	; 0x62
    11ac:	4848      	ldr	r0, [pc, #288]	; (12d0 <run+0x64c>)
    11ae:	f7ff fffe 	bl	0 <do_test>
    11b2:	6a21      	ldr	r1, [r4, #32]
    11b4:	2263      	movs	r2, #99	; 0x63
    11b6:	4847      	ldr	r0, [pc, #284]	; (12d4 <run+0x650>)
    11b8:	f7ff fffe 	bl	0 <do_test>
    11bc:	6a21      	ldr	r1, [r4, #32]
    11be:	2264      	movs	r2, #100	; 0x64
    11c0:	4845      	ldr	r0, [pc, #276]	; (12d8 <run+0x654>)
    11c2:	f7ff fffe 	bl	0 <do_test>
    11c6:	6a21      	ldr	r1, [r4, #32]
    11c8:	2265      	movs	r2, #101	; 0x65
    11ca:	4844      	ldr	r0, [pc, #272]	; (12dc <run+0x658>)
    11cc:	f7ff fffe 	bl	0 <do_test>
    11d0:	6a21      	ldr	r1, [r4, #32]
    11d2:	2266      	movs	r2, #102	; 0x66
    11d4:	4842      	ldr	r0, [pc, #264]	; (12e0 <run+0x65c>)
    11d6:	f7ff fffe 	bl	0 <do_test>
    11da:	68a1      	ldr	r1, [r4, #8]
    11dc:	2267      	movs	r2, #103	; 0x67
    11de:	4841      	ldr	r0, [pc, #260]	; (12e4 <run+0x660>)
    11e0:	f7ff fffe 	bl	0 <do_test>
    11e4:	68a1      	ldr	r1, [r4, #8]
    11e6:	2268      	movs	r2, #104	; 0x68
    11e8:	483f      	ldr	r0, [pc, #252]	; (12e8 <run+0x664>)
    11ea:	f7ff fffe 	bl	0 <do_test>
    11ee:	68a1      	ldr	r1, [r4, #8]
    11f0:	2269      	movs	r2, #105	; 0x69
    11f2:	483e      	ldr	r0, [pc, #248]	; (12ec <run+0x668>)
    11f4:	f7ff fffe 	bl	0 <do_test>
    11f8:	68a1      	ldr	r1, [r4, #8]
    11fa:	226a      	movs	r2, #106	; 0x6a
    11fc:	483c      	ldr	r0, [pc, #240]	; (12f0 <run+0x66c>)
    11fe:	f7ff fffe 	bl	0 <do_test>
    1202:	68a1      	ldr	r1, [r4, #8]
    1204:	226b      	movs	r2, #107	; 0x6b
    1206:	483b      	ldr	r0, [pc, #236]	; (12f4 <run+0x670>)
    1208:	f7ff fffe 	bl	0 <do_test>
    120c:	68a1      	ldr	r1, [r4, #8]
    120e:	226c      	movs	r2, #108	; 0x6c
    1210:	4839      	ldr	r0, [pc, #228]	; (12f8 <run+0x674>)
    1212:	f7ff fffe 	bl	0 <do_test>
    1216:	68a1      	ldr	r1, [r4, #8]
    1218:	226d      	movs	r2, #109	; 0x6d
    121a:	4838      	ldr	r0, [pc, #224]	; (12fc <run+0x678>)
    121c:	f7ff fffe 	bl	0 <do_test>
    1220:	68a1      	ldr	r1, [r4, #8]
    1222:	226e      	movs	r2, #110	; 0x6e
    1224:	4836      	ldr	r0, [pc, #216]	; (1300 <run+0x67c>)
    1226:	f7ff fffe 	bl	0 <do_test>
    122a:	68a1      	ldr	r1, [r4, #8]
    122c:	226f      	movs	r2, #111	; 0x6f
    122e:	4835      	ldr	r0, [pc, #212]	; (1304 <run+0x680>)
    1230:	f7ff fffe 	bl	0 <do_test>
    1234:	68a1      	ldr	r1, [r4, #8]
    1236:	2270      	movs	r2, #112	; 0x70
    1238:	4833      	ldr	r0, [pc, #204]	; (1308 <run+0x684>)
    123a:	f7ff fffe 	bl	0 <do_test>
    123e:	68a1      	ldr	r1, [r4, #8]
    1240:	2271      	movs	r2, #113	; 0x71
    1242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1246:	4831      	ldr	r0, [pc, #196]	; (c8 <do_test+0xc8>)
    1248:	f7ff bffe 	b.w	0 <do_test>
    124c:	2301      	movs	r3, #1
    124e:	4930      	ldr	r1, [pc, #192]	; (1310 <run+0x68c>)
    1250:	7023      	strb	r3, [r4, #0]
    1252:	60a1      	str	r1, [r4, #8]
    1254:	e51d      	b.n	c92 <run+0xe>
    1256:	bf00      	nop
	...
    1310:	20002484 	.word	0x20002484

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
