
regbits.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <INTERRUPT_VECTORS>:
20000000:	00 50 00 20 ad 15 00 20 c9 14 00 20 cd 14 00 20     .P. ... ... ... 
20000010:	d1 14 00 20 d5 14 00 20 d9 14 00 20 dd 14 00 20     ... ... ... ... 
20000020:	e1 14 00 20 e5 14 00 20 e9 14 00 20 ed 14 00 20     ... ... ... ... 
20000030:	f1 14 00 20 f5 14 00 20 f9 14 00 20 fd 14 00 20     ... ... ... ... 
20000040:	01 15 00 20 05 15 00 20 09 15 00 20 0d 15 00 20     ... ... ... ... 
20000050:	11 15 00 20 15 15 00 20 19 15 00 20 1d 15 00 20     ... ... ... ... 
20000060:	21 15 00 20 25 15 00 20 29 15 00 20 2d 15 00 20     !.. %.. ).. -.. 
20000070:	31 15 00 20 35 15 00 20 39 15 00 20 3d 15 00 20     1.. 5.. 9.. =.. 
20000080:	41 15 00 20 45 15 00 20 49 15 00 20 4d 15 00 20     A.. E.. I.. M.. 
20000090:	51 15 00 20 55 15 00 20 59 15 00 20 5d 15 00 20     Q.. U.. Y.. ].. 
200000a0:	61 15 00 20 65 15 00 20 69 15 00 20 6d 15 00 20     a.. e.. i.. m.. 
200000b0:	71 15 00 20 75 15 00 20 79 15 00 20 7d 15 00 20     q.. u.. y.. }.. 
200000c0:	81 15 00 20 85 15 00 20 89 15 00 20 8d 15 00 20     ... ... ... ... 
200000d0:	91 15 00 20 95 15 00 20 99 15 00 20 9d 15 00 20     ... ... ... ... 
200000e0:	a1 15 00 20 a5 15 00 20 a9 15 00 20                 ... ... ... 

200000ec <zero_reg()>:
200000ec:	2200      	movs	r2, #0
200000ee:	4b01      	ldr	r3, [pc, #4]	; (200000f4 <zero_reg()+0x8>)
200000f0:	605a      	str	r2, [r3, #4]
200000f2:	4770      	bx	lr
200000f4:	20002480 	.word	0x20002480

200000f8 <zero_array()>:
200000f8:	2200      	movs	r2, #0
200000fa:	4b01      	ldr	r3, [pc, #4]	; (20000100 <zero_array()+0x8>)
200000fc:	62da      	str	r2, [r3, #44]	; 0x2c
200000fe:	4770      	bx	lr
20000100:	200022c0 	.word	0x200022c0

20000104 <set_singl_bits_operator()>:
20000104:	4a02      	ldr	r2, [pc, #8]	; (20000110 <set_singl_bits_operator()+0xc>)
20000106:	6853      	ldr	r3, [r2, #4]
20000108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000010c:	6053      	str	r3, [r2, #4]
2000010e:	4770      	bx	lr
20000110:	20002480 	.word	0x20002480

20000114 <set_singl_bits_method()>:
20000114:	4a02      	ldr	r2, [pc, #8]	; (20000120 <set_singl_bits_method()+0xc>)
20000116:	6853      	ldr	r3, [r2, #4]
20000118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000011c:	6053      	str	r3, [r2, #4]
2000011e:	4770      	bx	lr
20000120:	20002480 	.word	0x20002480

20000124 <clr_singl_bits_operator()>:
20000124:	4a02      	ldr	r2, [pc, #8]	; (20000130 <clr_singl_bits_operator()+0xc>)
20000126:	6853      	ldr	r3, [r2, #4]
20000128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000012c:	6053      	str	r3, [r2, #4]
2000012e:	4770      	bx	lr
20000130:	20002480 	.word	0x20002480

20000134 <clr_singl_bits_method()>:
20000134:	4a02      	ldr	r2, [pc, #8]	; (20000140 <clr_singl_bits_method()+0xc>)
20000136:	6853      	ldr	r3, [r2, #4]
20000138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000013c:	6053      	str	r3, [r2, #4]
2000013e:	4770      	bx	lr
20000140:	20002480 	.word	0x20002480

20000144 <set_singl_mskd_operator()>:
20000144:	4a02      	ldr	r2, [pc, #8]	; (20000150 <set_singl_mskd_operator()+0xc>)
20000146:	6853      	ldr	r3, [r2, #4]
20000148:	f043 0302 	orr.w	r3, r3, #2
2000014c:	6053      	str	r3, [r2, #4]
2000014e:	4770      	bx	lr
20000150:	20002480 	.word	0x20002480

20000154 <set_singl_mskd_method()>:
20000154:	4a02      	ldr	r2, [pc, #8]	; (20000160 <set_singl_mskd_method()+0xc>)
20000156:	6853      	ldr	r3, [r2, #4]
20000158:	f043 0302 	orr.w	r3, r3, #2
2000015c:	6053      	str	r3, [r2, #4]
2000015e:	4770      	bx	lr
20000160:	20002480 	.word	0x20002480

20000164 <clr_singl_mskd_operator()>:
20000164:	4a02      	ldr	r2, [pc, #8]	; (20000170 <clr_singl_mskd_operator()+0xc>)
20000166:	6853      	ldr	r3, [r2, #4]
20000168:	f023 0302 	bic.w	r3, r3, #2
2000016c:	6053      	str	r3, [r2, #4]
2000016e:	4770      	bx	lr
20000170:	20002480 	.word	0x20002480

20000174 <clr_singl_mskd_method()>:
20000174:	4a02      	ldr	r2, [pc, #8]	; (20000180 <clr_singl_mskd_method()+0xc>)
20000176:	6853      	ldr	r3, [r2, #4]
20000178:	f023 0302 	bic.w	r3, r3, #2
2000017c:	6053      	str	r3, [r2, #4]
2000017e:	4770      	bx	lr
20000180:	20002480 	.word	0x20002480

20000184 <equ_singl_bits_operator()>:
20000184:	2240      	movs	r2, #64	; 0x40
20000186:	4b01      	ldr	r3, [pc, #4]	; (2000018c <equ_singl_bits_operator()+0x8>)
20000188:	605a      	str	r2, [r3, #4]
2000018a:	4770      	bx	lr
2000018c:	20002480 	.word	0x20002480

20000190 <equ_singl_bits_method()>:
20000190:	2240      	movs	r2, #64	; 0x40
20000192:	4b01      	ldr	r3, [pc, #4]	; (20000198 <equ_singl_bits_method()+0x8>)
20000194:	605a      	str	r2, [r3, #4]
20000196:	4770      	bx	lr
20000198:	20002480 	.word	0x20002480

2000019c <equ_singl_mskd_operator()>:
2000019c:	2202      	movs	r2, #2
2000019e:	4b01      	ldr	r3, [pc, #4]	; (200001a4 <equ_singl_mskd_operator()+0x8>)
200001a0:	605a      	str	r2, [r3, #4]
200001a2:	4770      	bx	lr
200001a4:	20002480 	.word	0x20002480

200001a8 <equ_singl_mskd_method()>:
200001a8:	2202      	movs	r2, #2
200001aa:	4b01      	ldr	r3, [pc, #4]	; (200001b0 <equ_singl_mskd_method()+0x8>)
200001ac:	605a      	str	r2, [r3, #4]
200001ae:	4770      	bx	lr
200001b0:	20002480 	.word	0x20002480

200001b4 <flp_singl_bits_operator()>:
200001b4:	4a02      	ldr	r2, [pc, #8]	; (200001c0 <flp_singl_bits_operator()+0xc>)
200001b6:	6853      	ldr	r3, [r2, #4]
200001b8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001bc:	6053      	str	r3, [r2, #4]
200001be:	4770      	bx	lr
200001c0:	20002480 	.word	0x20002480

200001c4 <flp_singl_bits_method()>:
200001c4:	4a02      	ldr	r2, [pc, #8]	; (200001d0 <flp_singl_bits_method()+0xc>)
200001c6:	6853      	ldr	r3, [r2, #4]
200001c8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001cc:	6053      	str	r3, [r2, #4]
200001ce:	4770      	bx	lr
200001d0:	20002480 	.word	0x20002480

200001d4 <flp_singl_mskd_operator()>:
200001d4:	4a02      	ldr	r2, [pc, #8]	; (200001e0 <flp_singl_mskd_operator()+0xc>)
200001d6:	6853      	ldr	r3, [r2, #4]
200001d8:	f083 0302 	eor.w	r3, r3, #2
200001dc:	6053      	str	r3, [r2, #4]
200001de:	4770      	bx	lr
200001e0:	20002480 	.word	0x20002480

200001e4 <flp_singl_mskd_method()>:
200001e4:	4a02      	ldr	r2, [pc, #8]	; (200001f0 <flp_singl_mskd_method()+0xc>)
200001e6:	6853      	ldr	r3, [r2, #4]
200001e8:	f083 0302 	eor.w	r3, r3, #2
200001ec:	6053      	str	r3, [r2, #4]
200001ee:	4770      	bx	lr
200001f0:	20002480 	.word	0x20002480

200001f4 <ins_singl_mskd_operator()>:
200001f4:	4a03      	ldr	r2, [pc, #12]	; (20000204 <ins_singl_mskd_operator()+0x10>)
200001f6:	6853      	ldr	r3, [r2, #4]
200001f8:	f023 0306 	bic.w	r3, r3, #6
200001fc:	f043 0304 	orr.w	r3, r3, #4
20000200:	6053      	str	r3, [r2, #4]
20000202:	4770      	bx	lr
20000204:	20002480 	.word	0x20002480

20000208 <ins_singl_mskd_method()>:
20000208:	4a03      	ldr	r2, [pc, #12]	; (20000218 <ins_singl_mskd_method()+0x10>)
2000020a:	6853      	ldr	r3, [r2, #4]
2000020c:	f023 0306 	bic.w	r3, r3, #6
20000210:	f043 0304 	orr.w	r3, r3, #4
20000214:	6053      	str	r3, [r2, #4]
20000216:	4770      	bx	lr
20000218:	20002480 	.word	0x20002480

2000021c <set_multi_bits_operator()>:
2000021c:	4a02      	ldr	r2, [pc, #8]	; (20000228 <set_multi_bits_operator()+0xc>)
2000021e:	6853      	ldr	r3, [r2, #4]
20000220:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000224:	6053      	str	r3, [r2, #4]
20000226:	4770      	bx	lr
20000228:	20002480 	.word	0x20002480

2000022c <set_multi_bits_method()>:
2000022c:	4a02      	ldr	r2, [pc, #8]	; (20000238 <set_multi_bits_method()+0xc>)
2000022e:	6853      	ldr	r3, [r2, #4]
20000230:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000234:	6053      	str	r3, [r2, #4]
20000236:	4770      	bx	lr
20000238:	20002480 	.word	0x20002480

2000023c <ins_multi_mskd_operator()>:
2000023c:	4a04      	ldr	r2, [pc, #16]	; (20000250 <ins_multi_mskd_operator()+0x14>)
2000023e:	6853      	ldr	r3, [r2, #4]
20000240:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
20000244:	f023 0306 	bic.w	r3, r3, #6
20000248:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
2000024c:	6053      	str	r3, [r2, #4]
2000024e:	4770      	bx	lr
20000250:	20002480 	.word	0x20002480

20000254 <ins_multi_mskd_method()>:
20000254:	4a04      	ldr	r2, [pc, #16]	; (20000268 <ins_multi_mskd_method()+0x14>)
20000256:	6853      	ldr	r3, [r2, #4]
20000258:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
2000025c:	f023 0306 	bic.w	r3, r3, #6
20000260:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
20000264:	6053      	str	r3, [r2, #4]
20000266:	4770      	bx	lr
20000268:	20002480 	.word	0x20002480

2000026c <equ_multi_bits_operator()>:
2000026c:	2260      	movs	r2, #96	; 0x60
2000026e:	4b01      	ldr	r3, [pc, #4]	; (20000274 <equ_multi_bits_operator()+0x8>)
20000270:	605a      	str	r2, [r3, #4]
20000272:	4770      	bx	lr
20000274:	20002480 	.word	0x20002480

20000278 <equ_multi_bits_method()>:
20000278:	2260      	movs	r2, #96	; 0x60
2000027a:	4b01      	ldr	r3, [pc, #4]	; (20000280 <equ_multi_bits_method()+0x8>)
2000027c:	605a      	str	r2, [r3, #4]
2000027e:	4770      	bx	lr
20000280:	20002480 	.word	0x20002480

20000284 <equ_multi_mskd_operator()>:
20000284:	f44f 7242 	mov.w	r2, #776	; 0x308
20000288:	4b01      	ldr	r3, [pc, #4]	; (20000290 <equ_multi_mskd_operator()+0xc>)
2000028a:	605a      	str	r2, [r3, #4]
2000028c:	4770      	bx	lr
2000028e:	bf00      	nop
20000290:	20002480 	.word	0x20002480

20000294 <equ_multi_mskd_method()>:
20000294:	f44f 7242 	mov.w	r2, #776	; 0x308
20000298:	4b01      	ldr	r3, [pc, #4]	; (200002a0 <equ_multi_mskd_method()+0xc>)
2000029a:	605a      	str	r2, [r3, #4]
2000029c:	4770      	bx	lr
2000029e:	bf00      	nop
200002a0:	20002480 	.word	0x20002480

200002a4 <equ_bits_mskd_operator()>:
200002a4:	2222      	movs	r2, #34	; 0x22
200002a6:	4b01      	ldr	r3, [pc, #4]	; (200002ac <equ_bits_mskd_operator()+0x8>)
200002a8:	605a      	str	r2, [r3, #4]
200002aa:	4770      	bx	lr
200002ac:	20002480 	.word	0x20002480

200002b0 <equ_bits_mskd_method()>:
200002b0:	2222      	movs	r2, #34	; 0x22
200002b2:	4b01      	ldr	r3, [pc, #4]	; (200002b8 <equ_bits_mskd_method()+0x8>)
200002b4:	605a      	str	r2, [r3, #4]
200002b6:	4770      	bx	lr
200002b8:	20002480 	.word	0x20002480

200002bc <equ_mskd_bits_operator()>:
200002bc:	2244      	movs	r2, #68	; 0x44
200002be:	4b01      	ldr	r3, [pc, #4]	; (200002c4 <equ_mskd_bits_operator()+0x8>)
200002c0:	605a      	str	r2, [r3, #4]
200002c2:	4770      	bx	lr
200002c4:	20002480 	.word	0x20002480

200002c8 <equ_mskd_bits_method()>:
200002c8:	2244      	movs	r2, #68	; 0x44
200002ca:	4b01      	ldr	r3, [pc, #4]	; (200002d0 <equ_mskd_bits_method()+0x8>)
200002cc:	605a      	str	r2, [r3, #4]
200002ce:	4770      	bx	lr
200002d0:	20002480 	.word	0x20002480

200002d4 <equ_bits_var()>:
200002d4:	2140      	movs	r1, #64	; 0x40
200002d6:	2201      	movs	r2, #1
200002d8:	4b01      	ldr	r3, [pc, #4]	; (200002e0 <equ_bits_var()+0xc>)
200002da:	6059      	str	r1, [r3, #4]
200002dc:	605a      	str	r2, [r3, #4]
200002de:	4770      	bx	lr
200002e0:	20002480 	.word	0x20002480

200002e4 <equ_mskd_var()>:
200002e4:	2102      	movs	r1, #2
200002e6:	f44f 72c0 	mov.w	r2, #384	; 0x180
200002ea:	4b02      	ldr	r3, [pc, #8]	; (200002f4 <equ_mskd_var()+0x10>)
200002ec:	6059      	str	r1, [r3, #4]
200002ee:	605a      	str	r2, [r3, #4]
200002f0:	4770      	bx	lr
200002f2:	bf00      	nop
200002f4:	20002480 	.word	0x20002480

200002f8 <cmp_equ_zero()>:
200002f8:	2200      	movs	r2, #0
200002fa:	4b07      	ldr	r3, [pc, #28]	; (20000318 <cmp_equ_zero()+0x20>)
200002fc:	605a      	str	r2, [r3, #4]
200002fe:	685b      	ldr	r3, [r3, #4]
20000300:	b923      	cbnz	r3, 2000030c <cmp_equ_zero()+0x14>
20000302:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
20000306:	4b05      	ldr	r3, [pc, #20]	; (2000031c <cmp_equ_zero()+0x24>)
20000308:	605a      	str	r2, [r3, #4]
2000030a:	4770      	bx	lr
2000030c:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000310:	4b02      	ldr	r3, [pc, #8]	; (2000031c <cmp_equ_zero()+0x24>)
20000312:	605a      	str	r2, [r3, #4]
20000314:	4770      	bx	lr
20000316:	bf00      	nop
20000318:	20002480 	.word	0x20002480
2000031c:	200023e0 	.word	0x200023e0

20000320 <cmp_neq_zero()>:
20000320:	2200      	movs	r2, #0
20000322:	4b05      	ldr	r3, [pc, #20]	; (20000338 <cmp_neq_zero()+0x18>)
20000324:	605a      	str	r2, [r3, #4]
20000326:	685a      	ldr	r2, [r3, #4]
20000328:	b112      	cbz	r2, 20000330 <cmp_neq_zero()+0x10>
2000032a:	2204      	movs	r2, #4
2000032c:	605a      	str	r2, [r3, #4]
2000032e:	4770      	bx	lr
20000330:	2220      	movs	r2, #32
20000332:	605a      	str	r2, [r3, #4]
20000334:	4770      	bx	lr
20000336:	bf00      	nop
20000338:	20002480 	.word	0x20002480

2000033c <cmp_equ_bits()>:
2000033c:	2240      	movs	r2, #64	; 0x40
2000033e:	4b06      	ldr	r3, [pc, #24]	; (20000358 <cmp_equ_bits()+0x1c>)
20000340:	605a      	str	r2, [r3, #4]
20000342:	685b      	ldr	r3, [r3, #4]
20000344:	065b      	lsls	r3, r3, #25
20000346:	bf4c      	ite	mi
20000348:	f04f 52b0 	movmi.w	r2, #369098752	; 0x16000000
2000034c:	f04f 52d0 	movpl.w	r2, #436207616	; 0x1a000000
20000350:	4b02      	ldr	r3, [pc, #8]	; (2000035c <cmp_equ_bits()+0x20>)
20000352:	605a      	str	r2, [r3, #4]
20000354:	4770      	bx	lr
20000356:	bf00      	nop
20000358:	20002480 	.word	0x20002480
2000035c:	200023e0 	.word	0x200023e0

20000360 <cmp_neq_bits()>:
20000360:	2240      	movs	r2, #64	; 0x40
20000362:	4b04      	ldr	r3, [pc, #16]	; (20000374 <cmp_neq_bits()+0x14>)
20000364:	605a      	str	r2, [r3, #4]
20000366:	685a      	ldr	r2, [r3, #4]
20000368:	0652      	lsls	r2, r2, #25
2000036a:	bf54      	ite	pl
2000036c:	2202      	movpl	r2, #2
2000036e:	2220      	movmi	r2, #32
20000370:	605a      	str	r2, [r3, #4]
20000372:	4770      	bx	lr
20000374:	20002480 	.word	0x20002480

20000378 <cmp_equ_multi_bits()>:
20000378:	2260      	movs	r2, #96	; 0x60
2000037a:	4b06      	ldr	r3, [pc, #24]	; (20000394 <cmp_equ_multi_bits()+0x1c>)
2000037c:	605a      	str	r2, [r3, #4]
2000037e:	685b      	ldr	r3, [r3, #4]
20000380:	4013      	ands	r3, r2
20000382:	4293      	cmp	r3, r2
20000384:	bf0c      	ite	eq
20000386:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
2000038a:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
2000038e:	4b02      	ldr	r3, [pc, #8]	; (20000398 <cmp_equ_multi_bits()+0x20>)
20000390:	605a      	str	r2, [r3, #4]
20000392:	4770      	bx	lr
20000394:	20002480 	.word	0x20002480
20000398:	200023e0 	.word	0x200023e0

2000039c <cmp_neq_multi_bits()>:
2000039c:	2260      	movs	r2, #96	; 0x60
2000039e:	4b06      	ldr	r3, [pc, #24]	; (200003b8 <cmp_neq_multi_bits()+0x1c>)
200003a0:	605a      	str	r2, [r3, #4]
200003a2:	685b      	ldr	r3, [r3, #4]
200003a4:	4013      	ands	r3, r2
200003a6:	4293      	cmp	r3, r2
200003a8:	bf14      	ite	ne
200003aa:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
200003ae:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
200003b2:	4b02      	ldr	r3, [pc, #8]	; (200003bc <cmp_neq_multi_bits()+0x20>)
200003b4:	605a      	str	r2, [r3, #4]
200003b6:	4770      	bx	lr
200003b8:	20002480 	.word	0x20002480
200003bc:	200023e0 	.word	0x200023e0

200003c0 <cmp_equ_mskd()>:
200003c0:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003c4:	4b08      	ldr	r3, [pc, #32]	; (200003e8 <cmp_equ_mskd()+0x28>)
200003c6:	605a      	str	r2, [r3, #4]
200003c8:	685b      	ldr	r3, [r3, #4]
200003ca:	4a08      	ldr	r2, [pc, #32]	; (200003ec <cmp_equ_mskd()+0x2c>)
200003cc:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
200003d0:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
200003d4:	6853      	ldr	r3, [r2, #4]
200003d6:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
200003da:	bf0c      	ite	eq
200003dc:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
200003e0:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
200003e4:	6053      	str	r3, [r2, #4]
200003e6:	4770      	bx	lr
200003e8:	20002480 	.word	0x20002480
200003ec:	200023e0 	.word	0x200023e0

200003f0 <cmp_neq_mskd()>:
200003f0:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003f4:	4b08      	ldr	r3, [pc, #32]	; (20000418 <cmp_neq_mskd()+0x28>)
200003f6:	605a      	str	r2, [r3, #4]
200003f8:	685a      	ldr	r2, [r3, #4]
200003fa:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
200003fe:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
20000402:	685a      	ldr	r2, [r3, #4]
20000404:	bf1a      	itte	ne
20000406:	f022 0206 	bicne.w	r2, r2, #6
2000040a:	f042 0204 	orrne.w	r2, r2, #4
2000040e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
20000412:	605a      	str	r2, [r3, #4]
20000414:	4770      	bx	lr
20000416:	bf00      	nop
20000418:	20002480 	.word	0x20002480

2000041c <cmp_equ_reg()>:
2000041c:	2222      	movs	r2, #34	; 0x22
2000041e:	4b06      	ldr	r3, [pc, #24]	; (20000438 <cmp_equ_reg()+0x1c>)
20000420:	605a      	str	r2, [r3, #4]
20000422:	685b      	ldr	r3, [r3, #4]
20000424:	4293      	cmp	r3, r2
20000426:	bf0c      	ite	eq
20000428:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
2000042c:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
20000430:	4b02      	ldr	r3, [pc, #8]	; (2000043c <cmp_equ_reg()+0x20>)
20000432:	605a      	str	r2, [r3, #4]
20000434:	4770      	bx	lr
20000436:	bf00      	nop
20000438:	20002480 	.word	0x20002480
2000043c:	200023e0 	.word	0x200023e0

20000440 <cmp_neq_reg()>:
20000440:	2222      	movs	r2, #34	; 0x22
20000442:	4b04      	ldr	r3, [pc, #16]	; (20000454 <cmp_neq_reg()+0x14>)
20000444:	605a      	str	r2, [r3, #4]
20000446:	685a      	ldr	r2, [r3, #4]
20000448:	2a22      	cmp	r2, #34	; 0x22
2000044a:	bf14      	ite	ne
2000044c:	2202      	movne	r2, #2
2000044e:	2220      	moveq	r2, #32
20000450:	605a      	str	r2, [r3, #4]
20000452:	4770      	bx	lr
20000454:	20002480 	.word	0x20002480

20000458 <constexpr_bits_array()>:
20000458:	2106      	movs	r1, #6
2000045a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000045e:	4b02      	ldr	r3, [pc, #8]	; (20000468 <constexpr_bits_array()+0x10>)
20000460:	62d9      	str	r1, [r3, #44]	; 0x2c
20000462:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
20000466:	4770      	bx	lr
20000468:	200022c0 	.word	0x200022c0

2000046c <runtime_bits_array()>:
2000046c:	2303      	movs	r3, #3
2000046e:	2221      	movs	r2, #33	; 0x21
20000470:	b081      	sub	sp, #4
20000472:	9300      	str	r3, [sp, #0]
20000474:	9b00      	ldr	r3, [sp, #0]
20000476:	009b      	lsls	r3, r3, #2
20000478:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
2000047c:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
20000480:	621a      	str	r2, [r3, #32]
20000482:	b001      	add	sp, #4
20000484:	4770      	bx	lr
20000486:	bf00      	nop

20000488 <prescaler_low()>:
20000488:	2177      	movs	r1, #119	; 0x77
2000048a:	4b04      	ldr	r3, [pc, #16]	; (2000049c <prescaler_low()+0x14>)
2000048c:	4a04      	ldr	r2, [pc, #16]	; (200004a0 <prescaler_low()+0x18>)
2000048e:	6059      	str	r1, [r3, #4]
20000490:	685b      	ldr	r3, [r3, #4]
20000492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000496:	62d3      	str	r3, [r2, #44]	; 0x2c
20000498:	4770      	bx	lr
2000049a:	bf00      	nop
2000049c:	200023e0 	.word	0x200023e0
200004a0:	200022c0 	.word	0x200022c0

200004a4 <prescaler_high()>:
200004a4:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
200004a8:	4b03      	ldr	r3, [pc, #12]	; (200004b8 <prescaler_high()+0x14>)
200004aa:	4a04      	ldr	r2, [pc, #16]	; (200004bc <prescaler_high()+0x18>)
200004ac:	6059      	str	r1, [r3, #4]
200004ae:	685b      	ldr	r3, [r3, #4]
200004b0:	f3c3 6344 	ubfx	r3, r3, #25, #5
200004b4:	62d3      	str	r3, [r2, #44]	; 0x2c
200004b6:	4770      	bx	lr
200004b8:	200023e0 	.word	0x200023e0
200004bc:	200022c0 	.word	0x200022c0

200004c0 <reg_mskd_lss()>:
200004c0:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
200004c4:	4b06      	ldr	r3, [pc, #24]	; (200004e0 <reg_mskd_lss()+0x20>)
200004c6:	605a      	str	r2, [r3, #4]
200004c8:	685b      	ldr	r3, [r3, #4]
200004ca:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
200004d2:	bf34      	ite	cc
200004d4:	2202      	movcc	r2, #2
200004d6:	2204      	movcs	r2, #4
200004d8:	4b02      	ldr	r3, [pc, #8]	; (200004e4 <reg_mskd_lss()+0x24>)
200004da:	605a      	str	r2, [r3, #4]
200004dc:	4770      	bx	lr
200004de:	bf00      	nop
200004e0:	200023e0 	.word	0x200023e0
200004e4:	20002480 	.word	0x20002480

200004e8 <reg_mskd_leq()>:
200004e8:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
200004ec:	4a0a      	ldr	r2, [pc, #40]	; (20000518 <reg_mskd_leq()+0x30>)
200004ee:	6053      	str	r3, [r2, #4]
200004f0:	6853      	ldr	r3, [r2, #4]
200004f2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004f6:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
200004fa:	d809      	bhi.n	20000510 <reg_mskd_leq()+0x28>
200004fc:	6853      	ldr	r3, [r2, #4]
200004fe:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000502:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
20000506:	d803      	bhi.n	20000510 <reg_mskd_leq()+0x28>
20000508:	2202      	movs	r2, #2
2000050a:	4b04      	ldr	r3, [pc, #16]	; (2000051c <reg_mskd_leq()+0x34>)
2000050c:	605a      	str	r2, [r3, #4]
2000050e:	4770      	bx	lr
20000510:	2204      	movs	r2, #4
20000512:	4b02      	ldr	r3, [pc, #8]	; (2000051c <reg_mskd_leq()+0x34>)
20000514:	605a      	str	r2, [r3, #4]
20000516:	4770      	bx	lr
20000518:	200023e0 	.word	0x200023e0
2000051c:	20002480 	.word	0x20002480

20000520 <reg_mskd_gtr()>:
20000520:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000524:	4b06      	ldr	r3, [pc, #24]	; (20000540 <reg_mskd_gtr()+0x20>)
20000526:	605a      	str	r2, [r3, #4]
20000528:	685b      	ldr	r3, [r3, #4]
2000052a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000052e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000532:	bf8c      	ite	hi
20000534:	2202      	movhi	r2, #2
20000536:	2204      	movls	r2, #4
20000538:	4b02      	ldr	r3, [pc, #8]	; (20000544 <reg_mskd_gtr()+0x24>)
2000053a:	605a      	str	r2, [r3, #4]
2000053c:	4770      	bx	lr
2000053e:	bf00      	nop
20000540:	200023e0 	.word	0x200023e0
20000544:	20002480 	.word	0x20002480

20000548 <reg_mskd_geq()>:
20000548:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
2000054c:	4a0a      	ldr	r2, [pc, #40]	; (20000578 <reg_mskd_geq()+0x30>)
2000054e:	6053      	str	r3, [r2, #4]
20000550:	6853      	ldr	r3, [r2, #4]
20000552:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2000055a:	d309      	bcc.n	20000570 <reg_mskd_geq()+0x28>
2000055c:	6853      	ldr	r3, [r2, #4]
2000055e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000562:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
20000566:	d303      	bcc.n	20000570 <reg_mskd_geq()+0x28>
20000568:	2202      	movs	r2, #2
2000056a:	4b04      	ldr	r3, [pc, #16]	; (2000057c <reg_mskd_geq()+0x34>)
2000056c:	605a      	str	r2, [r3, #4]
2000056e:	4770      	bx	lr
20000570:	2204      	movs	r2, #4
20000572:	4b02      	ldr	r3, [pc, #8]	; (2000057c <reg_mskd_geq()+0x34>)
20000574:	605a      	str	r2, [r3, #4]
20000576:	4770      	bx	lr
20000578:	200023e0 	.word	0x200023e0
2000057c:	20002480 	.word	0x20002480

20000580 <pos_cmp_eq()>:
20000580:	2202      	movs	r2, #2
20000582:	4b01      	ldr	r3, [pc, #4]	; (20000588 <pos_cmp_eq()+0x8>)
20000584:	605a      	str	r2, [r3, #4]
20000586:	4770      	bx	lr
20000588:	20002480 	.word	0x20002480

2000058c <pos_cmp_ne()>:
2000058c:	2202      	movs	r2, #2
2000058e:	4b01      	ldr	r3, [pc, #4]	; (20000594 <pos_cmp_ne()+0x8>)
20000590:	605a      	str	r2, [r3, #4]
20000592:	4770      	bx	lr
20000594:	20002480 	.word	0x20002480

20000598 <bits_extract_eq()>:
20000598:	2240      	movs	r2, #64	; 0x40
2000059a:	4b04      	ldr	r3, [pc, #16]	; (200005ac <bits_extract_eq()+0x14>)
2000059c:	605a      	str	r2, [r3, #4]
2000059e:	685a      	ldr	r2, [r3, #4]
200005a0:	2a40      	cmp	r2, #64	; 0x40
200005a2:	bf0c      	ite	eq
200005a4:	2202      	moveq	r2, #2
200005a6:	2204      	movne	r2, #4
200005a8:	605a      	str	r2, [r3, #4]
200005aa:	4770      	bx	lr
200005ac:	20002480 	.word	0x20002480

200005b0 <mskd_extract_eq()>:
200005b0:	2202      	movs	r2, #2
200005b2:	4b04      	ldr	r3, [pc, #16]	; (200005c4 <mskd_extract_eq()+0x14>)
200005b4:	605a      	str	r2, [r3, #4]
200005b6:	685a      	ldr	r2, [r3, #4]
200005b8:	2a02      	cmp	r2, #2
200005ba:	bf0c      	ite	eq
200005bc:	2220      	moveq	r2, #32
200005be:	2240      	movne	r2, #64	; 0x40
200005c0:	605a      	str	r2, [r3, #4]
200005c2:	4770      	bx	lr
200005c4:	20002480 	.word	0x20002480

200005c8 <mskd_extract_ne()>:
200005c8:	2204      	movs	r2, #4
200005ca:	4b04      	ldr	r3, [pc, #16]	; (200005dc <mskd_extract_ne()+0x14>)
200005cc:	605a      	str	r2, [r3, #4]
200005ce:	685a      	ldr	r2, [r3, #4]
200005d0:	2a04      	cmp	r2, #4
200005d2:	bf0c      	ite	eq
200005d4:	2240      	moveq	r2, #64	; 0x40
200005d6:	2220      	movne	r2, #32
200005d8:	605a      	str	r2, [r3, #4]
200005da:	4770      	bx	lr
200005dc:	20002480 	.word	0x20002480

200005e0 <mskd_extract_lss()>:
200005e0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200005e4:	4b05      	ldr	r3, [pc, #20]	; (200005fc <mskd_extract_lss()+0x1c>)
200005e6:	605a      	str	r2, [r3, #4]
200005e8:	685b      	ldr	r3, [r3, #4]
200005ea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
200005ee:	bf34      	ite	cc
200005f0:	2220      	movcc	r2, #32
200005f2:	2240      	movcs	r2, #64	; 0x40
200005f4:	4b02      	ldr	r3, [pc, #8]	; (20000600 <mskd_extract_lss()+0x20>)
200005f6:	605a      	str	r2, [r3, #4]
200005f8:	4770      	bx	lr
200005fa:	bf00      	nop
200005fc:	200023e0 	.word	0x200023e0
20000600:	20002480 	.word	0x20002480

20000604 <mskd_extract_leq()>:
20000604:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000608:	4b04      	ldr	r3, [pc, #16]	; (2000061c <mskd_extract_leq()+0x18>)
2000060a:	605a      	str	r2, [r3, #4]
2000060c:	685b      	ldr	r3, [r3, #4]
2000060e:	4293      	cmp	r3, r2
20000610:	bf94      	ite	ls
20000612:	2220      	movls	r2, #32
20000614:	2240      	movhi	r2, #64	; 0x40
20000616:	4b02      	ldr	r3, [pc, #8]	; (20000620 <mskd_extract_leq()+0x1c>)
20000618:	605a      	str	r2, [r3, #4]
2000061a:	4770      	bx	lr
2000061c:	200023e0 	.word	0x200023e0
20000620:	20002480 	.word	0x20002480

20000624 <mskd_extract_gtr()>:
20000624:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000628:	4b05      	ldr	r3, [pc, #20]	; (20000640 <mskd_extract_gtr()+0x1c>)
2000062a:	605a      	str	r2, [r3, #4]
2000062c:	685b      	ldr	r3, [r3, #4]
2000062e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000632:	bf8c      	ite	hi
20000634:	2220      	movhi	r2, #32
20000636:	2240      	movls	r2, #64	; 0x40
20000638:	4b02      	ldr	r3, [pc, #8]	; (20000644 <mskd_extract_gtr()+0x20>)
2000063a:	605a      	str	r2, [r3, #4]
2000063c:	4770      	bx	lr
2000063e:	bf00      	nop
20000640:	200023e0 	.word	0x200023e0
20000644:	20002480 	.word	0x20002480

20000648 <set_bits_global()>:
20000648:	4a02      	ldr	r2, [pc, #8]	; (20000654 <set_bits_global()+0xc>)
2000064a:	6853      	ldr	r3, [r2, #4]
2000064c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000650:	6053      	str	r3, [r2, #4]
20000652:	4770      	bx	lr
20000654:	20002480 	.word	0x20002480

20000658 <ins_mskd_global()>:
20000658:	4a03      	ldr	r2, [pc, #12]	; (20000668 <ins_mskd_global()+0x10>)
2000065a:	6853      	ldr	r3, [r2, #4]
2000065c:	f023 0306 	bic.w	r3, r3, #6
20000660:	f043 0302 	orr.w	r3, r3, #2
20000664:	6053      	str	r3, [r2, #4]
20000666:	4770      	bx	lr
20000668:	20002480 	.word	0x20002480

2000066c <assign_array_global()>:
2000066c:	22bd      	movs	r2, #189	; 0xbd
2000066e:	4b01      	ldr	r3, [pc, #4]	; (20000674 <assign_array_global()+0x8>)
20000670:	601a      	str	r2, [r3, #0]
20000672:	4770      	bx	lr
20000674:	200022ec 	.word	0x200022ec

20000678 <shifted_global()>:
20000678:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
2000067c:	4b03      	ldr	r3, [pc, #12]	; (2000068c <shifted_global()+0x14>)
2000067e:	4a04      	ldr	r2, [pc, #16]	; (20000690 <shifted_global()+0x18>)
20000680:	6059      	str	r1, [r3, #4]
20000682:	685b      	ldr	r3, [r3, #4]
20000684:	f3c3 6344 	ubfx	r3, r3, #25, #5
20000688:	62d3      	str	r3, [r2, #44]	; 0x2c
2000068a:	4770      	bx	lr
2000068c:	200023e0 	.word	0x200023e0
20000690:	200022c0 	.word	0x200022c0

20000694 <assign_register_global()>:
20000694:	2204      	movs	r2, #4
20000696:	4b01      	ldr	r3, [pc, #4]	; (2000069c <assign_register_global()+0x8>)
20000698:	605a      	str	r2, [r3, #4]
2000069a:	4770      	bx	lr
2000069c:	20002480 	.word	0x20002480

200006a0 <copy_bits_equ()>:
200006a0:	2240      	movs	r2, #64	; 0x40
200006a2:	4b04      	ldr	r3, [pc, #16]	; (200006b4 <copy_bits_equ()+0x14>)
200006a4:	605a      	str	r2, [r3, #4]
200006a6:	685a      	ldr	r2, [r3, #4]
200006a8:	0652      	lsls	r2, r2, #25
200006aa:	bf4c      	ite	mi
200006ac:	2202      	movmi	r2, #2
200006ae:	2204      	movpl	r2, #4
200006b0:	605a      	str	r2, [r3, #4]
200006b2:	4770      	bx	lr
200006b4:	20002480 	.word	0x20002480

200006b8 <copy_bits_neq()>:
200006b8:	2240      	movs	r2, #64	; 0x40
200006ba:	4b04      	ldr	r3, [pc, #16]	; (200006cc <copy_bits_neq()+0x14>)
200006bc:	605a      	str	r2, [r3, #4]
200006be:	685a      	ldr	r2, [r3, #4]
200006c0:	0652      	lsls	r2, r2, #25
200006c2:	bf54      	ite	pl
200006c4:	2202      	movpl	r2, #2
200006c6:	2204      	movmi	r2, #4
200006c8:	605a      	str	r2, [r3, #4]
200006ca:	4770      	bx	lr
200006cc:	20002480 	.word	0x20002480

200006d0 <copy_mskd_equ()>:
200006d0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200006d4:	4b05      	ldr	r3, [pc, #20]	; (200006ec <copy_mskd_equ()+0x1c>)
200006d6:	605a      	str	r2, [r3, #4]
200006d8:	685b      	ldr	r3, [r3, #4]
200006da:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200006de:	4293      	cmp	r3, r2
200006e0:	bf0c      	ite	eq
200006e2:	2202      	moveq	r2, #2
200006e4:	2204      	movne	r2, #4
200006e6:	4b02      	ldr	r3, [pc, #8]	; (200006f0 <copy_mskd_equ()+0x20>)
200006e8:	605a      	str	r2, [r3, #4]
200006ea:	4770      	bx	lr
200006ec:	200023e0 	.word	0x200023e0
200006f0:	20002480 	.word	0x20002480

200006f4 <copy_mskd_neq()>:
200006f4:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
200006f8:	4b05      	ldr	r3, [pc, #20]	; (20000710 <copy_mskd_neq()+0x1c>)
200006fa:	605a      	str	r2, [r3, #4]
200006fc:	685b      	ldr	r3, [r3, #4]
200006fe:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000702:	4293      	cmp	r3, r2
20000704:	bf14      	ite	ne
20000706:	2202      	movne	r2, #2
20000708:	2204      	moveq	r2, #4
2000070a:	4b02      	ldr	r3, [pc, #8]	; (20000714 <copy_mskd_neq()+0x20>)
2000070c:	605a      	str	r2, [r3, #4]
2000070e:	4770      	bx	lr
20000710:	200023e0 	.word	0x200023e0
20000714:	20002480 	.word	0x20002480

20000718 <copy_mskd_lss()>:
20000718:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
2000071c:	4b06      	ldr	r3, [pc, #24]	; (20000738 <copy_mskd_lss()+0x20>)
2000071e:	605a      	str	r2, [r3, #4]
20000720:	685b      	ldr	r3, [r3, #4]
20000722:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000726:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
2000072a:	bf34      	ite	cc
2000072c:	2202      	movcc	r2, #2
2000072e:	2204      	movcs	r2, #4
20000730:	4b02      	ldr	r3, [pc, #8]	; (2000073c <copy_mskd_lss()+0x24>)
20000732:	605a      	str	r2, [r3, #4]
20000734:	4770      	bx	lr
20000736:	bf00      	nop
20000738:	200023e0 	.word	0x200023e0
2000073c:	20002480 	.word	0x20002480

20000740 <copy_mskd_leq()>:
20000740:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000744:	4b05      	ldr	r3, [pc, #20]	; (2000075c <copy_mskd_leq()+0x1c>)
20000746:	605a      	str	r2, [r3, #4]
20000748:	685b      	ldr	r3, [r3, #4]
2000074a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000074e:	4293      	cmp	r3, r2
20000750:	bf94      	ite	ls
20000752:	2202      	movls	r2, #2
20000754:	2204      	movhi	r2, #4
20000756:	4b02      	ldr	r3, [pc, #8]	; (20000760 <copy_mskd_leq()+0x20>)
20000758:	605a      	str	r2, [r3, #4]
2000075a:	4770      	bx	lr
2000075c:	200023e0 	.word	0x200023e0
20000760:	20002480 	.word	0x20002480

20000764 <copy_mskd_gtr()>:
20000764:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000768:	4b06      	ldr	r3, [pc, #24]	; (20000784 <copy_mskd_gtr()+0x20>)
2000076a:	605a      	str	r2, [r3, #4]
2000076c:	685b      	ldr	r3, [r3, #4]
2000076e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000772:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000776:	bf8c      	ite	hi
20000778:	2202      	movhi	r2, #2
2000077a:	2204      	movls	r2, #4
2000077c:	4b02      	ldr	r3, [pc, #8]	; (20000788 <copy_mskd_gtr()+0x24>)
2000077e:	605a      	str	r2, [r3, #4]
20000780:	4770      	bx	lr
20000782:	bf00      	nop
20000784:	200023e0 	.word	0x200023e0
20000788:	20002480 	.word	0x20002480

2000078c <copy_mskd_geq()>:
2000078c:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000790:	4b05      	ldr	r3, [pc, #20]	; (200007a8 <copy_mskd_geq()+0x1c>)
20000792:	605a      	str	r2, [r3, #4]
20000794:	685b      	ldr	r3, [r3, #4]
20000796:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000079a:	4293      	cmp	r3, r2
2000079c:	bf2c      	ite	cs
2000079e:	2202      	movcs	r2, #2
200007a0:	2204      	movcc	r2, #4
200007a2:	4b02      	ldr	r3, [pc, #8]	; (200007ac <copy_mskd_geq()+0x20>)
200007a4:	605a      	str	r2, [r3, #4]
200007a6:	4770      	bx	lr
200007a8:	200023e0 	.word	0x200023e0
200007ac:	20002480 	.word	0x20002480

200007b0 <copy_shifted()>:
200007b0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200007b4:	4b05      	ldr	r3, [pc, #20]	; (200007cc <copy_shifted()+0x1c>)
200007b6:	605a      	str	r2, [r3, #4]
200007b8:	685b      	ldr	r3, [r3, #4]
200007ba:	f3c3 6344 	ubfx	r3, r3, #25, #5
200007be:	2b0b      	cmp	r3, #11
200007c0:	bf0c      	ite	eq
200007c2:	2202      	moveq	r2, #2
200007c4:	2204      	movne	r2, #4
200007c6:	4b02      	ldr	r3, [pc, #8]	; (200007d0 <copy_shifted()+0x20>)
200007c8:	605a      	str	r2, [r3, #4]
200007ca:	4770      	bx	lr
200007cc:	200023e0 	.word	0x200023e0
200007d0:	20002480 	.word	0x20002480

200007d4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>:
200007d4:	2266      	movs	r2, #102	; 0x66
200007d6:	4b01      	ldr	r3, [pc, #4]	; (200007dc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]+0x8>)
200007d8:	62da      	str	r2, [r3, #44]	; 0x2c
200007da:	4770      	bx	lr
200007dc:	200022c0 	.word	0x200022c0

200007e0 <call_pos_ref()>:
200007e0:	2105      	movs	r1, #5
200007e2:	b500      	push	{lr}
200007e4:	b081      	sub	sp, #4
200007e6:	4668      	mov	r0, sp
200007e8:	9100      	str	r1, [sp, #0]
200007ea:	f7ff fff3 	bl	200007d4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
200007ee:	4668      	mov	r0, sp
200007f0:	9100      	str	r1, [sp, #0]
200007f2:	f7ff ffef 	bl	200007d4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
200007f6:	b001      	add	sp, #4
200007f8:	f85d fb04 	ldr.w	pc, [sp], #4

200007fc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>:
200007fc:	2277      	movs	r2, #119	; 0x77
200007fe:	4b01      	ldr	r3, [pc, #4]	; (20000804 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]+0x8>)
20000800:	62da      	str	r2, [r3, #44]	; 0x2c
20000802:	4770      	bx	lr
20000804:	200022c0 	.word	0x200022c0

20000808 <call_pos_ref_global()>:
20000808:	2306      	movs	r3, #6
2000080a:	b500      	push	{lr}
2000080c:	b081      	sub	sp, #4
2000080e:	4668      	mov	r0, sp
20000810:	9300      	str	r3, [sp, #0]
20000812:	f7ff fff3 	bl	200007fc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>
20000816:	b001      	add	sp, #4
20000818:	f85d fb04 	ldr.w	pc, [sp], #4

2000081c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>:
2000081c:	2233      	movs	r2, #51	; 0x33
2000081e:	4b01      	ldr	r3, [pc, #4]	; (20000824 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]+0x8>)
20000820:	62da      	str	r2, [r3, #44]	; 0x2c
20000822:	4770      	bx	lr
20000824:	200022c0 	.word	0x200022c0

20000828 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>:
20000828:	2244      	movs	r2, #68	; 0x44
2000082a:	4b01      	ldr	r3, [pc, #4]	; (20000830 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]+0x8>)
2000082c:	62da      	str	r2, [r3, #44]	; 0x2c
2000082e:	4770      	bx	lr
20000830:	200022c0 	.word	0x200022c0

20000834 <call_pos_val()>:
20000834:	b500      	push	{lr}
20000836:	2005      	movs	r0, #5
20000838:	f7ff fff0 	bl	2000081c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>
2000083c:	2006      	movs	r0, #6
2000083e:	f85d eb04 	ldr.w	lr, [sp], #4
20000842:	e7f1      	b.n	20000828 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>

20000844 <call_pos_val_global()>:
20000844:	2006      	movs	r0, #6
20000846:	e7ef      	b.n	20000828 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>

20000848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
20000848:	4a03      	ldr	r2, [pc, #12]	; (20000858 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x10>)
2000084a:	6853      	ldr	r3, [r2, #4]
2000084c:	f023 0306 	bic.w	r3, r3, #6
20000850:	f043 0302 	orr.w	r3, r3, #2
20000854:	6053      	str	r3, [r2, #4]
20000856:	4770      	bx	lr
20000858:	20002480 	.word	0x20002480

2000085c <call_mskd_val_const()>:
2000085c:	2006      	movs	r0, #6
2000085e:	2102      	movs	r1, #2
20000860:	e7f2      	b.n	20000848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
20000862:	bf00      	nop

20000864 <call_mskd_val_var()>:
20000864:	2006      	movs	r0, #6
20000866:	2102      	movs	r1, #2
20000868:	e7ee      	b.n	20000848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
2000086a:	bf00      	nop

2000086c <call_mskd_val_global()>:
2000086c:	2006      	movs	r0, #6
2000086e:	2102      	movs	r1, #2
20000870:	e7ea      	b.n	20000848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
20000872:	bf00      	nop

20000874 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
20000874:	4a02      	ldr	r2, [pc, #8]	; (20000880 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0xc>)
20000876:	6853      	ldr	r3, [r2, #4]
20000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000087c:	6053      	str	r3, [r2, #4]
2000087e:	4770      	bx	lr
20000880:	20002480 	.word	0x20002480

20000884 <call_bits_val_const()>:
20000884:	2040      	movs	r0, #64	; 0x40
20000886:	e7f5      	b.n	20000874 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

20000888 <call_bits_val_var()>:
20000888:	2040      	movs	r0, #64	; 0x40
2000088a:	e7f3      	b.n	20000874 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

2000088c <call_bits_val_global()>:
2000088c:	2040      	movs	r0, #64	; 0x40
2000088e:	e7f1      	b.n	20000874 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

20000890 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000890:	4a02      	ldr	r2, [pc, #8]	; (2000089c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
20000892:	6853      	ldr	r3, [r2, #4]
20000894:	4318      	orrs	r0, r3
20000896:	6050      	str	r0, [r2, #4]
20000898:	4770      	bx	lr
2000089a:	bf00      	nop
2000089c:	20002480 	.word	0x20002480

200008a0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200008a0:	4a02      	ldr	r2, [pc, #8]	; (200008ac <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
200008a2:	6801      	ldr	r1, [r0, #0]
200008a4:	6853      	ldr	r3, [r2, #4]
200008a6:	430b      	orrs	r3, r1
200008a8:	6053      	str	r3, [r2, #4]
200008aa:	4770      	bx	lr
200008ac:	20002480 	.word	0x20002480

200008b0 <call_bits_ref_var()>:
200008b0:	2301      	movs	r3, #1
200008b2:	b500      	push	{lr}
200008b4:	b081      	sub	sp, #4
200008b6:	4668      	mov	r0, sp
200008b8:	9300      	str	r3, [sp, #0]
200008ba:	f7ff fff1 	bl	200008a0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200008be:	b001      	add	sp, #4
200008c0:	f85d fb04 	ldr.w	pc, [sp], #4

200008c4 <call_bits_ref_const()>:
200008c4:	2301      	movs	r3, #1
200008c6:	b500      	push	{lr}
200008c8:	b081      	sub	sp, #4
200008ca:	4668      	mov	r0, sp
200008cc:	9300      	str	r3, [sp, #0]
200008ce:	f7ff ffe7 	bl	200008a0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200008d2:	b001      	add	sp, #4
200008d4:	f85d fb04 	ldr.w	pc, [sp], #4

200008d8 <call_bits_ref_global()>:
200008d8:	2340      	movs	r3, #64	; 0x40
200008da:	b500      	push	{lr}
200008dc:	b081      	sub	sp, #4
200008de:	4668      	mov	r0, sp
200008e0:	9300      	str	r3, [sp, #0]
200008e2:	f7ff ffdd 	bl	200008a0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200008e6:	b001      	add	sp, #4
200008e8:	f85d fb04 	ldr.w	pc, [sp], #4

200008ec <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
200008ec:	4a03      	ldr	r2, [pc, #12]	; (200008fc <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
200008ee:	6853      	ldr	r3, [r2, #4]
200008f0:	ea23 0000 	bic.w	r0, r3, r0
200008f4:	4308      	orrs	r0, r1
200008f6:	6050      	str	r0, [r2, #4]
200008f8:	4770      	bx	lr
200008fa:	bf00      	nop
200008fc:	20002480 	.word	0x20002480

20000900 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
20000900:	4a05      	ldr	r2, [pc, #20]	; (20000918 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
20000902:	b410      	push	{r4}
20000904:	6853      	ldr	r3, [r2, #4]
20000906:	6804      	ldr	r4, [r0, #0]
20000908:	6841      	ldr	r1, [r0, #4]
2000090a:	ea23 0304 	bic.w	r3, r3, r4
2000090e:	430b      	orrs	r3, r1
20000910:	6053      	str	r3, [r2, #4]
20000912:	bc10      	pop	{r4}
20000914:	4770      	bx	lr
20000916:	bf00      	nop
20000918:	20002480 	.word	0x20002480

2000091c <call_mskd_ref_var()>:
2000091c:	b500      	push	{lr}
2000091e:	4b05      	ldr	r3, [pc, #20]	; (20000934 <call_mskd_ref_var()+0x18>)
20000920:	b082      	sub	sp, #8
20000922:	4668      	mov	r0, sp
20000924:	cb0c      	ldmia	r3, {r2, r3}
20000926:	e88d 000c 	stmia.w	sp, {r2, r3}
2000092a:	f7ff ffe9 	bl	20000900 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
2000092e:	b002      	add	sp, #8
20000930:	f85d fb04 	ldr.w	pc, [sp], #4
20000934:	200015f4 	.word	0x200015f4

20000938 <call_mskd_ref_const()>:
20000938:	2206      	movs	r2, #6
2000093a:	2304      	movs	r3, #4
2000093c:	b500      	push	{lr}
2000093e:	b082      	sub	sp, #8
20000940:	4668      	mov	r0, sp
20000942:	e88d 000c 	stmia.w	sp, {r2, r3}
20000946:	f7ff ffdb 	bl	20000900 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
2000094a:	b002      	add	sp, #8
2000094c:	f85d fb04 	ldr.w	pc, [sp], #4

20000950 <call_mskd_ref_global()>:
20000950:	2206      	movs	r2, #6
20000952:	2302      	movs	r3, #2
20000954:	b500      	push	{lr}
20000956:	b082      	sub	sp, #8
20000958:	4668      	mov	r0, sp
2000095a:	e88d 000c 	stmia.w	sp, {r2, r3}
2000095e:	f7ff ffcf 	bl	20000900 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
20000962:	b002      	add	sp, #8
20000964:	f85d fb04 	ldr.w	pc, [sp], #4

20000968 <periph_bits(mcu::Serial volatile*)>:
20000968:	6843      	ldr	r3, [r0, #4]
2000096a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000096e:	6043      	str	r3, [r0, #4]
20000970:	4770      	bx	lr
20000972:	bf00      	nop

20000974 <call_periph_bits()>:
20000974:	4801      	ldr	r0, [pc, #4]	; (2000097c <call_periph_bits()+0x8>)
20000976:	f7ff bff7 	b.w	20000968 <periph_bits(mcu::Serial volatile*)>
2000097a:	bf00      	nop
2000097c:	20002480 	.word	0x20002480

20000980 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000980:	6843      	ldr	r3, [r0, #4]
20000982:	4319      	orrs	r1, r3
20000984:	6041      	str	r1, [r0, #4]
20000986:	4770      	bx	lr

20000988 <call_periph_bits_val()>:
20000988:	2140      	movs	r1, #64	; 0x40
2000098a:	4801      	ldr	r0, [pc, #4]	; (20000990 <call_periph_bits_val()+0x8>)
2000098c:	f7ff bff8 	b.w	20000980 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000990:	20002480 	.word	0x20002480

20000994 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000994:	6803      	ldr	r3, [r0, #0]
20000996:	4319      	orrs	r1, r3
20000998:	6001      	str	r1, [r0, #0]
2000099a:	4770      	bx	lr

2000099c <call_reg_bits_val()>:
2000099c:	2140      	movs	r1, #64	; 0x40
2000099e:	4801      	ldr	r0, [pc, #4]	; (200009a4 <call_reg_bits_val()+0x8>)
200009a0:	f7ff bff8 	b.w	20000994 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
200009a4:	20002484 	.word	0x20002484

200009a8 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200009a8:	680a      	ldr	r2, [r1, #0]
200009aa:	6843      	ldr	r3, [r0, #4]
200009ac:	4313      	orrs	r3, r2
200009ae:	6043      	str	r3, [r0, #4]
200009b0:	4770      	bx	lr
200009b2:	bf00      	nop

200009b4 <call_periph_bits_ref()>:
200009b4:	2340      	movs	r3, #64	; 0x40
200009b6:	b500      	push	{lr}
200009b8:	b081      	sub	sp, #4
200009ba:	4669      	mov	r1, sp
200009bc:	4803      	ldr	r0, [pc, #12]	; (200009cc <call_periph_bits_ref()+0x18>)
200009be:	9300      	str	r3, [sp, #0]
200009c0:	f7ff fff2 	bl	200009a8 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200009c4:	b001      	add	sp, #4
200009c6:	f85d fb04 	ldr.w	pc, [sp], #4
200009ca:	bf00      	nop
200009cc:	20002480 	.word	0x20002480

200009d0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200009d0:	680a      	ldr	r2, [r1, #0]
200009d2:	6803      	ldr	r3, [r0, #0]
200009d4:	4313      	orrs	r3, r2
200009d6:	6003      	str	r3, [r0, #0]
200009d8:	4770      	bx	lr
200009da:	bf00      	nop

200009dc <call_reg_bits_ref()>:
200009dc:	2340      	movs	r3, #64	; 0x40
200009de:	b500      	push	{lr}
200009e0:	b081      	sub	sp, #4
200009e2:	4669      	mov	r1, sp
200009e4:	4803      	ldr	r0, [pc, #12]	; (200009f4 <call_reg_bits_ref()+0x18>)
200009e6:	9300      	str	r3, [sp, #0]
200009e8:	f7ff fff2 	bl	200009d0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200009ec:	b001      	add	sp, #4
200009ee:	f85d fb04 	ldr.w	pc, [sp], #4
200009f2:	bf00      	nop
200009f4:	20002484 	.word	0x20002484

200009f8 <periph_mskd(mcu::Serial volatile*)>:
200009f8:	6843      	ldr	r3, [r0, #4]
200009fa:	f023 0306 	bic.w	r3, r3, #6
200009fe:	f043 0302 	orr.w	r3, r3, #2
20000a02:	6043      	str	r3, [r0, #4]
20000a04:	4770      	bx	lr
20000a06:	bf00      	nop

20000a08 <call_periph_mskd()>:
20000a08:	4801      	ldr	r0, [pc, #4]	; (20000a10 <call_periph_mskd()+0x8>)
20000a0a:	f7ff bff5 	b.w	200009f8 <periph_mskd(mcu::Serial volatile*)>
20000a0e:	bf00      	nop
20000a10:	20002480 	.word	0x20002480

20000a14 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a14:	6843      	ldr	r3, [r0, #4]
20000a16:	ea23 0101 	bic.w	r1, r3, r1
20000a1a:	4311      	orrs	r1, r2
20000a1c:	6041      	str	r1, [r0, #4]
20000a1e:	4770      	bx	lr

20000a20 <call_periph_mskd_val()>:
20000a20:	2106      	movs	r1, #6
20000a22:	2202      	movs	r2, #2
20000a24:	4801      	ldr	r0, [pc, #4]	; (20000a2c <call_periph_mskd_val()+0xc>)
20000a26:	f7ff bff5 	b.w	20000a14 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a2a:	bf00      	nop
20000a2c:	20002480 	.word	0x20002480

20000a30 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a30:	6803      	ldr	r3, [r0, #0]
20000a32:	ea23 0101 	bic.w	r1, r3, r1
20000a36:	4311      	orrs	r1, r2
20000a38:	6001      	str	r1, [r0, #0]
20000a3a:	4770      	bx	lr

20000a3c <call_reg_mskd_val()>:
20000a3c:	2106      	movs	r1, #6
20000a3e:	2202      	movs	r2, #2
20000a40:	4801      	ldr	r0, [pc, #4]	; (20000a48 <call_reg_mskd_val()+0xc>)
20000a42:	f7ff bff5 	b.w	20000a30 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a46:	bf00      	nop
20000a48:	20002484 	.word	0x20002484

20000a4c <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a4c:	6843      	ldr	r3, [r0, #4]
20000a4e:	ea23 0101 	bic.w	r1, r3, r1
20000a52:	4311      	orrs	r1, r2
20000a54:	6041      	str	r1, [r0, #4]
20000a56:	4770      	bx	lr

20000a58 <call_periph_mskd_ref()>:
20000a58:	2106      	movs	r1, #6
20000a5a:	2202      	movs	r2, #2
20000a5c:	4801      	ldr	r0, [pc, #4]	; (20000a64 <call_periph_mskd_ref()+0xc>)
20000a5e:	f7ff bff5 	b.w	20000a4c <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a62:	bf00      	nop
20000a64:	20002480 	.word	0x20002480

20000a68 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a68:	6803      	ldr	r3, [r0, #0]
20000a6a:	ea23 0101 	bic.w	r1, r3, r1
20000a6e:	4311      	orrs	r1, r2
20000a70:	6001      	str	r1, [r0, #0]
20000a72:	4770      	bx	lr

20000a74 <call_reg_mskd_ref()>:
20000a74:	2106      	movs	r1, #6
20000a76:	2202      	movs	r2, #2
20000a78:	4801      	ldr	r0, [pc, #4]	; (20000a80 <call_reg_mskd_ref()+0xc>)
20000a7a:	f7ff bff5 	b.w	20000a68 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a7e:	bf00      	nop
20000a80:	20002484 	.word	0x20002484

20000a84 <return_bits()>:
20000a84:	2020      	movs	r0, #32
20000a86:	4770      	bx	lr

20000a88 <call_return_bits()>:
20000a88:	b500      	push	{lr}
20000a8a:	f7ff fffb 	bl	20000a84 <return_bits()>
20000a8e:	2820      	cmp	r0, #32
20000a90:	bf0c      	ite	eq
20000a92:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
20000a96:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
20000a9a:	4b02      	ldr	r3, [pc, #8]	; (20000aa4 <call_return_bits()+0x1c>)
20000a9c:	605a      	str	r2, [r3, #4]
20000a9e:	f85d fb04 	ldr.w	pc, [sp], #4
20000aa2:	bf00      	nop
20000aa4:	200023e0 	.word	0x200023e0

20000aa8 <return_mskd()>:
20000aa8:	2118      	movs	r1, #24
20000aaa:	2208      	movs	r2, #8
20000aac:	e880 0006 	stmia.w	r0, {r1, r2}
20000ab0:	4770      	bx	lr
20000ab2:	bf00      	nop

20000ab4 <call_return_mskd()>:
20000ab4:	b500      	push	{lr}
20000ab6:	b082      	sub	sp, #8
20000ab8:	4668      	mov	r0, sp
20000aba:	f7ff fff5 	bl	20000aa8 <return_mskd()>
20000abe:	9b00      	ldr	r3, [sp, #0]
20000ac0:	9a01      	ldr	r2, [sp, #4]
20000ac2:	2b18      	cmp	r3, #24
20000ac4:	d006      	beq.n	20000ad4 <call_return_mskd()+0x20>
20000ac6:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000aca:	4b07      	ldr	r3, [pc, #28]	; (20000ae8 <call_return_mskd()+0x34>)
20000acc:	605a      	str	r2, [r3, #4]
20000ace:	b002      	add	sp, #8
20000ad0:	f85d fb04 	ldr.w	pc, [sp], #4
20000ad4:	2a08      	cmp	r2, #8
20000ad6:	d1f6      	bne.n	20000ac6 <call_return_mskd()+0x12>
20000ad8:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000adc:	4b02      	ldr	r3, [pc, #8]	; (20000ae8 <call_return_mskd()+0x34>)
20000ade:	605a      	str	r2, [r3, #4]
20000ae0:	b002      	add	sp, #8
20000ae2:	f85d fb04 	ldr.w	pc, [sp], #4
20000ae6:	bf00      	nop
20000ae8:	200023e0 	.word	0x200023e0

20000aec <return_reg()>:
20000aec:	2240      	movs	r2, #64	; 0x40
20000aee:	4b02      	ldr	r3, [pc, #8]	; (20000af8 <return_reg()+0xc>)
20000af0:	4802      	ldr	r0, [pc, #8]	; (20000afc <return_reg()+0x10>)
20000af2:	605a      	str	r2, [r3, #4]
20000af4:	4770      	bx	lr
20000af6:	bf00      	nop
20000af8:	20002480 	.word	0x20002480
20000afc:	20002484 	.word	0x20002484

20000b00 <call_return_reg()>:
20000b00:	b500      	push	{lr}
20000b02:	f7ff fff3 	bl	20000aec <return_reg()>
20000b06:	6803      	ldr	r3, [r0, #0]
20000b08:	2b40      	cmp	r3, #64	; 0x40
20000b0a:	bf0c      	ite	eq
20000b0c:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
20000b10:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
20000b14:	4b01      	ldr	r3, [pc, #4]	; (20000b1c <call_return_reg()+0x1c>)
20000b16:	605a      	str	r2, [r3, #4]
20000b18:	f85d fb04 	ldr.w	pc, [sp], #4
20000b1c:	200023e0 	.word	0x200023e0

20000b20 <return_periph()>:
20000b20:	2340      	movs	r3, #64	; 0x40
20000b22:	4801      	ldr	r0, [pc, #4]	; (20000b28 <return_periph()+0x8>)
20000b24:	6043      	str	r3, [r0, #4]
20000b26:	4770      	bx	lr
20000b28:	20002480 	.word	0x20002480

20000b2c <call_return_periph()>:
20000b2c:	b500      	push	{lr}
20000b2e:	f7ff fff7 	bl	20000b20 <return_periph()>
20000b32:	6843      	ldr	r3, [r0, #4]
20000b34:	2b40      	cmp	r3, #64	; 0x40
20000b36:	bf0c      	ite	eq
20000b38:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
20000b3c:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
20000b40:	4b01      	ldr	r3, [pc, #4]	; (20000b48 <call_return_periph()+0x1c>)
20000b42:	605a      	str	r2, [r3, #4]
20000b44:	f85d fb04 	ldr.w	pc, [sp], #4
20000b48:	200023e0 	.word	0x200023e0

20000b4c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
20000b4c:	2805      	cmp	r0, #5
20000b4e:	d006      	beq.n	20000b5e <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
20000b50:	2806      	cmp	r0, #6
20000b52:	bf0c      	ite	eq
20000b54:	2244      	moveq	r2, #68	; 0x44
20000b56:	2255      	movne	r2, #85	; 0x55
20000b58:	4b03      	ldr	r3, [pc, #12]	; (20000b68 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
20000b5c:	4770      	bx	lr
20000b5e:	2233      	movs	r2, #51	; 0x33
20000b60:	4b01      	ldr	r3, [pc, #4]	; (20000b68 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000b62:	62da      	str	r2, [r3, #44]	; 0x2c
20000b64:	4770      	bx	lr
20000b66:	bf00      	nop
20000b68:	200022c0 	.word	0x200022c0

20000b6c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
20000b6c:	6803      	ldr	r3, [r0, #0]
20000b6e:	2b05      	cmp	r3, #5
20000b70:	d006      	beq.n	20000b80 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
20000b72:	2b06      	cmp	r3, #6
20000b74:	bf0c      	ite	eq
20000b76:	2277      	moveq	r2, #119	; 0x77
20000b78:	2288      	movne	r2, #136	; 0x88
20000b7a:	4b03      	ldr	r3, [pc, #12]	; (20000b88 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
20000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
20000b7e:	4770      	bx	lr
20000b80:	2266      	movs	r2, #102	; 0x66
20000b82:	4b01      	ldr	r3, [pc, #4]	; (20000b88 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
20000b84:	62da      	str	r2, [r3, #44]	; 0x2c
20000b86:	4770      	bx	lr
20000b88:	200022c0 	.word	0x200022c0

20000b8c <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000b8c:	4a03      	ldr	r2, [pc, #12]	; (20000b9c <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
20000b8e:	6853      	ldr	r3, [r2, #4]
20000b90:	ea23 0000 	bic.w	r0, r3, r0
20000b94:	4308      	orrs	r0, r1
20000b96:	6050      	str	r0, [r2, #4]
20000b98:	4770      	bx	lr
20000b9a:	bf00      	nop
20000b9c:	20002480 	.word	0x20002480

20000ba0 <call_range_val(unsigned int)>:
20000ba0:	0301      	lsls	r1, r0, #12
20000ba2:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000ba6:	f7ff bff1 	b.w	20000b8c <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000baa:	bf00      	nop

20000bac <call_range_val_port()>:
20000bac:	201f      	movs	r0, #31
20000bae:	f7ff bff7 	b.w	20000ba0 <call_range_val(unsigned int)>
20000bb2:	bf00      	nop

20000bb4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000bb4:	4a03      	ldr	r2, [pc, #12]	; (20000bc4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
20000bb6:	6853      	ldr	r3, [r2, #4]
20000bb8:	ea23 0000 	bic.w	r0, r3, r0
20000bbc:	4308      	orrs	r0, r1
20000bbe:	6050      	str	r0, [r2, #4]
20000bc0:	4770      	bx	lr
20000bc2:	bf00      	nop
20000bc4:	20002480 	.word	0x20002480

20000bc8 <call_range_ref(unsigned int)>:
20000bc8:	0301      	lsls	r1, r0, #12
20000bca:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000bce:	f7ff bff1 	b.w	20000bb4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000bd2:	bf00      	nop

20000bd4 <call_range_ref_port()>:
20000bd4:	200c      	movs	r0, #12
20000bd6:	f7ff bff7 	b.w	20000bc8 <call_range_ref(unsigned int)>
20000bda:	bf00      	nop

20000bdc <check_array_range_pass(unsigned int)>:
20000bdc:	2816      	cmp	r0, #22
20000bde:	bf94      	ite	ls
20000be0:	227f      	movls	r2, #127	; 0x7f
20000be2:	2283      	movhi	r2, #131	; 0x83
20000be4:	4b01      	ldr	r3, [pc, #4]	; (20000bec <check_array_range_pass(unsigned int)+0x10>)
20000be6:	62da      	str	r2, [r3, #44]	; 0x2c
20000be8:	4770      	bx	lr
20000bea:	bf00      	nop
20000bec:	200022c0 	.word	0x200022c0

20000bf0 <check_array_range_fail(unsigned int)>:
20000bf0:	2816      	cmp	r0, #22
20000bf2:	bf94      	ite	ls
20000bf4:	2295      	movls	r2, #149	; 0x95
20000bf6:	2297      	movhi	r2, #151	; 0x97
20000bf8:	4b01      	ldr	r3, [pc, #4]	; (20000c00 <check_array_range_fail(unsigned int)+0x10>)
20000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
20000bfc:	4770      	bx	lr
20000bfe:	bf00      	nop
20000c00:	200022c0 	.word	0x200022c0

20000c04 <check_bits_range_pass(unsigned int)>:
20000c04:	280f      	cmp	r0, #15
20000c06:	bf94      	ite	ls
20000c08:	229d      	movls	r2, #157	; 0x9d
20000c0a:	22a3      	movhi	r2, #163	; 0xa3
20000c0c:	4b01      	ldr	r3, [pc, #4]	; (20000c14 <check_bits_range_pass(unsigned int)+0x10>)
20000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
20000c10:	4770      	bx	lr
20000c12:	bf00      	nop
20000c14:	200022c0 	.word	0x200022c0

20000c18 <check_bits_range_fail(unsigned int)>:
20000c18:	280f      	cmp	r0, #15
20000c1a:	bf94      	ite	ls
20000c1c:	22a7      	movls	r2, #167	; 0xa7
20000c1e:	22ad      	movhi	r2, #173	; 0xad
20000c20:	4b01      	ldr	r3, [pc, #4]	; (20000c28 <check_bits_range_fail(unsigned int)+0x10>)
20000c22:	62da      	str	r2, [r3, #44]	; 0x2c
20000c24:	4770      	bx	lr
20000c26:	bf00      	nop
20000c28:	200022c0 	.word	0x200022c0

20000c2c <check_mskd_range_pass(unsigned int)>:
20000c2c:	281f      	cmp	r0, #31
20000c2e:	bf94      	ite	ls
20000c30:	22b3      	movls	r2, #179	; 0xb3
20000c32:	22b5      	movhi	r2, #181	; 0xb5
20000c34:	4b01      	ldr	r3, [pc, #4]	; (20000c3c <check_mskd_range_pass(unsigned int)+0x10>)
20000c36:	62da      	str	r2, [r3, #44]	; 0x2c
20000c38:	4770      	bx	lr
20000c3a:	bf00      	nop
20000c3c:	200022c0 	.word	0x200022c0

20000c40 <check_mskd_range_fail(unsigned int)>:
20000c40:	281f      	cmp	r0, #31
20000c42:	bf94      	ite	ls
20000c44:	22bf      	movls	r2, #191	; 0xbf
20000c46:	22c1      	movhi	r2, #193	; 0xc1
20000c48:	4b01      	ldr	r3, [pc, #4]	; (20000c50 <check_mskd_range_fail(unsigned int)+0x10>)
20000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
20000c4c:	4770      	bx	lr
20000c4e:	bf00      	nop
20000c50:	200022c0 	.word	0x200022c0

20000c54 <bits_extract_ne()>:
20000c54:	2220      	movs	r2, #32
20000c56:	4b04      	ldr	r3, [pc, #16]	; (20000c68 <bits_extract_ne()+0x14>)
20000c58:	605a      	str	r2, [r3, #4]
20000c5a:	685a      	ldr	r2, [r3, #4]
20000c5c:	2a20      	cmp	r2, #32
20000c5e:	bf14      	ite	ne
20000c60:	2202      	movne	r2, #2
20000c62:	2204      	moveq	r2, #4
20000c64:	605a      	str	r2, [r3, #4]
20000c66:	4770      	bx	lr
20000c68:	20002480 	.word	0x20002480

20000c6c <mskd_extract_geq()>:
20000c6c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000c70:	4b04      	ldr	r3, [pc, #16]	; (20000c84 <mskd_extract_geq()+0x18>)
20000c72:	605a      	str	r2, [r3, #4]
20000c74:	685b      	ldr	r3, [r3, #4]
20000c76:	4293      	cmp	r3, r2
20000c78:	bf2c      	ite	cs
20000c7a:	2220      	movcs	r2, #32
20000c7c:	2240      	movcc	r2, #64	; 0x40
20000c7e:	4b02      	ldr	r3, [pc, #8]	; (20000c88 <mskd_extract_geq()+0x1c>)
20000c80:	605a      	str	r2, [r3, #4]
20000c82:	4770      	bx	lr
20000c84:	200023e0 	.word	0x200023e0
20000c88:	20002480 	.word	0x20002480

20000c8c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
20000c8c:	b410      	push	{r4}
20000c8e:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
20000c92:	4b04      	ldr	r3, [pc, #16]	; (20000ca4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
20000c94:	4a04      	ldr	r2, [pc, #16]	; (20000ca8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
20000c96:	605c      	str	r4, [r3, #4]
20000c98:	685b      	ldr	r3, [r3, #4]
20000c9a:	bc10      	pop	{r4}
20000c9c:	4018      	ands	r0, r3
20000c9e:	40c8      	lsrs	r0, r1
20000ca0:	62d0      	str	r0, [r2, #44]	; 0x2c
20000ca2:	4770      	bx	lr
20000ca4:	200023e0 	.word	0x200023e0
20000ca8:	200022c0 	.word	0x200022c0

20000cac <call_shifted_const_val()>:
20000cac:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000cb0:	2119      	movs	r1, #25
20000cb2:	f7ff bfeb 	b.w	20000c8c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000cb6:	bf00      	nop

20000cb8 <call_shifted_var_val()>:
20000cb8:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000cbc:	2119      	movs	r1, #25
20000cbe:	f7ff bfe5 	b.w	20000c8c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000cc2:	bf00      	nop

20000cc4 <call_shifted_global_val()>:
20000cc4:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000cc8:	2119      	movs	r1, #25
20000cca:	f7ff bfdf 	b.w	20000c8c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000cce:	bf00      	nop

20000cd0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
20000cd0:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
20000cd4:	4b05      	ldr	r3, [pc, #20]	; (20000cec <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
20000cd6:	b410      	push	{r4}
20000cd8:	6059      	str	r1, [r3, #4]
20000cda:	6804      	ldr	r4, [r0, #0]
20000cdc:	685b      	ldr	r3, [r3, #4]
20000cde:	6841      	ldr	r1, [r0, #4]
20000ce0:	4023      	ands	r3, r4
20000ce2:	4a03      	ldr	r2, [pc, #12]	; (20000cf0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
20000ce4:	40cb      	lsrs	r3, r1
20000ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
20000ce8:	bc10      	pop	{r4}
20000cea:	4770      	bx	lr
20000cec:	200023e0 	.word	0x200023e0
20000cf0:	200022c0 	.word	0x200022c0

20000cf4 <call_shifted_const_ref()>:
20000cf4:	b500      	push	{lr}
20000cf6:	4b06      	ldr	r3, [pc, #24]	; (20000d10 <call_shifted_const_ref()+0x1c>)
20000cf8:	b082      	sub	sp, #8
20000cfa:	4668      	mov	r0, sp
20000cfc:	f103 0308 	add.w	r3, r3, #8
20000d00:	cb0c      	ldmia	r3, {r2, r3}
20000d02:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d06:	f7ff ffe3 	bl	20000cd0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d0a:	b002      	add	sp, #8
20000d0c:	f85d fb04 	ldr.w	pc, [sp], #4
20000d10:	200015f4 	.word	0x200015f4

20000d14 <call_shifted_var_ref()>:
20000d14:	b500      	push	{lr}
20000d16:	4b06      	ldr	r3, [pc, #24]	; (20000d30 <call_shifted_var_ref()+0x1c>)
20000d18:	b082      	sub	sp, #8
20000d1a:	4668      	mov	r0, sp
20000d1c:	f103 0310 	add.w	r3, r3, #16
20000d20:	cb0c      	ldmia	r3, {r2, r3}
20000d22:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d26:	f7ff ffd3 	bl	20000cd0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d2a:	b002      	add	sp, #8
20000d2c:	f85d fb04 	ldr.w	pc, [sp], #4
20000d30:	200015f4 	.word	0x200015f4

20000d34 <call_shifted_global_ref()>:
20000d34:	b500      	push	{lr}
20000d36:	4b06      	ldr	r3, [pc, #24]	; (20000d50 <call_shifted_global_ref()+0x1c>)
20000d38:	b082      	sub	sp, #8
20000d3a:	4668      	mov	r0, sp
20000d3c:	f103 0308 	add.w	r3, r3, #8
20000d40:	cb0c      	ldmia	r3, {r2, r3}
20000d42:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d46:	f7ff ffc3 	bl	20000cd0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d4a:	b002      	add	sp, #8
20000d4c:	f85d fb04 	ldr.w	pc, [sp], #4
20000d50:	200015f4 	.word	0x200015f4

20000d54 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
20000d54:	0643      	lsls	r3, r0, #25
20000d56:	bf4c      	ite	mi
20000d58:	2202      	movmi	r2, #2
20000d5a:	2204      	movpl	r2, #4
20000d5c:	4b01      	ldr	r3, [pc, #4]	; (20000d64 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
20000d5e:	605a      	str	r2, [r3, #4]
20000d60:	4770      	bx	lr
20000d62:	bf00      	nop
20000d64:	20002480 	.word	0x20002480

20000d68 <call_copy_bits_val()>:
20000d68:	2240      	movs	r2, #64	; 0x40
20000d6a:	4b02      	ldr	r3, [pc, #8]	; (20000d74 <call_copy_bits_val()+0xc>)
20000d6c:	605a      	str	r2, [r3, #4]
20000d6e:	6858      	ldr	r0, [r3, #4]
20000d70:	f7ff bff0 	b.w	20000d54 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
20000d74:	20002480 	.word	0x20002480

20000d78 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
20000d78:	6803      	ldr	r3, [r0, #0]
20000d7a:	065b      	lsls	r3, r3, #25
20000d7c:	bf4c      	ite	mi
20000d7e:	2202      	movmi	r2, #2
20000d80:	2204      	movpl	r2, #4
20000d82:	4b01      	ldr	r3, [pc, #4]	; (20000d88 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x10>)
20000d84:	605a      	str	r2, [r3, #4]
20000d86:	4770      	bx	lr
20000d88:	20002480 	.word	0x20002480

20000d8c <call_copy_bits_ref()>:
20000d8c:	2240      	movs	r2, #64	; 0x40
20000d8e:	b500      	push	{lr}
20000d90:	4b05      	ldr	r3, [pc, #20]	; (20000da8 <call_copy_bits_ref()+0x1c>)
20000d92:	b081      	sub	sp, #4
20000d94:	605a      	str	r2, [r3, #4]
20000d96:	685b      	ldr	r3, [r3, #4]
20000d98:	4668      	mov	r0, sp
20000d9a:	9300      	str	r3, [sp, #0]
20000d9c:	f7ff ffec 	bl	20000d78 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
20000da0:	b001      	add	sp, #4
20000da2:	f85d fb04 	ldr.w	pc, [sp], #4
20000da6:	bf00      	nop
20000da8:	20002480 	.word	0x20002480

20000dac <run>:
20000dac:	b510      	push	{r4, lr}
20000dae:	4cb3      	ldr	r4, [pc, #716]	; (2000107c <run+0x2d0>)
20000db0:	7823      	ldrb	r3, [r4, #0]
20000db2:	2b00      	cmp	r3, #0
20000db4:	f000 82e2 	beq.w	2000137c <run+0x5d0>
20000db8:	68a1      	ldr	r1, [r4, #8]
20000dba:	7b23      	ldrb	r3, [r4, #12]
20000dbc:	b91b      	cbnz	r3, 20000dc6 <run+0x1a>
20000dbe:	2201      	movs	r2, #1
20000dc0:	4baf      	ldr	r3, [pc, #700]	; (20001080 <run+0x2d4>)
20000dc2:	7322      	strb	r2, [r4, #12]
20000dc4:	6163      	str	r3, [r4, #20]
20000dc6:	7e23      	ldrb	r3, [r4, #24]
20000dc8:	b91b      	cbnz	r3, 20000dd2 <run+0x26>
20000dca:	2201      	movs	r2, #1
20000dcc:	4bad      	ldr	r3, [pc, #692]	; (20001084 <run+0x2d8>)
20000dce:	7622      	strb	r2, [r4, #24]
20000dd0:	6223      	str	r3, [r4, #32]
20000dd2:	2200      	movs	r2, #0
20000dd4:	48ac      	ldr	r0, [pc, #688]	; (20001088 <run+0x2dc>)
20000dd6:	f000 fb3f 	bl	20001458 <do_test>
20000dda:	68a1      	ldr	r1, [r4, #8]
20000ddc:	2201      	movs	r2, #1
20000dde:	48ab      	ldr	r0, [pc, #684]	; (2000108c <run+0x2e0>)
20000de0:	f000 fb3a 	bl	20001458 <do_test>
20000de4:	68a1      	ldr	r1, [r4, #8]
20000de6:	2202      	movs	r2, #2
20000de8:	48a9      	ldr	r0, [pc, #676]	; (20001090 <run+0x2e4>)
20000dea:	f000 fb35 	bl	20001458 <do_test>
20000dee:	68a1      	ldr	r1, [r4, #8]
20000df0:	2203      	movs	r2, #3
20000df2:	48a8      	ldr	r0, [pc, #672]	; (20001094 <run+0x2e8>)
20000df4:	f000 fb30 	bl	20001458 <do_test>
20000df8:	68a1      	ldr	r1, [r4, #8]
20000dfa:	2204      	movs	r2, #4
20000dfc:	48a6      	ldr	r0, [pc, #664]	; (20001098 <run+0x2ec>)
20000dfe:	f000 fb2b 	bl	20001458 <do_test>
20000e02:	68a1      	ldr	r1, [r4, #8]
20000e04:	2205      	movs	r2, #5
20000e06:	48a5      	ldr	r0, [pc, #660]	; (2000109c <run+0x2f0>)
20000e08:	f000 fb26 	bl	20001458 <do_test>
20000e0c:	68a1      	ldr	r1, [r4, #8]
20000e0e:	2206      	movs	r2, #6
20000e10:	48a3      	ldr	r0, [pc, #652]	; (200010a0 <run+0x2f4>)
20000e12:	f000 fb21 	bl	20001458 <do_test>
20000e16:	68a1      	ldr	r1, [r4, #8]
20000e18:	2207      	movs	r2, #7
20000e1a:	48a2      	ldr	r0, [pc, #648]	; (200010a4 <run+0x2f8>)
20000e1c:	f000 fb1c 	bl	20001458 <do_test>
20000e20:	68a1      	ldr	r1, [r4, #8]
20000e22:	2208      	movs	r2, #8
20000e24:	48a0      	ldr	r0, [pc, #640]	; (200010a8 <run+0x2fc>)
20000e26:	f000 fb17 	bl	20001458 <do_test>
20000e2a:	68a1      	ldr	r1, [r4, #8]
20000e2c:	2209      	movs	r2, #9
20000e2e:	489f      	ldr	r0, [pc, #636]	; (200010ac <run+0x300>)
20000e30:	f000 fb12 	bl	20001458 <do_test>
20000e34:	68a1      	ldr	r1, [r4, #8]
20000e36:	220a      	movs	r2, #10
20000e38:	489d      	ldr	r0, [pc, #628]	; (200010b0 <run+0x304>)
20000e3a:	f000 fb0d 	bl	20001458 <do_test>
20000e3e:	68a1      	ldr	r1, [r4, #8]
20000e40:	220b      	movs	r2, #11
20000e42:	489c      	ldr	r0, [pc, #624]	; (200010b4 <run+0x308>)
20000e44:	f000 fb08 	bl	20001458 <do_test>
20000e48:	68a1      	ldr	r1, [r4, #8]
20000e4a:	220c      	movs	r2, #12
20000e4c:	489a      	ldr	r0, [pc, #616]	; (200010b8 <run+0x30c>)
20000e4e:	f000 fb03 	bl	20001458 <do_test>
20000e52:	68a1      	ldr	r1, [r4, #8]
20000e54:	220d      	movs	r2, #13
20000e56:	4899      	ldr	r0, [pc, #612]	; (200010bc <run+0x310>)
20000e58:	f000 fafe 	bl	20001458 <do_test>
20000e5c:	68a1      	ldr	r1, [r4, #8]
20000e5e:	220e      	movs	r2, #14
20000e60:	4897      	ldr	r0, [pc, #604]	; (200010c0 <run+0x314>)
20000e62:	f000 faf9 	bl	20001458 <do_test>
20000e66:	68a1      	ldr	r1, [r4, #8]
20000e68:	220f      	movs	r2, #15
20000e6a:	4896      	ldr	r0, [pc, #600]	; (200010c4 <run+0x318>)
20000e6c:	f000 faf4 	bl	20001458 <do_test>
20000e70:	68a1      	ldr	r1, [r4, #8]
20000e72:	2210      	movs	r2, #16
20000e74:	4894      	ldr	r0, [pc, #592]	; (200010c8 <run+0x31c>)
20000e76:	f000 faef 	bl	20001458 <do_test>
20000e7a:	68a1      	ldr	r1, [r4, #8]
20000e7c:	2211      	movs	r2, #17
20000e7e:	4893      	ldr	r0, [pc, #588]	; (200010cc <run+0x320>)
20000e80:	f000 faea 	bl	20001458 <do_test>
20000e84:	68a1      	ldr	r1, [r4, #8]
20000e86:	2212      	movs	r2, #18
20000e88:	4891      	ldr	r0, [pc, #580]	; (200010d0 <run+0x324>)
20000e8a:	f000 fae5 	bl	20001458 <do_test>
20000e8e:	68a1      	ldr	r1, [r4, #8]
20000e90:	2213      	movs	r2, #19
20000e92:	4890      	ldr	r0, [pc, #576]	; (200010d4 <run+0x328>)
20000e94:	f000 fae0 	bl	20001458 <do_test>
20000e98:	68a1      	ldr	r1, [r4, #8]
20000e9a:	2214      	movs	r2, #20
20000e9c:	488e      	ldr	r0, [pc, #568]	; (200010d8 <run+0x32c>)
20000e9e:	f000 fadb 	bl	20001458 <do_test>
20000ea2:	68a1      	ldr	r1, [r4, #8]
20000ea4:	2215      	movs	r2, #21
20000ea6:	488d      	ldr	r0, [pc, #564]	; (200010dc <run+0x330>)
20000ea8:	f000 fad6 	bl	20001458 <do_test>
20000eac:	68a1      	ldr	r1, [r4, #8]
20000eae:	2216      	movs	r2, #22
20000eb0:	488b      	ldr	r0, [pc, #556]	; (200010e0 <run+0x334>)
20000eb2:	f000 fad1 	bl	20001458 <do_test>
20000eb6:	68a1      	ldr	r1, [r4, #8]
20000eb8:	2217      	movs	r2, #23
20000eba:	488a      	ldr	r0, [pc, #552]	; (200010e4 <run+0x338>)
20000ebc:	f000 facc 	bl	20001458 <do_test>
20000ec0:	68a1      	ldr	r1, [r4, #8]
20000ec2:	2218      	movs	r2, #24
20000ec4:	4888      	ldr	r0, [pc, #544]	; (200010e8 <run+0x33c>)
20000ec6:	f000 fac7 	bl	20001458 <do_test>
20000eca:	68a1      	ldr	r1, [r4, #8]
20000ecc:	2219      	movs	r2, #25
20000ece:	4887      	ldr	r0, [pc, #540]	; (200010ec <run+0x340>)
20000ed0:	f000 fac2 	bl	20001458 <do_test>
20000ed4:	68a1      	ldr	r1, [r4, #8]
20000ed6:	221a      	movs	r2, #26
20000ed8:	4885      	ldr	r0, [pc, #532]	; (200010f0 <run+0x344>)
20000eda:	f000 fabd 	bl	20001458 <do_test>
20000ede:	68a1      	ldr	r1, [r4, #8]
20000ee0:	221b      	movs	r2, #27
20000ee2:	4884      	ldr	r0, [pc, #528]	; (200010f4 <run+0x348>)
20000ee4:	f000 fab8 	bl	20001458 <do_test>
20000ee8:	68a1      	ldr	r1, [r4, #8]
20000eea:	221c      	movs	r2, #28
20000eec:	4882      	ldr	r0, [pc, #520]	; (200010f8 <run+0x34c>)
20000eee:	f000 fab3 	bl	20001458 <do_test>
20000ef2:	68a1      	ldr	r1, [r4, #8]
20000ef4:	221d      	movs	r2, #29
20000ef6:	4881      	ldr	r0, [pc, #516]	; (200010fc <run+0x350>)
20000ef8:	f000 faae 	bl	20001458 <do_test>
20000efc:	68a1      	ldr	r1, [r4, #8]
20000efe:	221e      	movs	r2, #30
20000f00:	487f      	ldr	r0, [pc, #508]	; (20001100 <run+0x354>)
20000f02:	f000 faa9 	bl	20001458 <do_test>
20000f06:	68a1      	ldr	r1, [r4, #8]
20000f08:	221f      	movs	r2, #31
20000f0a:	487e      	ldr	r0, [pc, #504]	; (20001104 <run+0x358>)
20000f0c:	f000 faa4 	bl	20001458 <do_test>
20000f10:	68a1      	ldr	r1, [r4, #8]
20000f12:	2220      	movs	r2, #32
20000f14:	487c      	ldr	r0, [pc, #496]	; (20001108 <run+0x35c>)
20000f16:	f000 fa9f 	bl	20001458 <do_test>
20000f1a:	68a1      	ldr	r1, [r4, #8]
20000f1c:	2221      	movs	r2, #33	; 0x21
20000f1e:	487b      	ldr	r0, [pc, #492]	; (2000110c <run+0x360>)
20000f20:	f000 fa9a 	bl	20001458 <do_test>
20000f24:	68a1      	ldr	r1, [r4, #8]
20000f26:	2222      	movs	r2, #34	; 0x22
20000f28:	4879      	ldr	r0, [pc, #484]	; (20001110 <run+0x364>)
20000f2a:	f000 fa95 	bl	20001458 <do_test>
20000f2e:	68a1      	ldr	r1, [r4, #8]
20000f30:	2223      	movs	r2, #35	; 0x23
20000f32:	4878      	ldr	r0, [pc, #480]	; (20001114 <run+0x368>)
20000f34:	f000 fa90 	bl	20001458 <do_test>
20000f38:	68a1      	ldr	r1, [r4, #8]
20000f3a:	2224      	movs	r2, #36	; 0x24
20000f3c:	4876      	ldr	r0, [pc, #472]	; (20001118 <run+0x36c>)
20000f3e:	f000 fa8b 	bl	20001458 <do_test>
20000f42:	6961      	ldr	r1, [r4, #20]
20000f44:	2225      	movs	r2, #37	; 0x25
20000f46:	4875      	ldr	r0, [pc, #468]	; (2000111c <run+0x370>)
20000f48:	f000 fa86 	bl	20001458 <do_test>
20000f4c:	6961      	ldr	r1, [r4, #20]
20000f4e:	2226      	movs	r2, #38	; 0x26
20000f50:	4873      	ldr	r0, [pc, #460]	; (20001120 <run+0x374>)
20000f52:	f000 fa81 	bl	20001458 <do_test>
20000f56:	6961      	ldr	r1, [r4, #20]
20000f58:	2227      	movs	r2, #39	; 0x27
20000f5a:	4872      	ldr	r0, [pc, #456]	; (20001124 <run+0x378>)
20000f5c:	f000 fa7c 	bl	20001458 <do_test>
20000f60:	68a1      	ldr	r1, [r4, #8]
20000f62:	2228      	movs	r2, #40	; 0x28
20000f64:	4870      	ldr	r0, [pc, #448]	; (20001128 <run+0x37c>)
20000f66:	f000 fa77 	bl	20001458 <do_test>
20000f6a:	68a1      	ldr	r1, [r4, #8]
20000f6c:	2229      	movs	r2, #41	; 0x29
20000f6e:	486f      	ldr	r0, [pc, #444]	; (2000112c <run+0x380>)
20000f70:	f000 fa72 	bl	20001458 <do_test>
20000f74:	68a1      	ldr	r1, [r4, #8]
20000f76:	222a      	movs	r2, #42	; 0x2a
20000f78:	486d      	ldr	r0, [pc, #436]	; (20001130 <run+0x384>)
20000f7a:	f000 fa6d 	bl	20001458 <do_test>
20000f7e:	68a1      	ldr	r1, [r4, #8]
20000f80:	222b      	movs	r2, #43	; 0x2b
20000f82:	486c      	ldr	r0, [pc, #432]	; (20001134 <run+0x388>)
20000f84:	f000 fa68 	bl	20001458 <do_test>
20000f88:	68a1      	ldr	r1, [r4, #8]
20000f8a:	222c      	movs	r2, #44	; 0x2c
20000f8c:	486a      	ldr	r0, [pc, #424]	; (20001138 <run+0x38c>)
20000f8e:	f000 fa63 	bl	20001458 <do_test>
20000f92:	6a21      	ldr	r1, [r4, #32]
20000f94:	222d      	movs	r2, #45	; 0x2d
20000f96:	4869      	ldr	r0, [pc, #420]	; (2000113c <run+0x390>)
20000f98:	f000 fa5e 	bl	20001458 <do_test>
20000f9c:	68a1      	ldr	r1, [r4, #8]
20000f9e:	222e      	movs	r2, #46	; 0x2e
20000fa0:	4867      	ldr	r0, [pc, #412]	; (20001140 <run+0x394>)
20000fa2:	f000 fa59 	bl	20001458 <do_test>
20000fa6:	68a1      	ldr	r1, [r4, #8]
20000fa8:	222f      	movs	r2, #47	; 0x2f
20000faa:	4866      	ldr	r0, [pc, #408]	; (20001144 <run+0x398>)
20000fac:	f000 fa54 	bl	20001458 <do_test>
20000fb0:	68a1      	ldr	r1, [r4, #8]
20000fb2:	2230      	movs	r2, #48	; 0x30
20000fb4:	4864      	ldr	r0, [pc, #400]	; (20001148 <run+0x39c>)
20000fb6:	f000 fa4f 	bl	20001458 <do_test>
20000fba:	68a1      	ldr	r1, [r4, #8]
20000fbc:	2231      	movs	r2, #49	; 0x31
20000fbe:	4863      	ldr	r0, [pc, #396]	; (2000114c <run+0x3a0>)
20000fc0:	f000 fa4a 	bl	20001458 <do_test>
20000fc4:	68a1      	ldr	r1, [r4, #8]
20000fc6:	2232      	movs	r2, #50	; 0x32
20000fc8:	4861      	ldr	r0, [pc, #388]	; (20001150 <run+0x3a4>)
20000fca:	f000 fa45 	bl	20001458 <do_test>
20000fce:	68a1      	ldr	r1, [r4, #8]
20000fd0:	2233      	movs	r2, #51	; 0x33
20000fd2:	4860      	ldr	r0, [pc, #384]	; (20001154 <run+0x3a8>)
20000fd4:	f000 fa40 	bl	20001458 <do_test>
20000fd8:	68a1      	ldr	r1, [r4, #8]
20000fda:	2234      	movs	r2, #52	; 0x34
20000fdc:	485e      	ldr	r0, [pc, #376]	; (20001158 <run+0x3ac>)
20000fde:	f000 fa3b 	bl	20001458 <do_test>
20000fe2:	68a1      	ldr	r1, [r4, #8]
20000fe4:	2235      	movs	r2, #53	; 0x35
20000fe6:	485d      	ldr	r0, [pc, #372]	; (2000115c <run+0x3b0>)
20000fe8:	f000 fa36 	bl	20001458 <do_test>
20000fec:	68a1      	ldr	r1, [r4, #8]
20000fee:	2236      	movs	r2, #54	; 0x36
20000ff0:	485b      	ldr	r0, [pc, #364]	; (20001160 <run+0x3b4>)
20000ff2:	f000 fa31 	bl	20001458 <do_test>
20000ff6:	68a1      	ldr	r1, [r4, #8]
20000ff8:	2237      	movs	r2, #55	; 0x37
20000ffa:	485a      	ldr	r0, [pc, #360]	; (20001164 <run+0x3b8>)
20000ffc:	f000 fa2c 	bl	20001458 <do_test>
20001000:	68a1      	ldr	r1, [r4, #8]
20001002:	2238      	movs	r2, #56	; 0x38
20001004:	4858      	ldr	r0, [pc, #352]	; (20001168 <run+0x3bc>)
20001006:	f000 fa27 	bl	20001458 <do_test>
2000100a:	68a1      	ldr	r1, [r4, #8]
2000100c:	2239      	movs	r2, #57	; 0x39
2000100e:	4857      	ldr	r0, [pc, #348]	; (2000116c <run+0x3c0>)
20001010:	f000 fa22 	bl	20001458 <do_test>
20001014:	68a1      	ldr	r1, [r4, #8]
20001016:	223a      	movs	r2, #58	; 0x3a
20001018:	4855      	ldr	r0, [pc, #340]	; (20001170 <run+0x3c4>)
2000101a:	f000 fa1d 	bl	20001458 <do_test>
2000101e:	68a1      	ldr	r1, [r4, #8]
20001020:	223b      	movs	r2, #59	; 0x3b
20001022:	4854      	ldr	r0, [pc, #336]	; (20001174 <run+0x3c8>)
20001024:	f000 fa18 	bl	20001458 <do_test>
20001028:	68a1      	ldr	r1, [r4, #8]
2000102a:	223c      	movs	r2, #60	; 0x3c
2000102c:	4852      	ldr	r0, [pc, #328]	; (20001178 <run+0x3cc>)
2000102e:	f000 fa13 	bl	20001458 <do_test>
20001032:	68a1      	ldr	r1, [r4, #8]
20001034:	223d      	movs	r2, #61	; 0x3d
20001036:	4851      	ldr	r0, [pc, #324]	; (2000117c <run+0x3d0>)
20001038:	f000 fa0e 	bl	20001458 <do_test>
2000103c:	68a1      	ldr	r1, [r4, #8]
2000103e:	223e      	movs	r2, #62	; 0x3e
20001040:	484f      	ldr	r0, [pc, #316]	; (20001180 <run+0x3d4>)
20001042:	f000 fa09 	bl	20001458 <do_test>
20001046:	68a1      	ldr	r1, [r4, #8]
20001048:	223f      	movs	r2, #63	; 0x3f
2000104a:	484e      	ldr	r0, [pc, #312]	; (20001184 <run+0x3d8>)
2000104c:	f000 fa04 	bl	20001458 <do_test>
20001050:	6961      	ldr	r1, [r4, #20]
20001052:	2240      	movs	r2, #64	; 0x40
20001054:	484c      	ldr	r0, [pc, #304]	; (20001188 <run+0x3dc>)
20001056:	f000 f9ff 	bl	20001458 <do_test>
2000105a:	6961      	ldr	r1, [r4, #20]
2000105c:	2241      	movs	r2, #65	; 0x41
2000105e:	484b      	ldr	r0, [pc, #300]	; (2000118c <run+0x3e0>)
20001060:	f000 f9fa 	bl	20001458 <do_test>
20001064:	6961      	ldr	r1, [r4, #20]
20001066:	2242      	movs	r2, #66	; 0x42
20001068:	4849      	ldr	r0, [pc, #292]	; (20001190 <run+0x3e4>)
2000106a:	f000 f9f5 	bl	20001458 <do_test>
2000106e:	68a1      	ldr	r1, [r4, #8]
20001070:	2243      	movs	r2, #67	; 0x43
20001072:	4848      	ldr	r0, [pc, #288]	; (20001194 <run+0x3e8>)
20001074:	f000 f9f0 	bl	20001458 <do_test>
20001078:	e08e      	b.n	20001198 <run+0x3ec>
2000107a:	bf00      	nop
2000107c:	2000160c 	.word	0x2000160c
20001080:	200023e4 	.word	0x200023e4
20001084:	200022ec 	.word	0x200022ec
20001088:	200000ed 	.word	0x200000ed
2000108c:	200000f9 	.word	0x200000f9
20001090:	20000105 	.word	0x20000105
20001094:	20000115 	.word	0x20000115
20001098:	20000125 	.word	0x20000125
2000109c:	20000135 	.word	0x20000135
200010a0:	20000145 	.word	0x20000145
200010a4:	20000155 	.word	0x20000155
200010a8:	20000165 	.word	0x20000165
200010ac:	20000175 	.word	0x20000175
200010b0:	20000185 	.word	0x20000185
200010b4:	20000191 	.word	0x20000191
200010b8:	2000019d 	.word	0x2000019d
200010bc:	200001a9 	.word	0x200001a9
200010c0:	200001b5 	.word	0x200001b5
200010c4:	200001c5 	.word	0x200001c5
200010c8:	200001d5 	.word	0x200001d5
200010cc:	200001e5 	.word	0x200001e5
200010d0:	200001f5 	.word	0x200001f5
200010d4:	20000209 	.word	0x20000209
200010d8:	2000021d 	.word	0x2000021d
200010dc:	2000022d 	.word	0x2000022d
200010e0:	2000023d 	.word	0x2000023d
200010e4:	20000255 	.word	0x20000255
200010e8:	2000026d 	.word	0x2000026d
200010ec:	20000279 	.word	0x20000279
200010f0:	20000285 	.word	0x20000285
200010f4:	20000295 	.word	0x20000295
200010f8:	200002a5 	.word	0x200002a5
200010fc:	200002b1 	.word	0x200002b1
20001100:	200002bd 	.word	0x200002bd
20001104:	200002c9 	.word	0x200002c9
20001108:	200002d5 	.word	0x200002d5
2000110c:	200002e5 	.word	0x200002e5
20001110:	200002f9 	.word	0x200002f9
20001114:	20000321 	.word	0x20000321
20001118:	2000033d 	.word	0x2000033d
2000111c:	20000361 	.word	0x20000361
20001120:	20000379 	.word	0x20000379
20001124:	2000039d 	.word	0x2000039d
20001128:	200003c1 	.word	0x200003c1
2000112c:	200003f1 	.word	0x200003f1
20001130:	2000041d 	.word	0x2000041d
20001134:	20000441 	.word	0x20000441
20001138:	20000459 	.word	0x20000459
2000113c:	2000046d 	.word	0x2000046d
20001140:	20000885 	.word	0x20000885
20001144:	20000889 	.word	0x20000889
20001148:	200008c5 	.word	0x200008c5
2000114c:	200008b1 	.word	0x200008b1
20001150:	2000085d 	.word	0x2000085d
20001154:	20000865 	.word	0x20000865
20001158:	20000939 	.word	0x20000939
2000115c:	2000091d 	.word	0x2000091d
20001160:	20000975 	.word	0x20000975
20001164:	20000989 	.word	0x20000989
20001168:	2000099d 	.word	0x2000099d
2000116c:	200009b5 	.word	0x200009b5
20001170:	200009dd 	.word	0x200009dd
20001174:	20000a09 	.word	0x20000a09
20001178:	20000a21 	.word	0x20000a21
2000117c:	20000a3d 	.word	0x20000a3d
20001180:	20000a59 	.word	0x20000a59
20001184:	20000a75 	.word	0x20000a75
20001188:	20000a89 	.word	0x20000a89
2000118c:	20000ab5 	.word	0x20000ab5
20001190:	20000b01 	.word	0x20000b01
20001194:	20000b2d 	.word	0x20000b2d
20001198:	6a21      	ldr	r1, [r4, #32]
2000119a:	2244      	movs	r2, #68	; 0x44
2000119c:	487a      	ldr	r0, [pc, #488]	; (20001388 <run+0x5dc>)
2000119e:	f000 f95b 	bl	20001458 <do_test>
200011a2:	6a21      	ldr	r1, [r4, #32]
200011a4:	2245      	movs	r2, #69	; 0x45
200011a6:	4879      	ldr	r0, [pc, #484]	; (2000138c <run+0x5e0>)
200011a8:	f000 f956 	bl	20001458 <do_test>
200011ac:	68a1      	ldr	r1, [r4, #8]
200011ae:	2246      	movs	r2, #70	; 0x46
200011b0:	4877      	ldr	r0, [pc, #476]	; (20001390 <run+0x5e4>)
200011b2:	f000 f951 	bl	20001458 <do_test>
200011b6:	68a1      	ldr	r1, [r4, #8]
200011b8:	2247      	movs	r2, #71	; 0x47
200011ba:	4876      	ldr	r0, [pc, #472]	; (20001394 <run+0x5e8>)
200011bc:	f000 f94c 	bl	20001458 <do_test>
200011c0:	6a21      	ldr	r1, [r4, #32]
200011c2:	2248      	movs	r2, #72	; 0x48
200011c4:	4874      	ldr	r0, [pc, #464]	; (20001398 <run+0x5ec>)
200011c6:	f000 f947 	bl	20001458 <do_test>
200011ca:	6a21      	ldr	r1, [r4, #32]
200011cc:	2249      	movs	r2, #73	; 0x49
200011ce:	4873      	ldr	r0, [pc, #460]	; (2000139c <run+0x5f0>)
200011d0:	f000 f942 	bl	20001458 <do_test>
200011d4:	68a1      	ldr	r1, [r4, #8]
200011d6:	224a      	movs	r2, #74	; 0x4a
200011d8:	4871      	ldr	r0, [pc, #452]	; (200013a0 <run+0x5f4>)
200011da:	f000 f93d 	bl	20001458 <do_test>
200011de:	68a1      	ldr	r1, [r4, #8]
200011e0:	224b      	movs	r2, #75	; 0x4b
200011e2:	4870      	ldr	r0, [pc, #448]	; (200013a4 <run+0x5f8>)
200011e4:	f000 f938 	bl	20001458 <do_test>
200011e8:	68a1      	ldr	r1, [r4, #8]
200011ea:	224c      	movs	r2, #76	; 0x4c
200011ec:	486e      	ldr	r0, [pc, #440]	; (200013a8 <run+0x5fc>)
200011ee:	f000 f933 	bl	20001458 <do_test>
200011f2:	68a1      	ldr	r1, [r4, #8]
200011f4:	224d      	movs	r2, #77	; 0x4d
200011f6:	486d      	ldr	r0, [pc, #436]	; (200013ac <run+0x600>)
200011f8:	f000 f92e 	bl	20001458 <do_test>
200011fc:	68a1      	ldr	r1, [r4, #8]
200011fe:	224e      	movs	r2, #78	; 0x4e
20001200:	486b      	ldr	r0, [pc, #428]	; (200013b0 <run+0x604>)
20001202:	f000 f929 	bl	20001458 <do_test>
20001206:	68a1      	ldr	r1, [r4, #8]
20001208:	224f      	movs	r2, #79	; 0x4f
2000120a:	486a      	ldr	r0, [pc, #424]	; (200013b4 <run+0x608>)
2000120c:	f000 f924 	bl	20001458 <do_test>
20001210:	68a1      	ldr	r1, [r4, #8]
20001212:	2250      	movs	r2, #80	; 0x50
20001214:	4868      	ldr	r0, [pc, #416]	; (200013b8 <run+0x60c>)
20001216:	f000 f91f 	bl	20001458 <do_test>
2000121a:	68a1      	ldr	r1, [r4, #8]
2000121c:	2251      	movs	r2, #81	; 0x51
2000121e:	4866      	ldr	r0, [pc, #408]	; (200013b8 <run+0x60c>)
20001220:	f000 f91a 	bl	20001458 <do_test>
20001224:	68a1      	ldr	r1, [r4, #8]
20001226:	2252      	movs	r2, #82	; 0x52
20001228:	4864      	ldr	r0, [pc, #400]	; (200013bc <run+0x610>)
2000122a:	f000 f915 	bl	20001458 <do_test>
2000122e:	68a1      	ldr	r1, [r4, #8]
20001230:	2253      	movs	r2, #83	; 0x53
20001232:	4863      	ldr	r0, [pc, #396]	; (200013c0 <run+0x614>)
20001234:	f000 f910 	bl	20001458 <do_test>
20001238:	68a1      	ldr	r1, [r4, #8]
2000123a:	2254      	movs	r2, #84	; 0x54
2000123c:	4861      	ldr	r0, [pc, #388]	; (200013c4 <run+0x618>)
2000123e:	f000 f90b 	bl	20001458 <do_test>
20001242:	68a1      	ldr	r1, [r4, #8]
20001244:	2255      	movs	r2, #85	; 0x55
20001246:	4860      	ldr	r0, [pc, #384]	; (200013c8 <run+0x61c>)
20001248:	f000 f906 	bl	20001458 <do_test>
2000124c:	68a1      	ldr	r1, [r4, #8]
2000124e:	2256      	movs	r2, #86	; 0x56
20001250:	485e      	ldr	r0, [pc, #376]	; (200013cc <run+0x620>)
20001252:	f000 f901 	bl	20001458 <do_test>
20001256:	68a1      	ldr	r1, [r4, #8]
20001258:	2257      	movs	r2, #87	; 0x57
2000125a:	485b      	ldr	r0, [pc, #364]	; (200013c8 <run+0x61c>)
2000125c:	f000 f8fc 	bl	20001458 <do_test>
20001260:	68a1      	ldr	r1, [r4, #8]
20001262:	2258      	movs	r2, #88	; 0x58
20001264:	485a      	ldr	r0, [pc, #360]	; (200013d0 <run+0x624>)
20001266:	f000 f8f7 	bl	20001458 <do_test>
2000126a:	68a1      	ldr	r1, [r4, #8]
2000126c:	2259      	movs	r2, #89	; 0x59
2000126e:	4859      	ldr	r0, [pc, #356]	; (200013d4 <run+0x628>)
20001270:	f000 f8f2 	bl	20001458 <do_test>
20001274:	6a21      	ldr	r1, [r4, #32]
20001276:	225a      	movs	r2, #90	; 0x5a
20001278:	4857      	ldr	r0, [pc, #348]	; (200013d8 <run+0x62c>)
2000127a:	f000 f8ed 	bl	20001458 <do_test>
2000127e:	6a21      	ldr	r1, [r4, #32]
20001280:	225b      	movs	r2, #91	; 0x5b
20001282:	4856      	ldr	r0, [pc, #344]	; (200013dc <run+0x630>)
20001284:	f000 f8e8 	bl	20001458 <do_test>
20001288:	68a1      	ldr	r1, [r4, #8]
2000128a:	225c      	movs	r2, #92	; 0x5c
2000128c:	4854      	ldr	r0, [pc, #336]	; (200013e0 <run+0x634>)
2000128e:	f000 f8e3 	bl	20001458 <do_test>
20001292:	6a21      	ldr	r1, [r4, #32]
20001294:	225d      	movs	r2, #93	; 0x5d
20001296:	4853      	ldr	r0, [pc, #332]	; (200013e4 <run+0x638>)
20001298:	f000 f8de 	bl	20001458 <do_test>
2000129c:	6a21      	ldr	r1, [r4, #32]
2000129e:	225e      	movs	r2, #94	; 0x5e
200012a0:	4851      	ldr	r0, [pc, #324]	; (200013e8 <run+0x63c>)
200012a2:	f000 f8d9 	bl	20001458 <do_test>
200012a6:	68a1      	ldr	r1, [r4, #8]
200012a8:	225f      	movs	r2, #95	; 0x5f
200012aa:	4850      	ldr	r0, [pc, #320]	; (200013ec <run+0x640>)
200012ac:	f000 f8d4 	bl	20001458 <do_test>
200012b0:	68a1      	ldr	r1, [r4, #8]
200012b2:	2260      	movs	r2, #96	; 0x60
200012b4:	484e      	ldr	r0, [pc, #312]	; (200013f0 <run+0x644>)
200012b6:	f000 f8cf 	bl	20001458 <do_test>
200012ba:	68a1      	ldr	r1, [r4, #8]
200012bc:	2261      	movs	r2, #97	; 0x61
200012be:	484d      	ldr	r0, [pc, #308]	; (200013f4 <run+0x648>)
200012c0:	f000 f8ca 	bl	20001458 <do_test>
200012c4:	68a1      	ldr	r1, [r4, #8]
200012c6:	2262      	movs	r2, #98	; 0x62
200012c8:	484b      	ldr	r0, [pc, #300]	; (200013f8 <run+0x64c>)
200012ca:	f000 f8c5 	bl	20001458 <do_test>
200012ce:	6a21      	ldr	r1, [r4, #32]
200012d0:	2263      	movs	r2, #99	; 0x63
200012d2:	484a      	ldr	r0, [pc, #296]	; (200013fc <run+0x650>)
200012d4:	f000 f8c0 	bl	20001458 <do_test>
200012d8:	6a21      	ldr	r1, [r4, #32]
200012da:	2264      	movs	r2, #100	; 0x64
200012dc:	4848      	ldr	r0, [pc, #288]	; (20001400 <run+0x654>)
200012de:	f000 f8bb 	bl	20001458 <do_test>
200012e2:	6a21      	ldr	r1, [r4, #32]
200012e4:	2265      	movs	r2, #101	; 0x65
200012e6:	4847      	ldr	r0, [pc, #284]	; (20001404 <run+0x658>)
200012e8:	f000 f8b6 	bl	20001458 <do_test>
200012ec:	6a21      	ldr	r1, [r4, #32]
200012ee:	2266      	movs	r2, #102	; 0x66
200012f0:	4845      	ldr	r0, [pc, #276]	; (20001408 <run+0x65c>)
200012f2:	f000 f8b1 	bl	20001458 <do_test>
200012f6:	6a21      	ldr	r1, [r4, #32]
200012f8:	2267      	movs	r2, #103	; 0x67
200012fa:	4844      	ldr	r0, [pc, #272]	; (2000140c <run+0x660>)
200012fc:	f000 f8ac 	bl	20001458 <do_test>
20001300:	6a21      	ldr	r1, [r4, #32]
20001302:	2268      	movs	r2, #104	; 0x68
20001304:	4842      	ldr	r0, [pc, #264]	; (20001410 <run+0x664>)
20001306:	f000 f8a7 	bl	20001458 <do_test>
2000130a:	68a1      	ldr	r1, [r4, #8]
2000130c:	2269      	movs	r2, #105	; 0x69
2000130e:	4841      	ldr	r0, [pc, #260]	; (20001414 <run+0x668>)
20001310:	f000 f8a2 	bl	20001458 <do_test>
20001314:	68a1      	ldr	r1, [r4, #8]
20001316:	226a      	movs	r2, #106	; 0x6a
20001318:	483f      	ldr	r0, [pc, #252]	; (20001418 <run+0x66c>)
2000131a:	f000 f89d 	bl	20001458 <do_test>
2000131e:	68a1      	ldr	r1, [r4, #8]
20001320:	226b      	movs	r2, #107	; 0x6b
20001322:	483e      	ldr	r0, [pc, #248]	; (2000141c <run+0x670>)
20001324:	f000 f898 	bl	20001458 <do_test>
20001328:	68a1      	ldr	r1, [r4, #8]
2000132a:	226c      	movs	r2, #108	; 0x6c
2000132c:	483c      	ldr	r0, [pc, #240]	; (20001420 <run+0x674>)
2000132e:	f000 f893 	bl	20001458 <do_test>
20001332:	68a1      	ldr	r1, [r4, #8]
20001334:	226d      	movs	r2, #109	; 0x6d
20001336:	483b      	ldr	r0, [pc, #236]	; (20001424 <run+0x678>)
20001338:	f000 f88e 	bl	20001458 <do_test>
2000133c:	68a1      	ldr	r1, [r4, #8]
2000133e:	226e      	movs	r2, #110	; 0x6e
20001340:	4839      	ldr	r0, [pc, #228]	; (20001428 <run+0x67c>)
20001342:	f000 f889 	bl	20001458 <do_test>
20001346:	68a1      	ldr	r1, [r4, #8]
20001348:	226f      	movs	r2, #111	; 0x6f
2000134a:	4838      	ldr	r0, [pc, #224]	; (2000142c <run+0x680>)
2000134c:	f000 f884 	bl	20001458 <do_test>
20001350:	68a1      	ldr	r1, [r4, #8]
20001352:	2270      	movs	r2, #112	; 0x70
20001354:	4836      	ldr	r0, [pc, #216]	; (20001430 <run+0x684>)
20001356:	f000 f87f 	bl	20001458 <do_test>
2000135a:	68a1      	ldr	r1, [r4, #8]
2000135c:	2271      	movs	r2, #113	; 0x71
2000135e:	4835      	ldr	r0, [pc, #212]	; (20001434 <run+0x688>)
20001360:	f000 f87a 	bl	20001458 <do_test>
20001364:	68a1      	ldr	r1, [r4, #8]
20001366:	2272      	movs	r2, #114	; 0x72
20001368:	4833      	ldr	r0, [pc, #204]	; (20001438 <run+0x68c>)
2000136a:	f000 f875 	bl	20001458 <do_test>
2000136e:	68a1      	ldr	r1, [r4, #8]
20001370:	2273      	movs	r2, #115	; 0x73
20001372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20001376:	4831      	ldr	r0, [pc, #196]	; (2000143c <run+0x690>)
20001378:	f000 b86e 	b.w	20001458 <do_test>
2000137c:	2301      	movs	r3, #1
2000137e:	4930      	ldr	r1, [pc, #192]	; (20001440 <run+0x694>)
20001380:	7023      	strb	r3, [r4, #0]
20001382:	60a1      	str	r1, [r4, #8]
20001384:	e519      	b.n	20000dba <run+0xe>
20001386:	bf00      	nop
20001388:	20000835 	.word	0x20000835
2000138c:	200007e1 	.word	0x200007e1
20001390:	20000bad 	.word	0x20000bad
20001394:	20000bd5 	.word	0x20000bd5
20001398:	20000489 	.word	0x20000489
2000139c:	200004a5 	.word	0x200004a5
200013a0:	200004c1 	.word	0x200004c1
200013a4:	200004e9 	.word	0x200004e9
200013a8:	20000521 	.word	0x20000521
200013ac:	20000549 	.word	0x20000549
200013b0:	20000581 	.word	0x20000581
200013b4:	2000058d 	.word	0x2000058d
200013b8:	20000599 	.word	0x20000599
200013bc:	200005b1 	.word	0x200005b1
200013c0:	200005c9 	.word	0x200005c9
200013c4:	200005e1 	.word	0x200005e1
200013c8:	20000605 	.word	0x20000605
200013cc:	20000625 	.word	0x20000625
200013d0:	20000649 	.word	0x20000649
200013d4:	20000659 	.word	0x20000659
200013d8:	2000066d 	.word	0x2000066d
200013dc:	20000679 	.word	0x20000679
200013e0:	20000695 	.word	0x20000695
200013e4:	20000845 	.word	0x20000845
200013e8:	20000809 	.word	0x20000809
200013ec:	2000088d 	.word	0x2000088d
200013f0:	200008d9 	.word	0x200008d9
200013f4:	2000086d 	.word	0x2000086d
200013f8:	20000951 	.word	0x20000951
200013fc:	20000cad 	.word	0x20000cad
20001400:	20000cb9 	.word	0x20000cb9
20001404:	20000cc5 	.word	0x20000cc5
20001408:	20000cf5 	.word	0x20000cf5
2000140c:	20000d15 	.word	0x20000d15
20001410:	20000d35 	.word	0x20000d35
20001414:	200006a1 	.word	0x200006a1
20001418:	200006b9 	.word	0x200006b9
2000141c:	200006d1 	.word	0x200006d1
20001420:	200006f5 	.word	0x200006f5
20001424:	20000719 	.word	0x20000719
20001428:	20000741 	.word	0x20000741
2000142c:	20000765 	.word	0x20000765
20001430:	2000078d 	.word	0x2000078d
20001434:	200007b1 	.word	0x200007b1
20001438:	20000d69 	.word	0x20000d69
2000143c:	20000d8d 	.word	0x20000d8d
20001440:	20002484 	.word	0x20002484

20001444 <memset>:
20001444:	4402      	add	r2, r0
20001446:	4290      	cmp	r0, r2
20001448:	d205      	bcs.n	20001456 <memset+0x12>
2000144a:	4603      	mov	r3, r0
2000144c:	b2c9      	uxtb	r1, r1
2000144e:	f803 1b01 	strb.w	r1, [r3], #1
20001452:	429a      	cmp	r2, r3
20001454:	d1fb      	bne.n	2000144e <memset+0xa>
20001456:	4770      	bx	lr

20001458 <do_test>:
20001458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000145c:	2300      	movs	r3, #0
2000145e:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
20001462:	2605      	movs	r6, #5
20001464:	4c15      	ldr	r4, [pc, #84]	; (200014bc <do_test+0x64>)
20001466:	4682      	mov	sl, r0
20001468:	6023      	str	r3, [r4, #0]
2000146a:	60a3      	str	r3, [r4, #8]
2000146c:	6026      	str	r6, [r4, #0]
2000146e:	6065      	str	r5, [r4, #4]
20001470:	68a3      	ldr	r3, [r4, #8]
20001472:	460f      	mov	r7, r1
20001474:	4615      	mov	r5, r2
20001476:	b91b      	cbnz	r3, 20001480 <do_test+0x28>
20001478:	bf00      	nop
2000147a:	68a3      	ldr	r3, [r4, #8]
2000147c:	2b00      	cmp	r3, #0
2000147e:	d0fb      	beq.n	20001478 <do_test+0x20>
20001480:	2300      	movs	r3, #0
20001482:	f8df 8038 	ldr.w	r8, [pc, #56]	; 200014bc <do_test+0x64>
20001486:	f8df 903c 	ldr.w	r9, [pc, #60]	; 200014c4 <do_test+0x6c>
2000148a:	f8d8 6008 	ldr.w	r6, [r8, #8]
2000148e:	603b      	str	r3, [r7, #0]
20001490:	47d0      	blx	sl
20001492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001496:	683a      	ldr	r2, [r7, #0]
20001498:	006c      	lsls	r4, r5, #1
2000149a:	f849 2024 	str.w	r2, [r9, r4, lsl #2]
2000149e:	603b      	str	r3, [r7, #0]
200014a0:	47d0      	blx	sl
200014a2:	683a      	ldr	r2, [r7, #0]
200014a4:	4b06      	ldr	r3, [pc, #24]	; (200014c0 <do_test+0x68>)
200014a6:	3401      	adds	r4, #1
200014a8:	6819      	ldr	r1, [r3, #0]
200014aa:	f849 2024 	str.w	r2, [r9, r4, lsl #2]
200014ae:	f8d8 2008 	ldr.w	r2, [r8, #8]
200014b2:	440e      	add	r6, r1
200014b4:	1ab6      	subs	r6, r6, r2
200014b6:	601e      	str	r6, [r3, #0]
200014b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200014bc:	e000e010 	.word	0xe000e010
200014c0:	20001630 	.word	0x20001630
200014c4:	20001634 	.word	0x20001634

200014c8 <NMI_Handler>:
200014c8:	e7fe      	b.n	200014c8 <NMI_Handler>
200014ca:	bf00      	nop

200014cc <HardFault_Handler>:
200014cc:	e7fe      	b.n	200014cc <HardFault_Handler>
200014ce:	bf00      	nop

200014d0 <MemManage_Handler>:
200014d0:	e7fe      	b.n	200014d0 <MemManage_Handler>
200014d2:	bf00      	nop

200014d4 <BusFault_Handler>:
200014d4:	e7fe      	b.n	200014d4 <BusFault_Handler>
200014d6:	bf00      	nop

200014d8 <UsageFault_Handler>:
200014d8:	e7fe      	b.n	200014d8 <UsageFault_Handler>
200014da:	bf00      	nop

200014dc <Reserved1_Handler>:
200014dc:	e7fe      	b.n	200014dc <Reserved1_Handler>
200014de:	bf00      	nop

200014e0 <Reserved2_Handler>:
200014e0:	e7fe      	b.n	200014e0 <Reserved2_Handler>
200014e2:	bf00      	nop

200014e4 <Reserved3_Handler>:
200014e4:	e7fe      	b.n	200014e4 <Reserved3_Handler>
200014e6:	bf00      	nop

200014e8 <Reserved4_Handler>:
200014e8:	e7fe      	b.n	200014e8 <Reserved4_Handler>
200014ea:	bf00      	nop

200014ec <SVCall_Handler>:
200014ec:	e7fe      	b.n	200014ec <SVCall_Handler>
200014ee:	bf00      	nop

200014f0 <Debug_Handler>:
200014f0:	e7fe      	b.n	200014f0 <Debug_Handler>
200014f2:	bf00      	nop

200014f4 <Reserved5_Handler>:
200014f4:	e7fe      	b.n	200014f4 <Reserved5_Handler>
200014f6:	bf00      	nop

200014f8 <PendSV_Handler>:
200014f8:	e7fe      	b.n	200014f8 <PendSV_Handler>
200014fa:	bf00      	nop

200014fc <SysTick_Handler>:
200014fc:	e7fe      	b.n	200014fc <SysTick_Handler>
200014fe:	bf00      	nop

20001500 <WWDG_IRQHandler>:
20001500:	e7fe      	b.n	20001500 <WWDG_IRQHandler>
20001502:	bf00      	nop

20001504 <PVD_IRQHandler>:
20001504:	e7fe      	b.n	20001504 <PVD_IRQHandler>
20001506:	bf00      	nop

20001508 <TAMPER_IRQHandler>:
20001508:	e7fe      	b.n	20001508 <TAMPER_IRQHandler>
2000150a:	bf00      	nop

2000150c <RTC_IRQHandler>:
2000150c:	e7fe      	b.n	2000150c <RTC_IRQHandler>
2000150e:	bf00      	nop

20001510 <FLASH_IRQHandler>:
20001510:	e7fe      	b.n	20001510 <FLASH_IRQHandler>
20001512:	bf00      	nop

20001514 <RCC_IRQHandler>:
20001514:	e7fe      	b.n	20001514 <RCC_IRQHandler>
20001516:	bf00      	nop

20001518 <EXTI0_IRQHandler>:
20001518:	e7fe      	b.n	20001518 <EXTI0_IRQHandler>
2000151a:	bf00      	nop

2000151c <EXTI1_IRQHandler>:
2000151c:	e7fe      	b.n	2000151c <EXTI1_IRQHandler>
2000151e:	bf00      	nop

20001520 <EXTI2_IRQHandler>:
20001520:	e7fe      	b.n	20001520 <EXTI2_IRQHandler>
20001522:	bf00      	nop

20001524 <EXTI3_IRQHandler>:
20001524:	e7fe      	b.n	20001524 <EXTI3_IRQHandler>
20001526:	bf00      	nop

20001528 <EXTI4_IRQHandler>:
20001528:	e7fe      	b.n	20001528 <EXTI4_IRQHandler>
2000152a:	bf00      	nop

2000152c <DMA1_Channel1_IRQHandler>:
2000152c:	e7fe      	b.n	2000152c <DMA1_Channel1_IRQHandler>
2000152e:	bf00      	nop

20001530 <DMA1_Channel2_IRQHandler>:
20001530:	e7fe      	b.n	20001530 <DMA1_Channel2_IRQHandler>
20001532:	bf00      	nop

20001534 <DMA1_Channel3_IRQHandler>:
20001534:	e7fe      	b.n	20001534 <DMA1_Channel3_IRQHandler>
20001536:	bf00      	nop

20001538 <DMA1_Channel4_IRQHandler>:
20001538:	e7fe      	b.n	20001538 <DMA1_Channel4_IRQHandler>
2000153a:	bf00      	nop

2000153c <DMA1_Channel5_IRQHandler>:
2000153c:	e7fe      	b.n	2000153c <DMA1_Channel5_IRQHandler>
2000153e:	bf00      	nop

20001540 <DMA1_Channel6_IRQHandler>:
20001540:	e7fe      	b.n	20001540 <DMA1_Channel6_IRQHandler>
20001542:	bf00      	nop

20001544 <DMA1_Channel7_IRQHandler>:
20001544:	e7fe      	b.n	20001544 <DMA1_Channel7_IRQHandler>
20001546:	bf00      	nop

20001548 <ADC1_2_IRQHandler>:
20001548:	e7fe      	b.n	20001548 <ADC1_2_IRQHandler>
2000154a:	bf00      	nop

2000154c <USB_HP_CAN1_TX_IRQHandle>:
2000154c:	e7fe      	b.n	2000154c <USB_HP_CAN1_TX_IRQHandle>
2000154e:	bf00      	nop

20001550 <USB_LP_CAN1_RX0_IRQHandler>:
20001550:	e7fe      	b.n	20001550 <USB_LP_CAN1_RX0_IRQHandler>
20001552:	bf00      	nop

20001554 <CAN1_RX1_IRQHandler>:
20001554:	e7fe      	b.n	20001554 <CAN1_RX1_IRQHandler>
20001556:	bf00      	nop

20001558 <CAN1_SCE_IRQHandler>:
20001558:	e7fe      	b.n	20001558 <CAN1_SCE_IRQHandler>
2000155a:	bf00      	nop

2000155c <EXTI9_5_IRQHandler>:
2000155c:	e7fe      	b.n	2000155c <EXTI9_5_IRQHandler>
2000155e:	bf00      	nop

20001560 <TIM1_BRK_IRQHandler>:
20001560:	e7fe      	b.n	20001560 <TIM1_BRK_IRQHandler>
20001562:	bf00      	nop

20001564 <TIM1_UP_IRQHandler>:
20001564:	e7fe      	b.n	20001564 <TIM1_UP_IRQHandler>
20001566:	bf00      	nop

20001568 <TIM1_TRG_COM_IRQHandler>:
20001568:	e7fe      	b.n	20001568 <TIM1_TRG_COM_IRQHandler>
2000156a:	bf00      	nop

2000156c <TIM1_CC_IRQHandler>:
2000156c:	e7fe      	b.n	2000156c <TIM1_CC_IRQHandler>
2000156e:	bf00      	nop

20001570 <TIM2_IRQHandler>:
20001570:	e7fe      	b.n	20001570 <TIM2_IRQHandler>
20001572:	bf00      	nop

20001574 <TIM3_IRQHandler>:
20001574:	e7fe      	b.n	20001574 <TIM3_IRQHandler>
20001576:	bf00      	nop

20001578 <TIM4_IRQHandler>:
20001578:	e7fe      	b.n	20001578 <TIM4_IRQHandler>
2000157a:	bf00      	nop

2000157c <I2C1_EV_IRQHandler>:
2000157c:	e7fe      	b.n	2000157c <I2C1_EV_IRQHandler>
2000157e:	bf00      	nop

20001580 <I2C1_ER_IRQHandler>:
20001580:	e7fe      	b.n	20001580 <I2C1_ER_IRQHandler>
20001582:	bf00      	nop

20001584 <I2C2_EV_IRQHandler>:
20001584:	e7fe      	b.n	20001584 <I2C2_EV_IRQHandler>
20001586:	bf00      	nop

20001588 <I2C2_ER_IRQHandler>:
20001588:	e7fe      	b.n	20001588 <I2C2_ER_IRQHandler>
2000158a:	bf00      	nop

2000158c <SPI1_IRQHandler>:
2000158c:	e7fe      	b.n	2000158c <SPI1_IRQHandler>
2000158e:	bf00      	nop

20001590 <SPI2_IRQHandler>:
20001590:	e7fe      	b.n	20001590 <SPI2_IRQHandler>
20001592:	bf00      	nop

20001594 <USART1_IRQHandler>:
20001594:	e7fe      	b.n	20001594 <USART1_IRQHandler>
20001596:	bf00      	nop

20001598 <USART2_IRQHandler>:
20001598:	e7fe      	b.n	20001598 <USART2_IRQHandler>
2000159a:	bf00      	nop

2000159c <USART3_IRQHandler>:
2000159c:	e7fe      	b.n	2000159c <USART3_IRQHandler>
2000159e:	bf00      	nop

200015a0 <EXTI15_10_IRQHandler>:
200015a0:	e7fe      	b.n	200015a0 <EXTI15_10_IRQHandler>
200015a2:	bf00      	nop

200015a4 <RTC_Alarm_IRQHandler>:
200015a4:	e7fe      	b.n	200015a4 <RTC_Alarm_IRQHandler>
200015a6:	bf00      	nop

200015a8 <USBWakeUp_IRQHandler>:
200015a8:	e7fe      	b.n	200015a8 <USBWakeUp_IRQHandler>
200015aa:	bf00      	nop

200015ac <init>:
200015ac:	4668      	mov	r0, sp
200015ae:	f020 0107 	bic.w	r1, r0, #7
200015b2:	468d      	mov	sp, r1
200015b4:	4a08      	ldr	r2, [pc, #32]	; (200015d8 <init+0x2c>)
200015b6:	b501      	push	{r0, lr}
200015b8:	4808      	ldr	r0, [pc, #32]	; (200015dc <init+0x30>)
200015ba:	1a12      	subs	r2, r2, r0
200015bc:	d002      	beq.n	200015c4 <init+0x18>
200015be:	2100      	movs	r1, #0
200015c0:	f7ff ff40 	bl	20001444 <memset>
200015c4:	4a06      	ldr	r2, [pc, #24]	; (200015e0 <init+0x34>)
200015c6:	4b07      	ldr	r3, [pc, #28]	; (200015e4 <init+0x38>)
200015c8:	609a      	str	r2, [r3, #8]
200015ca:	f000 f80d 	bl	200015e8 <main>
200015ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200015d2:	4685      	mov	sp, r0
200015d4:	4770      	bx	lr
200015d6:	bf00      	nop
200015d8:	200019d4 	.word	0x200019d4
200015dc:	2000160c 	.word	0x2000160c
200015e0:	20000000 	.word	0x20000000
200015e4:	e000ed00 	.word	0xe000ed00

Disassembly of section .rodata:

200015f4 <.rodata>:
200015f4:	00000006 	.word	0x00000006
200015f8:	00000002 	.word	0x00000002
200015fc:	3e000000 	.word	0x3e000000
20001600:	00000019 	.word	0x00000019
20001604:	3e000000 	.word	0x3e000000
20001608:	00000019 	.word	0x00000019

Disassembly of section .bss:

2000160c <guard variable for run::serial2_config>:
	...

20001614 <run::serial2_config>:
20001614:	00000000                                ....

20001618 <guard variable for run::timer1_prescale>:
	...

20001620 <run::timer1_prescale>:
20001620:	00000000                                ....

20001624 <guard variable for run::gpio1_words_3>:
	...

2000162c <run::gpio1_words_3>:
2000162c:	00000000                                ....

20001630 <elapsed_time>:
20001630:	00000000                                ....

20001634 <results>:
	...
