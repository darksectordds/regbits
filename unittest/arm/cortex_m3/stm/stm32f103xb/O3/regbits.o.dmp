
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	6853      	ldr	r3, [r2, #4]
     154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     158:	f023 0306 	bic.w	r3, r3, #6
     15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     160:	6053      	str	r3, [r2, #4]
     162:	4770      	bx	lr
     164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16a:	6853      	ldr	r3, [r2, #4]
     16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     170:	f023 0306 	bic.w	r3, r3, #6
     174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     178:	6053      	str	r3, [r2, #4]
     17a:	4770      	bx	lr
     17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
     180:	2260      	movs	r2, #96	; 0x60
     182:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
     18c:	2260      	movs	r2, #96	; 0x60
     18e:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
     198:	f44f 7242 	mov.w	r2, #776	; 0x308
     19c:	4b01      	ldr	r3, [pc, #4]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
     1a8:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ac:	4b01      	ldr	r3, [pc, #4]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
     1b8:	2222      	movs	r2, #34	; 0x22
     1ba:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
     1c4:	2222      	movs	r2, #34	; 0x22
     1c6:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
     1d0:	2244      	movs	r2, #68	; 0x44
     1d2:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
     1dc:	2244      	movs	r2, #68	; 0x44
     1de:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
     1e8:	2140      	movs	r1, #64	; 0x40
     1ea:	2201      	movs	r2, #1
     1ec:	4b01      	ldr	r3, [pc, #4]	; (1f4 <equ_bits_var()+0xc>)
     1ee:	6059      	str	r1, [r3, #4]
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
     1f8:	2102      	movs	r1, #2
     1fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <equ_mskd_var()+0x10>)
     200:	6059      	str	r1, [r3, #4]
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
     20c:	2200      	movs	r2, #0
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21a:	4b05      	ldr	r3, [pc, #20]	; (230 <cmp_equ_zero()+0x24>)
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     224:	4b02      	ldr	r3, [pc, #8]	; (230 <cmp_equ_zero()+0x24>)
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20002480 	.word	0x20002480
     230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
     234:	2200      	movs	r2, #0
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <cmp_neq_zero()+0x18>)
     238:	605a      	str	r2, [r3, #4]
     23a:	685a      	ldr	r2, [r3, #4]
     23c:	b112      	cbz	r2, 244 <cmp_neq_zero()+0x10>
     23e:	2204      	movs	r2, #4
     240:	605a      	str	r2, [r3, #4]
     242:	4770      	bx	lr
     244:	2220      	movs	r2, #32
     246:	605a      	str	r2, [r3, #4]
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	20002480 	.word	0x20002480

00000250 <cmp_equ_bits()>:
     250:	2240      	movs	r2, #64	; 0x40
     252:	4b06      	ldr	r3, [pc, #24]	; (26c <cmp_equ_bits()+0x1c>)
     254:	605a      	str	r2, [r3, #4]
     256:	685b      	ldr	r3, [r3, #4]
     258:	065b      	lsls	r3, r3, #25
     25a:	bf4c      	ite	mi
     25c:	f04f 52b0 	movmi.w	r2, #369098752	; 0x16000000
     260:	f04f 52d0 	movpl.w	r2, #436207616	; 0x1a000000
     264:	4b02      	ldr	r3, [pc, #8]	; (270 <cmp_equ_bits()+0x20>)
     266:	605a      	str	r2, [r3, #4]
     268:	4770      	bx	lr
     26a:	bf00      	nop
     26c:	20002480 	.word	0x20002480
     270:	200023e0 	.word	0x200023e0

00000274 <cmp_neq_bits()>:
     274:	2240      	movs	r2, #64	; 0x40
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <cmp_neq_bits()+0x14>)
     278:	605a      	str	r2, [r3, #4]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	0652      	lsls	r2, r2, #25
     27e:	bf54      	ite	pl
     280:	2202      	movpl	r2, #2
     282:	2220      	movmi	r2, #32
     284:	605a      	str	r2, [r3, #4]
     286:	4770      	bx	lr
     288:	20002480 	.word	0x20002480

0000028c <cmp_equ_multi_bits()>:
     28c:	2260      	movs	r2, #96	; 0x60
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <cmp_equ_multi_bits()+0x1c>)
     290:	605a      	str	r2, [r3, #4]
     292:	685b      	ldr	r3, [r3, #4]
     294:	4013      	ands	r3, r2
     296:	4293      	cmp	r3, r2
     298:	bf0c      	ite	eq
     29a:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     29e:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2a2:	4b02      	ldr	r3, [pc, #8]	; (2ac <cmp_equ_multi_bits()+0x20>)
     2a4:	605a      	str	r2, [r3, #4]
     2a6:	4770      	bx	lr
     2a8:	20002480 	.word	0x20002480
     2ac:	200023e0 	.word	0x200023e0

000002b0 <cmp_neq_multi_bits()>:
     2b0:	2260      	movs	r2, #96	; 0x60
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <cmp_neq_multi_bits()+0x1c>)
     2b4:	605a      	str	r2, [r3, #4]
     2b6:	685b      	ldr	r3, [r3, #4]
     2b8:	4013      	ands	r3, r2
     2ba:	4293      	cmp	r3, r2
     2bc:	bf14      	ite	ne
     2be:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2c2:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <cmp_neq_multi_bits()+0x20>)
     2c8:	605a      	str	r2, [r3, #4]
     2ca:	4770      	bx	lr
     2cc:	20002480 	.word	0x20002480
     2d0:	200023e0 	.word	0x200023e0

000002d4 <cmp_equ_mskd()>:
     2d4:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2d8:	4b08      	ldr	r3, [pc, #32]	; (2fc <cmp_equ_mskd()+0x28>)
     2da:	605a      	str	r2, [r3, #4]
     2dc:	685b      	ldr	r3, [r3, #4]
     2de:	4a08      	ldr	r2, [pc, #32]	; (300 <cmp_equ_mskd()+0x2c>)
     2e0:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2e4:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2e8:	6853      	ldr	r3, [r2, #4]
     2ea:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2ee:	bf0c      	ite	eq
     2f0:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2f4:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     2f8:	6053      	str	r3, [r2, #4]
     2fa:	4770      	bx	lr
     2fc:	20002480 	.word	0x20002480
     300:	200023e0 	.word	0x200023e0

00000304 <cmp_neq_mskd()>:
     304:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     308:	4b08      	ldr	r3, [pc, #32]	; (32c <cmp_neq_mskd()+0x28>)
     30a:	605a      	str	r2, [r3, #4]
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
     312:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
     316:	685a      	ldr	r2, [r3, #4]
     318:	bf1a      	itte	ne
     31a:	f022 0206 	bicne.w	r2, r2, #6
     31e:	f042 0204 	orrne.w	r2, r2, #4
     322:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
     326:	605a      	str	r2, [r3, #4]
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	20002480 	.word	0x20002480

00000330 <cmp_equ_reg()>:
     330:	2222      	movs	r2, #34	; 0x22
     332:	4b06      	ldr	r3, [pc, #24]	; (34c <cmp_equ_reg()+0x1c>)
     334:	605a      	str	r2, [r3, #4]
     336:	685b      	ldr	r3, [r3, #4]
     338:	4293      	cmp	r3, r2
     33a:	bf0c      	ite	eq
     33c:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     340:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     344:	4b02      	ldr	r3, [pc, #8]	; (350 <cmp_equ_reg()+0x20>)
     346:	605a      	str	r2, [r3, #4]
     348:	4770      	bx	lr
     34a:	bf00      	nop
     34c:	20002480 	.word	0x20002480
     350:	200023e0 	.word	0x200023e0

00000354 <cmp_neq_reg()>:
     354:	2222      	movs	r2, #34	; 0x22
     356:	4b04      	ldr	r3, [pc, #16]	; (368 <cmp_neq_reg()+0x14>)
     358:	605a      	str	r2, [r3, #4]
     35a:	685a      	ldr	r2, [r3, #4]
     35c:	2a22      	cmp	r2, #34	; 0x22
     35e:	bf14      	ite	ne
     360:	2202      	movne	r2, #2
     362:	2220      	moveq	r2, #32
     364:	605a      	str	r2, [r3, #4]
     366:	4770      	bx	lr
     368:	20002480 	.word	0x20002480

0000036c <constexpr_bits_array()>:
     36c:	2106      	movs	r1, #6
     36e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     372:	4b02      	ldr	r3, [pc, #8]	; (37c <constexpr_bits_array()+0x10>)
     374:	62d9      	str	r1, [r3, #44]	; 0x2c
     376:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     37a:	4770      	bx	lr
     37c:	200022c0 	.word	0x200022c0

00000380 <runtime_bits_array()>:
     380:	2303      	movs	r3, #3
     382:	2221      	movs	r2, #33	; 0x21
     384:	b081      	sub	sp, #4
     386:	9300      	str	r3, [sp, #0]
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	009b      	lsls	r3, r3, #2
     38c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
     390:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
     394:	621a      	str	r2, [r3, #32]
     396:	b001      	add	sp, #4
     398:	4770      	bx	lr
     39a:	bf00      	nop

0000039c <prescaler_low()>:
     39c:	2177      	movs	r1, #119	; 0x77
     39e:	4b04      	ldr	r3, [pc, #16]	; (3b0 <prescaler_low()+0x14>)
     3a0:	4a04      	ldr	r2, [pc, #16]	; (3b4 <prescaler_low()+0x18>)
     3a2:	6059      	str	r1, [r3, #4]
     3a4:	685b      	ldr	r3, [r3, #4]
     3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3aa:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ac:	4770      	bx	lr
     3ae:	bf00      	nop
     3b0:	200023e0 	.word	0x200023e0
     3b4:	200022c0 	.word	0x200022c0

000003b8 <prescaler_high()>:
     3b8:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     3bc:	4b03      	ldr	r3, [pc, #12]	; (3cc <prescaler_high()+0x14>)
     3be:	4a04      	ldr	r2, [pc, #16]	; (3d0 <prescaler_high()+0x18>)
     3c0:	6059      	str	r1, [r3, #4]
     3c2:	685b      	ldr	r3, [r3, #4]
     3c4:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3c8:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ca:	4770      	bx	lr
     3cc:	200023e0 	.word	0x200023e0
     3d0:	200022c0 	.word	0x200022c0

000003d4 <reg_mskd_lss()>:
     3d4:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <reg_mskd_lss()+0x20>)
     3da:	605a      	str	r2, [r3, #4]
     3dc:	685b      	ldr	r3, [r3, #4]
     3de:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3e2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3e6:	bf34      	ite	cc
     3e8:	2202      	movcc	r2, #2
     3ea:	2204      	movcs	r2, #4
     3ec:	4b02      	ldr	r3, [pc, #8]	; (3f8 <reg_mskd_lss()+0x24>)
     3ee:	605a      	str	r2, [r3, #4]
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	200023e0 	.word	0x200023e0
     3f8:	20002480 	.word	0x20002480

000003fc <reg_mskd_leq()>:
     3fc:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
     400:	4a0a      	ldr	r2, [pc, #40]	; (42c <reg_mskd_leq()+0x30>)
     402:	6053      	str	r3, [r2, #4]
     404:	6853      	ldr	r3, [r2, #4]
     406:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     40a:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
     40e:	d809      	bhi.n	424 <reg_mskd_leq()+0x28>
     410:	6853      	ldr	r3, [r2, #4]
     412:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     41a:	d803      	bhi.n	424 <reg_mskd_leq()+0x28>
     41c:	2202      	movs	r2, #2
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <reg_mskd_leq()+0x34>)
     420:	605a      	str	r2, [r3, #4]
     422:	4770      	bx	lr
     424:	2204      	movs	r2, #4
     426:	4b02      	ldr	r3, [pc, #8]	; (430 <reg_mskd_leq()+0x34>)
     428:	605a      	str	r2, [r3, #4]
     42a:	4770      	bx	lr
     42c:	200023e0 	.word	0x200023e0
     430:	20002480 	.word	0x20002480

00000434 <reg_mskd_gtr()>:
     434:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     438:	4b06      	ldr	r3, [pc, #24]	; (454 <reg_mskd_gtr()+0x20>)
     43a:	605a      	str	r2, [r3, #4]
     43c:	685b      	ldr	r3, [r3, #4]
     43e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     442:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     446:	bf8c      	ite	hi
     448:	2202      	movhi	r2, #2
     44a:	2204      	movls	r2, #4
     44c:	4b02      	ldr	r3, [pc, #8]	; (458 <reg_mskd_gtr()+0x24>)
     44e:	605a      	str	r2, [r3, #4]
     450:	4770      	bx	lr
     452:	bf00      	nop
     454:	200023e0 	.word	0x200023e0
     458:	20002480 	.word	0x20002480

0000045c <reg_mskd_geq()>:
     45c:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
     460:	4a0a      	ldr	r2, [pc, #40]	; (48c <reg_mskd_geq()+0x30>)
     462:	6053      	str	r3, [r2, #4]
     464:	6853      	ldr	r3, [r2, #4]
     466:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     46a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     46e:	d309      	bcc.n	484 <reg_mskd_geq()+0x28>
     470:	6853      	ldr	r3, [r2, #4]
     472:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     476:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
     47a:	d303      	bcc.n	484 <reg_mskd_geq()+0x28>
     47c:	2202      	movs	r2, #2
     47e:	4b04      	ldr	r3, [pc, #16]	; (490 <reg_mskd_geq()+0x34>)
     480:	605a      	str	r2, [r3, #4]
     482:	4770      	bx	lr
     484:	2204      	movs	r2, #4
     486:	4b02      	ldr	r3, [pc, #8]	; (490 <reg_mskd_geq()+0x34>)
     488:	605a      	str	r2, [r3, #4]
     48a:	4770      	bx	lr
     48c:	200023e0 	.word	0x200023e0
     490:	20002480 	.word	0x20002480

00000494 <pos_cmp_eq()>:
     494:	2202      	movs	r2, #2
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <pos_cmp_eq()+0x8>)
     498:	605a      	str	r2, [r3, #4]
     49a:	4770      	bx	lr
     49c:	20002480 	.word	0x20002480

000004a0 <pos_cmp_ne()>:
     4a0:	2202      	movs	r2, #2
     4a2:	4b01      	ldr	r3, [pc, #4]	; (4a8 <pos_cmp_ne()+0x8>)
     4a4:	605a      	str	r2, [r3, #4]
     4a6:	4770      	bx	lr
     4a8:	20002480 	.word	0x20002480

000004ac <bits_extract_eq()>:
     4ac:	2240      	movs	r2, #64	; 0x40
     4ae:	4b04      	ldr	r3, [pc, #16]	; (4c0 <bits_extract_eq()+0x14>)
     4b0:	605a      	str	r2, [r3, #4]
     4b2:	685a      	ldr	r2, [r3, #4]
     4b4:	2a40      	cmp	r2, #64	; 0x40
     4b6:	bf0c      	ite	eq
     4b8:	2202      	moveq	r2, #2
     4ba:	2204      	movne	r2, #4
     4bc:	605a      	str	r2, [r3, #4]
     4be:	4770      	bx	lr
     4c0:	20002480 	.word	0x20002480

000004c4 <mskd_extract_eq()>:
     4c4:	2202      	movs	r2, #2
     4c6:	4b04      	ldr	r3, [pc, #16]	; (4d8 <mskd_extract_eq()+0x14>)
     4c8:	605a      	str	r2, [r3, #4]
     4ca:	685a      	ldr	r2, [r3, #4]
     4cc:	2a02      	cmp	r2, #2
     4ce:	bf0c      	ite	eq
     4d0:	2220      	moveq	r2, #32
     4d2:	2240      	movne	r2, #64	; 0x40
     4d4:	605a      	str	r2, [r3, #4]
     4d6:	4770      	bx	lr
     4d8:	20002480 	.word	0x20002480

000004dc <mskd_extract_ne()>:
     4dc:	2204      	movs	r2, #4
     4de:	4b04      	ldr	r3, [pc, #16]	; (4f0 <mskd_extract_ne()+0x14>)
     4e0:	605a      	str	r2, [r3, #4]
     4e2:	685a      	ldr	r2, [r3, #4]
     4e4:	2a04      	cmp	r2, #4
     4e6:	bf0c      	ite	eq
     4e8:	2240      	moveq	r2, #64	; 0x40
     4ea:	2220      	movne	r2, #32
     4ec:	605a      	str	r2, [r3, #4]
     4ee:	4770      	bx	lr
     4f0:	20002480 	.word	0x20002480

000004f4 <mskd_extract_lss()>:
     4f4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     4f8:	4b05      	ldr	r3, [pc, #20]	; (510 <mskd_extract_lss()+0x1c>)
     4fa:	605a      	str	r2, [r3, #4]
     4fc:	685b      	ldr	r3, [r3, #4]
     4fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     502:	bf34      	ite	cc
     504:	2220      	movcc	r2, #32
     506:	2240      	movcs	r2, #64	; 0x40
     508:	4b02      	ldr	r3, [pc, #8]	; (514 <mskd_extract_lss()+0x20>)
     50a:	605a      	str	r2, [r3, #4]
     50c:	4770      	bx	lr
     50e:	bf00      	nop
     510:	200023e0 	.word	0x200023e0
     514:	20002480 	.word	0x20002480

00000518 <mskd_extract_leq()>:
     518:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     51c:	4b04      	ldr	r3, [pc, #16]	; (530 <mskd_extract_leq()+0x18>)
     51e:	605a      	str	r2, [r3, #4]
     520:	685b      	ldr	r3, [r3, #4]
     522:	4293      	cmp	r3, r2
     524:	bf94      	ite	ls
     526:	2220      	movls	r2, #32
     528:	2240      	movhi	r2, #64	; 0x40
     52a:	4b02      	ldr	r3, [pc, #8]	; (534 <mskd_extract_leq()+0x1c>)
     52c:	605a      	str	r2, [r3, #4]
     52e:	4770      	bx	lr
     530:	200023e0 	.word	0x200023e0
     534:	20002480 	.word	0x20002480

00000538 <mskd_extract_gtr()>:
     538:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     53c:	4b05      	ldr	r3, [pc, #20]	; (554 <mskd_extract_gtr()+0x1c>)
     53e:	605a      	str	r2, [r3, #4]
     540:	685b      	ldr	r3, [r3, #4]
     542:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     546:	bf8c      	ite	hi
     548:	2220      	movhi	r2, #32
     54a:	2240      	movls	r2, #64	; 0x40
     54c:	4b02      	ldr	r3, [pc, #8]	; (558 <mskd_extract_gtr()+0x20>)
     54e:	605a      	str	r2, [r3, #4]
     550:	4770      	bx	lr
     552:	bf00      	nop
     554:	200023e0 	.word	0x200023e0
     558:	20002480 	.word	0x20002480

0000055c <set_bits_global()>:
     55c:	4a02      	ldr	r2, [pc, #8]	; (568 <set_bits_global()+0xc>)
     55e:	6853      	ldr	r3, [r2, #4]
     560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     564:	6053      	str	r3, [r2, #4]
     566:	4770      	bx	lr
     568:	20002480 	.word	0x20002480

0000056c <ins_mskd_global()>:
     56c:	4a03      	ldr	r2, [pc, #12]	; (57c <ins_mskd_global()+0x10>)
     56e:	6853      	ldr	r3, [r2, #4]
     570:	f023 0306 	bic.w	r3, r3, #6
     574:	f043 0302 	orr.w	r3, r3, #2
     578:	6053      	str	r3, [r2, #4]
     57a:	4770      	bx	lr
     57c:	20002480 	.word	0x20002480

00000580 <assign_array_global()>:
     580:	22bd      	movs	r2, #189	; 0xbd
     582:	4b01      	ldr	r3, [pc, #4]	; (588 <assign_array_global()+0x8>)
     584:	601a      	str	r2, [r3, #0]
     586:	4770      	bx	lr
     588:	200022ec 	.word	0x200022ec

0000058c <shifted_global()>:
     58c:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     590:	4b03      	ldr	r3, [pc, #12]	; (5a0 <shifted_global()+0x14>)
     592:	4a04      	ldr	r2, [pc, #16]	; (5a4 <shifted_global()+0x18>)
     594:	6059      	str	r1, [r3, #4]
     596:	685b      	ldr	r3, [r3, #4]
     598:	f3c3 6344 	ubfx	r3, r3, #25, #5
     59c:	62d3      	str	r3, [r2, #44]	; 0x2c
     59e:	4770      	bx	lr
     5a0:	200023e0 	.word	0x200023e0
     5a4:	200022c0 	.word	0x200022c0

000005a8 <assign_register_global()>:
     5a8:	2204      	movs	r2, #4
     5aa:	4b01      	ldr	r3, [pc, #4]	; (5b0 <assign_register_global()+0x8>)
     5ac:	605a      	str	r2, [r3, #4]
     5ae:	4770      	bx	lr
     5b0:	20002480 	.word	0x20002480

000005b4 <copy_bits_equ()>:
     5b4:	2240      	movs	r2, #64	; 0x40
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <copy_bits_equ()+0x14>)
     5b8:	605a      	str	r2, [r3, #4]
     5ba:	685a      	ldr	r2, [r3, #4]
     5bc:	0652      	lsls	r2, r2, #25
     5be:	bf4c      	ite	mi
     5c0:	2202      	movmi	r2, #2
     5c2:	2204      	movpl	r2, #4
     5c4:	605a      	str	r2, [r3, #4]
     5c6:	4770      	bx	lr
     5c8:	20002480 	.word	0x20002480

000005cc <copy_bits_neq()>:
     5cc:	2240      	movs	r2, #64	; 0x40
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <copy_bits_neq()+0x14>)
     5d0:	605a      	str	r2, [r3, #4]
     5d2:	685a      	ldr	r2, [r3, #4]
     5d4:	0652      	lsls	r2, r2, #25
     5d6:	bf54      	ite	pl
     5d8:	2202      	movpl	r2, #2
     5da:	2204      	movmi	r2, #4
     5dc:	605a      	str	r2, [r3, #4]
     5de:	4770      	bx	lr
     5e0:	20002480 	.word	0x20002480

000005e4 <copy_mskd_equ()>:
     5e4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <copy_mskd_equ()+0x1c>)
     5ea:	605a      	str	r2, [r3, #4]
     5ec:	685b      	ldr	r3, [r3, #4]
     5ee:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     5f2:	4293      	cmp	r3, r2
     5f4:	bf0c      	ite	eq
     5f6:	2202      	moveq	r2, #2
     5f8:	2204      	movne	r2, #4
     5fa:	4b02      	ldr	r3, [pc, #8]	; (604 <copy_mskd_equ()+0x20>)
     5fc:	605a      	str	r2, [r3, #4]
     5fe:	4770      	bx	lr
     600:	200023e0 	.word	0x200023e0
     604:	20002480 	.word	0x20002480

00000608 <copy_mskd_neq()>:
     608:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     60c:	4b05      	ldr	r3, [pc, #20]	; (624 <copy_mskd_neq()+0x1c>)
     60e:	605a      	str	r2, [r3, #4]
     610:	685b      	ldr	r3, [r3, #4]
     612:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     616:	4293      	cmp	r3, r2
     618:	bf14      	ite	ne
     61a:	2202      	movne	r2, #2
     61c:	2204      	moveq	r2, #4
     61e:	4b02      	ldr	r3, [pc, #8]	; (628 <copy_mskd_neq()+0x20>)
     620:	605a      	str	r2, [r3, #4]
     622:	4770      	bx	lr
     624:	200023e0 	.word	0x200023e0
     628:	20002480 	.word	0x20002480

0000062c <copy_mskd_lss()>:
     62c:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <copy_mskd_lss()+0x20>)
     632:	605a      	str	r2, [r3, #4]
     634:	685b      	ldr	r3, [r3, #4]
     636:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     63a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     63e:	bf34      	ite	cc
     640:	2202      	movcc	r2, #2
     642:	2204      	movcs	r2, #4
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <copy_mskd_lss()+0x24>)
     646:	605a      	str	r2, [r3, #4]
     648:	4770      	bx	lr
     64a:	bf00      	nop
     64c:	200023e0 	.word	0x200023e0
     650:	20002480 	.word	0x20002480

00000654 <copy_mskd_leq()>:
     654:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     658:	4b05      	ldr	r3, [pc, #20]	; (670 <copy_mskd_leq()+0x1c>)
     65a:	605a      	str	r2, [r3, #4]
     65c:	685b      	ldr	r3, [r3, #4]
     65e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     662:	4293      	cmp	r3, r2
     664:	bf94      	ite	ls
     666:	2202      	movls	r2, #2
     668:	2204      	movhi	r2, #4
     66a:	4b02      	ldr	r3, [pc, #8]	; (674 <copy_mskd_leq()+0x20>)
     66c:	605a      	str	r2, [r3, #4]
     66e:	4770      	bx	lr
     670:	200023e0 	.word	0x200023e0
     674:	20002480 	.word	0x20002480

00000678 <copy_mskd_gtr()>:
     678:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     67c:	4b06      	ldr	r3, [pc, #24]	; (698 <copy_mskd_gtr()+0x20>)
     67e:	605a      	str	r2, [r3, #4]
     680:	685b      	ldr	r3, [r3, #4]
     682:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     686:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     68a:	bf8c      	ite	hi
     68c:	2202      	movhi	r2, #2
     68e:	2204      	movls	r2, #4
     690:	4b02      	ldr	r3, [pc, #8]	; (69c <copy_mskd_gtr()+0x24>)
     692:	605a      	str	r2, [r3, #4]
     694:	4770      	bx	lr
     696:	bf00      	nop
     698:	200023e0 	.word	0x200023e0
     69c:	20002480 	.word	0x20002480

000006a0 <copy_mskd_geq()>:
     6a0:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <copy_mskd_geq()+0x1c>)
     6a6:	605a      	str	r2, [r3, #4]
     6a8:	685b      	ldr	r3, [r3, #4]
     6aa:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6ae:	4293      	cmp	r3, r2
     6b0:	bf2c      	ite	cs
     6b2:	2202      	movcs	r2, #2
     6b4:	2204      	movcc	r2, #4
     6b6:	4b02      	ldr	r3, [pc, #8]	; (6c0 <copy_mskd_geq()+0x20>)
     6b8:	605a      	str	r2, [r3, #4]
     6ba:	4770      	bx	lr
     6bc:	200023e0 	.word	0x200023e0
     6c0:	20002480 	.word	0x20002480

000006c4 <copy_shifted()>:
     6c4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <copy_shifted()+0x1c>)
     6ca:	605a      	str	r2, [r3, #4]
     6cc:	685b      	ldr	r3, [r3, #4]
     6ce:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6d2:	2b0b      	cmp	r3, #11
     6d4:	bf0c      	ite	eq
     6d6:	2202      	moveq	r2, #2
     6d8:	2204      	movne	r2, #4
     6da:	4b02      	ldr	r3, [pc, #8]	; (6e4 <copy_shifted()+0x20>)
     6dc:	605a      	str	r2, [r3, #4]
     6de:	4770      	bx	lr
     6e0:	200023e0 	.word	0x200023e0
     6e4:	20002480 	.word	0x20002480

000006e8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>:
     6e8:	2266      	movs	r2, #102	; 0x66
     6ea:	4b01      	ldr	r3, [pc, #4]	; (6f0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]+0x8>)
     6ec:	62da      	str	r2, [r3, #44]	; 0x2c
     6ee:	4770      	bx	lr
     6f0:	200022c0 	.word	0x200022c0

000006f4 <call_pos_ref()>:
     6f4:	2105      	movs	r1, #5
     6f6:	b500      	push	{lr}
     6f8:	b081      	sub	sp, #4
     6fa:	4668      	mov	r0, sp
     6fc:	9100      	str	r1, [sp, #0]
     6fe:	f7ff fff3 	bl	6e8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
     702:	4668      	mov	r0, sp
     704:	9100      	str	r1, [sp, #0]
     706:	f7ff ffef 	bl	6e8 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
     70a:	b001      	add	sp, #4
     70c:	f85d fb04 	ldr.w	pc, [sp], #4

00000710 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>:
     710:	2277      	movs	r2, #119	; 0x77
     712:	4b01      	ldr	r3, [pc, #4]	; (718 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]+0x8>)
     714:	62da      	str	r2, [r3, #44]	; 0x2c
     716:	4770      	bx	lr
     718:	200022c0 	.word	0x200022c0

0000071c <call_pos_ref_global()>:
     71c:	2306      	movs	r3, #6
     71e:	b500      	push	{lr}
     720:	b081      	sub	sp, #4
     722:	4668      	mov	r0, sp
     724:	9300      	str	r3, [sp, #0]
     726:	f7ff fff3 	bl	710 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>
     72a:	b001      	add	sp, #4
     72c:	f85d fb04 	ldr.w	pc, [sp], #4

00000730 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>:
     730:	2233      	movs	r2, #51	; 0x33
     732:	4b01      	ldr	r3, [pc, #4]	; (738 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]+0x8>)
     734:	62da      	str	r2, [r3, #44]	; 0x2c
     736:	4770      	bx	lr
     738:	200022c0 	.word	0x200022c0

0000073c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>:
     73c:	2244      	movs	r2, #68	; 0x44
     73e:	4b01      	ldr	r3, [pc, #4]	; (744 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]+0x8>)
     740:	62da      	str	r2, [r3, #44]	; 0x2c
     742:	4770      	bx	lr
     744:	200022c0 	.word	0x200022c0

00000748 <call_pos_val()>:
     748:	b500      	push	{lr}
     74a:	2005      	movs	r0, #5
     74c:	f7ff fff0 	bl	730 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>
     750:	2006      	movs	r0, #6
     752:	f85d eb04 	ldr.w	lr, [sp], #4
     756:	e7f1      	b.n	73c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>

00000758 <call_pos_val_global()>:
     758:	2006      	movs	r0, #6
     75a:	e7ef      	b.n	73c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>

0000075c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     75c:	4a03      	ldr	r2, [pc, #12]	; (76c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x10>)
     75e:	6853      	ldr	r3, [r2, #4]
     760:	f023 0306 	bic.w	r3, r3, #6
     764:	f043 0302 	orr.w	r3, r3, #2
     768:	6053      	str	r3, [r2, #4]
     76a:	4770      	bx	lr
     76c:	20002480 	.word	0x20002480

00000770 <call_mskd_val_const()>:
     770:	2006      	movs	r0, #6
     772:	2102      	movs	r1, #2
     774:	e7f2      	b.n	75c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     776:	bf00      	nop

00000778 <call_mskd_val_var()>:
     778:	2006      	movs	r0, #6
     77a:	2102      	movs	r1, #2
     77c:	e7ee      	b.n	75c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     77e:	bf00      	nop

00000780 <call_mskd_val_global()>:
     780:	2006      	movs	r0, #6
     782:	2102      	movs	r1, #2
     784:	e7ea      	b.n	75c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     786:	bf00      	nop

00000788 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     788:	4a02      	ldr	r2, [pc, #8]	; (794 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0xc>)
     78a:	6853      	ldr	r3, [r2, #4]
     78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     790:	6053      	str	r3, [r2, #4]
     792:	4770      	bx	lr
     794:	20002480 	.word	0x20002480

00000798 <call_bits_val_const()>:
     798:	2040      	movs	r0, #64	; 0x40
     79a:	e7f5      	b.n	788 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

0000079c <call_bits_val_var()>:
     79c:	2040      	movs	r0, #64	; 0x40
     79e:	e7f3      	b.n	788 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

000007a0 <call_bits_val_global()>:
     7a0:	2040      	movs	r0, #64	; 0x40
     7a2:	e7f1      	b.n	788 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

000007a4 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     7a4:	4a02      	ldr	r2, [pc, #8]	; (7b0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     7a6:	6853      	ldr	r3, [r2, #4]
     7a8:	4318      	orrs	r0, r3
     7aa:	6050      	str	r0, [r2, #4]
     7ac:	4770      	bx	lr
     7ae:	bf00      	nop
     7b0:	20002480 	.word	0x20002480

000007b4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     7b4:	4a02      	ldr	r2, [pc, #8]	; (7c0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     7b6:	6801      	ldr	r1, [r0, #0]
     7b8:	6853      	ldr	r3, [r2, #4]
     7ba:	430b      	orrs	r3, r1
     7bc:	6053      	str	r3, [r2, #4]
     7be:	4770      	bx	lr
     7c0:	20002480 	.word	0x20002480

000007c4 <call_bits_ref_var()>:
     7c4:	2301      	movs	r3, #1
     7c6:	b500      	push	{lr}
     7c8:	b081      	sub	sp, #4
     7ca:	4668      	mov	r0, sp
     7cc:	9300      	str	r3, [sp, #0]
     7ce:	f7ff fffe 	bl	7b4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7d2:	b001      	add	sp, #4
     7d4:	f85d fb04 	ldr.w	pc, [sp], #4

000007d8 <call_bits_ref_const()>:
     7d8:	2301      	movs	r3, #1
     7da:	b500      	push	{lr}
     7dc:	b081      	sub	sp, #4
     7de:	4668      	mov	r0, sp
     7e0:	9300      	str	r3, [sp, #0]
     7e2:	f7ff fffe 	bl	7b4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7e6:	b001      	add	sp, #4
     7e8:	f85d fb04 	ldr.w	pc, [sp], #4

000007ec <call_bits_ref_global()>:
     7ec:	2340      	movs	r3, #64	; 0x40
     7ee:	b500      	push	{lr}
     7f0:	b081      	sub	sp, #4
     7f2:	4668      	mov	r0, sp
     7f4:	9300      	str	r3, [sp, #0]
     7f6:	f7ff fffe 	bl	7b4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7fa:	b001      	add	sp, #4
     7fc:	f85d fb04 	ldr.w	pc, [sp], #4

00000800 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     800:	4a03      	ldr	r2, [pc, #12]	; (810 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     802:	6853      	ldr	r3, [r2, #4]
     804:	ea23 0000 	bic.w	r0, r3, r0
     808:	4308      	orrs	r0, r1
     80a:	6050      	str	r0, [r2, #4]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	20002480 	.word	0x20002480

00000814 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     814:	4a05      	ldr	r2, [pc, #20]	; (82c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
     816:	b410      	push	{r4}
     818:	6853      	ldr	r3, [r2, #4]
     81a:	6804      	ldr	r4, [r0, #0]
     81c:	6841      	ldr	r1, [r0, #4]
     81e:	ea23 0304 	bic.w	r3, r3, r4
     822:	430b      	orrs	r3, r1
     824:	6053      	str	r3, [r2, #4]
     826:	bc10      	pop	{r4}
     828:	4770      	bx	lr
     82a:	bf00      	nop
     82c:	20002480 	.word	0x20002480

00000830 <call_mskd_ref_var()>:
     830:	b500      	push	{lr}
     832:	4b05      	ldr	r3, [pc, #20]	; (848 <call_mskd_ref_var()+0x18>)
     834:	b082      	sub	sp, #8
     836:	4668      	mov	r0, sp
     838:	cb0c      	ldmia	r3, {r2, r3}
     83a:	e88d 000c 	stmia.w	sp, {r2, r3}
     83e:	f7ff fffe 	bl	814 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     842:	b002      	add	sp, #8
     844:	f85d fb04 	ldr.w	pc, [sp], #4
     848:	00000000 	.word	0x00000000

0000084c <call_mskd_ref_const()>:
     84c:	2206      	movs	r2, #6
     84e:	2304      	movs	r3, #4
     850:	b500      	push	{lr}
     852:	b082      	sub	sp, #8
     854:	4668      	mov	r0, sp
     856:	e88d 000c 	stmia.w	sp, {r2, r3}
     85a:	f7ff fffe 	bl	814 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     85e:	b002      	add	sp, #8
     860:	f85d fb04 	ldr.w	pc, [sp], #4

00000864 <call_mskd_ref_global()>:
     864:	2206      	movs	r2, #6
     866:	2302      	movs	r3, #2
     868:	b500      	push	{lr}
     86a:	b082      	sub	sp, #8
     86c:	4668      	mov	r0, sp
     86e:	e88d 000c 	stmia.w	sp, {r2, r3}
     872:	f7ff fffe 	bl	814 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     876:	b002      	add	sp, #8
     878:	f85d fb04 	ldr.w	pc, [sp], #4

0000087c <periph_bits(mcu::Serial volatile*)>:
     87c:	6843      	ldr	r3, [r0, #4]
     87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     882:	6043      	str	r3, [r0, #4]
     884:	4770      	bx	lr
     886:	bf00      	nop

00000888 <call_periph_bits()>:
     888:	4801      	ldr	r0, [pc, #4]	; (890 <call_periph_bits()+0x8>)
     88a:	f7ff bffe 	b.w	87c <periph_bits(mcu::Serial volatile*)>
     88e:	bf00      	nop
     890:	20002480 	.word	0x20002480

00000894 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     894:	6843      	ldr	r3, [r0, #4]
     896:	4319      	orrs	r1, r3
     898:	6041      	str	r1, [r0, #4]
     89a:	4770      	bx	lr

0000089c <call_periph_bits_val()>:
     89c:	2140      	movs	r1, #64	; 0x40
     89e:	4801      	ldr	r0, [pc, #4]	; (8a4 <call_periph_bits_val()+0x8>)
     8a0:	f7ff bffe 	b.w	894 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8a4:	20002480 	.word	0x20002480

000008a8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     8a8:	6803      	ldr	r3, [r0, #0]
     8aa:	4319      	orrs	r1, r3
     8ac:	6001      	str	r1, [r0, #0]
     8ae:	4770      	bx	lr

000008b0 <call_reg_bits_val()>:
     8b0:	2140      	movs	r1, #64	; 0x40
     8b2:	4801      	ldr	r0, [pc, #4]	; (8b8 <call_reg_bits_val()+0x8>)
     8b4:	f7ff bffe 	b.w	8a8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8b8:	20002484 	.word	0x20002484

000008bc <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8bc:	680a      	ldr	r2, [r1, #0]
     8be:	6843      	ldr	r3, [r0, #4]
     8c0:	4313      	orrs	r3, r2
     8c2:	6043      	str	r3, [r0, #4]
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop

000008c8 <call_periph_bits_ref()>:
     8c8:	2340      	movs	r3, #64	; 0x40
     8ca:	b500      	push	{lr}
     8cc:	b081      	sub	sp, #4
     8ce:	4669      	mov	r1, sp
     8d0:	4803      	ldr	r0, [pc, #12]	; (8e0 <call_periph_bits_ref()+0x18>)
     8d2:	9300      	str	r3, [sp, #0]
     8d4:	f7ff fffe 	bl	8bc <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8d8:	b001      	add	sp, #4
     8da:	f85d fb04 	ldr.w	pc, [sp], #4
     8de:	bf00      	nop
     8e0:	20002480 	.word	0x20002480

000008e4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8e4:	680a      	ldr	r2, [r1, #0]
     8e6:	6803      	ldr	r3, [r0, #0]
     8e8:	4313      	orrs	r3, r2
     8ea:	6003      	str	r3, [r0, #0]
     8ec:	4770      	bx	lr
     8ee:	bf00      	nop

000008f0 <call_reg_bits_ref()>:
     8f0:	2340      	movs	r3, #64	; 0x40
     8f2:	b500      	push	{lr}
     8f4:	b081      	sub	sp, #4
     8f6:	4669      	mov	r1, sp
     8f8:	4803      	ldr	r0, [pc, #12]	; (908 <call_reg_bits_ref()+0x18>)
     8fa:	9300      	str	r3, [sp, #0]
     8fc:	f7ff fffe 	bl	8e4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     900:	b001      	add	sp, #4
     902:	f85d fb04 	ldr.w	pc, [sp], #4
     906:	bf00      	nop
     908:	20002484 	.word	0x20002484

0000090c <periph_mskd(mcu::Serial volatile*)>:
     90c:	6843      	ldr	r3, [r0, #4]
     90e:	f023 0306 	bic.w	r3, r3, #6
     912:	f043 0302 	orr.w	r3, r3, #2
     916:	6043      	str	r3, [r0, #4]
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <call_periph_mskd()>:
     91c:	4801      	ldr	r0, [pc, #4]	; (924 <call_periph_mskd()+0x8>)
     91e:	f7ff bffe 	b.w	90c <periph_mskd(mcu::Serial volatile*)>
     922:	bf00      	nop
     924:	20002480 	.word	0x20002480

00000928 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     928:	6843      	ldr	r3, [r0, #4]
     92a:	ea23 0101 	bic.w	r1, r3, r1
     92e:	4311      	orrs	r1, r2
     930:	6041      	str	r1, [r0, #4]
     932:	4770      	bx	lr

00000934 <call_periph_mskd_val()>:
     934:	2106      	movs	r1, #6
     936:	2202      	movs	r2, #2
     938:	4801      	ldr	r0, [pc, #4]	; (940 <call_periph_mskd_val()+0xc>)
     93a:	f7ff bffe 	b.w	928 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     93e:	bf00      	nop
     940:	20002480 	.word	0x20002480

00000944 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     944:	6803      	ldr	r3, [r0, #0]
     946:	ea23 0101 	bic.w	r1, r3, r1
     94a:	4311      	orrs	r1, r2
     94c:	6001      	str	r1, [r0, #0]
     94e:	4770      	bx	lr

00000950 <call_reg_mskd_val()>:
     950:	2106      	movs	r1, #6
     952:	2202      	movs	r2, #2
     954:	4801      	ldr	r0, [pc, #4]	; (95c <call_reg_mskd_val()+0xc>)
     956:	f7ff bffe 	b.w	944 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     95a:	bf00      	nop
     95c:	20002484 	.word	0x20002484

00000960 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     960:	6843      	ldr	r3, [r0, #4]
     962:	ea23 0101 	bic.w	r1, r3, r1
     966:	4311      	orrs	r1, r2
     968:	6041      	str	r1, [r0, #4]
     96a:	4770      	bx	lr

0000096c <call_periph_mskd_ref()>:
     96c:	2106      	movs	r1, #6
     96e:	2202      	movs	r2, #2
     970:	4801      	ldr	r0, [pc, #4]	; (978 <call_periph_mskd_ref()+0xc>)
     972:	f7ff bffe 	b.w	960 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     976:	bf00      	nop
     978:	20002480 	.word	0x20002480

0000097c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     97c:	6803      	ldr	r3, [r0, #0]
     97e:	ea23 0101 	bic.w	r1, r3, r1
     982:	4311      	orrs	r1, r2
     984:	6001      	str	r1, [r0, #0]
     986:	4770      	bx	lr

00000988 <call_reg_mskd_ref()>:
     988:	2106      	movs	r1, #6
     98a:	2202      	movs	r2, #2
     98c:	4801      	ldr	r0, [pc, #4]	; (994 <call_reg_mskd_ref()+0xc>)
     98e:	f7ff bffe 	b.w	97c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     992:	bf00      	nop
     994:	20002484 	.word	0x20002484

00000998 <return_bits()>:
     998:	2020      	movs	r0, #32
     99a:	4770      	bx	lr

0000099c <call_return_bits()>:
     99c:	b500      	push	{lr}
     99e:	f7ff fffe 	bl	998 <return_bits()>
     9a2:	2820      	cmp	r0, #32
     9a4:	bf0c      	ite	eq
     9a6:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     9aa:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     9ae:	4b02      	ldr	r3, [pc, #8]	; (9b8 <call_return_bits()+0x1c>)
     9b0:	605a      	str	r2, [r3, #4]
     9b2:	f85d fb04 	ldr.w	pc, [sp], #4
     9b6:	bf00      	nop
     9b8:	200023e0 	.word	0x200023e0

000009bc <return_mskd()>:
     9bc:	2118      	movs	r1, #24
     9be:	2208      	movs	r2, #8
     9c0:	e880 0006 	stmia.w	r0, {r1, r2}
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <call_return_mskd()>:
     9c8:	b500      	push	{lr}
     9ca:	b082      	sub	sp, #8
     9cc:	4668      	mov	r0, sp
     9ce:	f7ff fffe 	bl	9bc <return_mskd()>
     9d2:	9b00      	ldr	r3, [sp, #0]
     9d4:	9a01      	ldr	r2, [sp, #4]
     9d6:	2b18      	cmp	r3, #24
     9d8:	d006      	beq.n	9e8 <call_return_mskd()+0x20>
     9da:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9de:	4b07      	ldr	r3, [pc, #28]	; (9fc <call_return_mskd()+0x34>)
     9e0:	605a      	str	r2, [r3, #4]
     9e2:	b002      	add	sp, #8
     9e4:	f85d fb04 	ldr.w	pc, [sp], #4
     9e8:	2a08      	cmp	r2, #8
     9ea:	d1f6      	bne.n	9da <call_return_mskd()+0x12>
     9ec:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9f0:	4b02      	ldr	r3, [pc, #8]	; (9fc <call_return_mskd()+0x34>)
     9f2:	605a      	str	r2, [r3, #4]
     9f4:	b002      	add	sp, #8
     9f6:	f85d fb04 	ldr.w	pc, [sp], #4
     9fa:	bf00      	nop
     9fc:	200023e0 	.word	0x200023e0

00000a00 <return_reg()>:
     a00:	2240      	movs	r2, #64	; 0x40
     a02:	4b02      	ldr	r3, [pc, #8]	; (a0c <return_reg()+0xc>)
     a04:	4802      	ldr	r0, [pc, #8]	; (a10 <return_reg()+0x10>)
     a06:	605a      	str	r2, [r3, #4]
     a08:	4770      	bx	lr
     a0a:	bf00      	nop
     a0c:	20002480 	.word	0x20002480
     a10:	20002484 	.word	0x20002484

00000a14 <call_return_reg()>:
     a14:	b500      	push	{lr}
     a16:	f7ff fffe 	bl	a00 <return_reg()>
     a1a:	6803      	ldr	r3, [r0, #0]
     a1c:	2b40      	cmp	r3, #64	; 0x40
     a1e:	bf0c      	ite	eq
     a20:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     a24:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <call_return_reg()+0x1c>)
     a2a:	605a      	str	r2, [r3, #4]
     a2c:	f85d fb04 	ldr.w	pc, [sp], #4
     a30:	200023e0 	.word	0x200023e0

00000a34 <return_periph()>:
     a34:	2340      	movs	r3, #64	; 0x40
     a36:	4801      	ldr	r0, [pc, #4]	; (a3c <return_periph()+0x8>)
     a38:	6043      	str	r3, [r0, #4]
     a3a:	4770      	bx	lr
     a3c:	20002480 	.word	0x20002480

00000a40 <call_return_periph()>:
     a40:	b500      	push	{lr}
     a42:	f7ff fffe 	bl	a34 <return_periph()>
     a46:	6843      	ldr	r3, [r0, #4]
     a48:	2b40      	cmp	r3, #64	; 0x40
     a4a:	bf0c      	ite	eq
     a4c:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     a50:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     a54:	4b01      	ldr	r3, [pc, #4]	; (a5c <call_return_periph()+0x1c>)
     a56:	605a      	str	r2, [r3, #4]
     a58:	f85d fb04 	ldr.w	pc, [sp], #4
     a5c:	200023e0 	.word	0x200023e0

00000a60 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a60:	2805      	cmp	r0, #5
     a62:	d006      	beq.n	a72 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a64:	2806      	cmp	r0, #6
     a66:	bf0c      	ite	eq
     a68:	2244      	moveq	r2, #68	; 0x44
     a6a:	2255      	movne	r2, #85	; 0x55
     a6c:	4b03      	ldr	r3, [pc, #12]	; (a7c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a6e:	62da      	str	r2, [r3, #44]	; 0x2c
     a70:	4770      	bx	lr
     a72:	2233      	movs	r2, #51	; 0x33
     a74:	4b01      	ldr	r3, [pc, #4]	; (a7c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a76:	62da      	str	r2, [r3, #44]	; 0x2c
     a78:	4770      	bx	lr
     a7a:	bf00      	nop
     a7c:	200022c0 	.word	0x200022c0

00000a80 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a80:	6803      	ldr	r3, [r0, #0]
     a82:	2b05      	cmp	r3, #5
     a84:	d006      	beq.n	a94 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a86:	2b06      	cmp	r3, #6
     a88:	bf0c      	ite	eq
     a8a:	2277      	moveq	r2, #119	; 0x77
     a8c:	2288      	movne	r2, #136	; 0x88
     a8e:	4b03      	ldr	r3, [pc, #12]	; (a9c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a90:	62da      	str	r2, [r3, #44]	; 0x2c
     a92:	4770      	bx	lr
     a94:	2266      	movs	r2, #102	; 0x66
     a96:	4b01      	ldr	r3, [pc, #4]	; (a9c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a98:	62da      	str	r2, [r3, #44]	; 0x2c
     a9a:	4770      	bx	lr
     a9c:	200022c0 	.word	0x200022c0

00000aa0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     aa0:	4a03      	ldr	r2, [pc, #12]	; (ab0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     aa2:	6853      	ldr	r3, [r2, #4]
     aa4:	ea23 0000 	bic.w	r0, r3, r0
     aa8:	4308      	orrs	r0, r1
     aaa:	6050      	str	r0, [r2, #4]
     aac:	4770      	bx	lr
     aae:	bf00      	nop
     ab0:	20002480 	.word	0x20002480

00000ab4 <call_range_val(unsigned int)>:
     ab4:	0301      	lsls	r1, r0, #12
     ab6:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     aba:	f7ff bffe 	b.w	aa0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     abe:	bf00      	nop

00000ac0 <call_range_val_port()>:
     ac0:	201f      	movs	r0, #31
     ac2:	f7ff bffe 	b.w	ab4 <call_range_val(unsigned int)>
     ac6:	bf00      	nop

00000ac8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ac8:	4a03      	ldr	r2, [pc, #12]	; (ad8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     aca:	6853      	ldr	r3, [r2, #4]
     acc:	ea23 0000 	bic.w	r0, r3, r0
     ad0:	4308      	orrs	r0, r1
     ad2:	6050      	str	r0, [r2, #4]
     ad4:	4770      	bx	lr
     ad6:	bf00      	nop
     ad8:	20002480 	.word	0x20002480

00000adc <call_range_ref(unsigned int)>:
     adc:	0301      	lsls	r1, r0, #12
     ade:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     ae2:	f7ff bffe 	b.w	ac8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     ae6:	bf00      	nop

00000ae8 <call_range_ref_port()>:
     ae8:	200c      	movs	r0, #12
     aea:	f7ff bffe 	b.w	adc <call_range_ref(unsigned int)>
     aee:	bf00      	nop

00000af0 <check_array_range_pass(unsigned int)>:
     af0:	2816      	cmp	r0, #22
     af2:	bf94      	ite	ls
     af4:	227f      	movls	r2, #127	; 0x7f
     af6:	2283      	movhi	r2, #131	; 0x83
     af8:	4b01      	ldr	r3, [pc, #4]	; (b00 <check_array_range_pass(unsigned int)+0x10>)
     afa:	62da      	str	r2, [r3, #44]	; 0x2c
     afc:	4770      	bx	lr
     afe:	bf00      	nop
     b00:	200022c0 	.word	0x200022c0

00000b04 <check_array_range_fail(unsigned int)>:
     b04:	2816      	cmp	r0, #22
     b06:	bf94      	ite	ls
     b08:	2295      	movls	r2, #149	; 0x95
     b0a:	2297      	movhi	r2, #151	; 0x97
     b0c:	4b01      	ldr	r3, [pc, #4]	; (b14 <check_array_range_fail(unsigned int)+0x10>)
     b0e:	62da      	str	r2, [r3, #44]	; 0x2c
     b10:	4770      	bx	lr
     b12:	bf00      	nop
     b14:	200022c0 	.word	0x200022c0

00000b18 <check_bits_range_pass(unsigned int)>:
     b18:	280f      	cmp	r0, #15
     b1a:	bf94      	ite	ls
     b1c:	229d      	movls	r2, #157	; 0x9d
     b1e:	22a3      	movhi	r2, #163	; 0xa3
     b20:	4b01      	ldr	r3, [pc, #4]	; (b28 <check_bits_range_pass(unsigned int)+0x10>)
     b22:	62da      	str	r2, [r3, #44]	; 0x2c
     b24:	4770      	bx	lr
     b26:	bf00      	nop
     b28:	200022c0 	.word	0x200022c0

00000b2c <check_bits_range_fail(unsigned int)>:
     b2c:	280f      	cmp	r0, #15
     b2e:	bf94      	ite	ls
     b30:	22a7      	movls	r2, #167	; 0xa7
     b32:	22ad      	movhi	r2, #173	; 0xad
     b34:	4b01      	ldr	r3, [pc, #4]	; (b3c <check_bits_range_fail(unsigned int)+0x10>)
     b36:	62da      	str	r2, [r3, #44]	; 0x2c
     b38:	4770      	bx	lr
     b3a:	bf00      	nop
     b3c:	200022c0 	.word	0x200022c0

00000b40 <check_mskd_range_pass(unsigned int)>:
     b40:	281f      	cmp	r0, #31
     b42:	bf94      	ite	ls
     b44:	22b3      	movls	r2, #179	; 0xb3
     b46:	22b5      	movhi	r2, #181	; 0xb5
     b48:	4b01      	ldr	r3, [pc, #4]	; (b50 <check_mskd_range_pass(unsigned int)+0x10>)
     b4a:	62da      	str	r2, [r3, #44]	; 0x2c
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop
     b50:	200022c0 	.word	0x200022c0

00000b54 <check_mskd_range_fail(unsigned int)>:
     b54:	281f      	cmp	r0, #31
     b56:	bf94      	ite	ls
     b58:	22bf      	movls	r2, #191	; 0xbf
     b5a:	22c1      	movhi	r2, #193	; 0xc1
     b5c:	4b01      	ldr	r3, [pc, #4]	; (b64 <check_mskd_range_fail(unsigned int)+0x10>)
     b5e:	62da      	str	r2, [r3, #44]	; 0x2c
     b60:	4770      	bx	lr
     b62:	bf00      	nop
     b64:	200022c0 	.word	0x200022c0

00000b68 <bits_extract_ne()>:
     b68:	2220      	movs	r2, #32
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <bits_extract_ne()+0x14>)
     b6c:	605a      	str	r2, [r3, #4]
     b6e:	685a      	ldr	r2, [r3, #4]
     b70:	2a20      	cmp	r2, #32
     b72:	bf14      	ite	ne
     b74:	2202      	movne	r2, #2
     b76:	2204      	moveq	r2, #4
     b78:	605a      	str	r2, [r3, #4]
     b7a:	4770      	bx	lr
     b7c:	20002480 	.word	0x20002480

00000b80 <mskd_extract_geq()>:
     b80:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <mskd_extract_geq()+0x18>)
     b86:	605a      	str	r2, [r3, #4]
     b88:	685b      	ldr	r3, [r3, #4]
     b8a:	4293      	cmp	r3, r2
     b8c:	bf2c      	ite	cs
     b8e:	2220      	movcs	r2, #32
     b90:	2240      	movcc	r2, #64	; 0x40
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <mskd_extract_geq()+0x1c>)
     b94:	605a      	str	r2, [r3, #4]
     b96:	4770      	bx	lr
     b98:	200023e0 	.word	0x200023e0
     b9c:	20002480 	.word	0x20002480

00000ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     ba0:	b410      	push	{r4}
     ba2:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     ba8:	4a04      	ldr	r2, [pc, #16]	; (bbc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
     baa:	605c      	str	r4, [r3, #4]
     bac:	685b      	ldr	r3, [r3, #4]
     bae:	bc10      	pop	{r4}
     bb0:	4018      	ands	r0, r3
     bb2:	40c8      	lsrs	r0, r1
     bb4:	62d0      	str	r0, [r2, #44]	; 0x2c
     bb6:	4770      	bx	lr
     bb8:	200023e0 	.word	0x200023e0
     bbc:	200022c0 	.word	0x200022c0

00000bc0 <call_shifted_const_val()>:
     bc0:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bc4:	2119      	movs	r1, #25
     bc6:	f7ff bffe 	b.w	ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bca:	bf00      	nop

00000bcc <call_shifted_var_val()>:
     bcc:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bd0:	2119      	movs	r1, #25
     bd2:	f7ff bffe 	b.w	ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bd6:	bf00      	nop

00000bd8 <call_shifted_global_val()>:
     bd8:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bdc:	2119      	movs	r1, #25
     bde:	f7ff bffe 	b.w	ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     be2:	bf00      	nop

00000be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     be4:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     be8:	4b05      	ldr	r3, [pc, #20]	; (c00 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     bea:	b410      	push	{r4}
     bec:	6059      	str	r1, [r3, #4]
     bee:	6804      	ldr	r4, [r0, #0]
     bf0:	685b      	ldr	r3, [r3, #4]
     bf2:	6841      	ldr	r1, [r0, #4]
     bf4:	4023      	ands	r3, r4
     bf6:	4a03      	ldr	r2, [pc, #12]	; (c04 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
     bf8:	40cb      	lsrs	r3, r1
     bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
     bfc:	bc10      	pop	{r4}
     bfe:	4770      	bx	lr
     c00:	200023e0 	.word	0x200023e0
     c04:	200022c0 	.word	0x200022c0

00000c08 <call_shifted_const_ref()>:
     c08:	b500      	push	{lr}
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <call_shifted_const_ref()+0x1c>)
     c0c:	b082      	sub	sp, #8
     c0e:	4668      	mov	r0, sp
     c10:	f103 0308 	add.w	r3, r3, #8
     c14:	cb0c      	ldmia	r3, {r2, r3}
     c16:	e88d 000c 	stmia.w	sp, {r2, r3}
     c1a:	f7ff fffe 	bl	be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c1e:	b002      	add	sp, #8
     c20:	f85d fb04 	ldr.w	pc, [sp], #4
     c24:	00000000 	.word	0x00000000

00000c28 <call_shifted_var_ref()>:
     c28:	b500      	push	{lr}
     c2a:	4b06      	ldr	r3, [pc, #24]	; (c44 <call_shifted_var_ref()+0x1c>)
     c2c:	b082      	sub	sp, #8
     c2e:	4668      	mov	r0, sp
     c30:	f103 0310 	add.w	r3, r3, #16
     c34:	cb0c      	ldmia	r3, {r2, r3}
     c36:	e88d 000c 	stmia.w	sp, {r2, r3}
     c3a:	f7ff fffe 	bl	be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c3e:	b002      	add	sp, #8
     c40:	f85d fb04 	ldr.w	pc, [sp], #4
     c44:	00000000 	.word	0x00000000

00000c48 <call_shifted_global_ref()>:
     c48:	b500      	push	{lr}
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <call_shifted_global_ref()+0x1c>)
     c4c:	b082      	sub	sp, #8
     c4e:	4668      	mov	r0, sp
     c50:	f103 0308 	add.w	r3, r3, #8
     c54:	cb0c      	ldmia	r3, {r2, r3}
     c56:	e88d 000c 	stmia.w	sp, {r2, r3}
     c5a:	f7ff fffe 	bl	be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c5e:	b002      	add	sp, #8
     c60:	f85d fb04 	ldr.w	pc, [sp], #4
     c64:	00000000 	.word	0x00000000

00000c68 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     c68:	0643      	lsls	r3, r0, #25
     c6a:	bf4c      	ite	mi
     c6c:	2202      	movmi	r2, #2
     c6e:	2204      	movpl	r2, #4
     c70:	4b01      	ldr	r3, [pc, #4]	; (c78 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     c72:	605a      	str	r2, [r3, #4]
     c74:	4770      	bx	lr
     c76:	bf00      	nop
     c78:	20002480 	.word	0x20002480

00000c7c <call_copy_bits_val()>:
     c7c:	2240      	movs	r2, #64	; 0x40
     c7e:	4b02      	ldr	r3, [pc, #8]	; (c88 <call_copy_bits_val()+0xc>)
     c80:	605a      	str	r2, [r3, #4]
     c82:	6858      	ldr	r0, [r3, #4]
     c84:	f7ff bffe 	b.w	c68 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     c88:	20002480 	.word	0x20002480

00000c8c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     c8c:	6803      	ldr	r3, [r0, #0]
     c8e:	065b      	lsls	r3, r3, #25
     c90:	bf4c      	ite	mi
     c92:	2202      	movmi	r2, #2
     c94:	2204      	movpl	r2, #4
     c96:	4b01      	ldr	r3, [pc, #4]	; (c9c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x10>)
     c98:	605a      	str	r2, [r3, #4]
     c9a:	4770      	bx	lr
     c9c:	20002480 	.word	0x20002480

00000ca0 <call_copy_bits_ref()>:
     ca0:	2240      	movs	r2, #64	; 0x40
     ca2:	b500      	push	{lr}
     ca4:	4b05      	ldr	r3, [pc, #20]	; (cbc <call_copy_bits_ref()+0x1c>)
     ca6:	b081      	sub	sp, #4
     ca8:	605a      	str	r2, [r3, #4]
     caa:	685b      	ldr	r3, [r3, #4]
     cac:	4668      	mov	r0, sp
     cae:	9300      	str	r3, [sp, #0]
     cb0:	f7ff fffe 	bl	c8c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     cb4:	b001      	add	sp, #4
     cb6:	f85d fb04 	ldr.w	pc, [sp], #4
     cba:	bf00      	nop
     cbc:	20002480 	.word	0x20002480

00000cc0 <run>:
     cc0:	b510      	push	{r4, lr}
     cc2:	4cb3      	ldr	r4, [pc, #716]	; (f90 <run+0x2d0>)
     cc4:	7823      	ldrb	r3, [r4, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	f000 82e2 	beq.w	1290 <run+0x5d0>
     ccc:	68a1      	ldr	r1, [r4, #8]
     cce:	7b23      	ldrb	r3, [r4, #12]
     cd0:	b91b      	cbnz	r3, cda <run+0x1a>
     cd2:	2201      	movs	r2, #1
     cd4:	4baf      	ldr	r3, [pc, #700]	; (f94 <run+0x2d4>)
     cd6:	7322      	strb	r2, [r4, #12]
     cd8:	6163      	str	r3, [r4, #20]
     cda:	7e23      	ldrb	r3, [r4, #24]
     cdc:	b91b      	cbnz	r3, ce6 <run+0x26>
     cde:	2201      	movs	r2, #1
     ce0:	4bad      	ldr	r3, [pc, #692]	; (f98 <run+0x2d8>)
     ce2:	7622      	strb	r2, [r4, #24]
     ce4:	6223      	str	r3, [r4, #32]
     ce6:	2200      	movs	r2, #0
     ce8:	48ac      	ldr	r0, [pc, #688]	; (f9c <run+0x2dc>)
     cea:	f7ff fffe 	bl	0 <do_test>
     cee:	68a1      	ldr	r1, [r4, #8]
     cf0:	2201      	movs	r2, #1
     cf2:	48ab      	ldr	r0, [pc, #684]	; (fa0 <run+0x2e0>)
     cf4:	f7ff fffe 	bl	0 <do_test>
     cf8:	68a1      	ldr	r1, [r4, #8]
     cfa:	2202      	movs	r2, #2
     cfc:	48a9      	ldr	r0, [pc, #676]	; (fa4 <run+0x2e4>)
     cfe:	f7ff fffe 	bl	0 <do_test>
     d02:	68a1      	ldr	r1, [r4, #8]
     d04:	2203      	movs	r2, #3
     d06:	48a8      	ldr	r0, [pc, #672]	; (fa8 <run+0x2e8>)
     d08:	f7ff fffe 	bl	0 <do_test>
     d0c:	68a1      	ldr	r1, [r4, #8]
     d0e:	2204      	movs	r2, #4
     d10:	48a6      	ldr	r0, [pc, #664]	; (fac <run+0x2ec>)
     d12:	f7ff fffe 	bl	0 <do_test>
     d16:	68a1      	ldr	r1, [r4, #8]
     d18:	2205      	movs	r2, #5
     d1a:	48a5      	ldr	r0, [pc, #660]	; (fb0 <run+0x2f0>)
     d1c:	f7ff fffe 	bl	0 <do_test>
     d20:	68a1      	ldr	r1, [r4, #8]
     d22:	2206      	movs	r2, #6
     d24:	48a3      	ldr	r0, [pc, #652]	; (fb4 <run+0x2f4>)
     d26:	f7ff fffe 	bl	0 <do_test>
     d2a:	68a1      	ldr	r1, [r4, #8]
     d2c:	2207      	movs	r2, #7
     d2e:	48a2      	ldr	r0, [pc, #648]	; (fb8 <run+0x2f8>)
     d30:	f7ff fffe 	bl	0 <do_test>
     d34:	68a1      	ldr	r1, [r4, #8]
     d36:	2208      	movs	r2, #8
     d38:	48a0      	ldr	r0, [pc, #640]	; (fbc <run+0x2fc>)
     d3a:	f7ff fffe 	bl	0 <do_test>
     d3e:	68a1      	ldr	r1, [r4, #8]
     d40:	2209      	movs	r2, #9
     d42:	489f      	ldr	r0, [pc, #636]	; (fc0 <run+0x300>)
     d44:	f7ff fffe 	bl	0 <do_test>
     d48:	68a1      	ldr	r1, [r4, #8]
     d4a:	220a      	movs	r2, #10
     d4c:	489d      	ldr	r0, [pc, #628]	; (fc4 <run+0x304>)
     d4e:	f7ff fffe 	bl	0 <do_test>
     d52:	68a1      	ldr	r1, [r4, #8]
     d54:	220b      	movs	r2, #11
     d56:	489c      	ldr	r0, [pc, #624]	; (fc8 <run+0x308>)
     d58:	f7ff fffe 	bl	0 <do_test>
     d5c:	68a1      	ldr	r1, [r4, #8]
     d5e:	220c      	movs	r2, #12
     d60:	489a      	ldr	r0, [pc, #616]	; (fcc <run+0x30c>)
     d62:	f7ff fffe 	bl	0 <do_test>
     d66:	68a1      	ldr	r1, [r4, #8]
     d68:	220d      	movs	r2, #13
     d6a:	4899      	ldr	r0, [pc, #612]	; (fd0 <run+0x310>)
     d6c:	f7ff fffe 	bl	0 <do_test>
     d70:	68a1      	ldr	r1, [r4, #8]
     d72:	220e      	movs	r2, #14
     d74:	4897      	ldr	r0, [pc, #604]	; (fd4 <run+0x314>)
     d76:	f7ff fffe 	bl	0 <do_test>
     d7a:	68a1      	ldr	r1, [r4, #8]
     d7c:	220f      	movs	r2, #15
     d7e:	4896      	ldr	r0, [pc, #600]	; (fd8 <run+0x318>)
     d80:	f7ff fffe 	bl	0 <do_test>
     d84:	68a1      	ldr	r1, [r4, #8]
     d86:	2210      	movs	r2, #16
     d88:	4894      	ldr	r0, [pc, #592]	; (fdc <run+0x31c>)
     d8a:	f7ff fffe 	bl	0 <do_test>
     d8e:	68a1      	ldr	r1, [r4, #8]
     d90:	2211      	movs	r2, #17
     d92:	4893      	ldr	r0, [pc, #588]	; (fe0 <run+0x320>)
     d94:	f7ff fffe 	bl	0 <do_test>
     d98:	68a1      	ldr	r1, [r4, #8]
     d9a:	2212      	movs	r2, #18
     d9c:	4891      	ldr	r0, [pc, #580]	; (fe4 <run+0x324>)
     d9e:	f7ff fffe 	bl	0 <do_test>
     da2:	68a1      	ldr	r1, [r4, #8]
     da4:	2213      	movs	r2, #19
     da6:	4890      	ldr	r0, [pc, #576]	; (fe8 <run+0x328>)
     da8:	f7ff fffe 	bl	0 <do_test>
     dac:	68a1      	ldr	r1, [r4, #8]
     dae:	2214      	movs	r2, #20
     db0:	488e      	ldr	r0, [pc, #568]	; (fec <run+0x32c>)
     db2:	f7ff fffe 	bl	0 <do_test>
     db6:	68a1      	ldr	r1, [r4, #8]
     db8:	2215      	movs	r2, #21
     dba:	488d      	ldr	r0, [pc, #564]	; (ff0 <run+0x330>)
     dbc:	f7ff fffe 	bl	0 <do_test>
     dc0:	68a1      	ldr	r1, [r4, #8]
     dc2:	2216      	movs	r2, #22
     dc4:	488b      	ldr	r0, [pc, #556]	; (ff4 <run+0x334>)
     dc6:	f7ff fffe 	bl	0 <do_test>
     dca:	68a1      	ldr	r1, [r4, #8]
     dcc:	2217      	movs	r2, #23
     dce:	488a      	ldr	r0, [pc, #552]	; (ff8 <run+0x338>)
     dd0:	f7ff fffe 	bl	0 <do_test>
     dd4:	68a1      	ldr	r1, [r4, #8]
     dd6:	2218      	movs	r2, #24
     dd8:	4888      	ldr	r0, [pc, #544]	; (ffc <run+0x33c>)
     dda:	f7ff fffe 	bl	0 <do_test>
     dde:	68a1      	ldr	r1, [r4, #8]
     de0:	2219      	movs	r2, #25
     de2:	4887      	ldr	r0, [pc, #540]	; (1000 <run+0x340>)
     de4:	f7ff fffe 	bl	0 <do_test>
     de8:	68a1      	ldr	r1, [r4, #8]
     dea:	221a      	movs	r2, #26
     dec:	4885      	ldr	r0, [pc, #532]	; (1004 <run+0x344>)
     dee:	f7ff fffe 	bl	0 <do_test>
     df2:	68a1      	ldr	r1, [r4, #8]
     df4:	221b      	movs	r2, #27
     df6:	4884      	ldr	r0, [pc, #528]	; (1008 <run+0x348>)
     df8:	f7ff fffe 	bl	0 <do_test>
     dfc:	68a1      	ldr	r1, [r4, #8]
     dfe:	221c      	movs	r2, #28
     e00:	4882      	ldr	r0, [pc, #520]	; (100c <run+0x34c>)
     e02:	f7ff fffe 	bl	0 <do_test>
     e06:	68a1      	ldr	r1, [r4, #8]
     e08:	221d      	movs	r2, #29
     e0a:	4881      	ldr	r0, [pc, #516]	; (1010 <run+0x350>)
     e0c:	f7ff fffe 	bl	0 <do_test>
     e10:	68a1      	ldr	r1, [r4, #8]
     e12:	221e      	movs	r2, #30
     e14:	487f      	ldr	r0, [pc, #508]	; (1014 <run+0x354>)
     e16:	f7ff fffe 	bl	0 <do_test>
     e1a:	68a1      	ldr	r1, [r4, #8]
     e1c:	221f      	movs	r2, #31
     e1e:	487e      	ldr	r0, [pc, #504]	; (1018 <run+0x358>)
     e20:	f7ff fffe 	bl	0 <do_test>
     e24:	68a1      	ldr	r1, [r4, #8]
     e26:	2220      	movs	r2, #32
     e28:	487c      	ldr	r0, [pc, #496]	; (101c <run+0x35c>)
     e2a:	f7ff fffe 	bl	0 <do_test>
     e2e:	68a1      	ldr	r1, [r4, #8]
     e30:	2221      	movs	r2, #33	; 0x21
     e32:	487b      	ldr	r0, [pc, #492]	; (1020 <run+0x360>)
     e34:	f7ff fffe 	bl	0 <do_test>
     e38:	68a1      	ldr	r1, [r4, #8]
     e3a:	2222      	movs	r2, #34	; 0x22
     e3c:	4879      	ldr	r0, [pc, #484]	; (1024 <run+0x364>)
     e3e:	f7ff fffe 	bl	0 <do_test>
     e42:	68a1      	ldr	r1, [r4, #8]
     e44:	2223      	movs	r2, #35	; 0x23
     e46:	4878      	ldr	r0, [pc, #480]	; (1028 <run+0x368>)
     e48:	f7ff fffe 	bl	0 <do_test>
     e4c:	68a1      	ldr	r1, [r4, #8]
     e4e:	2224      	movs	r2, #36	; 0x24
     e50:	4876      	ldr	r0, [pc, #472]	; (102c <run+0x36c>)
     e52:	f7ff fffe 	bl	0 <do_test>
     e56:	6961      	ldr	r1, [r4, #20]
     e58:	2225      	movs	r2, #37	; 0x25
     e5a:	4875      	ldr	r0, [pc, #468]	; (1030 <run+0x370>)
     e5c:	f7ff fffe 	bl	0 <do_test>
     e60:	6961      	ldr	r1, [r4, #20]
     e62:	2226      	movs	r2, #38	; 0x26
     e64:	4873      	ldr	r0, [pc, #460]	; (1034 <run+0x374>)
     e66:	f7ff fffe 	bl	0 <do_test>
     e6a:	6961      	ldr	r1, [r4, #20]
     e6c:	2227      	movs	r2, #39	; 0x27
     e6e:	4872      	ldr	r0, [pc, #456]	; (1038 <run+0x378>)
     e70:	f7ff fffe 	bl	0 <do_test>
     e74:	68a1      	ldr	r1, [r4, #8]
     e76:	2228      	movs	r2, #40	; 0x28
     e78:	4870      	ldr	r0, [pc, #448]	; (103c <run+0x37c>)
     e7a:	f7ff fffe 	bl	0 <do_test>
     e7e:	68a1      	ldr	r1, [r4, #8]
     e80:	2229      	movs	r2, #41	; 0x29
     e82:	486f      	ldr	r0, [pc, #444]	; (1040 <run+0x380>)
     e84:	f7ff fffe 	bl	0 <do_test>
     e88:	68a1      	ldr	r1, [r4, #8]
     e8a:	222a      	movs	r2, #42	; 0x2a
     e8c:	486d      	ldr	r0, [pc, #436]	; (1044 <run+0x384>)
     e8e:	f7ff fffe 	bl	0 <do_test>
     e92:	68a1      	ldr	r1, [r4, #8]
     e94:	222b      	movs	r2, #43	; 0x2b
     e96:	486c      	ldr	r0, [pc, #432]	; (1048 <run+0x388>)
     e98:	f7ff fffe 	bl	0 <do_test>
     e9c:	68a1      	ldr	r1, [r4, #8]
     e9e:	222c      	movs	r2, #44	; 0x2c
     ea0:	486a      	ldr	r0, [pc, #424]	; (104c <run+0x38c>)
     ea2:	f7ff fffe 	bl	0 <do_test>
     ea6:	6a21      	ldr	r1, [r4, #32]
     ea8:	222d      	movs	r2, #45	; 0x2d
     eaa:	4869      	ldr	r0, [pc, #420]	; (1050 <run+0x390>)
     eac:	f7ff fffe 	bl	0 <do_test>
     eb0:	68a1      	ldr	r1, [r4, #8]
     eb2:	222e      	movs	r2, #46	; 0x2e
     eb4:	4867      	ldr	r0, [pc, #412]	; (1054 <run+0x394>)
     eb6:	f7ff fffe 	bl	0 <do_test>
     eba:	68a1      	ldr	r1, [r4, #8]
     ebc:	222f      	movs	r2, #47	; 0x2f
     ebe:	4866      	ldr	r0, [pc, #408]	; (1058 <run+0x398>)
     ec0:	f7ff fffe 	bl	0 <do_test>
     ec4:	68a1      	ldr	r1, [r4, #8]
     ec6:	2230      	movs	r2, #48	; 0x30
     ec8:	4864      	ldr	r0, [pc, #400]	; (105c <run+0x39c>)
     eca:	f7ff fffe 	bl	0 <do_test>
     ece:	68a1      	ldr	r1, [r4, #8]
     ed0:	2231      	movs	r2, #49	; 0x31
     ed2:	4863      	ldr	r0, [pc, #396]	; (1060 <run+0x3a0>)
     ed4:	f7ff fffe 	bl	0 <do_test>
     ed8:	68a1      	ldr	r1, [r4, #8]
     eda:	2232      	movs	r2, #50	; 0x32
     edc:	4861      	ldr	r0, [pc, #388]	; (1064 <run+0x3a4>)
     ede:	f7ff fffe 	bl	0 <do_test>
     ee2:	68a1      	ldr	r1, [r4, #8]
     ee4:	2233      	movs	r2, #51	; 0x33
     ee6:	4860      	ldr	r0, [pc, #384]	; (1068 <run+0x3a8>)
     ee8:	f7ff fffe 	bl	0 <do_test>
     eec:	68a1      	ldr	r1, [r4, #8]
     eee:	2234      	movs	r2, #52	; 0x34
     ef0:	485e      	ldr	r0, [pc, #376]	; (106c <run+0x3ac>)
     ef2:	f7ff fffe 	bl	0 <do_test>
     ef6:	68a1      	ldr	r1, [r4, #8]
     ef8:	2235      	movs	r2, #53	; 0x35
     efa:	485d      	ldr	r0, [pc, #372]	; (1070 <run+0x3b0>)
     efc:	f7ff fffe 	bl	0 <do_test>
     f00:	68a1      	ldr	r1, [r4, #8]
     f02:	2236      	movs	r2, #54	; 0x36
     f04:	485b      	ldr	r0, [pc, #364]	; (1074 <run+0x3b4>)
     f06:	f7ff fffe 	bl	0 <do_test>
     f0a:	68a1      	ldr	r1, [r4, #8]
     f0c:	2237      	movs	r2, #55	; 0x37
     f0e:	485a      	ldr	r0, [pc, #360]	; (1078 <run+0x3b8>)
     f10:	f7ff fffe 	bl	0 <do_test>
     f14:	68a1      	ldr	r1, [r4, #8]
     f16:	2238      	movs	r2, #56	; 0x38
     f18:	4858      	ldr	r0, [pc, #352]	; (107c <run+0x3bc>)
     f1a:	f7ff fffe 	bl	0 <do_test>
     f1e:	68a1      	ldr	r1, [r4, #8]
     f20:	2239      	movs	r2, #57	; 0x39
     f22:	4857      	ldr	r0, [pc, #348]	; (1080 <run+0x3c0>)
     f24:	f7ff fffe 	bl	0 <do_test>
     f28:	68a1      	ldr	r1, [r4, #8]
     f2a:	223a      	movs	r2, #58	; 0x3a
     f2c:	4855      	ldr	r0, [pc, #340]	; (1084 <run+0x3c4>)
     f2e:	f7ff fffe 	bl	0 <do_test>
     f32:	68a1      	ldr	r1, [r4, #8]
     f34:	223b      	movs	r2, #59	; 0x3b
     f36:	4854      	ldr	r0, [pc, #336]	; (1088 <run+0x3c8>)
     f38:	f7ff fffe 	bl	0 <do_test>
     f3c:	68a1      	ldr	r1, [r4, #8]
     f3e:	223c      	movs	r2, #60	; 0x3c
     f40:	4852      	ldr	r0, [pc, #328]	; (108c <run+0x3cc>)
     f42:	f7ff fffe 	bl	0 <do_test>
     f46:	68a1      	ldr	r1, [r4, #8]
     f48:	223d      	movs	r2, #61	; 0x3d
     f4a:	4851      	ldr	r0, [pc, #324]	; (1090 <run+0x3d0>)
     f4c:	f7ff fffe 	bl	0 <do_test>
     f50:	68a1      	ldr	r1, [r4, #8]
     f52:	223e      	movs	r2, #62	; 0x3e
     f54:	484f      	ldr	r0, [pc, #316]	; (1094 <run+0x3d4>)
     f56:	f7ff fffe 	bl	0 <do_test>
     f5a:	68a1      	ldr	r1, [r4, #8]
     f5c:	223f      	movs	r2, #63	; 0x3f
     f5e:	484e      	ldr	r0, [pc, #312]	; (1098 <run+0x3d8>)
     f60:	f7ff fffe 	bl	0 <do_test>
     f64:	6961      	ldr	r1, [r4, #20]
     f66:	2240      	movs	r2, #64	; 0x40
     f68:	484c      	ldr	r0, [pc, #304]	; (109c <run+0x3dc>)
     f6a:	f7ff fffe 	bl	0 <do_test>
     f6e:	6961      	ldr	r1, [r4, #20]
     f70:	2241      	movs	r2, #65	; 0x41
     f72:	484b      	ldr	r0, [pc, #300]	; (10a0 <run+0x3e0>)
     f74:	f7ff fffe 	bl	0 <do_test>
     f78:	6961      	ldr	r1, [r4, #20]
     f7a:	2242      	movs	r2, #66	; 0x42
     f7c:	4849      	ldr	r0, [pc, #292]	; (10a4 <run+0x3e4>)
     f7e:	f7ff fffe 	bl	0 <do_test>
     f82:	68a1      	ldr	r1, [r4, #8]
     f84:	2243      	movs	r2, #67	; 0x43
     f86:	4848      	ldr	r0, [pc, #288]	; (10a8 <run+0x3e8>)
     f88:	f7ff fffe 	bl	0 <do_test>
     f8c:	e08e      	b.n	10ac <run+0x3ec>
     f8e:	bf00      	nop
     f90:	00000000 	.word	0x00000000
     f94:	200023e4 	.word	0x200023e4
     f98:	200022ec 	.word	0x200022ec
	...
    10ac:	6a21      	ldr	r1, [r4, #32]
    10ae:	2244      	movs	r2, #68	; 0x44
    10b0:	487a      	ldr	r0, [pc, #488]	; (129c <run+0x5dc>)
    10b2:	f7ff fffe 	bl	0 <do_test>
    10b6:	6a21      	ldr	r1, [r4, #32]
    10b8:	2245      	movs	r2, #69	; 0x45
    10ba:	4879      	ldr	r0, [pc, #484]	; (12a0 <run+0x5e0>)
    10bc:	f7ff fffe 	bl	0 <do_test>
    10c0:	68a1      	ldr	r1, [r4, #8]
    10c2:	2246      	movs	r2, #70	; 0x46
    10c4:	4877      	ldr	r0, [pc, #476]	; (12a4 <run+0x5e4>)
    10c6:	f7ff fffe 	bl	0 <do_test>
    10ca:	68a1      	ldr	r1, [r4, #8]
    10cc:	2247      	movs	r2, #71	; 0x47
    10ce:	4876      	ldr	r0, [pc, #472]	; (12a8 <run+0x5e8>)
    10d0:	f7ff fffe 	bl	0 <do_test>
    10d4:	6a21      	ldr	r1, [r4, #32]
    10d6:	2248      	movs	r2, #72	; 0x48
    10d8:	4874      	ldr	r0, [pc, #464]	; (12ac <run+0x5ec>)
    10da:	f7ff fffe 	bl	0 <do_test>
    10de:	6a21      	ldr	r1, [r4, #32]
    10e0:	2249      	movs	r2, #73	; 0x49
    10e2:	4873      	ldr	r0, [pc, #460]	; (12b0 <run+0x5f0>)
    10e4:	f7ff fffe 	bl	0 <do_test>
    10e8:	68a1      	ldr	r1, [r4, #8]
    10ea:	224a      	movs	r2, #74	; 0x4a
    10ec:	4871      	ldr	r0, [pc, #452]	; (12b4 <run+0x5f4>)
    10ee:	f7ff fffe 	bl	0 <do_test>
    10f2:	68a1      	ldr	r1, [r4, #8]
    10f4:	224b      	movs	r2, #75	; 0x4b
    10f6:	4870      	ldr	r0, [pc, #448]	; (12b8 <run+0x5f8>)
    10f8:	f7ff fffe 	bl	0 <do_test>
    10fc:	68a1      	ldr	r1, [r4, #8]
    10fe:	224c      	movs	r2, #76	; 0x4c
    1100:	486e      	ldr	r0, [pc, #440]	; (12bc <run+0x5fc>)
    1102:	f7ff fffe 	bl	0 <do_test>
    1106:	68a1      	ldr	r1, [r4, #8]
    1108:	224d      	movs	r2, #77	; 0x4d
    110a:	486d      	ldr	r0, [pc, #436]	; (12c0 <run+0x600>)
    110c:	f7ff fffe 	bl	0 <do_test>
    1110:	68a1      	ldr	r1, [r4, #8]
    1112:	224e      	movs	r2, #78	; 0x4e
    1114:	486b      	ldr	r0, [pc, #428]	; (12c4 <run+0x604>)
    1116:	f7ff fffe 	bl	0 <do_test>
    111a:	68a1      	ldr	r1, [r4, #8]
    111c:	224f      	movs	r2, #79	; 0x4f
    111e:	486a      	ldr	r0, [pc, #424]	; (12c8 <run+0x608>)
    1120:	f7ff fffe 	bl	0 <do_test>
    1124:	68a1      	ldr	r1, [r4, #8]
    1126:	2250      	movs	r2, #80	; 0x50
    1128:	4868      	ldr	r0, [pc, #416]	; (12cc <run+0x60c>)
    112a:	f7ff fffe 	bl	0 <do_test>
    112e:	68a1      	ldr	r1, [r4, #8]
    1130:	2251      	movs	r2, #81	; 0x51
    1132:	4866      	ldr	r0, [pc, #408]	; (12cc <run+0x60c>)
    1134:	f7ff fffe 	bl	0 <do_test>
    1138:	68a1      	ldr	r1, [r4, #8]
    113a:	2252      	movs	r2, #82	; 0x52
    113c:	4864      	ldr	r0, [pc, #400]	; (12d0 <run+0x610>)
    113e:	f7ff fffe 	bl	0 <do_test>
    1142:	68a1      	ldr	r1, [r4, #8]
    1144:	2253      	movs	r2, #83	; 0x53
    1146:	4863      	ldr	r0, [pc, #396]	; (12d4 <run+0x614>)
    1148:	f7ff fffe 	bl	0 <do_test>
    114c:	68a1      	ldr	r1, [r4, #8]
    114e:	2254      	movs	r2, #84	; 0x54
    1150:	4861      	ldr	r0, [pc, #388]	; (12d8 <run+0x618>)
    1152:	f7ff fffe 	bl	0 <do_test>
    1156:	68a1      	ldr	r1, [r4, #8]
    1158:	2255      	movs	r2, #85	; 0x55
    115a:	4860      	ldr	r0, [pc, #384]	; (12dc <run+0x61c>)
    115c:	f7ff fffe 	bl	0 <do_test>
    1160:	68a1      	ldr	r1, [r4, #8]
    1162:	2256      	movs	r2, #86	; 0x56
    1164:	485e      	ldr	r0, [pc, #376]	; (12e0 <run+0x620>)
    1166:	f7ff fffe 	bl	0 <do_test>
    116a:	68a1      	ldr	r1, [r4, #8]
    116c:	2257      	movs	r2, #87	; 0x57
    116e:	485b      	ldr	r0, [pc, #364]	; (12dc <run+0x61c>)
    1170:	f7ff fffe 	bl	0 <do_test>
    1174:	68a1      	ldr	r1, [r4, #8]
    1176:	2258      	movs	r2, #88	; 0x58
    1178:	485a      	ldr	r0, [pc, #360]	; (12e4 <run+0x624>)
    117a:	f7ff fffe 	bl	0 <do_test>
    117e:	68a1      	ldr	r1, [r4, #8]
    1180:	2259      	movs	r2, #89	; 0x59
    1182:	4859      	ldr	r0, [pc, #356]	; (12e8 <run+0x628>)
    1184:	f7ff fffe 	bl	0 <do_test>
    1188:	6a21      	ldr	r1, [r4, #32]
    118a:	225a      	movs	r2, #90	; 0x5a
    118c:	4857      	ldr	r0, [pc, #348]	; (12ec <run+0x62c>)
    118e:	f7ff fffe 	bl	0 <do_test>
    1192:	6a21      	ldr	r1, [r4, #32]
    1194:	225b      	movs	r2, #91	; 0x5b
    1196:	4856      	ldr	r0, [pc, #344]	; (12f0 <run+0x630>)
    1198:	f7ff fffe 	bl	0 <do_test>
    119c:	68a1      	ldr	r1, [r4, #8]
    119e:	225c      	movs	r2, #92	; 0x5c
    11a0:	4854      	ldr	r0, [pc, #336]	; (12f4 <run+0x634>)
    11a2:	f7ff fffe 	bl	0 <do_test>
    11a6:	6a21      	ldr	r1, [r4, #32]
    11a8:	225d      	movs	r2, #93	; 0x5d
    11aa:	4853      	ldr	r0, [pc, #332]	; (12f8 <run+0x638>)
    11ac:	f7ff fffe 	bl	0 <do_test>
    11b0:	6a21      	ldr	r1, [r4, #32]
    11b2:	225e      	movs	r2, #94	; 0x5e
    11b4:	4851      	ldr	r0, [pc, #324]	; (12fc <run+0x63c>)
    11b6:	f7ff fffe 	bl	0 <do_test>
    11ba:	68a1      	ldr	r1, [r4, #8]
    11bc:	225f      	movs	r2, #95	; 0x5f
    11be:	4850      	ldr	r0, [pc, #320]	; (1300 <run+0x640>)
    11c0:	f7ff fffe 	bl	0 <do_test>
    11c4:	68a1      	ldr	r1, [r4, #8]
    11c6:	2260      	movs	r2, #96	; 0x60
    11c8:	484e      	ldr	r0, [pc, #312]	; (1304 <run+0x644>)
    11ca:	f7ff fffe 	bl	0 <do_test>
    11ce:	68a1      	ldr	r1, [r4, #8]
    11d0:	2261      	movs	r2, #97	; 0x61
    11d2:	484d      	ldr	r0, [pc, #308]	; (1308 <run+0x648>)
    11d4:	f7ff fffe 	bl	0 <do_test>
    11d8:	68a1      	ldr	r1, [r4, #8]
    11da:	2262      	movs	r2, #98	; 0x62
    11dc:	484b      	ldr	r0, [pc, #300]	; (130c <run+0x64c>)
    11de:	f7ff fffe 	bl	0 <do_test>
    11e2:	6a21      	ldr	r1, [r4, #32]
    11e4:	2263      	movs	r2, #99	; 0x63
    11e6:	484a      	ldr	r0, [pc, #296]	; (1310 <run+0x650>)
    11e8:	f7ff fffe 	bl	0 <do_test>
    11ec:	6a21      	ldr	r1, [r4, #32]
    11ee:	2264      	movs	r2, #100	; 0x64
    11f0:	4848      	ldr	r0, [pc, #288]	; (1314 <run+0x654>)
    11f2:	f7ff fffe 	bl	0 <do_test>
    11f6:	6a21      	ldr	r1, [r4, #32]
    11f8:	2265      	movs	r2, #101	; 0x65
    11fa:	4847      	ldr	r0, [pc, #284]	; (1318 <run+0x658>)
    11fc:	f7ff fffe 	bl	0 <do_test>
    1200:	6a21      	ldr	r1, [r4, #32]
    1202:	2266      	movs	r2, #102	; 0x66
    1204:	4845      	ldr	r0, [pc, #276]	; (131c <run+0x65c>)
    1206:	f7ff fffe 	bl	0 <do_test>
    120a:	6a21      	ldr	r1, [r4, #32]
    120c:	2267      	movs	r2, #103	; 0x67
    120e:	4844      	ldr	r0, [pc, #272]	; (1320 <run+0x660>)
    1210:	f7ff fffe 	bl	0 <do_test>
    1214:	6a21      	ldr	r1, [r4, #32]
    1216:	2268      	movs	r2, #104	; 0x68
    1218:	4842      	ldr	r0, [pc, #264]	; (1324 <run+0x664>)
    121a:	f7ff fffe 	bl	0 <do_test>
    121e:	68a1      	ldr	r1, [r4, #8]
    1220:	2269      	movs	r2, #105	; 0x69
    1222:	4841      	ldr	r0, [pc, #260]	; (1328 <run+0x668>)
    1224:	f7ff fffe 	bl	0 <do_test>
    1228:	68a1      	ldr	r1, [r4, #8]
    122a:	226a      	movs	r2, #106	; 0x6a
    122c:	483f      	ldr	r0, [pc, #252]	; (132c <run+0x66c>)
    122e:	f7ff fffe 	bl	0 <do_test>
    1232:	68a1      	ldr	r1, [r4, #8]
    1234:	226b      	movs	r2, #107	; 0x6b
    1236:	483e      	ldr	r0, [pc, #248]	; (1330 <run+0x670>)
    1238:	f7ff fffe 	bl	0 <do_test>
    123c:	68a1      	ldr	r1, [r4, #8]
    123e:	226c      	movs	r2, #108	; 0x6c
    1240:	483c      	ldr	r0, [pc, #240]	; (1334 <run+0x674>)
    1242:	f7ff fffe 	bl	0 <do_test>
    1246:	68a1      	ldr	r1, [r4, #8]
    1248:	226d      	movs	r2, #109	; 0x6d
    124a:	483b      	ldr	r0, [pc, #236]	; (1338 <run+0x678>)
    124c:	f7ff fffe 	bl	0 <do_test>
    1250:	68a1      	ldr	r1, [r4, #8]
    1252:	226e      	movs	r2, #110	; 0x6e
    1254:	4839      	ldr	r0, [pc, #228]	; (133c <run+0x67c>)
    1256:	f7ff fffe 	bl	0 <do_test>
    125a:	68a1      	ldr	r1, [r4, #8]
    125c:	226f      	movs	r2, #111	; 0x6f
    125e:	4838      	ldr	r0, [pc, #224]	; (1340 <run+0x680>)
    1260:	f7ff fffe 	bl	0 <do_test>
    1264:	68a1      	ldr	r1, [r4, #8]
    1266:	2270      	movs	r2, #112	; 0x70
    1268:	4836      	ldr	r0, [pc, #216]	; (1344 <run+0x684>)
    126a:	f7ff fffe 	bl	0 <do_test>
    126e:	68a1      	ldr	r1, [r4, #8]
    1270:	2271      	movs	r2, #113	; 0x71
    1272:	4835      	ldr	r0, [pc, #212]	; (1348 <run+0x688>)
    1274:	f7ff fffe 	bl	0 <do_test>
    1278:	68a1      	ldr	r1, [r4, #8]
    127a:	2272      	movs	r2, #114	; 0x72
    127c:	4833      	ldr	r0, [pc, #204]	; (134c <run+0x68c>)
    127e:	f7ff fffe 	bl	0 <do_test>
    1282:	68a1      	ldr	r1, [r4, #8]
    1284:	2273      	movs	r2, #115	; 0x73
    1286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    128a:	4831      	ldr	r0, [pc, #196]	; (c8 <do_test+0xc8>)
    128c:	f7ff bffe 	b.w	0 <do_test>
    1290:	2301      	movs	r3, #1
    1292:	4930      	ldr	r1, [pc, #192]	; (1354 <run+0x694>)
    1294:	7023      	strb	r3, [r4, #0]
    1296:	60a1      	str	r1, [r4, #8]
    1298:	e519      	b.n	cce <run+0xe>
    129a:	bf00      	nop
	...
    1354:	20002484 	.word	0x20002484

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	00000000                                ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	00000000                                ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	00000000                                ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
