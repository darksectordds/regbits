
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       2:	2200      	movs	r2, #0
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
       c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
       e:	2200      	movs	r2, #0
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
      98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9a:	2240      	movs	r2, #64	; 0x40
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
      a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a6:	2240      	movs	r2, #64	; 0x40
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
      b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b2:	2202      	movs	r2, #2
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
      bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      be:	2202      	movs	r2, #2
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	6853      	ldr	r3, [r2, #4]
     154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     158:	f023 0306 	bic.w	r3, r3, #6
     15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     160:	6053      	str	r3, [r2, #4]
     162:	4770      	bx	lr
     164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16a:	6853      	ldr	r3, [r2, #4]
     16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     170:	f023 0306 	bic.w	r3, r3, #6
     174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     178:	6053      	str	r3, [r2, #4]
     17a:	4770      	bx	lr
     17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     182:	2260      	movs	r2, #96	; 0x60
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     18e:	2260      	movs	r2, #96	; 0x60
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19a:	f44f 7242 	mov.w	r2, #776	; 0x308
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1ba:	2222      	movs	r2, #34	; 0x22
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c6:	2222      	movs	r2, #34	; 0x22
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d2:	2244      	movs	r2, #68	; 0x44
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1de:	2244      	movs	r2, #68	; 0x44
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
     1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
     1ea:	2240      	movs	r2, #64	; 0x40
     1ec:	605a      	str	r2, [r3, #4]
     1ee:	2201      	movs	r2, #1
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
     1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
     1fa:	2202      	movs	r2, #2
     1fc:	605a      	str	r2, [r3, #4]
     1fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     20e:	2200      	movs	r2, #0
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
     218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
     222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20002480 	.word	0x20002480
     230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
     234:	4b06      	ldr	r3, [pc, #24]	; (250 <cmp_neq_zero()+0x1c>)
     236:	2200      	movs	r2, #0
     238:	605a      	str	r2, [r3, #4]
     23a:	685b      	ldr	r3, [r3, #4]
     23c:	b11b      	cbz	r3, 246 <cmp_neq_zero()+0x12>
     23e:	4b04      	ldr	r3, [pc, #16]	; (250 <cmp_neq_zero()+0x1c>)
     240:	2204      	movs	r2, #4
     242:	605a      	str	r2, [r3, #4]
     244:	4770      	bx	lr
     246:	4b02      	ldr	r3, [pc, #8]	; (250 <cmp_neq_zero()+0x1c>)
     248:	2220      	movs	r2, #32
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	bf00      	nop
     250:	20002480 	.word	0x20002480

00000254 <cmp_equ_bits()>:
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <cmp_equ_bits()+0x1c>)
     256:	2240      	movs	r2, #64	; 0x40
     258:	605a      	str	r2, [r3, #4]
     25a:	685b      	ldr	r3, [r3, #4]
     25c:	f013 0f40 	tst.w	r3, #64	; 0x40
     260:	4b04      	ldr	r3, [pc, #16]	; (274 <cmp_equ_bits()+0x20>)
     262:	bf14      	ite	ne
     264:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
     268:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
     26c:	605a      	str	r2, [r3, #4]
     26e:	4770      	bx	lr
     270:	20002480 	.word	0x20002480
     274:	200023e0 	.word	0x200023e0

00000278 <cmp_neq_bits()>:
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <cmp_neq_bits()+0x18>)
     27a:	2240      	movs	r2, #64	; 0x40
     27c:	605a      	str	r2, [r3, #4]
     27e:	685b      	ldr	r3, [r3, #4]
     280:	f013 0f40 	tst.w	r3, #64	; 0x40
     284:	4b02      	ldr	r3, [pc, #8]	; (290 <cmp_neq_bits()+0x18>)
     286:	bf0c      	ite	eq
     288:	2202      	moveq	r2, #2
     28a:	2220      	movne	r2, #32
     28c:	605a      	str	r2, [r3, #4]
     28e:	4770      	bx	lr
     290:	20002480 	.word	0x20002480

00000294 <cmp_equ_multi_bits()>:
     294:	4b06      	ldr	r3, [pc, #24]	; (2b0 <cmp_equ_multi_bits()+0x1c>)
     296:	2260      	movs	r2, #96	; 0x60
     298:	605a      	str	r2, [r3, #4]
     29a:	685b      	ldr	r3, [r3, #4]
     29c:	4013      	ands	r3, r2
     29e:	4293      	cmp	r3, r2
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <cmp_equ_multi_bits()+0x20>)
     2a2:	bf0c      	ite	eq
     2a4:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     2a8:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2ac:	605a      	str	r2, [r3, #4]
     2ae:	4770      	bx	lr
     2b0:	20002480 	.word	0x20002480
     2b4:	200023e0 	.word	0x200023e0

000002b8 <cmp_neq_multi_bits()>:
     2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <cmp_neq_multi_bits()+0x1c>)
     2ba:	2260      	movs	r2, #96	; 0x60
     2bc:	605a      	str	r2, [r3, #4]
     2be:	685b      	ldr	r3, [r3, #4]
     2c0:	4013      	ands	r3, r2
     2c2:	4293      	cmp	r3, r2
     2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <cmp_neq_multi_bits()+0x20>)
     2c6:	bf14      	ite	ne
     2c8:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2cc:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2d0:	605a      	str	r2, [r3, #4]
     2d2:	4770      	bx	lr
     2d4:	20002480 	.word	0x20002480
     2d8:	200023e0 	.word	0x200023e0

000002dc <cmp_equ_mskd()>:
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <cmp_equ_mskd()+0x28>)
     2de:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2e2:	605a      	str	r2, [r3, #4]
     2e4:	685b      	ldr	r3, [r3, #4]
     2e6:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2ea:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2ee:	4a06      	ldr	r2, [pc, #24]	; (308 <cmp_equ_mskd()+0x2c>)
     2f0:	6853      	ldr	r3, [r2, #4]
     2f2:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2f6:	bf0c      	ite	eq
     2f8:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2fc:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     300:	6053      	str	r3, [r2, #4]
     302:	4770      	bx	lr
     304:	20002480 	.word	0x20002480
     308:	200023e0 	.word	0x200023e0

0000030c <cmp_neq_mskd()>:
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <cmp_neq_mskd()+0x28>)
     30e:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     312:	605a      	str	r2, [r3, #4]
     314:	685b      	ldr	r3, [r3, #4]
     316:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     31a:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     31e:	4a05      	ldr	r2, [pc, #20]	; (334 <cmp_neq_mskd()+0x28>)
     320:	6853      	ldr	r3, [r2, #4]
     322:	bf1a      	itte	ne
     324:	f023 0306 	bicne.w	r3, r3, #6
     328:	f043 0304 	orrne.w	r3, r3, #4
     32c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
     330:	6053      	str	r3, [r2, #4]
     332:	4770      	bx	lr
     334:	20002480 	.word	0x20002480

00000338 <cmp_equ_reg()>:
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <cmp_equ_reg()+0x1c>)
     33a:	2222      	movs	r2, #34	; 0x22
     33c:	605a      	str	r2, [r3, #4]
     33e:	685b      	ldr	r3, [r3, #4]
     340:	4293      	cmp	r3, r2
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <cmp_equ_reg()+0x20>)
     344:	bf0c      	ite	eq
     346:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     34a:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     34e:	605a      	str	r2, [r3, #4]
     350:	4770      	bx	lr
     352:	bf00      	nop
     354:	20002480 	.word	0x20002480
     358:	200023e0 	.word	0x200023e0

0000035c <cmp_neq_reg()>:
     35c:	4b05      	ldr	r3, [pc, #20]	; (374 <cmp_neq_reg()+0x18>)
     35e:	2222      	movs	r2, #34	; 0x22
     360:	605a      	str	r2, [r3, #4]
     362:	685b      	ldr	r3, [r3, #4]
     364:	4293      	cmp	r3, r2
     366:	4b03      	ldr	r3, [pc, #12]	; (374 <cmp_neq_reg()+0x18>)
     368:	bf14      	ite	ne
     36a:	2202      	movne	r2, #2
     36c:	2220      	moveq	r2, #32
     36e:	605a      	str	r2, [r3, #4]
     370:	4770      	bx	lr
     372:	bf00      	nop
     374:	20002480 	.word	0x20002480

00000378 <constexpr_bits_array()>:
     378:	4b03      	ldr	r3, [pc, #12]	; (388 <constexpr_bits_array()+0x10>)
     37a:	2206      	movs	r2, #6
     37c:	62da      	str	r2, [r3, #44]	; 0x2c
     37e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     382:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     386:	4770      	bx	lr
     388:	200022c0 	.word	0x200022c0

0000038c <runtime_bits_array()>:
     38c:	b081      	sub	sp, #4
     38e:	2303      	movs	r3, #3
     390:	9300      	str	r3, [sp, #0]
     392:	9b00      	ldr	r3, [sp, #0]
     394:	009b      	lsls	r3, r3, #2
     396:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
     39a:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
     39e:	2221      	movs	r2, #33	; 0x21
     3a0:	621a      	str	r2, [r3, #32]
     3a2:	b001      	add	sp, #4
     3a4:	4770      	bx	lr

000003a6 <prescaler_low()>:
     3a6:	4b04      	ldr	r3, [pc, #16]	; (3b8 <prescaler_low()+0x12>)
     3a8:	2277      	movs	r2, #119	; 0x77
     3aa:	605a      	str	r2, [r3, #4]
     3ac:	685b      	ldr	r3, [r3, #4]
     3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3b2:	4a02      	ldr	r2, [pc, #8]	; (3bc <prescaler_low()+0x16>)
     3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
     3b6:	4770      	bx	lr
     3b8:	200023e0 	.word	0x200023e0
     3bc:	200022c0 	.word	0x200022c0

000003c0 <prescaler_high()>:
     3c0:	4b04      	ldr	r3, [pc, #16]	; (3d4 <prescaler_high()+0x14>)
     3c2:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     3c6:	605a      	str	r2, [r3, #4]
     3c8:	685b      	ldr	r3, [r3, #4]
     3ca:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3ce:	4a02      	ldr	r2, [pc, #8]	; (3d8 <prescaler_high()+0x18>)
     3d0:	62d3      	str	r3, [r2, #44]	; 0x2c
     3d2:	4770      	bx	lr
     3d4:	200023e0 	.word	0x200023e0
     3d8:	200022c0 	.word	0x200022c0

000003dc <reg_mskd_lss()>:
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <reg_mskd_lss()+0x20>)
     3de:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3e2:	605a      	str	r2, [r3, #4]
     3e4:	685b      	ldr	r3, [r3, #4]
     3e6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3ea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3ee:	4b04      	ldr	r3, [pc, #16]	; (400 <reg_mskd_lss()+0x24>)
     3f0:	bf34      	ite	cc
     3f2:	2202      	movcc	r2, #2
     3f4:	2204      	movcs	r2, #4
     3f6:	605a      	str	r2, [r3, #4]
     3f8:	4770      	bx	lr
     3fa:	bf00      	nop
     3fc:	200023e0 	.word	0x200023e0
     400:	20002480 	.word	0x20002480

00000404 <reg_mskd_leq()>:
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <reg_mskd_leq()+0x30>)
     406:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     40a:	605a      	str	r2, [r3, #4]
     40c:	685b      	ldr	r3, [r3, #4]
     40e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     412:	4293      	cmp	r3, r2
     414:	d80a      	bhi.n	42c <reg_mskd_leq()+0x28>
     416:	4b07      	ldr	r3, [pc, #28]	; (434 <reg_mskd_leq()+0x30>)
     418:	685b      	ldr	r3, [r3, #4]
     41a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     422:	d803      	bhi.n	42c <reg_mskd_leq()+0x28>
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <reg_mskd_leq()+0x34>)
     426:	2202      	movs	r2, #2
     428:	605a      	str	r2, [r3, #4]
     42a:	4770      	bx	lr
     42c:	4b02      	ldr	r3, [pc, #8]	; (438 <reg_mskd_leq()+0x34>)
     42e:	2204      	movs	r2, #4
     430:	605a      	str	r2, [r3, #4]
     432:	4770      	bx	lr
     434:	200023e0 	.word	0x200023e0
     438:	20002480 	.word	0x20002480

0000043c <reg_mskd_gtr()>:
     43c:	4b07      	ldr	r3, [pc, #28]	; (45c <reg_mskd_gtr()+0x20>)
     43e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     442:	605a      	str	r2, [r3, #4]
     444:	685b      	ldr	r3, [r3, #4]
     446:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     44a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     44e:	4b04      	ldr	r3, [pc, #16]	; (460 <reg_mskd_gtr()+0x24>)
     450:	bf8c      	ite	hi
     452:	2202      	movhi	r2, #2
     454:	2204      	movls	r2, #4
     456:	605a      	str	r2, [r3, #4]
     458:	4770      	bx	lr
     45a:	bf00      	nop
     45c:	200023e0 	.word	0x200023e0
     460:	20002480 	.word	0x20002480

00000464 <reg_mskd_geq()>:
     464:	4b0b      	ldr	r3, [pc, #44]	; (494 <reg_mskd_geq()+0x30>)
     466:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     46a:	605a      	str	r2, [r3, #4]
     46c:	685b      	ldr	r3, [r3, #4]
     46e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     476:	d309      	bcc.n	48c <reg_mskd_geq()+0x28>
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <reg_mskd_geq()+0x30>)
     47a:	685b      	ldr	r3, [r3, #4]
     47c:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     480:	4293      	cmp	r3, r2
     482:	d303      	bcc.n	48c <reg_mskd_geq()+0x28>
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <reg_mskd_geq()+0x34>)
     486:	2202      	movs	r2, #2
     488:	605a      	str	r2, [r3, #4]
     48a:	4770      	bx	lr
     48c:	4b02      	ldr	r3, [pc, #8]	; (498 <reg_mskd_geq()+0x34>)
     48e:	2204      	movs	r2, #4
     490:	605a      	str	r2, [r3, #4]
     492:	4770      	bx	lr
     494:	200023e0 	.word	0x200023e0
     498:	20002480 	.word	0x20002480

0000049c <pos_cmp_eq()>:
     49c:	4b01      	ldr	r3, [pc, #4]	; (4a4 <pos_cmp_eq()+0x8>)
     49e:	2202      	movs	r2, #2
     4a0:	605a      	str	r2, [r3, #4]
     4a2:	4770      	bx	lr
     4a4:	20002480 	.word	0x20002480

000004a8 <pos_cmp_ne()>:
     4a8:	4b01      	ldr	r3, [pc, #4]	; (4b0 <pos_cmp_ne()+0x8>)
     4aa:	2202      	movs	r2, #2
     4ac:	605a      	str	r2, [r3, #4]
     4ae:	4770      	bx	lr
     4b0:	20002480 	.word	0x20002480

000004b4 <bits_extract_eq()>:
     4b4:	4b05      	ldr	r3, [pc, #20]	; (4cc <bits_extract_eq()+0x18>)
     4b6:	2240      	movs	r2, #64	; 0x40
     4b8:	605a      	str	r2, [r3, #4]
     4ba:	685b      	ldr	r3, [r3, #4]
     4bc:	4293      	cmp	r3, r2
     4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <bits_extract_eq()+0x18>)
     4c0:	bf0c      	ite	eq
     4c2:	2202      	moveq	r2, #2
     4c4:	2204      	movne	r2, #4
     4c6:	605a      	str	r2, [r3, #4]
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	20002480 	.word	0x20002480

000004d0 <mskd_extract_eq()>:
     4d0:	4b05      	ldr	r3, [pc, #20]	; (4e8 <mskd_extract_eq()+0x18>)
     4d2:	2202      	movs	r2, #2
     4d4:	605a      	str	r2, [r3, #4]
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	4293      	cmp	r3, r2
     4da:	4b03      	ldr	r3, [pc, #12]	; (4e8 <mskd_extract_eq()+0x18>)
     4dc:	bf0c      	ite	eq
     4de:	2220      	moveq	r2, #32
     4e0:	2240      	movne	r2, #64	; 0x40
     4e2:	605a      	str	r2, [r3, #4]
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	20002480 	.word	0x20002480

000004ec <mskd_extract_ne()>:
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <mskd_extract_ne()+0x18>)
     4ee:	2204      	movs	r2, #4
     4f0:	605a      	str	r2, [r3, #4]
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	4293      	cmp	r3, r2
     4f6:	4b03      	ldr	r3, [pc, #12]	; (504 <mskd_extract_ne()+0x18>)
     4f8:	bf0c      	ite	eq
     4fa:	2240      	moveq	r2, #64	; 0x40
     4fc:	2220      	movne	r2, #32
     4fe:	605a      	str	r2, [r3, #4]
     500:	4770      	bx	lr
     502:	bf00      	nop
     504:	20002480 	.word	0x20002480

00000508 <mskd_extract_lss()>:
     508:	4b06      	ldr	r3, [pc, #24]	; (524 <mskd_extract_lss()+0x1c>)
     50a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     50e:	605a      	str	r2, [r3, #4]
     510:	685b      	ldr	r3, [r3, #4]
     512:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     516:	4b04      	ldr	r3, [pc, #16]	; (528 <mskd_extract_lss()+0x20>)
     518:	bf34      	ite	cc
     51a:	2220      	movcc	r2, #32
     51c:	2240      	movcs	r2, #64	; 0x40
     51e:	605a      	str	r2, [r3, #4]
     520:	4770      	bx	lr
     522:	bf00      	nop
     524:	200023e0 	.word	0x200023e0
     528:	20002480 	.word	0x20002480

0000052c <mskd_extract_leq()>:
     52c:	4b05      	ldr	r3, [pc, #20]	; (544 <mskd_extract_leq()+0x18>)
     52e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     532:	605a      	str	r2, [r3, #4]
     534:	685b      	ldr	r3, [r3, #4]
     536:	4293      	cmp	r3, r2
     538:	4b03      	ldr	r3, [pc, #12]	; (548 <mskd_extract_leq()+0x1c>)
     53a:	bf94      	ite	ls
     53c:	2220      	movls	r2, #32
     53e:	2240      	movhi	r2, #64	; 0x40
     540:	605a      	str	r2, [r3, #4]
     542:	4770      	bx	lr
     544:	200023e0 	.word	0x200023e0
     548:	20002480 	.word	0x20002480

0000054c <mskd_extract_gtr()>:
     54c:	4b06      	ldr	r3, [pc, #24]	; (568 <mskd_extract_gtr()+0x1c>)
     54e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     552:	605a      	str	r2, [r3, #4]
     554:	685b      	ldr	r3, [r3, #4]
     556:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <mskd_extract_gtr()+0x20>)
     55c:	bf8c      	ite	hi
     55e:	2220      	movhi	r2, #32
     560:	2240      	movls	r2, #64	; 0x40
     562:	605a      	str	r2, [r3, #4]
     564:	4770      	bx	lr
     566:	bf00      	nop
     568:	200023e0 	.word	0x200023e0
     56c:	20002480 	.word	0x20002480

00000570 <set_bits_global()>:
     570:	4a02      	ldr	r2, [pc, #8]	; (57c <set_bits_global()+0xc>)
     572:	6853      	ldr	r3, [r2, #4]
     574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     578:	6053      	str	r3, [r2, #4]
     57a:	4770      	bx	lr
     57c:	20002480 	.word	0x20002480

00000580 <ins_mskd_global()>:
     580:	4a03      	ldr	r2, [pc, #12]	; (590 <ins_mskd_global()+0x10>)
     582:	6853      	ldr	r3, [r2, #4]
     584:	f023 0306 	bic.w	r3, r3, #6
     588:	f043 0302 	orr.w	r3, r3, #2
     58c:	6053      	str	r3, [r2, #4]
     58e:	4770      	bx	lr
     590:	20002480 	.word	0x20002480

00000594 <assign_array_global()>:
     594:	4b01      	ldr	r3, [pc, #4]	; (59c <assign_array_global()+0x8>)
     596:	22bd      	movs	r2, #189	; 0xbd
     598:	601a      	str	r2, [r3, #0]
     59a:	4770      	bx	lr
     59c:	200022ec 	.word	0x200022ec

000005a0 <shifted_global()>:
     5a0:	4b04      	ldr	r3, [pc, #16]	; (5b4 <shifted_global()+0x14>)
     5a2:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     5a6:	605a      	str	r2, [r3, #4]
     5a8:	685b      	ldr	r3, [r3, #4]
     5aa:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5ae:	4a02      	ldr	r2, [pc, #8]	; (5b8 <shifted_global()+0x18>)
     5b0:	62d3      	str	r3, [r2, #44]	; 0x2c
     5b2:	4770      	bx	lr
     5b4:	200023e0 	.word	0x200023e0
     5b8:	200022c0 	.word	0x200022c0

000005bc <assign_register_global()>:
     5bc:	4b01      	ldr	r3, [pc, #4]	; (5c4 <assign_register_global()+0x8>)
     5be:	2204      	movs	r2, #4
     5c0:	605a      	str	r2, [r3, #4]
     5c2:	4770      	bx	lr
     5c4:	20002480 	.word	0x20002480

000005c8 <copy_bits_equ()>:
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <copy_bits_equ()+0x18>)
     5ca:	2240      	movs	r2, #64	; 0x40
     5cc:	605a      	str	r2, [r3, #4]
     5ce:	685b      	ldr	r3, [r3, #4]
     5d0:	f013 0f40 	tst.w	r3, #64	; 0x40
     5d4:	4b02      	ldr	r3, [pc, #8]	; (5e0 <copy_bits_equ()+0x18>)
     5d6:	bf14      	ite	ne
     5d8:	2202      	movne	r2, #2
     5da:	2204      	moveq	r2, #4
     5dc:	605a      	str	r2, [r3, #4]
     5de:	4770      	bx	lr
     5e0:	20002480 	.word	0x20002480

000005e4 <copy_bits_neq()>:
     5e4:	4b05      	ldr	r3, [pc, #20]	; (5fc <copy_bits_neq()+0x18>)
     5e6:	2240      	movs	r2, #64	; 0x40
     5e8:	605a      	str	r2, [r3, #4]
     5ea:	685b      	ldr	r3, [r3, #4]
     5ec:	f013 0f40 	tst.w	r3, #64	; 0x40
     5f0:	4b02      	ldr	r3, [pc, #8]	; (5fc <copy_bits_neq()+0x18>)
     5f2:	bf0c      	ite	eq
     5f4:	2202      	moveq	r2, #2
     5f6:	2204      	movne	r2, #4
     5f8:	605a      	str	r2, [r3, #4]
     5fa:	4770      	bx	lr
     5fc:	20002480 	.word	0x20002480

00000600 <copy_mskd_equ()>:
     600:	4b06      	ldr	r3, [pc, #24]	; (61c <copy_mskd_equ()+0x1c>)
     602:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     606:	605a      	str	r2, [r3, #4]
     608:	685b      	ldr	r3, [r3, #4]
     60a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     60e:	4293      	cmp	r3, r2
     610:	4b03      	ldr	r3, [pc, #12]	; (620 <copy_mskd_equ()+0x20>)
     612:	bf0c      	ite	eq
     614:	2202      	moveq	r2, #2
     616:	2204      	movne	r2, #4
     618:	605a      	str	r2, [r3, #4]
     61a:	4770      	bx	lr
     61c:	200023e0 	.word	0x200023e0
     620:	20002480 	.word	0x20002480

00000624 <copy_mskd_neq()>:
     624:	4b06      	ldr	r3, [pc, #24]	; (640 <copy_mskd_neq()+0x1c>)
     626:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     62a:	605a      	str	r2, [r3, #4]
     62c:	685b      	ldr	r3, [r3, #4]
     62e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     632:	4293      	cmp	r3, r2
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <copy_mskd_neq()+0x20>)
     636:	bf14      	ite	ne
     638:	2202      	movne	r2, #2
     63a:	2204      	moveq	r2, #4
     63c:	605a      	str	r2, [r3, #4]
     63e:	4770      	bx	lr
     640:	200023e0 	.word	0x200023e0
     644:	20002480 	.word	0x20002480

00000648 <copy_mskd_lss()>:
     648:	4b07      	ldr	r3, [pc, #28]	; (668 <copy_mskd_lss()+0x20>)
     64a:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     64e:	605a      	str	r2, [r3, #4]
     650:	685b      	ldr	r3, [r3, #4]
     652:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     656:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     65a:	4b04      	ldr	r3, [pc, #16]	; (66c <copy_mskd_lss()+0x24>)
     65c:	bf34      	ite	cc
     65e:	2202      	movcc	r2, #2
     660:	2204      	movcs	r2, #4
     662:	605a      	str	r2, [r3, #4]
     664:	4770      	bx	lr
     666:	bf00      	nop
     668:	200023e0 	.word	0x200023e0
     66c:	20002480 	.word	0x20002480

00000670 <copy_mskd_leq()>:
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <copy_mskd_leq()+0x1c>)
     672:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     676:	605a      	str	r2, [r3, #4]
     678:	685b      	ldr	r3, [r3, #4]
     67a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     67e:	4293      	cmp	r3, r2
     680:	4b03      	ldr	r3, [pc, #12]	; (690 <copy_mskd_leq()+0x20>)
     682:	bf94      	ite	ls
     684:	2202      	movls	r2, #2
     686:	2204      	movhi	r2, #4
     688:	605a      	str	r2, [r3, #4]
     68a:	4770      	bx	lr
     68c:	200023e0 	.word	0x200023e0
     690:	20002480 	.word	0x20002480

00000694 <copy_mskd_gtr()>:
     694:	4b07      	ldr	r3, [pc, #28]	; (6b4 <copy_mskd_gtr()+0x20>)
     696:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     69a:	605a      	str	r2, [r3, #4]
     69c:	685b      	ldr	r3, [r3, #4]
     69e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6a2:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     6a6:	4b04      	ldr	r3, [pc, #16]	; (6b8 <copy_mskd_gtr()+0x24>)
     6a8:	bf8c      	ite	hi
     6aa:	2202      	movhi	r2, #2
     6ac:	2204      	movls	r2, #4
     6ae:	605a      	str	r2, [r3, #4]
     6b0:	4770      	bx	lr
     6b2:	bf00      	nop
     6b4:	200023e0 	.word	0x200023e0
     6b8:	20002480 	.word	0x20002480

000006bc <copy_mskd_geq()>:
     6bc:	4b06      	ldr	r3, [pc, #24]	; (6d8 <copy_mskd_geq()+0x1c>)
     6be:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6c2:	605a      	str	r2, [r3, #4]
     6c4:	685b      	ldr	r3, [r3, #4]
     6c6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6ca:	4293      	cmp	r3, r2
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <copy_mskd_geq()+0x20>)
     6ce:	bf2c      	ite	cs
     6d0:	2202      	movcs	r2, #2
     6d2:	2204      	movcc	r2, #4
     6d4:	605a      	str	r2, [r3, #4]
     6d6:	4770      	bx	lr
     6d8:	200023e0 	.word	0x200023e0
     6dc:	20002480 	.word	0x20002480

000006e0 <copy_shifted()>:
     6e0:	4b06      	ldr	r3, [pc, #24]	; (6fc <copy_shifted()+0x1c>)
     6e2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6e6:	605a      	str	r2, [r3, #4]
     6e8:	685b      	ldr	r3, [r3, #4]
     6ea:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6ee:	2b0b      	cmp	r3, #11
     6f0:	4b03      	ldr	r3, [pc, #12]	; (700 <copy_shifted()+0x20>)
     6f2:	bf0c      	ite	eq
     6f4:	2202      	moveq	r2, #2
     6f6:	2204      	movne	r2, #4
     6f8:	605a      	str	r2, [r3, #4]
     6fa:	4770      	bx	lr
     6fc:	200023e0 	.word	0x200023e0
     700:	20002480 	.word	0x20002480

00000704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     704:	4a02      	ldr	r2, [pc, #8]	; (710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     706:	6853      	ldr	r3, [r2, #4]
     708:	4318      	orrs	r0, r3
     70a:	6050      	str	r0, [r2, #4]
     70c:	4770      	bx	lr
     70e:	bf00      	nop
     710:	20002480 	.word	0x20002480

00000714 <call_bits_val_var()>:
     714:	b500      	push	{lr}
     716:	2040      	movs	r0, #64	; 0x40
     718:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     71c:	f85d fb04 	ldr.w	pc, [sp], #4

00000720 <call_bits_val_const()>:
     720:	b500      	push	{lr}
     722:	2040      	movs	r0, #64	; 0x40
     724:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     728:	f85d fb04 	ldr.w	pc, [sp], #4

0000072c <call_bits_val_global()>:
     72c:	b500      	push	{lr}
     72e:	2040      	movs	r0, #64	; 0x40
     730:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     734:	f85d fb04 	ldr.w	pc, [sp], #4

00000738 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     738:	4a02      	ldr	r2, [pc, #8]	; (744 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     73a:	6853      	ldr	r3, [r2, #4]
     73c:	6801      	ldr	r1, [r0, #0]
     73e:	430b      	orrs	r3, r1
     740:	6053      	str	r3, [r2, #4]
     742:	4770      	bx	lr
     744:	20002480 	.word	0x20002480

00000748 <call_bits_ref_var()>:
     748:	b500      	push	{lr}
     74a:	b081      	sub	sp, #4
     74c:	2301      	movs	r3, #1
     74e:	9300      	str	r3, [sp, #0]
     750:	4668      	mov	r0, sp
     752:	f7ff fffe 	bl	738 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     756:	b001      	add	sp, #4
     758:	f85d fb04 	ldr.w	pc, [sp], #4

0000075c <call_bits_ref_const()>:
     75c:	b500      	push	{lr}
     75e:	b081      	sub	sp, #4
     760:	2301      	movs	r3, #1
     762:	9300      	str	r3, [sp, #0]
     764:	4668      	mov	r0, sp
     766:	f7ff fffe 	bl	738 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     76a:	b001      	add	sp, #4
     76c:	f85d fb04 	ldr.w	pc, [sp], #4

00000770 <call_bits_ref_global()>:
     770:	b500      	push	{lr}
     772:	b081      	sub	sp, #4
     774:	2340      	movs	r3, #64	; 0x40
     776:	9300      	str	r3, [sp, #0]
     778:	4668      	mov	r0, sp
     77a:	f7ff fffe 	bl	738 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     77e:	b001      	add	sp, #4
     780:	f85d fb04 	ldr.w	pc, [sp], #4

00000784 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     784:	4a03      	ldr	r2, [pc, #12]	; (794 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     786:	6853      	ldr	r3, [r2, #4]
     788:	ea23 0000 	bic.w	r0, r3, r0
     78c:	4308      	orrs	r0, r1
     78e:	6050      	str	r0, [r2, #4]
     790:	4770      	bx	lr
     792:	bf00      	nop
     794:	20002480 	.word	0x20002480

00000798 <call_mskd_val_var()>:
     798:	b500      	push	{lr}
     79a:	2006      	movs	r0, #6
     79c:	2102      	movs	r1, #2
     79e:	f7ff fffe 	bl	784 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7a2:	f85d fb04 	ldr.w	pc, [sp], #4

000007a6 <call_mskd_val_const()>:
     7a6:	b500      	push	{lr}
     7a8:	2006      	movs	r0, #6
     7aa:	2102      	movs	r1, #2
     7ac:	f7ff fffe 	bl	784 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7b0:	f85d fb04 	ldr.w	pc, [sp], #4

000007b4 <call_mskd_val_global()>:
     7b4:	b500      	push	{lr}
     7b6:	2006      	movs	r0, #6
     7b8:	2102      	movs	r1, #2
     7ba:	f7ff fffe 	bl	784 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7be:	f85d fb04 	ldr.w	pc, [sp], #4

000007c2 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     7c2:	4a04      	ldr	r2, [pc, #16]	; (7d4 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x12>)
     7c4:	6853      	ldr	r3, [r2, #4]
     7c6:	6801      	ldr	r1, [r0, #0]
     7c8:	ea23 0301 	bic.w	r3, r3, r1
     7cc:	6841      	ldr	r1, [r0, #4]
     7ce:	430b      	orrs	r3, r1
     7d0:	6053      	str	r3, [r2, #4]
     7d2:	4770      	bx	lr
     7d4:	20002480 	.word	0x20002480

000007d8 <call_mskd_ref_var()>:
     7d8:	b500      	push	{lr}
     7da:	b082      	sub	sp, #8
     7dc:	4b04      	ldr	r3, [pc, #16]	; (7f0 <call_mskd_ref_var()+0x18>)
     7de:	cb0c      	ldmia	r3, {r2, r3}
     7e0:	e88d 000c 	stmia.w	sp, {r2, r3}
     7e4:	4668      	mov	r0, sp
     7e6:	f7ff fffe 	bl	7c2 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7ea:	b002      	add	sp, #8
     7ec:	f85d fb04 	ldr.w	pc, [sp], #4
     7f0:	00000000 	.word	0x00000000

000007f4 <call_mskd_ref_const()>:
     7f4:	b500      	push	{lr}
     7f6:	b082      	sub	sp, #8
     7f8:	2306      	movs	r3, #6
     7fa:	9300      	str	r3, [sp, #0]
     7fc:	2304      	movs	r3, #4
     7fe:	9301      	str	r3, [sp, #4]
     800:	4668      	mov	r0, sp
     802:	f7ff fffe 	bl	7c2 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     806:	b002      	add	sp, #8
     808:	f85d fb04 	ldr.w	pc, [sp], #4

0000080c <call_mskd_ref_global()>:
     80c:	b500      	push	{lr}
     80e:	b082      	sub	sp, #8
     810:	2306      	movs	r3, #6
     812:	9300      	str	r3, [sp, #0]
     814:	2302      	movs	r3, #2
     816:	9301      	str	r3, [sp, #4]
     818:	4668      	mov	r0, sp
     81a:	f7ff fffe 	bl	7c2 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     81e:	b002      	add	sp, #8
     820:	f85d fb04 	ldr.w	pc, [sp], #4

00000824 <periph_bits(mcu::Serial volatile*)>:
     824:	6843      	ldr	r3, [r0, #4]
     826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     82a:	6043      	str	r3, [r0, #4]
     82c:	4770      	bx	lr

0000082e <call_periph_bits()>:
     82e:	b500      	push	{lr}
     830:	4802      	ldr	r0, [pc, #8]	; (83c <call_periph_bits()+0xe>)
     832:	f7ff fffe 	bl	824 <periph_bits(mcu::Serial volatile*)>
     836:	f85d fb04 	ldr.w	pc, [sp], #4
     83a:	bf00      	nop
     83c:	20002480 	.word	0x20002480

00000840 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     840:	6843      	ldr	r3, [r0, #4]
     842:	4319      	orrs	r1, r3
     844:	6041      	str	r1, [r0, #4]
     846:	4770      	bx	lr

00000848 <call_periph_bits_val()>:
     848:	b500      	push	{lr}
     84a:	2140      	movs	r1, #64	; 0x40
     84c:	4802      	ldr	r0, [pc, #8]	; (858 <call_periph_bits_val()+0x10>)
     84e:	f7ff fffe 	bl	840 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     852:	f85d fb04 	ldr.w	pc, [sp], #4
     856:	bf00      	nop
     858:	20002480 	.word	0x20002480

0000085c <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     85c:	6803      	ldr	r3, [r0, #0]
     85e:	4319      	orrs	r1, r3
     860:	6001      	str	r1, [r0, #0]
     862:	4770      	bx	lr

00000864 <call_reg_bits_val()>:
     864:	b500      	push	{lr}
     866:	2140      	movs	r1, #64	; 0x40
     868:	4802      	ldr	r0, [pc, #8]	; (874 <call_reg_bits_val()+0x10>)
     86a:	f7ff fffe 	bl	85c <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     86e:	f85d fb04 	ldr.w	pc, [sp], #4
     872:	bf00      	nop
     874:	20002484 	.word	0x20002484

00000878 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     878:	6843      	ldr	r3, [r0, #4]
     87a:	680a      	ldr	r2, [r1, #0]
     87c:	4313      	orrs	r3, r2
     87e:	6043      	str	r3, [r0, #4]
     880:	4770      	bx	lr

00000882 <call_periph_bits_ref()>:
     882:	b500      	push	{lr}
     884:	b081      	sub	sp, #4
     886:	2340      	movs	r3, #64	; 0x40
     888:	9300      	str	r3, [sp, #0]
     88a:	4669      	mov	r1, sp
     88c:	4802      	ldr	r0, [pc, #8]	; (898 <call_periph_bits_ref()+0x16>)
     88e:	f7ff fffe 	bl	878 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     892:	b001      	add	sp, #4
     894:	f85d fb04 	ldr.w	pc, [sp], #4
     898:	20002480 	.word	0x20002480

0000089c <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     89c:	6803      	ldr	r3, [r0, #0]
     89e:	680a      	ldr	r2, [r1, #0]
     8a0:	4313      	orrs	r3, r2
     8a2:	6003      	str	r3, [r0, #0]
     8a4:	4770      	bx	lr

000008a6 <call_reg_bits_ref()>:
     8a6:	b500      	push	{lr}
     8a8:	b081      	sub	sp, #4
     8aa:	2340      	movs	r3, #64	; 0x40
     8ac:	9300      	str	r3, [sp, #0]
     8ae:	4669      	mov	r1, sp
     8b0:	4802      	ldr	r0, [pc, #8]	; (8bc <call_reg_bits_ref()+0x16>)
     8b2:	f7ff fffe 	bl	89c <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8b6:	b001      	add	sp, #4
     8b8:	f85d fb04 	ldr.w	pc, [sp], #4
     8bc:	20002484 	.word	0x20002484

000008c0 <periph_mskd(mcu::Serial volatile*)>:
     8c0:	6843      	ldr	r3, [r0, #4]
     8c2:	f023 0306 	bic.w	r3, r3, #6
     8c6:	f043 0302 	orr.w	r3, r3, #2
     8ca:	6043      	str	r3, [r0, #4]
     8cc:	4770      	bx	lr

000008ce <call_periph_mskd()>:
     8ce:	b500      	push	{lr}
     8d0:	4802      	ldr	r0, [pc, #8]	; (8dc <call_periph_mskd()+0xe>)
     8d2:	f7ff fffe 	bl	8c0 <periph_mskd(mcu::Serial volatile*)>
     8d6:	f85d fb04 	ldr.w	pc, [sp], #4
     8da:	bf00      	nop
     8dc:	20002480 	.word	0x20002480

000008e0 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8e0:	6843      	ldr	r3, [r0, #4]
     8e2:	ea23 0101 	bic.w	r1, r3, r1
     8e6:	4311      	orrs	r1, r2
     8e8:	6041      	str	r1, [r0, #4]
     8ea:	4770      	bx	lr

000008ec <call_periph_mskd_val()>:
     8ec:	b500      	push	{lr}
     8ee:	2106      	movs	r1, #6
     8f0:	2202      	movs	r2, #2
     8f2:	4802      	ldr	r0, [pc, #8]	; (8fc <call_periph_mskd_val()+0x10>)
     8f4:	f7ff fffe 	bl	8e0 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4
     8fc:	20002480 	.word	0x20002480

00000900 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     900:	6803      	ldr	r3, [r0, #0]
     902:	ea23 0101 	bic.w	r1, r3, r1
     906:	4311      	orrs	r1, r2
     908:	6001      	str	r1, [r0, #0]
     90a:	4770      	bx	lr

0000090c <call_reg_mskd_val()>:
     90c:	b500      	push	{lr}
     90e:	2106      	movs	r1, #6
     910:	2202      	movs	r2, #2
     912:	4802      	ldr	r0, [pc, #8]	; (91c <call_reg_mskd_val()+0x10>)
     914:	f7ff fffe 	bl	900 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     918:	f85d fb04 	ldr.w	pc, [sp], #4
     91c:	20002484 	.word	0x20002484

00000920 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     920:	6843      	ldr	r3, [r0, #4]
     922:	ea23 0101 	bic.w	r1, r3, r1
     926:	4311      	orrs	r1, r2
     928:	6041      	str	r1, [r0, #4]
     92a:	4770      	bx	lr

0000092c <call_periph_mskd_ref()>:
     92c:	b500      	push	{lr}
     92e:	2106      	movs	r1, #6
     930:	2202      	movs	r2, #2
     932:	4802      	ldr	r0, [pc, #8]	; (93c <call_periph_mskd_ref()+0x10>)
     934:	f7ff fffe 	bl	920 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     938:	f85d fb04 	ldr.w	pc, [sp], #4
     93c:	20002480 	.word	0x20002480

00000940 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     940:	6803      	ldr	r3, [r0, #0]
     942:	ea23 0101 	bic.w	r1, r3, r1
     946:	4311      	orrs	r1, r2
     948:	6001      	str	r1, [r0, #0]
     94a:	4770      	bx	lr

0000094c <call_reg_mskd_ref()>:
     94c:	b500      	push	{lr}
     94e:	2106      	movs	r1, #6
     950:	2202      	movs	r2, #2
     952:	4802      	ldr	r0, [pc, #8]	; (95c <call_reg_mskd_ref()+0x10>)
     954:	f7ff fffe 	bl	940 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     958:	f85d fb04 	ldr.w	pc, [sp], #4
     95c:	20002484 	.word	0x20002484

00000960 <return_bits()>:
     960:	2020      	movs	r0, #32
     962:	4770      	bx	lr

00000964 <call_return_bits()>:
     964:	b500      	push	{lr}
     966:	f7ff fffe 	bl	960 <return_bits()>
     96a:	2820      	cmp	r0, #32
     96c:	4b04      	ldr	r3, [pc, #16]	; (980 <call_return_bits()+0x1c>)
     96e:	bf0c      	ite	eq
     970:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     974:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     978:	605a      	str	r2, [r3, #4]
     97a:	f85d fb04 	ldr.w	pc, [sp], #4
     97e:	bf00      	nop
     980:	200023e0 	.word	0x200023e0

00000984 <return_mskd()>:
     984:	2218      	movs	r2, #24
     986:	6002      	str	r2, [r0, #0]
     988:	2208      	movs	r2, #8
     98a:	6042      	str	r2, [r0, #4]
     98c:	4770      	bx	lr

0000098e <call_return_mskd()>:
     98e:	b500      	push	{lr}
     990:	b082      	sub	sp, #8
     992:	4668      	mov	r0, sp
     994:	f7ff fffe 	bl	984 <return_mskd()>
     998:	9a01      	ldr	r2, [sp, #4]
     99a:	9b00      	ldr	r3, [sp, #0]
     99c:	2b18      	cmp	r3, #24
     99e:	d006      	beq.n	9ae <call_return_mskd()+0x20>
     9a0:	4b06      	ldr	r3, [pc, #24]	; (9bc <call_return_mskd()+0x2e>)
     9a2:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9a6:	605a      	str	r2, [r3, #4]
     9a8:	b002      	add	sp, #8
     9aa:	f85d fb04 	ldr.w	pc, [sp], #4
     9ae:	2a08      	cmp	r2, #8
     9b0:	d1f6      	bne.n	9a0 <call_return_mskd()+0x12>
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <call_return_mskd()+0x2e>)
     9b4:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9b8:	605a      	str	r2, [r3, #4]
     9ba:	e7f5      	b.n	9a8 <call_return_mskd()+0x1a>
     9bc:	200023e0 	.word	0x200023e0

000009c0 <return_reg()>:
     9c0:	4b02      	ldr	r3, [pc, #8]	; (9cc <return_reg()+0xc>)
     9c2:	2240      	movs	r2, #64	; 0x40
     9c4:	605a      	str	r2, [r3, #4]
     9c6:	4802      	ldr	r0, [pc, #8]	; (9d0 <return_reg()+0x10>)
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop
     9cc:	20002480 	.word	0x20002480
     9d0:	20002484 	.word	0x20002484

000009d4 <call_return_reg()>:
     9d4:	b500      	push	{lr}
     9d6:	f7ff fffe 	bl	9c0 <return_reg()>
     9da:	6803      	ldr	r3, [r0, #0]
     9dc:	2b40      	cmp	r3, #64	; 0x40
     9de:	4b04      	ldr	r3, [pc, #16]	; (9f0 <call_return_reg()+0x1c>)
     9e0:	bf0c      	ite	eq
     9e2:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     9e6:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     9ea:	605a      	str	r2, [r3, #4]
     9ec:	f85d fb04 	ldr.w	pc, [sp], #4
     9f0:	200023e0 	.word	0x200023e0

000009f4 <return_periph()>:
     9f4:	4801      	ldr	r0, [pc, #4]	; (9fc <return_periph()+0x8>)
     9f6:	2340      	movs	r3, #64	; 0x40
     9f8:	6043      	str	r3, [r0, #4]
     9fa:	4770      	bx	lr
     9fc:	20002480 	.word	0x20002480

00000a00 <call_return_periph()>:
     a00:	b500      	push	{lr}
     a02:	f7ff fffe 	bl	9f4 <return_periph()>
     a06:	6843      	ldr	r3, [r0, #4]
     a08:	2b40      	cmp	r3, #64	; 0x40
     a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <call_return_periph()+0x1c>)
     a0c:	bf0c      	ite	eq
     a0e:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     a12:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     a16:	605a      	str	r2, [r3, #4]
     a18:	f85d fb04 	ldr.w	pc, [sp], #4
     a1c:	200023e0 	.word	0x200023e0

00000a20 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a20:	2805      	cmp	r0, #5
     a22:	d006      	beq.n	a32 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a24:	2806      	cmp	r0, #6
     a26:	4b05      	ldr	r3, [pc, #20]	; (a3c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a28:	bf0c      	ite	eq
     a2a:	2244      	moveq	r2, #68	; 0x44
     a2c:	2255      	movne	r2, #85	; 0x55
     a2e:	62da      	str	r2, [r3, #44]	; 0x2c
     a30:	4770      	bx	lr
     a32:	4b02      	ldr	r3, [pc, #8]	; (a3c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a34:	2233      	movs	r2, #51	; 0x33
     a36:	62da      	str	r2, [r3, #44]	; 0x2c
     a38:	4770      	bx	lr
     a3a:	bf00      	nop
     a3c:	200022c0 	.word	0x200022c0

00000a40 <call_pos_val()>:
     a40:	b500      	push	{lr}
     a42:	2005      	movs	r0, #5
     a44:	f7ff fffe 	bl	a20 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a48:	2006      	movs	r0, #6
     a4a:	f7ff fffe 	bl	a20 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a4e:	f85d fb04 	ldr.w	pc, [sp], #4

00000a52 <call_pos_val_global()>:
     a52:	b500      	push	{lr}
     a54:	2006      	movs	r0, #6
     a56:	f7ff fffe 	bl	a20 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a5a:	f85d fb04 	ldr.w	pc, [sp], #4

00000a5e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a5e:	6803      	ldr	r3, [r0, #0]
     a60:	2b05      	cmp	r3, #5
     a62:	d006      	beq.n	a72 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a64:	2b06      	cmp	r3, #6
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a68:	bf0c      	ite	eq
     a6a:	2277      	moveq	r2, #119	; 0x77
     a6c:	2288      	movne	r2, #136	; 0x88
     a6e:	62da      	str	r2, [r3, #44]	; 0x2c
     a70:	4770      	bx	lr
     a72:	4b02      	ldr	r3, [pc, #8]	; (a7c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a74:	2266      	movs	r2, #102	; 0x66
     a76:	62da      	str	r2, [r3, #44]	; 0x2c
     a78:	4770      	bx	lr
     a7a:	bf00      	nop
     a7c:	200022c0 	.word	0x200022c0

00000a80 <call_pos_ref()>:
     a80:	b510      	push	{r4, lr}
     a82:	b082      	sub	sp, #8
     a84:	2405      	movs	r4, #5
     a86:	9401      	str	r4, [sp, #4]
     a88:	a801      	add	r0, sp, #4
     a8a:	f7ff fffe 	bl	a5e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a8e:	9400      	str	r4, [sp, #0]
     a90:	4668      	mov	r0, sp
     a92:	f7ff fffe 	bl	a5e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}

00000a9a <call_pos_ref_global()>:
     a9a:	b500      	push	{lr}
     a9c:	b081      	sub	sp, #4
     a9e:	2306      	movs	r3, #6
     aa0:	9300      	str	r3, [sp, #0]
     aa2:	4668      	mov	r0, sp
     aa4:	f7ff fffe 	bl	a5e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     aa8:	b001      	add	sp, #4
     aaa:	f85d fb04 	ldr.w	pc, [sp], #4

00000aae <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     aae:	4a03      	ldr	r2, [pc, #12]	; (abc <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
     ab0:	6853      	ldr	r3, [r2, #4]
     ab2:	ea23 0000 	bic.w	r0, r3, r0
     ab6:	4308      	orrs	r0, r1
     ab8:	6050      	str	r0, [r2, #4]
     aba:	4770      	bx	lr
     abc:	20002480 	.word	0x20002480

00000ac0 <call_range_val(unsigned int)>:
     ac0:	b500      	push	{lr}
     ac2:	0301      	lsls	r1, r0, #12
     ac4:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     ac8:	f7ff fffe 	bl	aae <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     acc:	f85d fb04 	ldr.w	pc, [sp], #4

00000ad0 <call_range_val_port()>:
     ad0:	b500      	push	{lr}
     ad2:	201f      	movs	r0, #31
     ad4:	f7ff fffe 	bl	ac0 <call_range_val(unsigned int)>
     ad8:	f85d fb04 	ldr.w	pc, [sp], #4

00000adc <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     adc:	4a03      	ldr	r2, [pc, #12]	; (aec <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     ade:	6853      	ldr	r3, [r2, #4]
     ae0:	ea23 0000 	bic.w	r0, r3, r0
     ae4:	4308      	orrs	r0, r1
     ae6:	6050      	str	r0, [r2, #4]
     ae8:	4770      	bx	lr
     aea:	bf00      	nop
     aec:	20002480 	.word	0x20002480

00000af0 <call_range_ref(unsigned int)>:
     af0:	b500      	push	{lr}
     af2:	0301      	lsls	r1, r0, #12
     af4:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     af8:	f7ff fffe 	bl	adc <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     afc:	f85d fb04 	ldr.w	pc, [sp], #4

00000b00 <call_range_ref_port()>:
     b00:	b500      	push	{lr}
     b02:	200c      	movs	r0, #12
     b04:	f7ff fffe 	bl	af0 <call_range_ref(unsigned int)>
     b08:	f85d fb04 	ldr.w	pc, [sp], #4

00000b0c <check_array_range_pass(unsigned int)>:
     b0c:	2816      	cmp	r0, #22
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <check_array_range_pass(unsigned int)+0x10>)
     b10:	bf94      	ite	ls
     b12:	227f      	movls	r2, #127	; 0x7f
     b14:	2283      	movhi	r2, #131	; 0x83
     b16:	62da      	str	r2, [r3, #44]	; 0x2c
     b18:	4770      	bx	lr
     b1a:	bf00      	nop
     b1c:	200022c0 	.word	0x200022c0

00000b20 <check_array_range_fail(unsigned int)>:
     b20:	2816      	cmp	r0, #22
     b22:	4b03      	ldr	r3, [pc, #12]	; (b30 <check_array_range_fail(unsigned int)+0x10>)
     b24:	bf94      	ite	ls
     b26:	2295      	movls	r2, #149	; 0x95
     b28:	2297      	movhi	r2, #151	; 0x97
     b2a:	62da      	str	r2, [r3, #44]	; 0x2c
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop
     b30:	200022c0 	.word	0x200022c0

00000b34 <check_bits_range_pass(unsigned int)>:
     b34:	280f      	cmp	r0, #15
     b36:	4b03      	ldr	r3, [pc, #12]	; (b44 <check_bits_range_pass(unsigned int)+0x10>)
     b38:	bf94      	ite	ls
     b3a:	229d      	movls	r2, #157	; 0x9d
     b3c:	22a3      	movhi	r2, #163	; 0xa3
     b3e:	62da      	str	r2, [r3, #44]	; 0x2c
     b40:	4770      	bx	lr
     b42:	bf00      	nop
     b44:	200022c0 	.word	0x200022c0

00000b48 <check_bits_range_fail(unsigned int)>:
     b48:	280f      	cmp	r0, #15
     b4a:	4b03      	ldr	r3, [pc, #12]	; (b58 <check_bits_range_fail(unsigned int)+0x10>)
     b4c:	bf94      	ite	ls
     b4e:	22a7      	movls	r2, #167	; 0xa7
     b50:	22ad      	movhi	r2, #173	; 0xad
     b52:	62da      	str	r2, [r3, #44]	; 0x2c
     b54:	4770      	bx	lr
     b56:	bf00      	nop
     b58:	200022c0 	.word	0x200022c0

00000b5c <check_mskd_range_pass(unsigned int)>:
     b5c:	281f      	cmp	r0, #31
     b5e:	4b03      	ldr	r3, [pc, #12]	; (b6c <check_mskd_range_pass(unsigned int)+0x10>)
     b60:	bf94      	ite	ls
     b62:	22b3      	movls	r2, #179	; 0xb3
     b64:	22b5      	movhi	r2, #181	; 0xb5
     b66:	62da      	str	r2, [r3, #44]	; 0x2c
     b68:	4770      	bx	lr
     b6a:	bf00      	nop
     b6c:	200022c0 	.word	0x200022c0

00000b70 <check_mskd_range_fail(unsigned int)>:
     b70:	281f      	cmp	r0, #31
     b72:	4b03      	ldr	r3, [pc, #12]	; (b80 <check_mskd_range_fail(unsigned int)+0x10>)
     b74:	bf94      	ite	ls
     b76:	22bf      	movls	r2, #191	; 0xbf
     b78:	22c1      	movhi	r2, #193	; 0xc1
     b7a:	62da      	str	r2, [r3, #44]	; 0x2c
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop
     b80:	200022c0 	.word	0x200022c0

00000b84 <bits_extract_ne()>:
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <bits_extract_ne()+0x18>)
     b86:	2220      	movs	r2, #32
     b88:	605a      	str	r2, [r3, #4]
     b8a:	685b      	ldr	r3, [r3, #4]
     b8c:	4293      	cmp	r3, r2
     b8e:	4b03      	ldr	r3, [pc, #12]	; (b9c <bits_extract_ne()+0x18>)
     b90:	bf14      	ite	ne
     b92:	2202      	movne	r2, #2
     b94:	2204      	moveq	r2, #4
     b96:	605a      	str	r2, [r3, #4]
     b98:	4770      	bx	lr
     b9a:	bf00      	nop
     b9c:	20002480 	.word	0x20002480

00000ba0 <mskd_extract_geq()>:
     ba0:	4b05      	ldr	r3, [pc, #20]	; (bb8 <mskd_extract_geq()+0x18>)
     ba2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     ba6:	605a      	str	r2, [r3, #4]
     ba8:	685b      	ldr	r3, [r3, #4]
     baa:	4293      	cmp	r3, r2
     bac:	4b03      	ldr	r3, [pc, #12]	; (bbc <mskd_extract_geq()+0x1c>)
     bae:	bf2c      	ite	cs
     bb0:	2220      	movcs	r2, #32
     bb2:	2240      	movcc	r2, #64	; 0x40
     bb4:	605a      	str	r2, [r3, #4]
     bb6:	4770      	bx	lr
     bb8:	200023e0 	.word	0x200023e0
     bbc:	20002480 	.word	0x20002480

00000bc0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     bc0:	4b04      	ldr	r3, [pc, #16]	; (bd4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     bc2:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     bc6:	605a      	str	r2, [r3, #4]
     bc8:	685b      	ldr	r3, [r3, #4]
     bca:	4018      	ands	r0, r3
     bcc:	40c8      	lsrs	r0, r1
     bce:	4b02      	ldr	r3, [pc, #8]	; (bd8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     bd0:	62d8      	str	r0, [r3, #44]	; 0x2c
     bd2:	4770      	bx	lr
     bd4:	200023e0 	.word	0x200023e0
     bd8:	200022c0 	.word	0x200022c0

00000bdc <call_shifted_const_val()>:
     bdc:	b500      	push	{lr}
     bde:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     be2:	2119      	movs	r1, #25
     be4:	f7ff fffe 	bl	bc0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     be8:	f85d fb04 	ldr.w	pc, [sp], #4

00000bec <call_shifted_var_val()>:
     bec:	b500      	push	{lr}
     bee:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bf2:	2119      	movs	r1, #25
     bf4:	f7ff fffe 	bl	bc0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bf8:	f85d fb04 	ldr.w	pc, [sp], #4

00000bfc <call_shifted_global_val()>:
     bfc:	b500      	push	{lr}
     bfe:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c02:	2119      	movs	r1, #25
     c04:	f7ff fffe 	bl	bc0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c08:	f85d fb04 	ldr.w	pc, [sp], #4

00000c0c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     c0e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     c12:	605a      	str	r2, [r3, #4]
     c14:	685b      	ldr	r3, [r3, #4]
     c16:	6802      	ldr	r2, [r0, #0]
     c18:	4013      	ands	r3, r2
     c1a:	6842      	ldr	r2, [r0, #4]
     c1c:	40d3      	lsrs	r3, r2
     c1e:	4a02      	ldr	r2, [pc, #8]	; (c28 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     c20:	62d3      	str	r3, [r2, #44]	; 0x2c
     c22:	4770      	bx	lr
     c24:	200023e0 	.word	0x200023e0
     c28:	200022c0 	.word	0x200022c0

00000c2c <call_shifted_const_ref()>:
     c2c:	b500      	push	{lr}
     c2e:	b082      	sub	sp, #8
     c30:	4b05      	ldr	r3, [pc, #20]	; (c48 <call_shifted_const_ref()+0x1c>)
     c32:	f103 0308 	add.w	r3, r3, #8
     c36:	cb0c      	ldmia	r3, {r2, r3}
     c38:	e88d 000c 	stmia.w	sp, {r2, r3}
     c3c:	4668      	mov	r0, sp
     c3e:	f7ff fffe 	bl	c0c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c42:	b002      	add	sp, #8
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
     c48:	00000000 	.word	0x00000000

00000c4c <call_shifted_var_ref()>:
     c4c:	b500      	push	{lr}
     c4e:	b082      	sub	sp, #8
     c50:	4b05      	ldr	r3, [pc, #20]	; (c68 <call_shifted_var_ref()+0x1c>)
     c52:	f103 0310 	add.w	r3, r3, #16
     c56:	cb0c      	ldmia	r3, {r2, r3}
     c58:	e88d 000c 	stmia.w	sp, {r2, r3}
     c5c:	4668      	mov	r0, sp
     c5e:	f7ff fffe 	bl	c0c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c62:	b002      	add	sp, #8
     c64:	f85d fb04 	ldr.w	pc, [sp], #4
     c68:	00000000 	.word	0x00000000

00000c6c <call_shifted_global_ref()>:
     c6c:	b500      	push	{lr}
     c6e:	b082      	sub	sp, #8
     c70:	4b05      	ldr	r3, [pc, #20]	; (c88 <call_shifted_global_ref()+0x1c>)
     c72:	f103 0308 	add.w	r3, r3, #8
     c76:	cb0c      	ldmia	r3, {r2, r3}
     c78:	e88d 000c 	stmia.w	sp, {r2, r3}
     c7c:	4668      	mov	r0, sp
     c7e:	f7ff fffe 	bl	c0c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c82:	b002      	add	sp, #8
     c84:	f85d fb04 	ldr.w	pc, [sp], #4
     c88:	00000000 	.word	0x00000000

00000c8c <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     c8c:	f010 0f40 	tst.w	r0, #64	; 0x40
     c90:	4b02      	ldr	r3, [pc, #8]	; (c9c <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     c92:	bf14      	ite	ne
     c94:	2202      	movne	r2, #2
     c96:	2204      	moveq	r2, #4
     c98:	605a      	str	r2, [r3, #4]
     c9a:	4770      	bx	lr
     c9c:	20002480 	.word	0x20002480

00000ca0 <call_copy_bits_val()>:
     ca0:	b500      	push	{lr}
     ca2:	4b04      	ldr	r3, [pc, #16]	; (cb4 <call_copy_bits_val()+0x14>)
     ca4:	2240      	movs	r2, #64	; 0x40
     ca6:	605a      	str	r2, [r3, #4]
     ca8:	6858      	ldr	r0, [r3, #4]
     caa:	f7ff fffe 	bl	c8c <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     cae:	f85d fb04 	ldr.w	pc, [sp], #4
     cb2:	bf00      	nop
     cb4:	20002480 	.word	0x20002480

00000cb8 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     cb8:	6803      	ldr	r3, [r0, #0]
     cba:	f013 0f40 	tst.w	r3, #64	; 0x40
     cbe:	4b03      	ldr	r3, [pc, #12]	; (ccc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
     cc0:	bf14      	ite	ne
     cc2:	2202      	movne	r2, #2
     cc4:	2204      	moveq	r2, #4
     cc6:	605a      	str	r2, [r3, #4]
     cc8:	4770      	bx	lr
     cca:	bf00      	nop
     ccc:	20002480 	.word	0x20002480

00000cd0 <call_copy_bits_ref()>:
     cd0:	b500      	push	{lr}
     cd2:	b081      	sub	sp, #4
     cd4:	4b05      	ldr	r3, [pc, #20]	; (cec <call_copy_bits_ref()+0x1c>)
     cd6:	2240      	movs	r2, #64	; 0x40
     cd8:	605a      	str	r2, [r3, #4]
     cda:	685b      	ldr	r3, [r3, #4]
     cdc:	9300      	str	r3, [sp, #0]
     cde:	4668      	mov	r0, sp
     ce0:	f7ff fffe 	bl	cb8 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     ce4:	b001      	add	sp, #4
     ce6:	f85d fb04 	ldr.w	pc, [sp], #4
     cea:	bf00      	nop
     cec:	20002480 	.word	0x20002480

00000cf0 <run>:
     cf0:	b530      	push	{r4, r5, lr}
     cf2:	4bb0      	ldr	r3, [pc, #704]	; (fb4 <run+0x2c4>)
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	b923      	cbnz	r3, d02 <run+0x12>
     cf8:	4bae      	ldr	r3, [pc, #696]	; (fb4 <run+0x2c4>)
     cfa:	4aaf      	ldr	r2, [pc, #700]	; (fb8 <run+0x2c8>)
     cfc:	609a      	str	r2, [r3, #8]
     cfe:	2201      	movs	r2, #1
     d00:	701a      	strb	r2, [r3, #0]
     d02:	4bac      	ldr	r3, [pc, #688]	; (fb4 <run+0x2c4>)
     d04:	7b1b      	ldrb	r3, [r3, #12]
     d06:	b923      	cbnz	r3, d12 <run+0x22>
     d08:	4baa      	ldr	r3, [pc, #680]	; (fb4 <run+0x2c4>)
     d0a:	4aac      	ldr	r2, [pc, #688]	; (fbc <run+0x2cc>)
     d0c:	615a      	str	r2, [r3, #20]
     d0e:	2201      	movs	r2, #1
     d10:	731a      	strb	r2, [r3, #12]
     d12:	4ba8      	ldr	r3, [pc, #672]	; (fb4 <run+0x2c4>)
     d14:	7e1b      	ldrb	r3, [r3, #24]
     d16:	b923      	cbnz	r3, d22 <run+0x32>
     d18:	4ba6      	ldr	r3, [pc, #664]	; (fb4 <run+0x2c4>)
     d1a:	4aa9      	ldr	r2, [pc, #676]	; (fc0 <run+0x2d0>)
     d1c:	621a      	str	r2, [r3, #32]
     d1e:	2201      	movs	r2, #1
     d20:	761a      	strb	r2, [r3, #24]
     d22:	4ca4      	ldr	r4, [pc, #656]	; (fb4 <run+0x2c4>)
     d24:	2200      	movs	r2, #0
     d26:	68a1      	ldr	r1, [r4, #8]
     d28:	48a6      	ldr	r0, [pc, #664]	; (fc4 <run+0x2d4>)
     d2a:	f7ff fffe 	bl	0 <do_test>
     d2e:	2201      	movs	r2, #1
     d30:	68a1      	ldr	r1, [r4, #8]
     d32:	48a5      	ldr	r0, [pc, #660]	; (fc8 <run+0x2d8>)
     d34:	f7ff fffe 	bl	0 <do_test>
     d38:	2202      	movs	r2, #2
     d3a:	68a1      	ldr	r1, [r4, #8]
     d3c:	48a3      	ldr	r0, [pc, #652]	; (fcc <run+0x2dc>)
     d3e:	f7ff fffe 	bl	0 <do_test>
     d42:	2203      	movs	r2, #3
     d44:	68a1      	ldr	r1, [r4, #8]
     d46:	48a2      	ldr	r0, [pc, #648]	; (fd0 <run+0x2e0>)
     d48:	f7ff fffe 	bl	0 <do_test>
     d4c:	2204      	movs	r2, #4
     d4e:	68a1      	ldr	r1, [r4, #8]
     d50:	48a0      	ldr	r0, [pc, #640]	; (fd4 <run+0x2e4>)
     d52:	f7ff fffe 	bl	0 <do_test>
     d56:	2205      	movs	r2, #5
     d58:	68a1      	ldr	r1, [r4, #8]
     d5a:	489f      	ldr	r0, [pc, #636]	; (fd8 <run+0x2e8>)
     d5c:	f7ff fffe 	bl	0 <do_test>
     d60:	2206      	movs	r2, #6
     d62:	68a1      	ldr	r1, [r4, #8]
     d64:	489d      	ldr	r0, [pc, #628]	; (fdc <run+0x2ec>)
     d66:	f7ff fffe 	bl	0 <do_test>
     d6a:	2207      	movs	r2, #7
     d6c:	68a1      	ldr	r1, [r4, #8]
     d6e:	489c      	ldr	r0, [pc, #624]	; (fe0 <run+0x2f0>)
     d70:	f7ff fffe 	bl	0 <do_test>
     d74:	2208      	movs	r2, #8
     d76:	68a1      	ldr	r1, [r4, #8]
     d78:	489a      	ldr	r0, [pc, #616]	; (fe4 <run+0x2f4>)
     d7a:	f7ff fffe 	bl	0 <do_test>
     d7e:	2209      	movs	r2, #9
     d80:	68a1      	ldr	r1, [r4, #8]
     d82:	4899      	ldr	r0, [pc, #612]	; (fe8 <run+0x2f8>)
     d84:	f7ff fffe 	bl	0 <do_test>
     d88:	220a      	movs	r2, #10
     d8a:	68a1      	ldr	r1, [r4, #8]
     d8c:	4897      	ldr	r0, [pc, #604]	; (fec <run+0x2fc>)
     d8e:	f7ff fffe 	bl	0 <do_test>
     d92:	220b      	movs	r2, #11
     d94:	68a1      	ldr	r1, [r4, #8]
     d96:	4896      	ldr	r0, [pc, #600]	; (ff0 <run+0x300>)
     d98:	f7ff fffe 	bl	0 <do_test>
     d9c:	220c      	movs	r2, #12
     d9e:	68a1      	ldr	r1, [r4, #8]
     da0:	4894      	ldr	r0, [pc, #592]	; (ff4 <run+0x304>)
     da2:	f7ff fffe 	bl	0 <do_test>
     da6:	220d      	movs	r2, #13
     da8:	68a1      	ldr	r1, [r4, #8]
     daa:	4893      	ldr	r0, [pc, #588]	; (ff8 <run+0x308>)
     dac:	f7ff fffe 	bl	0 <do_test>
     db0:	220e      	movs	r2, #14
     db2:	68a1      	ldr	r1, [r4, #8]
     db4:	4891      	ldr	r0, [pc, #580]	; (ffc <run+0x30c>)
     db6:	f7ff fffe 	bl	0 <do_test>
     dba:	220f      	movs	r2, #15
     dbc:	68a1      	ldr	r1, [r4, #8]
     dbe:	4890      	ldr	r0, [pc, #576]	; (1000 <run+0x310>)
     dc0:	f7ff fffe 	bl	0 <do_test>
     dc4:	2210      	movs	r2, #16
     dc6:	68a1      	ldr	r1, [r4, #8]
     dc8:	488e      	ldr	r0, [pc, #568]	; (1004 <run+0x314>)
     dca:	f7ff fffe 	bl	0 <do_test>
     dce:	2211      	movs	r2, #17
     dd0:	68a1      	ldr	r1, [r4, #8]
     dd2:	488d      	ldr	r0, [pc, #564]	; (1008 <run+0x318>)
     dd4:	f7ff fffe 	bl	0 <do_test>
     dd8:	2212      	movs	r2, #18
     dda:	68a1      	ldr	r1, [r4, #8]
     ddc:	488b      	ldr	r0, [pc, #556]	; (100c <run+0x31c>)
     dde:	f7ff fffe 	bl	0 <do_test>
     de2:	2213      	movs	r2, #19
     de4:	68a1      	ldr	r1, [r4, #8]
     de6:	488a      	ldr	r0, [pc, #552]	; (1010 <run+0x320>)
     de8:	f7ff fffe 	bl	0 <do_test>
     dec:	2214      	movs	r2, #20
     dee:	68a1      	ldr	r1, [r4, #8]
     df0:	4888      	ldr	r0, [pc, #544]	; (1014 <run+0x324>)
     df2:	f7ff fffe 	bl	0 <do_test>
     df6:	2215      	movs	r2, #21
     df8:	68a1      	ldr	r1, [r4, #8]
     dfa:	4887      	ldr	r0, [pc, #540]	; (1018 <run+0x328>)
     dfc:	f7ff fffe 	bl	0 <do_test>
     e00:	2216      	movs	r2, #22
     e02:	68a1      	ldr	r1, [r4, #8]
     e04:	4885      	ldr	r0, [pc, #532]	; (101c <run+0x32c>)
     e06:	f7ff fffe 	bl	0 <do_test>
     e0a:	2217      	movs	r2, #23
     e0c:	68a1      	ldr	r1, [r4, #8]
     e0e:	4884      	ldr	r0, [pc, #528]	; (1020 <run+0x330>)
     e10:	f7ff fffe 	bl	0 <do_test>
     e14:	2218      	movs	r2, #24
     e16:	68a1      	ldr	r1, [r4, #8]
     e18:	4882      	ldr	r0, [pc, #520]	; (1024 <run+0x334>)
     e1a:	f7ff fffe 	bl	0 <do_test>
     e1e:	2219      	movs	r2, #25
     e20:	68a1      	ldr	r1, [r4, #8]
     e22:	4881      	ldr	r0, [pc, #516]	; (1028 <run+0x338>)
     e24:	f7ff fffe 	bl	0 <do_test>
     e28:	221a      	movs	r2, #26
     e2a:	68a1      	ldr	r1, [r4, #8]
     e2c:	487f      	ldr	r0, [pc, #508]	; (102c <run+0x33c>)
     e2e:	f7ff fffe 	bl	0 <do_test>
     e32:	221b      	movs	r2, #27
     e34:	68a1      	ldr	r1, [r4, #8]
     e36:	487e      	ldr	r0, [pc, #504]	; (1030 <run+0x340>)
     e38:	f7ff fffe 	bl	0 <do_test>
     e3c:	221c      	movs	r2, #28
     e3e:	68a1      	ldr	r1, [r4, #8]
     e40:	487c      	ldr	r0, [pc, #496]	; (1034 <run+0x344>)
     e42:	f7ff fffe 	bl	0 <do_test>
     e46:	221d      	movs	r2, #29
     e48:	68a1      	ldr	r1, [r4, #8]
     e4a:	487b      	ldr	r0, [pc, #492]	; (1038 <run+0x348>)
     e4c:	f7ff fffe 	bl	0 <do_test>
     e50:	221e      	movs	r2, #30
     e52:	68a1      	ldr	r1, [r4, #8]
     e54:	4879      	ldr	r0, [pc, #484]	; (103c <run+0x34c>)
     e56:	f7ff fffe 	bl	0 <do_test>
     e5a:	221f      	movs	r2, #31
     e5c:	68a1      	ldr	r1, [r4, #8]
     e5e:	4878      	ldr	r0, [pc, #480]	; (1040 <run+0x350>)
     e60:	f7ff fffe 	bl	0 <do_test>
     e64:	2220      	movs	r2, #32
     e66:	68a1      	ldr	r1, [r4, #8]
     e68:	4876      	ldr	r0, [pc, #472]	; (1044 <run+0x354>)
     e6a:	f7ff fffe 	bl	0 <do_test>
     e6e:	2221      	movs	r2, #33	; 0x21
     e70:	68a1      	ldr	r1, [r4, #8]
     e72:	4875      	ldr	r0, [pc, #468]	; (1048 <run+0x358>)
     e74:	f7ff fffe 	bl	0 <do_test>
     e78:	2222      	movs	r2, #34	; 0x22
     e7a:	68a1      	ldr	r1, [r4, #8]
     e7c:	4873      	ldr	r0, [pc, #460]	; (104c <run+0x35c>)
     e7e:	f7ff fffe 	bl	0 <do_test>
     e82:	2223      	movs	r2, #35	; 0x23
     e84:	68a1      	ldr	r1, [r4, #8]
     e86:	4872      	ldr	r0, [pc, #456]	; (1050 <run+0x360>)
     e88:	f7ff fffe 	bl	0 <do_test>
     e8c:	2224      	movs	r2, #36	; 0x24
     e8e:	68a1      	ldr	r1, [r4, #8]
     e90:	4870      	ldr	r0, [pc, #448]	; (1054 <run+0x364>)
     e92:	f7ff fffe 	bl	0 <do_test>
     e96:	2225      	movs	r2, #37	; 0x25
     e98:	6961      	ldr	r1, [r4, #20]
     e9a:	486f      	ldr	r0, [pc, #444]	; (1058 <run+0x368>)
     e9c:	f7ff fffe 	bl	0 <do_test>
     ea0:	2226      	movs	r2, #38	; 0x26
     ea2:	6961      	ldr	r1, [r4, #20]
     ea4:	486d      	ldr	r0, [pc, #436]	; (105c <run+0x36c>)
     ea6:	f7ff fffe 	bl	0 <do_test>
     eaa:	2227      	movs	r2, #39	; 0x27
     eac:	6961      	ldr	r1, [r4, #20]
     eae:	486c      	ldr	r0, [pc, #432]	; (1060 <run+0x370>)
     eb0:	f7ff fffe 	bl	0 <do_test>
     eb4:	2228      	movs	r2, #40	; 0x28
     eb6:	68a1      	ldr	r1, [r4, #8]
     eb8:	486a      	ldr	r0, [pc, #424]	; (1064 <run+0x374>)
     eba:	f7ff fffe 	bl	0 <do_test>
     ebe:	2229      	movs	r2, #41	; 0x29
     ec0:	68a1      	ldr	r1, [r4, #8]
     ec2:	4869      	ldr	r0, [pc, #420]	; (1068 <run+0x378>)
     ec4:	f7ff fffe 	bl	0 <do_test>
     ec8:	222a      	movs	r2, #42	; 0x2a
     eca:	68a1      	ldr	r1, [r4, #8]
     ecc:	4867      	ldr	r0, [pc, #412]	; (106c <run+0x37c>)
     ece:	f7ff fffe 	bl	0 <do_test>
     ed2:	222b      	movs	r2, #43	; 0x2b
     ed4:	68a1      	ldr	r1, [r4, #8]
     ed6:	4866      	ldr	r0, [pc, #408]	; (1070 <run+0x380>)
     ed8:	f7ff fffe 	bl	0 <do_test>
     edc:	222c      	movs	r2, #44	; 0x2c
     ede:	68a1      	ldr	r1, [r4, #8]
     ee0:	4864      	ldr	r0, [pc, #400]	; (1074 <run+0x384>)
     ee2:	f7ff fffe 	bl	0 <do_test>
     ee6:	222d      	movs	r2, #45	; 0x2d
     ee8:	6a21      	ldr	r1, [r4, #32]
     eea:	4863      	ldr	r0, [pc, #396]	; (1078 <run+0x388>)
     eec:	f7ff fffe 	bl	0 <do_test>
     ef0:	222e      	movs	r2, #46	; 0x2e
     ef2:	68a1      	ldr	r1, [r4, #8]
     ef4:	4861      	ldr	r0, [pc, #388]	; (107c <run+0x38c>)
     ef6:	f7ff fffe 	bl	0 <do_test>
     efa:	222f      	movs	r2, #47	; 0x2f
     efc:	68a1      	ldr	r1, [r4, #8]
     efe:	4860      	ldr	r0, [pc, #384]	; (1080 <run+0x390>)
     f00:	f7ff fffe 	bl	0 <do_test>
     f04:	2230      	movs	r2, #48	; 0x30
     f06:	68a1      	ldr	r1, [r4, #8]
     f08:	485e      	ldr	r0, [pc, #376]	; (1084 <run+0x394>)
     f0a:	f7ff fffe 	bl	0 <do_test>
     f0e:	2231      	movs	r2, #49	; 0x31
     f10:	68a1      	ldr	r1, [r4, #8]
     f12:	485d      	ldr	r0, [pc, #372]	; (1088 <run+0x398>)
     f14:	f7ff fffe 	bl	0 <do_test>
     f18:	2232      	movs	r2, #50	; 0x32
     f1a:	68a1      	ldr	r1, [r4, #8]
     f1c:	485b      	ldr	r0, [pc, #364]	; (108c <run+0x39c>)
     f1e:	f7ff fffe 	bl	0 <do_test>
     f22:	2233      	movs	r2, #51	; 0x33
     f24:	68a1      	ldr	r1, [r4, #8]
     f26:	485a      	ldr	r0, [pc, #360]	; (1090 <run+0x3a0>)
     f28:	f7ff fffe 	bl	0 <do_test>
     f2c:	2234      	movs	r2, #52	; 0x34
     f2e:	68a1      	ldr	r1, [r4, #8]
     f30:	4858      	ldr	r0, [pc, #352]	; (1094 <run+0x3a4>)
     f32:	f7ff fffe 	bl	0 <do_test>
     f36:	2235      	movs	r2, #53	; 0x35
     f38:	68a1      	ldr	r1, [r4, #8]
     f3a:	4857      	ldr	r0, [pc, #348]	; (1098 <run+0x3a8>)
     f3c:	f7ff fffe 	bl	0 <do_test>
     f40:	2236      	movs	r2, #54	; 0x36
     f42:	68a1      	ldr	r1, [r4, #8]
     f44:	4855      	ldr	r0, [pc, #340]	; (109c <run+0x3ac>)
     f46:	f7ff fffe 	bl	0 <do_test>
     f4a:	2237      	movs	r2, #55	; 0x37
     f4c:	68a1      	ldr	r1, [r4, #8]
     f4e:	4854      	ldr	r0, [pc, #336]	; (10a0 <run+0x3b0>)
     f50:	f7ff fffe 	bl	0 <do_test>
     f54:	2238      	movs	r2, #56	; 0x38
     f56:	68a1      	ldr	r1, [r4, #8]
     f58:	4852      	ldr	r0, [pc, #328]	; (10a4 <run+0x3b4>)
     f5a:	f7ff fffe 	bl	0 <do_test>
     f5e:	2239      	movs	r2, #57	; 0x39
     f60:	68a1      	ldr	r1, [r4, #8]
     f62:	4851      	ldr	r0, [pc, #324]	; (10a8 <run+0x3b8>)
     f64:	f7ff fffe 	bl	0 <do_test>
     f68:	223a      	movs	r2, #58	; 0x3a
     f6a:	68a1      	ldr	r1, [r4, #8]
     f6c:	484f      	ldr	r0, [pc, #316]	; (10ac <run+0x3bc>)
     f6e:	f7ff fffe 	bl	0 <do_test>
     f72:	223b      	movs	r2, #59	; 0x3b
     f74:	68a1      	ldr	r1, [r4, #8]
     f76:	484e      	ldr	r0, [pc, #312]	; (10b0 <run+0x3c0>)
     f78:	f7ff fffe 	bl	0 <do_test>
     f7c:	223c      	movs	r2, #60	; 0x3c
     f7e:	68a1      	ldr	r1, [r4, #8]
     f80:	484c      	ldr	r0, [pc, #304]	; (10b4 <run+0x3c4>)
     f82:	f7ff fffe 	bl	0 <do_test>
     f86:	223d      	movs	r2, #61	; 0x3d
     f88:	68a1      	ldr	r1, [r4, #8]
     f8a:	484b      	ldr	r0, [pc, #300]	; (10b8 <run+0x3c8>)
     f8c:	f7ff fffe 	bl	0 <do_test>
     f90:	223e      	movs	r2, #62	; 0x3e
     f92:	68a1      	ldr	r1, [r4, #8]
     f94:	4849      	ldr	r0, [pc, #292]	; (10bc <run+0x3cc>)
     f96:	f7ff fffe 	bl	0 <do_test>
     f9a:	223f      	movs	r2, #63	; 0x3f
     f9c:	68a1      	ldr	r1, [r4, #8]
     f9e:	4848      	ldr	r0, [pc, #288]	; (10c0 <run+0x3d0>)
     fa0:	f7ff fffe 	bl	0 <do_test>
     fa4:	2240      	movs	r2, #64	; 0x40
     fa6:	6961      	ldr	r1, [r4, #20]
     fa8:	4846      	ldr	r0, [pc, #280]	; (10c4 <run+0x3d4>)
     faa:	f7ff fffe 	bl	0 <do_test>
     fae:	2241      	movs	r2, #65	; 0x41
     fb0:	6961      	ldr	r1, [r4, #20]
     fb2:	e089      	b.n	10c8 <run+0x3d8>
     fb4:	00000000 	.word	0x00000000
     fb8:	20002484 	.word	0x20002484
     fbc:	200023e4 	.word	0x200023e4
     fc0:	200022ec 	.word	0x200022ec
	...
    10c8:	487f      	ldr	r0, [pc, #508]	; (200 <do_test+0x200>)
    10ca:	f7ff fffe 	bl	0 <do_test>
    10ce:	2242      	movs	r2, #66	; 0x42
    10d0:	6961      	ldr	r1, [r4, #20]
    10d2:	487e      	ldr	r0, [pc, #504]	; (12cc <run+0x5dc>)
    10d4:	f7ff fffe 	bl	0 <do_test>
    10d8:	2243      	movs	r2, #67	; 0x43
    10da:	68a1      	ldr	r1, [r4, #8]
    10dc:	487c      	ldr	r0, [pc, #496]	; (12d0 <run+0x5e0>)
    10de:	f7ff fffe 	bl	0 <do_test>
    10e2:	2244      	movs	r2, #68	; 0x44
    10e4:	6a21      	ldr	r1, [r4, #32]
    10e6:	487b      	ldr	r0, [pc, #492]	; (12d4 <run+0x5e4>)
    10e8:	f7ff fffe 	bl	0 <do_test>
    10ec:	2245      	movs	r2, #69	; 0x45
    10ee:	6a21      	ldr	r1, [r4, #32]
    10f0:	4879      	ldr	r0, [pc, #484]	; (12d8 <run+0x5e8>)
    10f2:	f7ff fffe 	bl	0 <do_test>
    10f6:	2246      	movs	r2, #70	; 0x46
    10f8:	68a1      	ldr	r1, [r4, #8]
    10fa:	4878      	ldr	r0, [pc, #480]	; (12dc <run+0x5ec>)
    10fc:	f7ff fffe 	bl	0 <do_test>
    1100:	2247      	movs	r2, #71	; 0x47
    1102:	68a1      	ldr	r1, [r4, #8]
    1104:	4876      	ldr	r0, [pc, #472]	; (12e0 <run+0x5f0>)
    1106:	f7ff fffe 	bl	0 <do_test>
    110a:	2248      	movs	r2, #72	; 0x48
    110c:	6a21      	ldr	r1, [r4, #32]
    110e:	4875      	ldr	r0, [pc, #468]	; (12e4 <run+0x5f4>)
    1110:	f7ff fffe 	bl	0 <do_test>
    1114:	2249      	movs	r2, #73	; 0x49
    1116:	6a21      	ldr	r1, [r4, #32]
    1118:	4873      	ldr	r0, [pc, #460]	; (12e8 <run+0x5f8>)
    111a:	f7ff fffe 	bl	0 <do_test>
    111e:	224a      	movs	r2, #74	; 0x4a
    1120:	68a1      	ldr	r1, [r4, #8]
    1122:	4872      	ldr	r0, [pc, #456]	; (12ec <run+0x5fc>)
    1124:	f7ff fffe 	bl	0 <do_test>
    1128:	224b      	movs	r2, #75	; 0x4b
    112a:	68a1      	ldr	r1, [r4, #8]
    112c:	4870      	ldr	r0, [pc, #448]	; (12f0 <run+0x600>)
    112e:	f7ff fffe 	bl	0 <do_test>
    1132:	224c      	movs	r2, #76	; 0x4c
    1134:	68a1      	ldr	r1, [r4, #8]
    1136:	486f      	ldr	r0, [pc, #444]	; (12f4 <run+0x604>)
    1138:	f7ff fffe 	bl	0 <do_test>
    113c:	224d      	movs	r2, #77	; 0x4d
    113e:	68a1      	ldr	r1, [r4, #8]
    1140:	486d      	ldr	r0, [pc, #436]	; (12f8 <run+0x608>)
    1142:	f7ff fffe 	bl	0 <do_test>
    1146:	224e      	movs	r2, #78	; 0x4e
    1148:	68a1      	ldr	r1, [r4, #8]
    114a:	486c      	ldr	r0, [pc, #432]	; (12fc <run+0x60c>)
    114c:	f7ff fffe 	bl	0 <do_test>
    1150:	224f      	movs	r2, #79	; 0x4f
    1152:	68a1      	ldr	r1, [r4, #8]
    1154:	486a      	ldr	r0, [pc, #424]	; (1300 <run+0x610>)
    1156:	f7ff fffe 	bl	0 <do_test>
    115a:	4d6a      	ldr	r5, [pc, #424]	; (1304 <run+0x614>)
    115c:	2250      	movs	r2, #80	; 0x50
    115e:	68a1      	ldr	r1, [r4, #8]
    1160:	4628      	mov	r0, r5
    1162:	f7ff fffe 	bl	0 <do_test>
    1166:	2251      	movs	r2, #81	; 0x51
    1168:	68a1      	ldr	r1, [r4, #8]
    116a:	4628      	mov	r0, r5
    116c:	f7ff fffe 	bl	0 <do_test>
    1170:	2252      	movs	r2, #82	; 0x52
    1172:	68a1      	ldr	r1, [r4, #8]
    1174:	4864      	ldr	r0, [pc, #400]	; (1308 <run+0x618>)
    1176:	f7ff fffe 	bl	0 <do_test>
    117a:	2253      	movs	r2, #83	; 0x53
    117c:	68a1      	ldr	r1, [r4, #8]
    117e:	4863      	ldr	r0, [pc, #396]	; (130c <run+0x61c>)
    1180:	f7ff fffe 	bl	0 <do_test>
    1184:	2254      	movs	r2, #84	; 0x54
    1186:	68a1      	ldr	r1, [r4, #8]
    1188:	4861      	ldr	r0, [pc, #388]	; (1310 <run+0x620>)
    118a:	f7ff fffe 	bl	0 <do_test>
    118e:	4d61      	ldr	r5, [pc, #388]	; (1314 <run+0x624>)
    1190:	2255      	movs	r2, #85	; 0x55
    1192:	68a1      	ldr	r1, [r4, #8]
    1194:	4628      	mov	r0, r5
    1196:	f7ff fffe 	bl	0 <do_test>
    119a:	2256      	movs	r2, #86	; 0x56
    119c:	68a1      	ldr	r1, [r4, #8]
    119e:	485e      	ldr	r0, [pc, #376]	; (1318 <run+0x628>)
    11a0:	f7ff fffe 	bl	0 <do_test>
    11a4:	2257      	movs	r2, #87	; 0x57
    11a6:	68a1      	ldr	r1, [r4, #8]
    11a8:	4628      	mov	r0, r5
    11aa:	f7ff fffe 	bl	0 <do_test>
    11ae:	2258      	movs	r2, #88	; 0x58
    11b0:	68a1      	ldr	r1, [r4, #8]
    11b2:	485a      	ldr	r0, [pc, #360]	; (131c <run+0x62c>)
    11b4:	f7ff fffe 	bl	0 <do_test>
    11b8:	2259      	movs	r2, #89	; 0x59
    11ba:	68a1      	ldr	r1, [r4, #8]
    11bc:	4858      	ldr	r0, [pc, #352]	; (1320 <run+0x630>)
    11be:	f7ff fffe 	bl	0 <do_test>
    11c2:	225a      	movs	r2, #90	; 0x5a
    11c4:	6a21      	ldr	r1, [r4, #32]
    11c6:	4857      	ldr	r0, [pc, #348]	; (1324 <run+0x634>)
    11c8:	f7ff fffe 	bl	0 <do_test>
    11cc:	225b      	movs	r2, #91	; 0x5b
    11ce:	6a21      	ldr	r1, [r4, #32]
    11d0:	4855      	ldr	r0, [pc, #340]	; (1328 <run+0x638>)
    11d2:	f7ff fffe 	bl	0 <do_test>
    11d6:	225c      	movs	r2, #92	; 0x5c
    11d8:	68a1      	ldr	r1, [r4, #8]
    11da:	4854      	ldr	r0, [pc, #336]	; (132c <run+0x63c>)
    11dc:	f7ff fffe 	bl	0 <do_test>
    11e0:	225d      	movs	r2, #93	; 0x5d
    11e2:	6a21      	ldr	r1, [r4, #32]
    11e4:	4852      	ldr	r0, [pc, #328]	; (1330 <run+0x640>)
    11e6:	f7ff fffe 	bl	0 <do_test>
    11ea:	225e      	movs	r2, #94	; 0x5e
    11ec:	6a21      	ldr	r1, [r4, #32]
    11ee:	4851      	ldr	r0, [pc, #324]	; (1334 <run+0x644>)
    11f0:	f7ff fffe 	bl	0 <do_test>
    11f4:	225f      	movs	r2, #95	; 0x5f
    11f6:	68a1      	ldr	r1, [r4, #8]
    11f8:	484f      	ldr	r0, [pc, #316]	; (1338 <run+0x648>)
    11fa:	f7ff fffe 	bl	0 <do_test>
    11fe:	2260      	movs	r2, #96	; 0x60
    1200:	68a1      	ldr	r1, [r4, #8]
    1202:	484e      	ldr	r0, [pc, #312]	; (133c <run+0x64c>)
    1204:	f7ff fffe 	bl	0 <do_test>
    1208:	2261      	movs	r2, #97	; 0x61
    120a:	68a1      	ldr	r1, [r4, #8]
    120c:	484c      	ldr	r0, [pc, #304]	; (1340 <run+0x650>)
    120e:	f7ff fffe 	bl	0 <do_test>
    1212:	2262      	movs	r2, #98	; 0x62
    1214:	68a1      	ldr	r1, [r4, #8]
    1216:	484b      	ldr	r0, [pc, #300]	; (1344 <run+0x654>)
    1218:	f7ff fffe 	bl	0 <do_test>
    121c:	2263      	movs	r2, #99	; 0x63
    121e:	6a21      	ldr	r1, [r4, #32]
    1220:	4849      	ldr	r0, [pc, #292]	; (1348 <run+0x658>)
    1222:	f7ff fffe 	bl	0 <do_test>
    1226:	2264      	movs	r2, #100	; 0x64
    1228:	6a21      	ldr	r1, [r4, #32]
    122a:	4848      	ldr	r0, [pc, #288]	; (134c <run+0x65c>)
    122c:	f7ff fffe 	bl	0 <do_test>
    1230:	2265      	movs	r2, #101	; 0x65
    1232:	6a21      	ldr	r1, [r4, #32]
    1234:	4846      	ldr	r0, [pc, #280]	; (1350 <run+0x660>)
    1236:	f7ff fffe 	bl	0 <do_test>
    123a:	2266      	movs	r2, #102	; 0x66
    123c:	6a21      	ldr	r1, [r4, #32]
    123e:	4845      	ldr	r0, [pc, #276]	; (1354 <run+0x664>)
    1240:	f7ff fffe 	bl	0 <do_test>
    1244:	2267      	movs	r2, #103	; 0x67
    1246:	6a21      	ldr	r1, [r4, #32]
    1248:	4843      	ldr	r0, [pc, #268]	; (1358 <run+0x668>)
    124a:	f7ff fffe 	bl	0 <do_test>
    124e:	2268      	movs	r2, #104	; 0x68
    1250:	6a21      	ldr	r1, [r4, #32]
    1252:	4842      	ldr	r0, [pc, #264]	; (135c <run+0x66c>)
    1254:	f7ff fffe 	bl	0 <do_test>
    1258:	2269      	movs	r2, #105	; 0x69
    125a:	68a1      	ldr	r1, [r4, #8]
    125c:	4840      	ldr	r0, [pc, #256]	; (1360 <run+0x670>)
    125e:	f7ff fffe 	bl	0 <do_test>
    1262:	226a      	movs	r2, #106	; 0x6a
    1264:	68a1      	ldr	r1, [r4, #8]
    1266:	483f      	ldr	r0, [pc, #252]	; (1364 <run+0x674>)
    1268:	f7ff fffe 	bl	0 <do_test>
    126c:	226b      	movs	r2, #107	; 0x6b
    126e:	68a1      	ldr	r1, [r4, #8]
    1270:	483d      	ldr	r0, [pc, #244]	; (1368 <run+0x678>)
    1272:	f7ff fffe 	bl	0 <do_test>
    1276:	226c      	movs	r2, #108	; 0x6c
    1278:	68a1      	ldr	r1, [r4, #8]
    127a:	483c      	ldr	r0, [pc, #240]	; (136c <run+0x67c>)
    127c:	f7ff fffe 	bl	0 <do_test>
    1280:	226d      	movs	r2, #109	; 0x6d
    1282:	68a1      	ldr	r1, [r4, #8]
    1284:	483a      	ldr	r0, [pc, #232]	; (1370 <run+0x680>)
    1286:	f7ff fffe 	bl	0 <do_test>
    128a:	226e      	movs	r2, #110	; 0x6e
    128c:	68a1      	ldr	r1, [r4, #8]
    128e:	4839      	ldr	r0, [pc, #228]	; (1374 <run+0x684>)
    1290:	f7ff fffe 	bl	0 <do_test>
    1294:	226f      	movs	r2, #111	; 0x6f
    1296:	68a1      	ldr	r1, [r4, #8]
    1298:	4837      	ldr	r0, [pc, #220]	; (1378 <run+0x688>)
    129a:	f7ff fffe 	bl	0 <do_test>
    129e:	2270      	movs	r2, #112	; 0x70
    12a0:	68a1      	ldr	r1, [r4, #8]
    12a2:	4836      	ldr	r0, [pc, #216]	; (137c <run+0x68c>)
    12a4:	f7ff fffe 	bl	0 <do_test>
    12a8:	2271      	movs	r2, #113	; 0x71
    12aa:	68a1      	ldr	r1, [r4, #8]
    12ac:	4834      	ldr	r0, [pc, #208]	; (1380 <run+0x690>)
    12ae:	f7ff fffe 	bl	0 <do_test>
    12b2:	2272      	movs	r2, #114	; 0x72
    12b4:	68a1      	ldr	r1, [r4, #8]
    12b6:	4833      	ldr	r0, [pc, #204]	; (1384 <run+0x694>)
    12b8:	f7ff fffe 	bl	0 <do_test>
    12bc:	2273      	movs	r2, #115	; 0x73
    12be:	68a1      	ldr	r1, [r4, #8]
    12c0:	4831      	ldr	r0, [pc, #196]	; (1388 <run+0x698>)
    12c2:	f7ff fffe 	bl	0 <do_test>
    12c6:	bd30      	pop	{r4, r5, pc}
	...

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	0000 0000                                   ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	0000 0000                                   ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	0000 0000                                   ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
