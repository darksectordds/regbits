
regbits.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <INTERRUPT_VECTORS>:
20000000:	00 50 00 20 c7 11 00 20 55 11 00 20 57 11 00 20     .P. ... U.. W.. 
20000010:	59 11 00 20 5b 11 00 20 5d 11 00 20 5f 11 00 20     Y.. [.. ].. _.. 
20000020:	61 11 00 20 63 11 00 20 65 11 00 20 67 11 00 20     a.. c.. e.. g.. 
20000030:	69 11 00 20 6b 11 00 20 6d 11 00 20 6f 11 00 20     i.. k.. m.. o.. 
20000040:	71 11 00 20 73 11 00 20 75 11 00 20 77 11 00 20     q.. s.. u.. w.. 
20000050:	79 11 00 20 7b 11 00 20 7d 11 00 20 7f 11 00 20     y.. {.. }.. ... 
20000060:	81 11 00 20 83 11 00 20 85 11 00 20 87 11 00 20     ... ... ... ... 
20000070:	89 11 00 20 8b 11 00 20 8d 11 00 20 8f 11 00 20     ... ... ... ... 
20000080:	91 11 00 20 93 11 00 20 95 11 00 20 97 11 00 20     ... ... ... ... 
20000090:	99 11 00 20 9b 11 00 20 9d 11 00 20 9f 11 00 20     ... ... ... ... 
200000a0:	a1 11 00 20 a3 11 00 20 a5 11 00 20 a7 11 00 20     ... ... ... ... 
200000b0:	a9 11 00 20 ab 11 00 20 ad 11 00 20 af 11 00 20     ... ... ... ... 
200000c0:	b1 11 00 20 b3 11 00 20 b5 11 00 20 b7 11 00 20     ... ... ... ... 
200000d0:	b9 11 00 20 bb 11 00 20 bd 11 00 20 bf 11 00 20     ... ... ... ... 
200000e0:	c1 11 00 20 c3 11 00 20 c5 11 00 20                 ... ... ... 

200000ec <zero_reg()>:
200000ec:	4b01      	ldr	r3, [pc, #4]	; (200000f4 <zero_reg()+0x8>)
200000ee:	2200      	movs	r2, #0
200000f0:	605a      	str	r2, [r3, #4]
200000f2:	4770      	bx	lr
200000f4:	20002480 	.word	0x20002480

200000f8 <zero_array()>:
200000f8:	4b01      	ldr	r3, [pc, #4]	; (20000100 <zero_array()+0x8>)
200000fa:	2200      	movs	r2, #0
200000fc:	62da      	str	r2, [r3, #44]	; 0x2c
200000fe:	4770      	bx	lr
20000100:	200022c0 	.word	0x200022c0

20000104 <set_singl_bits_operator()>:
20000104:	4a02      	ldr	r2, [pc, #8]	; (20000110 <set_singl_bits_operator()+0xc>)
20000106:	6853      	ldr	r3, [r2, #4]
20000108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000010c:	6053      	str	r3, [r2, #4]
2000010e:	4770      	bx	lr
20000110:	20002480 	.word	0x20002480

20000114 <set_singl_bits_method()>:
20000114:	4a02      	ldr	r2, [pc, #8]	; (20000120 <set_singl_bits_method()+0xc>)
20000116:	6853      	ldr	r3, [r2, #4]
20000118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000011c:	6053      	str	r3, [r2, #4]
2000011e:	4770      	bx	lr
20000120:	20002480 	.word	0x20002480

20000124 <clr_singl_bits_operator()>:
20000124:	4a02      	ldr	r2, [pc, #8]	; (20000130 <clr_singl_bits_operator()+0xc>)
20000126:	6853      	ldr	r3, [r2, #4]
20000128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000012c:	6053      	str	r3, [r2, #4]
2000012e:	4770      	bx	lr
20000130:	20002480 	.word	0x20002480

20000134 <clr_singl_bits_method()>:
20000134:	4a02      	ldr	r2, [pc, #8]	; (20000140 <clr_singl_bits_method()+0xc>)
20000136:	6853      	ldr	r3, [r2, #4]
20000138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000013c:	6053      	str	r3, [r2, #4]
2000013e:	4770      	bx	lr
20000140:	20002480 	.word	0x20002480

20000144 <set_singl_mskd_operator()>:
20000144:	4a02      	ldr	r2, [pc, #8]	; (20000150 <set_singl_mskd_operator()+0xc>)
20000146:	6853      	ldr	r3, [r2, #4]
20000148:	f043 0302 	orr.w	r3, r3, #2
2000014c:	6053      	str	r3, [r2, #4]
2000014e:	4770      	bx	lr
20000150:	20002480 	.word	0x20002480

20000154 <set_singl_mskd_method()>:
20000154:	4a02      	ldr	r2, [pc, #8]	; (20000160 <set_singl_mskd_method()+0xc>)
20000156:	6853      	ldr	r3, [r2, #4]
20000158:	f043 0302 	orr.w	r3, r3, #2
2000015c:	6053      	str	r3, [r2, #4]
2000015e:	4770      	bx	lr
20000160:	20002480 	.word	0x20002480

20000164 <clr_singl_mskd_operator()>:
20000164:	4a02      	ldr	r2, [pc, #8]	; (20000170 <clr_singl_mskd_operator()+0xc>)
20000166:	6853      	ldr	r3, [r2, #4]
20000168:	f023 0302 	bic.w	r3, r3, #2
2000016c:	6053      	str	r3, [r2, #4]
2000016e:	4770      	bx	lr
20000170:	20002480 	.word	0x20002480

20000174 <clr_singl_mskd_method()>:
20000174:	4a02      	ldr	r2, [pc, #8]	; (20000180 <clr_singl_mskd_method()+0xc>)
20000176:	6853      	ldr	r3, [r2, #4]
20000178:	f023 0302 	bic.w	r3, r3, #2
2000017c:	6053      	str	r3, [r2, #4]
2000017e:	4770      	bx	lr
20000180:	20002480 	.word	0x20002480

20000184 <equ_singl_bits_operator()>:
20000184:	4b01      	ldr	r3, [pc, #4]	; (2000018c <equ_singl_bits_operator()+0x8>)
20000186:	2240      	movs	r2, #64	; 0x40
20000188:	605a      	str	r2, [r3, #4]
2000018a:	4770      	bx	lr
2000018c:	20002480 	.word	0x20002480

20000190 <equ_singl_bits_method()>:
20000190:	4b01      	ldr	r3, [pc, #4]	; (20000198 <equ_singl_bits_method()+0x8>)
20000192:	2240      	movs	r2, #64	; 0x40
20000194:	605a      	str	r2, [r3, #4]
20000196:	4770      	bx	lr
20000198:	20002480 	.word	0x20002480

2000019c <equ_singl_mskd_operator()>:
2000019c:	4b01      	ldr	r3, [pc, #4]	; (200001a4 <equ_singl_mskd_operator()+0x8>)
2000019e:	2202      	movs	r2, #2
200001a0:	605a      	str	r2, [r3, #4]
200001a2:	4770      	bx	lr
200001a4:	20002480 	.word	0x20002480

200001a8 <equ_singl_mskd_method()>:
200001a8:	4b01      	ldr	r3, [pc, #4]	; (200001b0 <equ_singl_mskd_method()+0x8>)
200001aa:	2202      	movs	r2, #2
200001ac:	605a      	str	r2, [r3, #4]
200001ae:	4770      	bx	lr
200001b0:	20002480 	.word	0x20002480

200001b4 <flp_singl_bits_operator()>:
200001b4:	4a02      	ldr	r2, [pc, #8]	; (200001c0 <flp_singl_bits_operator()+0xc>)
200001b6:	6853      	ldr	r3, [r2, #4]
200001b8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001bc:	6053      	str	r3, [r2, #4]
200001be:	4770      	bx	lr
200001c0:	20002480 	.word	0x20002480

200001c4 <flp_singl_bits_method()>:
200001c4:	4a02      	ldr	r2, [pc, #8]	; (200001d0 <flp_singl_bits_method()+0xc>)
200001c6:	6853      	ldr	r3, [r2, #4]
200001c8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001cc:	6053      	str	r3, [r2, #4]
200001ce:	4770      	bx	lr
200001d0:	20002480 	.word	0x20002480

200001d4 <flp_singl_mskd_operator()>:
200001d4:	4a02      	ldr	r2, [pc, #8]	; (200001e0 <flp_singl_mskd_operator()+0xc>)
200001d6:	6853      	ldr	r3, [r2, #4]
200001d8:	f083 0302 	eor.w	r3, r3, #2
200001dc:	6053      	str	r3, [r2, #4]
200001de:	4770      	bx	lr
200001e0:	20002480 	.word	0x20002480

200001e4 <flp_singl_mskd_method()>:
200001e4:	4a02      	ldr	r2, [pc, #8]	; (200001f0 <flp_singl_mskd_method()+0xc>)
200001e6:	6853      	ldr	r3, [r2, #4]
200001e8:	f083 0302 	eor.w	r3, r3, #2
200001ec:	6053      	str	r3, [r2, #4]
200001ee:	4770      	bx	lr
200001f0:	20002480 	.word	0x20002480

200001f4 <ins_singl_mskd_operator()>:
200001f4:	4a03      	ldr	r2, [pc, #12]	; (20000204 <ins_singl_mskd_operator()+0x10>)
200001f6:	6853      	ldr	r3, [r2, #4]
200001f8:	f023 0306 	bic.w	r3, r3, #6
200001fc:	f043 0304 	orr.w	r3, r3, #4
20000200:	6053      	str	r3, [r2, #4]
20000202:	4770      	bx	lr
20000204:	20002480 	.word	0x20002480

20000208 <ins_singl_mskd_method()>:
20000208:	4a03      	ldr	r2, [pc, #12]	; (20000218 <ins_singl_mskd_method()+0x10>)
2000020a:	6853      	ldr	r3, [r2, #4]
2000020c:	f023 0306 	bic.w	r3, r3, #6
20000210:	f043 0304 	orr.w	r3, r3, #4
20000214:	6053      	str	r3, [r2, #4]
20000216:	4770      	bx	lr
20000218:	20002480 	.word	0x20002480

2000021c <set_multi_bits_operator()>:
2000021c:	4a02      	ldr	r2, [pc, #8]	; (20000228 <set_multi_bits_operator()+0xc>)
2000021e:	6853      	ldr	r3, [r2, #4]
20000220:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000224:	6053      	str	r3, [r2, #4]
20000226:	4770      	bx	lr
20000228:	20002480 	.word	0x20002480

2000022c <set_multi_bits_method()>:
2000022c:	4a02      	ldr	r2, [pc, #8]	; (20000238 <set_multi_bits_method()+0xc>)
2000022e:	6853      	ldr	r3, [r2, #4]
20000230:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000234:	6053      	str	r3, [r2, #4]
20000236:	4770      	bx	lr
20000238:	20002480 	.word	0x20002480

2000023c <ins_multi_mskd_operator()>:
2000023c:	4a04      	ldr	r2, [pc, #16]	; (20000250 <ins_multi_mskd_operator()+0x14>)
2000023e:	6853      	ldr	r3, [r2, #4]
20000240:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
20000244:	f023 0306 	bic.w	r3, r3, #6
20000248:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
2000024c:	6053      	str	r3, [r2, #4]
2000024e:	4770      	bx	lr
20000250:	20002480 	.word	0x20002480

20000254 <ins_multi_mskd_method()>:
20000254:	4a04      	ldr	r2, [pc, #16]	; (20000268 <ins_multi_mskd_method()+0x14>)
20000256:	6853      	ldr	r3, [r2, #4]
20000258:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
2000025c:	f023 0306 	bic.w	r3, r3, #6
20000260:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
20000264:	6053      	str	r3, [r2, #4]
20000266:	4770      	bx	lr
20000268:	20002480 	.word	0x20002480

2000026c <equ_multi_bits_operator()>:
2000026c:	4b01      	ldr	r3, [pc, #4]	; (20000274 <equ_multi_bits_operator()+0x8>)
2000026e:	2260      	movs	r2, #96	; 0x60
20000270:	605a      	str	r2, [r3, #4]
20000272:	4770      	bx	lr
20000274:	20002480 	.word	0x20002480

20000278 <equ_multi_bits_method()>:
20000278:	4b01      	ldr	r3, [pc, #4]	; (20000280 <equ_multi_bits_method()+0x8>)
2000027a:	2260      	movs	r2, #96	; 0x60
2000027c:	605a      	str	r2, [r3, #4]
2000027e:	4770      	bx	lr
20000280:	20002480 	.word	0x20002480

20000284 <equ_multi_mskd_operator()>:
20000284:	4b02      	ldr	r3, [pc, #8]	; (20000290 <equ_multi_mskd_operator()+0xc>)
20000286:	f44f 7242 	mov.w	r2, #776	; 0x308
2000028a:	605a      	str	r2, [r3, #4]
2000028c:	4770      	bx	lr
2000028e:	bf00      	nop
20000290:	20002480 	.word	0x20002480

20000294 <equ_multi_mskd_method()>:
20000294:	4b02      	ldr	r3, [pc, #8]	; (200002a0 <equ_multi_mskd_method()+0xc>)
20000296:	f44f 7242 	mov.w	r2, #776	; 0x308
2000029a:	605a      	str	r2, [r3, #4]
2000029c:	4770      	bx	lr
2000029e:	bf00      	nop
200002a0:	20002480 	.word	0x20002480

200002a4 <equ_bits_mskd_operator()>:
200002a4:	4b01      	ldr	r3, [pc, #4]	; (200002ac <equ_bits_mskd_operator()+0x8>)
200002a6:	2222      	movs	r2, #34	; 0x22
200002a8:	605a      	str	r2, [r3, #4]
200002aa:	4770      	bx	lr
200002ac:	20002480 	.word	0x20002480

200002b0 <equ_bits_mskd_method()>:
200002b0:	4b01      	ldr	r3, [pc, #4]	; (200002b8 <equ_bits_mskd_method()+0x8>)
200002b2:	2222      	movs	r2, #34	; 0x22
200002b4:	605a      	str	r2, [r3, #4]
200002b6:	4770      	bx	lr
200002b8:	20002480 	.word	0x20002480

200002bc <equ_mskd_bits_operator()>:
200002bc:	4b01      	ldr	r3, [pc, #4]	; (200002c4 <equ_mskd_bits_operator()+0x8>)
200002be:	2244      	movs	r2, #68	; 0x44
200002c0:	605a      	str	r2, [r3, #4]
200002c2:	4770      	bx	lr
200002c4:	20002480 	.word	0x20002480

200002c8 <equ_mskd_bits_method()>:
200002c8:	4b01      	ldr	r3, [pc, #4]	; (200002d0 <equ_mskd_bits_method()+0x8>)
200002ca:	2244      	movs	r2, #68	; 0x44
200002cc:	605a      	str	r2, [r3, #4]
200002ce:	4770      	bx	lr
200002d0:	20002480 	.word	0x20002480

200002d4 <equ_bits_var()>:
200002d4:	4b02      	ldr	r3, [pc, #8]	; (200002e0 <equ_bits_var()+0xc>)
200002d6:	2240      	movs	r2, #64	; 0x40
200002d8:	605a      	str	r2, [r3, #4]
200002da:	2201      	movs	r2, #1
200002dc:	605a      	str	r2, [r3, #4]
200002de:	4770      	bx	lr
200002e0:	20002480 	.word	0x20002480

200002e4 <equ_mskd_var()>:
200002e4:	4b03      	ldr	r3, [pc, #12]	; (200002f4 <equ_mskd_var()+0x10>)
200002e6:	2202      	movs	r2, #2
200002e8:	605a      	str	r2, [r3, #4]
200002ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
200002ee:	605a      	str	r2, [r3, #4]
200002f0:	4770      	bx	lr
200002f2:	bf00      	nop
200002f4:	20002480 	.word	0x20002480

200002f8 <cmp_equ_zero()>:
200002f8:	4b07      	ldr	r3, [pc, #28]	; (20000318 <cmp_equ_zero()+0x20>)
200002fa:	2200      	movs	r2, #0
200002fc:	605a      	str	r2, [r3, #4]
200002fe:	685b      	ldr	r3, [r3, #4]
20000300:	b923      	cbnz	r3, 2000030c <cmp_equ_zero()+0x14>
20000302:	4b06      	ldr	r3, [pc, #24]	; (2000031c <cmp_equ_zero()+0x24>)
20000304:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
20000308:	605a      	str	r2, [r3, #4]
2000030a:	4770      	bx	lr
2000030c:	4b03      	ldr	r3, [pc, #12]	; (2000031c <cmp_equ_zero()+0x24>)
2000030e:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000312:	605a      	str	r2, [r3, #4]
20000314:	4770      	bx	lr
20000316:	bf00      	nop
20000318:	20002480 	.word	0x20002480
2000031c:	200023e0 	.word	0x200023e0

20000320 <cmp_neq_zero()>:
20000320:	4b06      	ldr	r3, [pc, #24]	; (2000033c <cmp_neq_zero()+0x1c>)
20000322:	2200      	movs	r2, #0
20000324:	605a      	str	r2, [r3, #4]
20000326:	685b      	ldr	r3, [r3, #4]
20000328:	b11b      	cbz	r3, 20000332 <cmp_neq_zero()+0x12>
2000032a:	4b04      	ldr	r3, [pc, #16]	; (2000033c <cmp_neq_zero()+0x1c>)
2000032c:	2204      	movs	r2, #4
2000032e:	605a      	str	r2, [r3, #4]
20000330:	4770      	bx	lr
20000332:	4b02      	ldr	r3, [pc, #8]	; (2000033c <cmp_neq_zero()+0x1c>)
20000334:	2220      	movs	r2, #32
20000336:	605a      	str	r2, [r3, #4]
20000338:	4770      	bx	lr
2000033a:	bf00      	nop
2000033c:	20002480 	.word	0x20002480

20000340 <cmp_equ_bits()>:
20000340:	4b06      	ldr	r3, [pc, #24]	; (2000035c <cmp_equ_bits()+0x1c>)
20000342:	2240      	movs	r2, #64	; 0x40
20000344:	605a      	str	r2, [r3, #4]
20000346:	685b      	ldr	r3, [r3, #4]
20000348:	f013 0f40 	tst.w	r3, #64	; 0x40
2000034c:	4b04      	ldr	r3, [pc, #16]	; (20000360 <cmp_equ_bits()+0x20>)
2000034e:	bf14      	ite	ne
20000350:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
20000354:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
20000358:	605a      	str	r2, [r3, #4]
2000035a:	4770      	bx	lr
2000035c:	20002480 	.word	0x20002480
20000360:	200023e0 	.word	0x200023e0

20000364 <cmp_neq_bits()>:
20000364:	4b05      	ldr	r3, [pc, #20]	; (2000037c <cmp_neq_bits()+0x18>)
20000366:	2240      	movs	r2, #64	; 0x40
20000368:	605a      	str	r2, [r3, #4]
2000036a:	685b      	ldr	r3, [r3, #4]
2000036c:	f013 0f40 	tst.w	r3, #64	; 0x40
20000370:	4b02      	ldr	r3, [pc, #8]	; (2000037c <cmp_neq_bits()+0x18>)
20000372:	bf0c      	ite	eq
20000374:	2202      	moveq	r2, #2
20000376:	2220      	movne	r2, #32
20000378:	605a      	str	r2, [r3, #4]
2000037a:	4770      	bx	lr
2000037c:	20002480 	.word	0x20002480

20000380 <cmp_equ_multi_bits()>:
20000380:	4b06      	ldr	r3, [pc, #24]	; (2000039c <cmp_equ_multi_bits()+0x1c>)
20000382:	2260      	movs	r2, #96	; 0x60
20000384:	605a      	str	r2, [r3, #4]
20000386:	685b      	ldr	r3, [r3, #4]
20000388:	4013      	ands	r3, r2
2000038a:	4293      	cmp	r3, r2
2000038c:	4b04      	ldr	r3, [pc, #16]	; (200003a0 <cmp_equ_multi_bits()+0x20>)
2000038e:	bf0c      	ite	eq
20000390:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
20000394:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
20000398:	605a      	str	r2, [r3, #4]
2000039a:	4770      	bx	lr
2000039c:	20002480 	.word	0x20002480
200003a0:	200023e0 	.word	0x200023e0

200003a4 <cmp_neq_multi_bits()>:
200003a4:	4b06      	ldr	r3, [pc, #24]	; (200003c0 <cmp_neq_multi_bits()+0x1c>)
200003a6:	2260      	movs	r2, #96	; 0x60
200003a8:	605a      	str	r2, [r3, #4]
200003aa:	685b      	ldr	r3, [r3, #4]
200003ac:	4013      	ands	r3, r2
200003ae:	4293      	cmp	r3, r2
200003b0:	4b04      	ldr	r3, [pc, #16]	; (200003c4 <cmp_neq_multi_bits()+0x20>)
200003b2:	bf14      	ite	ne
200003b4:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
200003b8:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
200003bc:	605a      	str	r2, [r3, #4]
200003be:	4770      	bx	lr
200003c0:	20002480 	.word	0x20002480
200003c4:	200023e0 	.word	0x200023e0

200003c8 <cmp_equ_mskd()>:
200003c8:	4b09      	ldr	r3, [pc, #36]	; (200003f0 <cmp_equ_mskd()+0x28>)
200003ca:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003ce:	605a      	str	r2, [r3, #4]
200003d0:	685b      	ldr	r3, [r3, #4]
200003d2:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
200003d6:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
200003da:	4a06      	ldr	r2, [pc, #24]	; (200003f4 <cmp_equ_mskd()+0x2c>)
200003dc:	6853      	ldr	r3, [r2, #4]
200003de:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
200003e2:	bf0c      	ite	eq
200003e4:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
200003e8:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
200003ec:	6053      	str	r3, [r2, #4]
200003ee:	4770      	bx	lr
200003f0:	20002480 	.word	0x20002480
200003f4:	200023e0 	.word	0x200023e0

200003f8 <cmp_neq_mskd()>:
200003f8:	4b09      	ldr	r3, [pc, #36]	; (20000420 <cmp_neq_mskd()+0x28>)
200003fa:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003fe:	605a      	str	r2, [r3, #4]
20000400:	685b      	ldr	r3, [r3, #4]
20000402:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
20000406:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
2000040a:	4a05      	ldr	r2, [pc, #20]	; (20000420 <cmp_neq_mskd()+0x28>)
2000040c:	6853      	ldr	r3, [r2, #4]
2000040e:	bf1a      	itte	ne
20000410:	f023 0306 	bicne.w	r3, r3, #6
20000414:	f043 0304 	orrne.w	r3, r3, #4
20000418:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
2000041c:	6053      	str	r3, [r2, #4]
2000041e:	4770      	bx	lr
20000420:	20002480 	.word	0x20002480

20000424 <cmp_equ_reg()>:
20000424:	4b06      	ldr	r3, [pc, #24]	; (20000440 <cmp_equ_reg()+0x1c>)
20000426:	2222      	movs	r2, #34	; 0x22
20000428:	605a      	str	r2, [r3, #4]
2000042a:	685b      	ldr	r3, [r3, #4]
2000042c:	4293      	cmp	r3, r2
2000042e:	4b05      	ldr	r3, [pc, #20]	; (20000444 <cmp_equ_reg()+0x20>)
20000430:	bf0c      	ite	eq
20000432:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
20000436:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
2000043a:	605a      	str	r2, [r3, #4]
2000043c:	4770      	bx	lr
2000043e:	bf00      	nop
20000440:	20002480 	.word	0x20002480
20000444:	200023e0 	.word	0x200023e0

20000448 <cmp_neq_reg()>:
20000448:	4b05      	ldr	r3, [pc, #20]	; (20000460 <cmp_neq_reg()+0x18>)
2000044a:	2222      	movs	r2, #34	; 0x22
2000044c:	605a      	str	r2, [r3, #4]
2000044e:	685b      	ldr	r3, [r3, #4]
20000450:	4293      	cmp	r3, r2
20000452:	4b03      	ldr	r3, [pc, #12]	; (20000460 <cmp_neq_reg()+0x18>)
20000454:	bf14      	ite	ne
20000456:	2202      	movne	r2, #2
20000458:	2220      	moveq	r2, #32
2000045a:	605a      	str	r2, [r3, #4]
2000045c:	4770      	bx	lr
2000045e:	bf00      	nop
20000460:	20002480 	.word	0x20002480

20000464 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000464:	4a02      	ldr	r2, [pc, #8]	; (20000470 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
20000466:	6853      	ldr	r3, [r2, #4]
20000468:	4318      	orrs	r0, r3
2000046a:	6050      	str	r0, [r2, #4]
2000046c:	4770      	bx	lr
2000046e:	bf00      	nop
20000470:	20002480 	.word	0x20002480

20000474 <call_bits_val_const()>:
20000474:	b500      	push	{lr}
20000476:	2040      	movs	r0, #64	; 0x40
20000478:	f7ff fff4 	bl	20000464 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
2000047c:	f85d fb04 	ldr.w	pc, [sp], #4

20000480 <call_bits_val_var()>:
20000480:	b500      	push	{lr}
20000482:	2040      	movs	r0, #64	; 0x40
20000484:	f7ff ffee 	bl	20000464 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000488:	f85d fb04 	ldr.w	pc, [sp], #4

2000048c <constexpr_bits_array()>:
2000048c:	4b03      	ldr	r3, [pc, #12]	; (2000049c <constexpr_bits_array()+0x10>)
2000048e:	2206      	movs	r2, #6
20000490:	62da      	str	r2, [r3, #44]	; 0x2c
20000492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
20000496:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
2000049a:	4770      	bx	lr
2000049c:	200022c0 	.word	0x200022c0

200004a0 <runtime_bits_array()>:
200004a0:	b081      	sub	sp, #4
200004a2:	2303      	movs	r3, #3
200004a4:	9300      	str	r3, [sp, #0]
200004a6:	9b00      	ldr	r3, [sp, #0]
200004a8:	4a06      	ldr	r2, [pc, #24]	; (200004c4 <runtime_bits_array()+0x24>)
200004aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
200004ae:	2121      	movs	r1, #33	; 0x21
200004b0:	6219      	str	r1, [r3, #32]
200004b2:	2307      	movs	r3, #7
200004b4:	9300      	str	r3, [sp, #0]
200004b6:	9900      	ldr	r1, [sp, #0]
200004b8:	2301      	movs	r3, #1
200004ba:	408b      	lsls	r3, r1
200004bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
200004c0:	b001      	add	sp, #4
200004c2:	4770      	bx	lr
200004c4:	200022c0 	.word	0x200022c0

200004c8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200004c8:	4a02      	ldr	r2, [pc, #8]	; (200004d4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
200004ca:	6853      	ldr	r3, [r2, #4]
200004cc:	6801      	ldr	r1, [r0, #0]
200004ce:	430b      	orrs	r3, r1
200004d0:	6053      	str	r3, [r2, #4]
200004d2:	4770      	bx	lr
200004d4:	20002480 	.word	0x20002480

200004d8 <call_bits_ref_const()>:
200004d8:	b500      	push	{lr}
200004da:	b081      	sub	sp, #4
200004dc:	2301      	movs	r3, #1
200004de:	9300      	str	r3, [sp, #0]
200004e0:	4668      	mov	r0, sp
200004e2:	f7ff fff1 	bl	200004c8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200004e6:	b001      	add	sp, #4
200004e8:	f85d fb04 	ldr.w	pc, [sp], #4

200004ec <call_bits_ref_var()>:
200004ec:	b500      	push	{lr}
200004ee:	b081      	sub	sp, #4
200004f0:	2301      	movs	r3, #1
200004f2:	9300      	str	r3, [sp, #0]
200004f4:	4668      	mov	r0, sp
200004f6:	f7ff ffe7 	bl	200004c8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200004fa:	b001      	add	sp, #4
200004fc:	f85d fb04 	ldr.w	pc, [sp], #4

20000500 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000500:	4a03      	ldr	r2, [pc, #12]	; (20000510 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
20000502:	6853      	ldr	r3, [r2, #4]
20000504:	ea23 0000 	bic.w	r0, r3, r0
20000508:	4308      	orrs	r0, r1
2000050a:	6050      	str	r0, [r2, #4]
2000050c:	4770      	bx	lr
2000050e:	bf00      	nop
20000510:	20002480 	.word	0x20002480

20000514 <call_mskd_val_const()>:
20000514:	b500      	push	{lr}
20000516:	2006      	movs	r0, #6
20000518:	2102      	movs	r1, #2
2000051a:	f7ff fff1 	bl	20000500 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
2000051e:	f85d fb04 	ldr.w	pc, [sp], #4

20000522 <call_mskd_val_var()>:
20000522:	b500      	push	{lr}
20000524:	2006      	movs	r0, #6
20000526:	2102      	movs	r1, #2
20000528:	f7ff ffea 	bl	20000500 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
2000052c:	f85d fb04 	ldr.w	pc, [sp], #4

20000530 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
20000530:	4a04      	ldr	r2, [pc, #16]	; (20000544 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x14>)
20000532:	6853      	ldr	r3, [r2, #4]
20000534:	6801      	ldr	r1, [r0, #0]
20000536:	ea23 0301 	bic.w	r3, r3, r1
2000053a:	6841      	ldr	r1, [r0, #4]
2000053c:	430b      	orrs	r3, r1
2000053e:	6053      	str	r3, [r2, #4]
20000540:	4770      	bx	lr
20000542:	bf00      	nop
20000544:	20002480 	.word	0x20002480

20000548 <call_mskd_ref_const()>:
20000548:	b500      	push	{lr}
2000054a:	b082      	sub	sp, #8
2000054c:	2306      	movs	r3, #6
2000054e:	9300      	str	r3, [sp, #0]
20000550:	2304      	movs	r3, #4
20000552:	9301      	str	r3, [sp, #4]
20000554:	4668      	mov	r0, sp
20000556:	f7ff ffeb 	bl	20000530 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
2000055a:	b002      	add	sp, #8
2000055c:	f85d fb04 	ldr.w	pc, [sp], #4

20000560 <call_mskd_ref_var()>:
20000560:	b500      	push	{lr}
20000562:	b082      	sub	sp, #8
20000564:	4b04      	ldr	r3, [pc, #16]	; (20000578 <call_mskd_ref_var()+0x18>)
20000566:	cb0c      	ldmia	r3, {r2, r3}
20000568:	e88d 000c 	stmia.w	sp, {r2, r3}
2000056c:	4668      	mov	r0, sp
2000056e:	f7ff ffdf 	bl	20000530 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
20000572:	b002      	add	sp, #8
20000574:	f85d fb04 	ldr.w	pc, [sp], #4
20000578:	20001204 	.word	0x20001204

2000057c <periph_bits(mcu::Serial*)>:
2000057c:	6843      	ldr	r3, [r0, #4]
2000057e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000582:	6043      	str	r3, [r0, #4]
20000584:	4770      	bx	lr

20000586 <call_periph_bits()>:
20000586:	b500      	push	{lr}
20000588:	4802      	ldr	r0, [pc, #8]	; (20000594 <call_periph_bits()+0xe>)
2000058a:	f7ff fff7 	bl	2000057c <periph_bits(mcu::Serial*)>
2000058e:	f85d fb04 	ldr.w	pc, [sp], #4
20000592:	bf00      	nop
20000594:	20002480 	.word	0x20002480

20000598 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000598:	6843      	ldr	r3, [r0, #4]
2000059a:	4319      	orrs	r1, r3
2000059c:	6041      	str	r1, [r0, #4]
2000059e:	4770      	bx	lr

200005a0 <call_periph_bits_val()>:
200005a0:	b500      	push	{lr}
200005a2:	2140      	movs	r1, #64	; 0x40
200005a4:	4802      	ldr	r0, [pc, #8]	; (200005b0 <call_periph_bits_val()+0x10>)
200005a6:	f7ff fff7 	bl	20000598 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
200005aa:	f85d fb04 	ldr.w	pc, [sp], #4
200005ae:	bf00      	nop
200005b0:	20002480 	.word	0x20002480

200005b4 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
200005b4:	6803      	ldr	r3, [r0, #0]
200005b6:	4319      	orrs	r1, r3
200005b8:	6001      	str	r1, [r0, #0]
200005ba:	4770      	bx	lr

200005bc <call_reg_bits_val()>:
200005bc:	b500      	push	{lr}
200005be:	2140      	movs	r1, #64	; 0x40
200005c0:	4802      	ldr	r0, [pc, #8]	; (200005cc <call_reg_bits_val()+0x10>)
200005c2:	f7ff fff7 	bl	200005b4 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
200005c6:	f85d fb04 	ldr.w	pc, [sp], #4
200005ca:	bf00      	nop
200005cc:	20002484 	.word	0x20002484

200005d0 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200005d0:	6843      	ldr	r3, [r0, #4]
200005d2:	680a      	ldr	r2, [r1, #0]
200005d4:	4313      	orrs	r3, r2
200005d6:	6043      	str	r3, [r0, #4]
200005d8:	4770      	bx	lr

200005da <call_periph_bits_ref()>:
200005da:	b500      	push	{lr}
200005dc:	b081      	sub	sp, #4
200005de:	2340      	movs	r3, #64	; 0x40
200005e0:	9300      	str	r3, [sp, #0]
200005e2:	4669      	mov	r1, sp
200005e4:	4802      	ldr	r0, [pc, #8]	; (200005f0 <call_periph_bits_ref()+0x16>)
200005e6:	f7ff fff3 	bl	200005d0 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200005ea:	b001      	add	sp, #4
200005ec:	f85d fb04 	ldr.w	pc, [sp], #4
200005f0:	20002480 	.word	0x20002480

200005f4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200005f4:	6803      	ldr	r3, [r0, #0]
200005f6:	680a      	ldr	r2, [r1, #0]
200005f8:	4313      	orrs	r3, r2
200005fa:	6003      	str	r3, [r0, #0]
200005fc:	4770      	bx	lr

200005fe <call_reg_bits_ref()>:
200005fe:	b500      	push	{lr}
20000600:	b081      	sub	sp, #4
20000602:	2340      	movs	r3, #64	; 0x40
20000604:	9300      	str	r3, [sp, #0]
20000606:	4669      	mov	r1, sp
20000608:	4802      	ldr	r0, [pc, #8]	; (20000614 <call_reg_bits_ref()+0x16>)
2000060a:	f7ff fff3 	bl	200005f4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
2000060e:	b001      	add	sp, #4
20000610:	f85d fb04 	ldr.w	pc, [sp], #4
20000614:	20002484 	.word	0x20002484

20000618 <periph_mskd(mcu::Serial*)>:
20000618:	6843      	ldr	r3, [r0, #4]
2000061a:	f023 0306 	bic.w	r3, r3, #6
2000061e:	f043 0302 	orr.w	r3, r3, #2
20000622:	6043      	str	r3, [r0, #4]
20000624:	4770      	bx	lr

20000626 <call_periph_mskd()>:
20000626:	b500      	push	{lr}
20000628:	4802      	ldr	r0, [pc, #8]	; (20000634 <call_periph_mskd()+0xe>)
2000062a:	f7ff fff5 	bl	20000618 <periph_mskd(mcu::Serial*)>
2000062e:	f85d fb04 	ldr.w	pc, [sp], #4
20000632:	bf00      	nop
20000634:	20002480 	.word	0x20002480

20000638 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000638:	6843      	ldr	r3, [r0, #4]
2000063a:	ea23 0101 	bic.w	r1, r3, r1
2000063e:	4311      	orrs	r1, r2
20000640:	6041      	str	r1, [r0, #4]
20000642:	4770      	bx	lr

20000644 <call_periph_mskd_val()>:
20000644:	b500      	push	{lr}
20000646:	2106      	movs	r1, #6
20000648:	2202      	movs	r2, #2
2000064a:	4802      	ldr	r0, [pc, #8]	; (20000654 <call_periph_mskd_val()+0x10>)
2000064c:	f7ff fff4 	bl	20000638 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000650:	f85d fb04 	ldr.w	pc, [sp], #4
20000654:	20002480 	.word	0x20002480

20000658 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000658:	6803      	ldr	r3, [r0, #0]
2000065a:	ea23 0101 	bic.w	r1, r3, r1
2000065e:	4311      	orrs	r1, r2
20000660:	6001      	str	r1, [r0, #0]
20000662:	4770      	bx	lr

20000664 <call_reg_mskd_val()>:
20000664:	b500      	push	{lr}
20000666:	2106      	movs	r1, #6
20000668:	2202      	movs	r2, #2
2000066a:	4802      	ldr	r0, [pc, #8]	; (20000674 <call_reg_mskd_val()+0x10>)
2000066c:	f7ff fff4 	bl	20000658 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000670:	f85d fb04 	ldr.w	pc, [sp], #4
20000674:	20002484 	.word	0x20002484

20000678 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000678:	6843      	ldr	r3, [r0, #4]
2000067a:	ea23 0101 	bic.w	r1, r3, r1
2000067e:	4311      	orrs	r1, r2
20000680:	6041      	str	r1, [r0, #4]
20000682:	4770      	bx	lr

20000684 <call_periph_mskd_ref()>:
20000684:	b500      	push	{lr}
20000686:	2106      	movs	r1, #6
20000688:	2202      	movs	r2, #2
2000068a:	4802      	ldr	r0, [pc, #8]	; (20000694 <call_periph_mskd_ref()+0x10>)
2000068c:	f7ff fff4 	bl	20000678 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000690:	f85d fb04 	ldr.w	pc, [sp], #4
20000694:	20002480 	.word	0x20002480

20000698 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000698:	6803      	ldr	r3, [r0, #0]
2000069a:	ea23 0101 	bic.w	r1, r3, r1
2000069e:	4311      	orrs	r1, r2
200006a0:	6001      	str	r1, [r0, #0]
200006a2:	4770      	bx	lr

200006a4 <call_reg_mskd_ref()>:
200006a4:	b500      	push	{lr}
200006a6:	2106      	movs	r1, #6
200006a8:	2202      	movs	r2, #2
200006aa:	4802      	ldr	r0, [pc, #8]	; (200006b4 <call_reg_mskd_ref()+0x10>)
200006ac:	f7ff fff4 	bl	20000698 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
200006b0:	f85d fb04 	ldr.w	pc, [sp], #4
200006b4:	20002484 	.word	0x20002484

200006b8 <return_bits()>:
200006b8:	2020      	movs	r0, #32
200006ba:	4770      	bx	lr

200006bc <call_return_bits()>:
200006bc:	b500      	push	{lr}
200006be:	f7ff fffb 	bl	200006b8 <return_bits()>
200006c2:	2820      	cmp	r0, #32
200006c4:	4b04      	ldr	r3, [pc, #16]	; (200006d8 <call_return_bits()+0x1c>)
200006c6:	bf0c      	ite	eq
200006c8:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
200006cc:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
200006d0:	605a      	str	r2, [r3, #4]
200006d2:	f85d fb04 	ldr.w	pc, [sp], #4
200006d6:	bf00      	nop
200006d8:	200023e0 	.word	0x200023e0

200006dc <return_mskd()>:
200006dc:	2218      	movs	r2, #24
200006de:	6002      	str	r2, [r0, #0]
200006e0:	2208      	movs	r2, #8
200006e2:	6042      	str	r2, [r0, #4]
200006e4:	4770      	bx	lr

200006e6 <call_return_mskd()>:
200006e6:	b500      	push	{lr}
200006e8:	b082      	sub	sp, #8
200006ea:	4668      	mov	r0, sp
200006ec:	f7ff fff6 	bl	200006dc <return_mskd()>
200006f0:	9a01      	ldr	r2, [sp, #4]
200006f2:	9b00      	ldr	r3, [sp, #0]
200006f4:	2b18      	cmp	r3, #24
200006f6:	d006      	beq.n	20000706 <call_return_mskd()+0x20>
200006f8:	4b06      	ldr	r3, [pc, #24]	; (20000714 <call_return_mskd()+0x2e>)
200006fa:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
200006fe:	605a      	str	r2, [r3, #4]
20000700:	b002      	add	sp, #8
20000702:	f85d fb04 	ldr.w	pc, [sp], #4
20000706:	2a08      	cmp	r2, #8
20000708:	d1f6      	bne.n	200006f8 <call_return_mskd()+0x12>
2000070a:	4b02      	ldr	r3, [pc, #8]	; (20000714 <call_return_mskd()+0x2e>)
2000070c:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000710:	605a      	str	r2, [r3, #4]
20000712:	e7f5      	b.n	20000700 <call_return_mskd()+0x1a>
20000714:	200023e0 	.word	0x200023e0

20000718 <return_reg()>:
20000718:	4b02      	ldr	r3, [pc, #8]	; (20000724 <return_reg()+0xc>)
2000071a:	2240      	movs	r2, #64	; 0x40
2000071c:	605a      	str	r2, [r3, #4]
2000071e:	4802      	ldr	r0, [pc, #8]	; (20000728 <return_reg()+0x10>)
20000720:	4770      	bx	lr
20000722:	bf00      	nop
20000724:	20002480 	.word	0x20002480
20000728:	20002484 	.word	0x20002484

2000072c <call_return_reg()>:
2000072c:	b500      	push	{lr}
2000072e:	f7ff fff3 	bl	20000718 <return_reg()>
20000732:	6803      	ldr	r3, [r0, #0]
20000734:	f013 0f40 	tst.w	r3, #64	; 0x40
20000738:	4b04      	ldr	r3, [pc, #16]	; (2000074c <call_return_reg()+0x20>)
2000073a:	bf14      	ite	ne
2000073c:	f04f 52f0 	movne.w	r2, #503316480	; 0x1e000000
20000740:	f04f 5238 	moveq.w	r2, #771751936	; 0x2e000000
20000744:	605a      	str	r2, [r3, #4]
20000746:	f85d fb04 	ldr.w	pc, [sp], #4
2000074a:	bf00      	nop
2000074c:	200023e0 	.word	0x200023e0

20000750 <return_periph()>:
20000750:	4801      	ldr	r0, [pc, #4]	; (20000758 <return_periph()+0x8>)
20000752:	2340      	movs	r3, #64	; 0x40
20000754:	6043      	str	r3, [r0, #4]
20000756:	4770      	bx	lr
20000758:	20002480 	.word	0x20002480

2000075c <call_return_periph()>:
2000075c:	b500      	push	{lr}
2000075e:	f7ff fff7 	bl	20000750 <return_periph()>
20000762:	6843      	ldr	r3, [r0, #4]
20000764:	f013 0f40 	tst.w	r3, #64	; 0x40
20000768:	4b04      	ldr	r3, [pc, #16]	; (2000077c <call_return_periph()+0x20>)
2000076a:	bf14      	ite	ne
2000076c:	f04f 5218 	movne.w	r2, #637534208	; 0x26000000
20000770:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
20000774:	605a      	str	r2, [r3, #4]
20000776:	f85d fb04 	ldr.w	pc, [sp], #4
2000077a:	bf00      	nop
2000077c:	200023e0 	.word	0x200023e0

20000780 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
20000780:	2805      	cmp	r0, #5
20000782:	d006      	beq.n	20000792 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
20000784:	2806      	cmp	r0, #6
20000786:	4b05      	ldr	r3, [pc, #20]	; (2000079c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000788:	bf0c      	ite	eq
2000078a:	2244      	moveq	r2, #68	; 0x44
2000078c:	2255      	movne	r2, #85	; 0x55
2000078e:	62da      	str	r2, [r3, #44]	; 0x2c
20000790:	4770      	bx	lr
20000792:	4b02      	ldr	r3, [pc, #8]	; (2000079c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000794:	2233      	movs	r2, #51	; 0x33
20000796:	62da      	str	r2, [r3, #44]	; 0x2c
20000798:	4770      	bx	lr
2000079a:	bf00      	nop
2000079c:	200022c0 	.word	0x200022c0

200007a0 <call_pos_val()>:
200007a0:	b500      	push	{lr}
200007a2:	2005      	movs	r0, #5
200007a4:	f7ff ffec 	bl	20000780 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
200007a8:	2006      	movs	r0, #6
200007aa:	f7ff ffe9 	bl	20000780 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
200007ae:	f85d fb04 	ldr.w	pc, [sp], #4

200007b2 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
200007b2:	6803      	ldr	r3, [r0, #0]
200007b4:	2b05      	cmp	r3, #5
200007b6:	d006      	beq.n	200007c6 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
200007b8:	2b06      	cmp	r3, #6
200007ba:	4b05      	ldr	r3, [pc, #20]	; (200007d0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
200007bc:	bf0c      	ite	eq
200007be:	2277      	moveq	r2, #119	; 0x77
200007c0:	2288      	movne	r2, #136	; 0x88
200007c2:	62da      	str	r2, [r3, #44]	; 0x2c
200007c4:	4770      	bx	lr
200007c6:	4b02      	ldr	r3, [pc, #8]	; (200007d0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
200007c8:	2266      	movs	r2, #102	; 0x66
200007ca:	62da      	str	r2, [r3, #44]	; 0x2c
200007cc:	4770      	bx	lr
200007ce:	bf00      	nop
200007d0:	200022c0 	.word	0x200022c0

200007d4 <call_pos_ref()>:
200007d4:	b510      	push	{r4, lr}
200007d6:	b082      	sub	sp, #8
200007d8:	2405      	movs	r4, #5
200007da:	9401      	str	r4, [sp, #4]
200007dc:	a801      	add	r0, sp, #4
200007de:	f7ff ffe8 	bl	200007b2 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
200007e2:	9400      	str	r4, [sp, #0]
200007e4:	4668      	mov	r0, sp
200007e6:	f7ff ffe4 	bl	200007b2 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
200007ea:	b002      	add	sp, #8
200007ec:	bd10      	pop	{r4, pc}

200007ee <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
200007ee:	4a03      	ldr	r2, [pc, #12]	; (200007fc <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
200007f0:	6853      	ldr	r3, [r2, #4]
200007f2:	ea23 0000 	bic.w	r0, r3, r0
200007f6:	4308      	orrs	r0, r1
200007f8:	6050      	str	r0, [r2, #4]
200007fa:	4770      	bx	lr
200007fc:	20002480 	.word	0x20002480

20000800 <call_range_val(unsigned int)>:
20000800:	b500      	push	{lr}
20000802:	0301      	lsls	r1, r0, #12
20000804:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000808:	f7ff fff1 	bl	200007ee <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
2000080c:	f85d fb04 	ldr.w	pc, [sp], #4

20000810 <call_range_val_port()>:
20000810:	b500      	push	{lr}
20000812:	201f      	movs	r0, #31
20000814:	f7ff fff4 	bl	20000800 <call_range_val(unsigned int)>
20000818:	f85d fb04 	ldr.w	pc, [sp], #4

2000081c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
2000081c:	4a03      	ldr	r2, [pc, #12]	; (2000082c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
2000081e:	6853      	ldr	r3, [r2, #4]
20000820:	ea23 0000 	bic.w	r0, r3, r0
20000824:	4308      	orrs	r0, r1
20000826:	6050      	str	r0, [r2, #4]
20000828:	4770      	bx	lr
2000082a:	bf00      	nop
2000082c:	20002480 	.word	0x20002480

20000830 <call_range_ref(unsigned int)>:
20000830:	b500      	push	{lr}
20000832:	0301      	lsls	r1, r0, #12
20000834:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000838:	f7ff fff0 	bl	2000081c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
2000083c:	f85d fb04 	ldr.w	pc, [sp], #4

20000840 <call_range_ref_port()>:
20000840:	b500      	push	{lr}
20000842:	200c      	movs	r0, #12
20000844:	f7ff fff4 	bl	20000830 <call_range_ref(unsigned int)>
20000848:	f85d fb04 	ldr.w	pc, [sp], #4

2000084c <check_array_range_pass(unsigned int)>:
2000084c:	2816      	cmp	r0, #22
2000084e:	4b03      	ldr	r3, [pc, #12]	; (2000085c <check_array_range_pass(unsigned int)+0x10>)
20000850:	bf94      	ite	ls
20000852:	227f      	movls	r2, #127	; 0x7f
20000854:	2283      	movhi	r2, #131	; 0x83
20000856:	62da      	str	r2, [r3, #44]	; 0x2c
20000858:	4770      	bx	lr
2000085a:	bf00      	nop
2000085c:	200022c0 	.word	0x200022c0

20000860 <check_array_range_fail(unsigned int)>:
20000860:	2816      	cmp	r0, #22
20000862:	4b03      	ldr	r3, [pc, #12]	; (20000870 <check_array_range_fail(unsigned int)+0x10>)
20000864:	bf94      	ite	ls
20000866:	2295      	movls	r2, #149	; 0x95
20000868:	2297      	movhi	r2, #151	; 0x97
2000086a:	62da      	str	r2, [r3, #44]	; 0x2c
2000086c:	4770      	bx	lr
2000086e:	bf00      	nop
20000870:	200022c0 	.word	0x200022c0

20000874 <check_bits_range_pass(unsigned int)>:
20000874:	280f      	cmp	r0, #15
20000876:	4b03      	ldr	r3, [pc, #12]	; (20000884 <check_bits_range_pass(unsigned int)+0x10>)
20000878:	bf94      	ite	ls
2000087a:	229d      	movls	r2, #157	; 0x9d
2000087c:	22a3      	movhi	r2, #163	; 0xa3
2000087e:	62da      	str	r2, [r3, #44]	; 0x2c
20000880:	4770      	bx	lr
20000882:	bf00      	nop
20000884:	200022c0 	.word	0x200022c0

20000888 <check_bits_range_fail(unsigned int)>:
20000888:	280f      	cmp	r0, #15
2000088a:	4b03      	ldr	r3, [pc, #12]	; (20000898 <check_bits_range_fail(unsigned int)+0x10>)
2000088c:	bf94      	ite	ls
2000088e:	22a7      	movls	r2, #167	; 0xa7
20000890:	22ad      	movhi	r2, #173	; 0xad
20000892:	62da      	str	r2, [r3, #44]	; 0x2c
20000894:	4770      	bx	lr
20000896:	bf00      	nop
20000898:	200022c0 	.word	0x200022c0

2000089c <check_mskd_range_pass(unsigned int)>:
2000089c:	281f      	cmp	r0, #31
2000089e:	4b03      	ldr	r3, [pc, #12]	; (200008ac <check_mskd_range_pass(unsigned int)+0x10>)
200008a0:	bf94      	ite	ls
200008a2:	22b3      	movls	r2, #179	; 0xb3
200008a4:	22b5      	movhi	r2, #181	; 0xb5
200008a6:	62da      	str	r2, [r3, #44]	; 0x2c
200008a8:	4770      	bx	lr
200008aa:	bf00      	nop
200008ac:	200022c0 	.word	0x200022c0

200008b0 <check_mskd_range_fail(unsigned int)>:
200008b0:	281f      	cmp	r0, #31
200008b2:	4b03      	ldr	r3, [pc, #12]	; (200008c0 <check_mskd_range_fail(unsigned int)+0x10>)
200008b4:	bf94      	ite	ls
200008b6:	22bf      	movls	r2, #191	; 0xbf
200008b8:	22c1      	movhi	r2, #193	; 0xc1
200008ba:	62da      	str	r2, [r3, #44]	; 0x2c
200008bc:	4770      	bx	lr
200008be:	bf00      	nop
200008c0:	200022c0 	.word	0x200022c0

200008c4 <prescaler_low()>:
200008c4:	4b04      	ldr	r3, [pc, #16]	; (200008d8 <prescaler_low()+0x14>)
200008c6:	2277      	movs	r2, #119	; 0x77
200008c8:	605a      	str	r2, [r3, #4]
200008ca:	685b      	ldr	r3, [r3, #4]
200008cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200008d0:	4a02      	ldr	r2, [pc, #8]	; (200008dc <prescaler_low()+0x18>)
200008d2:	62d3      	str	r3, [r2, #44]	; 0x2c
200008d4:	4770      	bx	lr
200008d6:	bf00      	nop
200008d8:	200023e0 	.word	0x200023e0
200008dc:	200022c0 	.word	0x200022c0

200008e0 <prescaler_high()>:
200008e0:	4b04      	ldr	r3, [pc, #16]	; (200008f4 <prescaler_high()+0x14>)
200008e2:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
200008e6:	605a      	str	r2, [r3, #4]
200008e8:	685b      	ldr	r3, [r3, #4]
200008ea:	f3c3 6344 	ubfx	r3, r3, #25, #5
200008ee:	4a02      	ldr	r2, [pc, #8]	; (200008f8 <prescaler_high()+0x18>)
200008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
200008f2:	4770      	bx	lr
200008f4:	200023e0 	.word	0x200023e0
200008f8:	200022c0 	.word	0x200022c0

200008fc <reg_mskd_lss()>:
200008fc:	4b07      	ldr	r3, [pc, #28]	; (2000091c <reg_mskd_lss()+0x20>)
200008fe:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
20000902:	605a      	str	r2, [r3, #4]
20000904:	685b      	ldr	r3, [r3, #4]
20000906:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000090a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
2000090e:	4b04      	ldr	r3, [pc, #16]	; (20000920 <reg_mskd_lss()+0x24>)
20000910:	bf34      	ite	cc
20000912:	2202      	movcc	r2, #2
20000914:	2204      	movcs	r2, #4
20000916:	605a      	str	r2, [r3, #4]
20000918:	4770      	bx	lr
2000091a:	bf00      	nop
2000091c:	200023e0 	.word	0x200023e0
20000920:	20002480 	.word	0x20002480

20000924 <reg_mskd_leq()>:
20000924:	4b0b      	ldr	r3, [pc, #44]	; (20000954 <reg_mskd_leq()+0x30>)
20000926:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
2000092a:	605a      	str	r2, [r3, #4]
2000092c:	685b      	ldr	r3, [r3, #4]
2000092e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000932:	4293      	cmp	r3, r2
20000934:	d80a      	bhi.n	2000094c <reg_mskd_leq()+0x28>
20000936:	4b07      	ldr	r3, [pc, #28]	; (20000954 <reg_mskd_leq()+0x30>)
20000938:	685b      	ldr	r3, [r3, #4]
2000093a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000093e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
20000942:	d803      	bhi.n	2000094c <reg_mskd_leq()+0x28>
20000944:	4b04      	ldr	r3, [pc, #16]	; (20000958 <reg_mskd_leq()+0x34>)
20000946:	2202      	movs	r2, #2
20000948:	605a      	str	r2, [r3, #4]
2000094a:	4770      	bx	lr
2000094c:	4b02      	ldr	r3, [pc, #8]	; (20000958 <reg_mskd_leq()+0x34>)
2000094e:	2204      	movs	r2, #4
20000950:	605a      	str	r2, [r3, #4]
20000952:	4770      	bx	lr
20000954:	200023e0 	.word	0x200023e0
20000958:	20002480 	.word	0x20002480

2000095c <reg_mskd_gtr()>:
2000095c:	4b07      	ldr	r3, [pc, #28]	; (2000097c <reg_mskd_gtr()+0x20>)
2000095e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000962:	605a      	str	r2, [r3, #4]
20000964:	685b      	ldr	r3, [r3, #4]
20000966:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000096a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2000096e:	4b04      	ldr	r3, [pc, #16]	; (20000980 <reg_mskd_gtr()+0x24>)
20000970:	bf8c      	ite	hi
20000972:	2202      	movhi	r2, #2
20000974:	2204      	movls	r2, #4
20000976:	605a      	str	r2, [r3, #4]
20000978:	4770      	bx	lr
2000097a:	bf00      	nop
2000097c:	200023e0 	.word	0x200023e0
20000980:	20002480 	.word	0x20002480

20000984 <reg_mskd_geq()>:
20000984:	4b0b      	ldr	r3, [pc, #44]	; (200009b4 <reg_mskd_geq()+0x30>)
20000986:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
2000098a:	605a      	str	r2, [r3, #4]
2000098c:	685b      	ldr	r3, [r3, #4]
2000098e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20000996:	d309      	bcc.n	200009ac <reg_mskd_geq()+0x28>
20000998:	4b06      	ldr	r3, [pc, #24]	; (200009b4 <reg_mskd_geq()+0x30>)
2000099a:	685b      	ldr	r3, [r3, #4]
2000099c:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200009a0:	4293      	cmp	r3, r2
200009a2:	d303      	bcc.n	200009ac <reg_mskd_geq()+0x28>
200009a4:	4b04      	ldr	r3, [pc, #16]	; (200009b8 <reg_mskd_geq()+0x34>)
200009a6:	2202      	movs	r2, #2
200009a8:	605a      	str	r2, [r3, #4]
200009aa:	4770      	bx	lr
200009ac:	4b02      	ldr	r3, [pc, #8]	; (200009b8 <reg_mskd_geq()+0x34>)
200009ae:	2204      	movs	r2, #4
200009b0:	605a      	str	r2, [r3, #4]
200009b2:	4770      	bx	lr
200009b4:	200023e0 	.word	0x200023e0
200009b8:	20002480 	.word	0x20002480

200009bc <pos_cmp_eq()>:
200009bc:	4b01      	ldr	r3, [pc, #4]	; (200009c4 <pos_cmp_eq()+0x8>)
200009be:	2202      	movs	r2, #2
200009c0:	605a      	str	r2, [r3, #4]
200009c2:	4770      	bx	lr
200009c4:	20002480 	.word	0x20002480

200009c8 <pos_cmp_ne()>:
200009c8:	4b01      	ldr	r3, [pc, #4]	; (200009d0 <pos_cmp_ne()+0x8>)
200009ca:	2202      	movs	r2, #2
200009cc:	605a      	str	r2, [r3, #4]
200009ce:	4770      	bx	lr
200009d0:	20002480 	.word	0x20002480

200009d4 <bits_extract_eq()>:
200009d4:	4b05      	ldr	r3, [pc, #20]	; (200009ec <bits_extract_eq()+0x18>)
200009d6:	2240      	movs	r2, #64	; 0x40
200009d8:	605a      	str	r2, [r3, #4]
200009da:	685b      	ldr	r3, [r3, #4]
200009dc:	4293      	cmp	r3, r2
200009de:	4b03      	ldr	r3, [pc, #12]	; (200009ec <bits_extract_eq()+0x18>)
200009e0:	bf0c      	ite	eq
200009e2:	2202      	moveq	r2, #2
200009e4:	2204      	movne	r2, #4
200009e6:	605a      	str	r2, [r3, #4]
200009e8:	4770      	bx	lr
200009ea:	bf00      	nop
200009ec:	20002480 	.word	0x20002480

200009f0 <bits_extract_ne()>:
200009f0:	4b05      	ldr	r3, [pc, #20]	; (20000a08 <bits_extract_ne()+0x18>)
200009f2:	2220      	movs	r2, #32
200009f4:	605a      	str	r2, [r3, #4]
200009f6:	685b      	ldr	r3, [r3, #4]
200009f8:	4293      	cmp	r3, r2
200009fa:	4b03      	ldr	r3, [pc, #12]	; (20000a08 <bits_extract_ne()+0x18>)
200009fc:	bf14      	ite	ne
200009fe:	2202      	movne	r2, #2
20000a00:	2204      	moveq	r2, #4
20000a02:	605a      	str	r2, [r3, #4]
20000a04:	4770      	bx	lr
20000a06:	bf00      	nop
20000a08:	20002480 	.word	0x20002480

20000a0c <mskd_extract_eq()>:
20000a0c:	4b05      	ldr	r3, [pc, #20]	; (20000a24 <mskd_extract_eq()+0x18>)
20000a0e:	2202      	movs	r2, #2
20000a10:	605a      	str	r2, [r3, #4]
20000a12:	685b      	ldr	r3, [r3, #4]
20000a14:	4293      	cmp	r3, r2
20000a16:	4b03      	ldr	r3, [pc, #12]	; (20000a24 <mskd_extract_eq()+0x18>)
20000a18:	bf0c      	ite	eq
20000a1a:	2220      	moveq	r2, #32
20000a1c:	2240      	movne	r2, #64	; 0x40
20000a1e:	605a      	str	r2, [r3, #4]
20000a20:	4770      	bx	lr
20000a22:	bf00      	nop
20000a24:	20002480 	.word	0x20002480

20000a28 <mskd_extract_ne()>:
20000a28:	4b05      	ldr	r3, [pc, #20]	; (20000a40 <mskd_extract_ne()+0x18>)
20000a2a:	2204      	movs	r2, #4
20000a2c:	605a      	str	r2, [r3, #4]
20000a2e:	685b      	ldr	r3, [r3, #4]
20000a30:	4293      	cmp	r3, r2
20000a32:	4b03      	ldr	r3, [pc, #12]	; (20000a40 <mskd_extract_ne()+0x18>)
20000a34:	bf0c      	ite	eq
20000a36:	2240      	moveq	r2, #64	; 0x40
20000a38:	2220      	movne	r2, #32
20000a3a:	605a      	str	r2, [r3, #4]
20000a3c:	4770      	bx	lr
20000a3e:	bf00      	nop
20000a40:	20002480 	.word	0x20002480

20000a44 <mskd_extract_lss()>:
20000a44:	4b06      	ldr	r3, [pc, #24]	; (20000a60 <mskd_extract_lss()+0x1c>)
20000a46:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000a4a:	605a      	str	r2, [r3, #4]
20000a4c:	685b      	ldr	r3, [r3, #4]
20000a4e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
20000a52:	4b04      	ldr	r3, [pc, #16]	; (20000a64 <mskd_extract_lss()+0x20>)
20000a54:	bf34      	ite	cc
20000a56:	2220      	movcc	r2, #32
20000a58:	2240      	movcs	r2, #64	; 0x40
20000a5a:	605a      	str	r2, [r3, #4]
20000a5c:	4770      	bx	lr
20000a5e:	bf00      	nop
20000a60:	200023e0 	.word	0x200023e0
20000a64:	20002480 	.word	0x20002480

20000a68 <mskd_extract_leq()>:
20000a68:	4b05      	ldr	r3, [pc, #20]	; (20000a80 <mskd_extract_leq()+0x18>)
20000a6a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000a6e:	605a      	str	r2, [r3, #4]
20000a70:	685b      	ldr	r3, [r3, #4]
20000a72:	4293      	cmp	r3, r2
20000a74:	4b03      	ldr	r3, [pc, #12]	; (20000a84 <mskd_extract_leq()+0x1c>)
20000a76:	bf94      	ite	ls
20000a78:	2220      	movls	r2, #32
20000a7a:	2240      	movhi	r2, #64	; 0x40
20000a7c:	605a      	str	r2, [r3, #4]
20000a7e:	4770      	bx	lr
20000a80:	200023e0 	.word	0x200023e0
20000a84:	20002480 	.word	0x20002480

20000a88 <mskd_extract_gtr()>:
20000a88:	4b06      	ldr	r3, [pc, #24]	; (20000aa4 <mskd_extract_gtr()+0x1c>)
20000a8a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000a8e:	605a      	str	r2, [r3, #4]
20000a90:	685b      	ldr	r3, [r3, #4]
20000a92:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000a96:	4b04      	ldr	r3, [pc, #16]	; (20000aa8 <mskd_extract_gtr()+0x20>)
20000a98:	bf8c      	ite	hi
20000a9a:	2220      	movhi	r2, #32
20000a9c:	2240      	movls	r2, #64	; 0x40
20000a9e:	605a      	str	r2, [r3, #4]
20000aa0:	4770      	bx	lr
20000aa2:	bf00      	nop
20000aa4:	200023e0 	.word	0x200023e0
20000aa8:	20002480 	.word	0x20002480

20000aac <mskd_extract_geq()>:
20000aac:	4b05      	ldr	r3, [pc, #20]	; (20000ac4 <mskd_extract_geq()+0x18>)
20000aae:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000ab2:	605a      	str	r2, [r3, #4]
20000ab4:	685b      	ldr	r3, [r3, #4]
20000ab6:	4293      	cmp	r3, r2
20000ab8:	4b03      	ldr	r3, [pc, #12]	; (20000ac8 <mskd_extract_geq()+0x1c>)
20000aba:	bf2c      	ite	cs
20000abc:	2220      	movcs	r2, #32
20000abe:	2240      	movcc	r2, #64	; 0x40
20000ac0:	605a      	str	r2, [r3, #4]
20000ac2:	4770      	bx	lr
20000ac4:	200023e0 	.word	0x200023e0
20000ac8:	20002480 	.word	0x20002480

20000acc <set_bits_global()>:
20000acc:	4a02      	ldr	r2, [pc, #8]	; (20000ad8 <set_bits_global()+0xc>)
20000ace:	6853      	ldr	r3, [r2, #4]
20000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000ad4:	6053      	str	r3, [r2, #4]
20000ad6:	4770      	bx	lr
20000ad8:	20002480 	.word	0x20002480

20000adc <ins_mskd_global()>:
20000adc:	4a03      	ldr	r2, [pc, #12]	; (20000aec <ins_mskd_global()+0x10>)
20000ade:	6853      	ldr	r3, [r2, #4]
20000ae0:	f023 0306 	bic.w	r3, r3, #6
20000ae4:	f043 0302 	orr.w	r3, r3, #2
20000ae8:	6053      	str	r3, [r2, #4]
20000aea:	4770      	bx	lr
20000aec:	20002480 	.word	0x20002480

20000af0 <assign_array_global()>:
20000af0:	4b01      	ldr	r3, [pc, #4]	; (20000af8 <assign_array_global()+0x8>)
20000af2:	22bd      	movs	r2, #189	; 0xbd
20000af4:	601a      	str	r2, [r3, #0]
20000af6:	4770      	bx	lr
20000af8:	200022ec 	.word	0x200022ec

20000afc <shifted_global()>:
20000afc:	4b04      	ldr	r3, [pc, #16]	; (20000b10 <shifted_global()+0x14>)
20000afe:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000b02:	605a      	str	r2, [r3, #4]
20000b04:	685b      	ldr	r3, [r3, #4]
20000b06:	f3c3 6344 	ubfx	r3, r3, #25, #5
20000b0a:	4a02      	ldr	r2, [pc, #8]	; (20000b14 <shifted_global()+0x18>)
20000b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
20000b0e:	4770      	bx	lr
20000b10:	200023e0 	.word	0x200023e0
20000b14:	200022c0 	.word	0x200022c0

20000b18 <assign_register_global()>:
20000b18:	4b01      	ldr	r3, [pc, #4]	; (20000b20 <assign_register_global()+0x8>)
20000b1a:	2204      	movs	r2, #4
20000b1c:	605a      	str	r2, [r3, #4]
20000b1e:	4770      	bx	lr
20000b20:	20002480 	.word	0x20002480

20000b24 <call_pos_val_global()>:
20000b24:	b500      	push	{lr}
20000b26:	2006      	movs	r0, #6
20000b28:	f7ff fe2a 	bl	20000780 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
20000b2c:	f85d fb04 	ldr.w	pc, [sp], #4

20000b30 <call_pos_ref_global()>:
20000b30:	b500      	push	{lr}
20000b32:	b081      	sub	sp, #4
20000b34:	2306      	movs	r3, #6
20000b36:	9300      	str	r3, [sp, #0]
20000b38:	4668      	mov	r0, sp
20000b3a:	f7ff fe3a 	bl	200007b2 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
20000b3e:	b001      	add	sp, #4
20000b40:	f85d fb04 	ldr.w	pc, [sp], #4

20000b44 <call_bits_val_global()>:
20000b44:	b500      	push	{lr}
20000b46:	2040      	movs	r0, #64	; 0x40
20000b48:	f7ff fc8c 	bl	20000464 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000b4c:	f85d fb04 	ldr.w	pc, [sp], #4

20000b50 <call_bits_ref_global()>:
20000b50:	b500      	push	{lr}
20000b52:	b081      	sub	sp, #4
20000b54:	2340      	movs	r3, #64	; 0x40
20000b56:	9300      	str	r3, [sp, #0]
20000b58:	4668      	mov	r0, sp
20000b5a:	f7ff fcb5 	bl	200004c8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
20000b5e:	b001      	add	sp, #4
20000b60:	f85d fb04 	ldr.w	pc, [sp], #4

20000b64 <call_mskd_val_global()>:
20000b64:	b500      	push	{lr}
20000b66:	2006      	movs	r0, #6
20000b68:	2102      	movs	r1, #2
20000b6a:	f7ff fcc9 	bl	20000500 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000b6e:	f85d fb04 	ldr.w	pc, [sp], #4

20000b72 <call_mskd_ref_global()>:
20000b72:	b500      	push	{lr}
20000b74:	b082      	sub	sp, #8
20000b76:	2306      	movs	r3, #6
20000b78:	9300      	str	r3, [sp, #0]
20000b7a:	2302      	movs	r3, #2
20000b7c:	9301      	str	r3, [sp, #4]
20000b7e:	4668      	mov	r0, sp
20000b80:	f7ff fcd6 	bl	20000530 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
20000b84:	b002      	add	sp, #8
20000b86:	f85d fb04 	ldr.w	pc, [sp], #4

20000b8a <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
20000b8a:	4b05      	ldr	r3, [pc, #20]	; (20000ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x16>)
20000b8c:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000b90:	605a      	str	r2, [r3, #4]
20000b92:	685b      	ldr	r3, [r3, #4]
20000b94:	4018      	ands	r0, r3
20000b96:	40c8      	lsrs	r0, r1
20000b98:	4b02      	ldr	r3, [pc, #8]	; (20000ba4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1a>)
20000b9a:	62d8      	str	r0, [r3, #44]	; 0x2c
20000b9c:	4770      	bx	lr
20000b9e:	bf00      	nop
20000ba0:	200023e0 	.word	0x200023e0
20000ba4:	200022c0 	.word	0x200022c0

20000ba8 <call_shifted_const_val()>:
20000ba8:	b500      	push	{lr}
20000baa:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000bae:	2119      	movs	r1, #25
20000bb0:	f7ff ffeb 	bl	20000b8a <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000bb4:	f85d fb04 	ldr.w	pc, [sp], #4

20000bb8 <call_shifted_var_val()>:
20000bb8:	b500      	push	{lr}
20000bba:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000bbe:	2119      	movs	r1, #25
20000bc0:	f7ff ffe3 	bl	20000b8a <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000bc4:	f85d fb04 	ldr.w	pc, [sp], #4

20000bc8 <call_shifted_global_val()>:
20000bc8:	b500      	push	{lr}
20000bca:	4b04      	ldr	r3, [pc, #16]	; (20000bdc <call_shifted_global_val()+0x14>)
20000bcc:	f103 0108 	add.w	r1, r3, #8
20000bd0:	c903      	ldmia	r1, {r0, r1}
20000bd2:	f7ff ffda 	bl	20000b8a <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000bd6:	f85d fb04 	ldr.w	pc, [sp], #4
20000bda:	bf00      	nop
20000bdc:	20001204 	.word	0x20001204

20000be0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
20000be0:	4b05      	ldr	r3, [pc, #20]	; (20000bf8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
20000be2:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000be6:	605a      	str	r2, [r3, #4]
20000be8:	685b      	ldr	r3, [r3, #4]
20000bea:	6802      	ldr	r2, [r0, #0]
20000bec:	4013      	ands	r3, r2
20000bee:	6842      	ldr	r2, [r0, #4]
20000bf0:	40d3      	lsrs	r3, r2
20000bf2:	4a02      	ldr	r2, [pc, #8]	; (20000bfc <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
20000bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
20000bf6:	4770      	bx	lr
20000bf8:	200023e0 	.word	0x200023e0
20000bfc:	200022c0 	.word	0x200022c0

20000c00 <call_shifted_const_ref()>:
20000c00:	b500      	push	{lr}
20000c02:	b082      	sub	sp, #8
20000c04:	4b05      	ldr	r3, [pc, #20]	; (20000c1c <call_shifted_const_ref()+0x1c>)
20000c06:	f103 0310 	add.w	r3, r3, #16
20000c0a:	cb0c      	ldmia	r3, {r2, r3}
20000c0c:	e88d 000c 	stmia.w	sp, {r2, r3}
20000c10:	4668      	mov	r0, sp
20000c12:	f7ff ffe5 	bl	20000be0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000c16:	b002      	add	sp, #8
20000c18:	f85d fb04 	ldr.w	pc, [sp], #4
20000c1c:	20001204 	.word	0x20001204

20000c20 <call_shifted_var_ref()>:
20000c20:	b500      	push	{lr}
20000c22:	b082      	sub	sp, #8
20000c24:	4b05      	ldr	r3, [pc, #20]	; (20000c3c <call_shifted_var_ref()+0x1c>)
20000c26:	f103 0318 	add.w	r3, r3, #24
20000c2a:	cb0c      	ldmia	r3, {r2, r3}
20000c2c:	e88d 000c 	stmia.w	sp, {r2, r3}
20000c30:	4668      	mov	r0, sp
20000c32:	f7ff ffd5 	bl	20000be0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000c36:	b002      	add	sp, #8
20000c38:	f85d fb04 	ldr.w	pc, [sp], #4
20000c3c:	20001204 	.word	0x20001204

20000c40 <call_shifted_global_ref()>:
20000c40:	b500      	push	{lr}
20000c42:	b082      	sub	sp, #8
20000c44:	4b05      	ldr	r3, [pc, #20]	; (20000c5c <call_shifted_global_ref()+0x1c>)
20000c46:	f103 0308 	add.w	r3, r3, #8
20000c4a:	cb0c      	ldmia	r3, {r2, r3}
20000c4c:	e88d 000c 	stmia.w	sp, {r2, r3}
20000c50:	4668      	mov	r0, sp
20000c52:	f7ff ffc5 	bl	20000be0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000c56:	b002      	add	sp, #8
20000c58:	f85d fb04 	ldr.w	pc, [sp], #4
20000c5c:	20001204 	.word	0x20001204

20000c60 <copy_bits_equ()>:
20000c60:	4b05      	ldr	r3, [pc, #20]	; (20000c78 <copy_bits_equ()+0x18>)
20000c62:	2240      	movs	r2, #64	; 0x40
20000c64:	605a      	str	r2, [r3, #4]
20000c66:	685b      	ldr	r3, [r3, #4]
20000c68:	f013 0f40 	tst.w	r3, #64	; 0x40
20000c6c:	4b02      	ldr	r3, [pc, #8]	; (20000c78 <copy_bits_equ()+0x18>)
20000c6e:	bf14      	ite	ne
20000c70:	2202      	movne	r2, #2
20000c72:	2204      	moveq	r2, #4
20000c74:	605a      	str	r2, [r3, #4]
20000c76:	4770      	bx	lr
20000c78:	20002480 	.word	0x20002480

20000c7c <copy_bits_neq()>:
20000c7c:	4b05      	ldr	r3, [pc, #20]	; (20000c94 <copy_bits_neq()+0x18>)
20000c7e:	2240      	movs	r2, #64	; 0x40
20000c80:	605a      	str	r2, [r3, #4]
20000c82:	685b      	ldr	r3, [r3, #4]
20000c84:	f013 0f40 	tst.w	r3, #64	; 0x40
20000c88:	4b02      	ldr	r3, [pc, #8]	; (20000c94 <copy_bits_neq()+0x18>)
20000c8a:	bf0c      	ite	eq
20000c8c:	2202      	moveq	r2, #2
20000c8e:	2204      	movne	r2, #4
20000c90:	605a      	str	r2, [r3, #4]
20000c92:	4770      	bx	lr
20000c94:	20002480 	.word	0x20002480

20000c98 <copy_mskd_equ()>:
20000c98:	4b06      	ldr	r3, [pc, #24]	; (20000cb4 <copy_mskd_equ()+0x1c>)
20000c9a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000c9e:	605a      	str	r2, [r3, #4]
20000ca0:	685b      	ldr	r3, [r3, #4]
20000ca2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000ca6:	4293      	cmp	r3, r2
20000ca8:	4b03      	ldr	r3, [pc, #12]	; (20000cb8 <copy_mskd_equ()+0x20>)
20000caa:	bf0c      	ite	eq
20000cac:	2202      	moveq	r2, #2
20000cae:	2204      	movne	r2, #4
20000cb0:	605a      	str	r2, [r3, #4]
20000cb2:	4770      	bx	lr
20000cb4:	200023e0 	.word	0x200023e0
20000cb8:	20002480 	.word	0x20002480

20000cbc <copy_mskd_neq()>:
20000cbc:	4b06      	ldr	r3, [pc, #24]	; (20000cd8 <copy_mskd_neq()+0x1c>)
20000cbe:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
20000cc2:	605a      	str	r2, [r3, #4]
20000cc4:	685b      	ldr	r3, [r3, #4]
20000cc6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000cca:	4293      	cmp	r3, r2
20000ccc:	4b03      	ldr	r3, [pc, #12]	; (20000cdc <copy_mskd_neq()+0x20>)
20000cce:	bf14      	ite	ne
20000cd0:	2202      	movne	r2, #2
20000cd2:	2204      	moveq	r2, #4
20000cd4:	605a      	str	r2, [r3, #4]
20000cd6:	4770      	bx	lr
20000cd8:	200023e0 	.word	0x200023e0
20000cdc:	20002480 	.word	0x20002480

20000ce0 <copy_mskd_lss()>:
20000ce0:	4b07      	ldr	r3, [pc, #28]	; (20000d00 <copy_mskd_lss()+0x20>)
20000ce2:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
20000ce6:	605a      	str	r2, [r3, #4]
20000ce8:	685b      	ldr	r3, [r3, #4]
20000cea:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000cee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
20000cf2:	4b04      	ldr	r3, [pc, #16]	; (20000d04 <copy_mskd_lss()+0x24>)
20000cf4:	bf34      	ite	cc
20000cf6:	2202      	movcc	r2, #2
20000cf8:	2204      	movcs	r2, #4
20000cfa:	605a      	str	r2, [r3, #4]
20000cfc:	4770      	bx	lr
20000cfe:	bf00      	nop
20000d00:	200023e0 	.word	0x200023e0
20000d04:	20002480 	.word	0x20002480

20000d08 <copy_mskd_leq()>:
20000d08:	4b06      	ldr	r3, [pc, #24]	; (20000d24 <copy_mskd_leq()+0x1c>)
20000d0a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000d0e:	605a      	str	r2, [r3, #4]
20000d10:	685b      	ldr	r3, [r3, #4]
20000d12:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000d16:	4293      	cmp	r3, r2
20000d18:	4b03      	ldr	r3, [pc, #12]	; (20000d28 <copy_mskd_leq()+0x20>)
20000d1a:	bf94      	ite	ls
20000d1c:	2202      	movls	r2, #2
20000d1e:	2204      	movhi	r2, #4
20000d20:	605a      	str	r2, [r3, #4]
20000d22:	4770      	bx	lr
20000d24:	200023e0 	.word	0x200023e0
20000d28:	20002480 	.word	0x20002480

20000d2c <copy_mskd_gtr()>:
20000d2c:	4b07      	ldr	r3, [pc, #28]	; (20000d4c <copy_mskd_gtr()+0x20>)
20000d2e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000d32:	605a      	str	r2, [r3, #4]
20000d34:	685b      	ldr	r3, [r3, #4]
20000d36:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000d3a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000d3e:	4b04      	ldr	r3, [pc, #16]	; (20000d50 <copy_mskd_gtr()+0x24>)
20000d40:	bf8c      	ite	hi
20000d42:	2202      	movhi	r2, #2
20000d44:	2204      	movls	r2, #4
20000d46:	605a      	str	r2, [r3, #4]
20000d48:	4770      	bx	lr
20000d4a:	bf00      	nop
20000d4c:	200023e0 	.word	0x200023e0
20000d50:	20002480 	.word	0x20002480

20000d54 <copy_mskd_geq()>:
20000d54:	4b06      	ldr	r3, [pc, #24]	; (20000d70 <copy_mskd_geq()+0x1c>)
20000d56:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000d5a:	605a      	str	r2, [r3, #4]
20000d5c:	685b      	ldr	r3, [r3, #4]
20000d5e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000d62:	4293      	cmp	r3, r2
20000d64:	4b03      	ldr	r3, [pc, #12]	; (20000d74 <copy_mskd_geq()+0x20>)
20000d66:	bf2c      	ite	cs
20000d68:	2202      	movcs	r2, #2
20000d6a:	2204      	movcc	r2, #4
20000d6c:	605a      	str	r2, [r3, #4]
20000d6e:	4770      	bx	lr
20000d70:	200023e0 	.word	0x200023e0
20000d74:	20002480 	.word	0x20002480

20000d78 <copy_shifted()>:
20000d78:	4b06      	ldr	r3, [pc, #24]	; (20000d94 <copy_shifted()+0x1c>)
20000d7a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000d7e:	605a      	str	r2, [r3, #4]
20000d80:	685b      	ldr	r3, [r3, #4]
20000d82:	f3c3 6344 	ubfx	r3, r3, #25, #5
20000d86:	2b0b      	cmp	r3, #11
20000d88:	4b03      	ldr	r3, [pc, #12]	; (20000d98 <copy_shifted()+0x20>)
20000d8a:	bf0c      	ite	eq
20000d8c:	2202      	moveq	r2, #2
20000d8e:	2204      	movne	r2, #4
20000d90:	605a      	str	r2, [r3, #4]
20000d92:	4770      	bx	lr
20000d94:	200023e0 	.word	0x200023e0
20000d98:	20002480 	.word	0x20002480

20000d9c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
20000d9c:	f010 0f40 	tst.w	r0, #64	; 0x40
20000da0:	4b02      	ldr	r3, [pc, #8]	; (20000dac <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x10>)
20000da2:	bf14      	ite	ne
20000da4:	2202      	movne	r2, #2
20000da6:	2204      	moveq	r2, #4
20000da8:	605a      	str	r2, [r3, #4]
20000daa:	4770      	bx	lr
20000dac:	20002480 	.word	0x20002480

20000db0 <call_copy_bits_val()>:
20000db0:	b500      	push	{lr}
20000db2:	4b04      	ldr	r3, [pc, #16]	; (20000dc4 <call_copy_bits_val()+0x14>)
20000db4:	2240      	movs	r2, #64	; 0x40
20000db6:	605a      	str	r2, [r3, #4]
20000db8:	6858      	ldr	r0, [r3, #4]
20000dba:	f7ff ffef 	bl	20000d9c <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
20000dbe:	f85d fb04 	ldr.w	pc, [sp], #4
20000dc2:	bf00      	nop
20000dc4:	20002480 	.word	0x20002480

20000dc8 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
20000dc8:	6803      	ldr	r3, [r0, #0]
20000dca:	f013 0f40 	tst.w	r3, #64	; 0x40
20000dce:	4b03      	ldr	r3, [pc, #12]	; (20000ddc <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x14>)
20000dd0:	bf14      	ite	ne
20000dd2:	2202      	movne	r2, #2
20000dd4:	2204      	moveq	r2, #4
20000dd6:	605a      	str	r2, [r3, #4]
20000dd8:	4770      	bx	lr
20000dda:	bf00      	nop
20000ddc:	20002480 	.word	0x20002480

20000de0 <call_copy_bits_ref()>:
20000de0:	b500      	push	{lr}
20000de2:	b081      	sub	sp, #4
20000de4:	4b05      	ldr	r3, [pc, #20]	; (20000dfc <call_copy_bits_ref()+0x1c>)
20000de6:	2240      	movs	r2, #64	; 0x40
20000de8:	605a      	str	r2, [r3, #4]
20000dea:	685b      	ldr	r3, [r3, #4]
20000dec:	9300      	str	r3, [sp, #0]
20000dee:	4668      	mov	r0, sp
20000df0:	f7ff ffea 	bl	20000dc8 <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
20000df4:	b001      	add	sp, #4
20000df6:	f85d fb04 	ldr.w	pc, [sp], #4
20000dfa:	bf00      	nop
20000dfc:	20002480 	.word	0x20002480

20000e00 <run>:
20000e00:	b510      	push	{r4, lr}
20000e02:	4b7e      	ldr	r3, [pc, #504]	; (20000ffc <run+0x1fc>)
20000e04:	781b      	ldrb	r3, [r3, #0]
20000e06:	b923      	cbnz	r3, 20000e12 <run+0x12>
20000e08:	4b7c      	ldr	r3, [pc, #496]	; (20000ffc <run+0x1fc>)
20000e0a:	4a7d      	ldr	r2, [pc, #500]	; (20001000 <run+0x200>)
20000e0c:	609a      	str	r2, [r3, #8]
20000e0e:	2201      	movs	r2, #1
20000e10:	701a      	strb	r2, [r3, #0]
20000e12:	4b7a      	ldr	r3, [pc, #488]	; (20000ffc <run+0x1fc>)
20000e14:	7b1b      	ldrb	r3, [r3, #12]
20000e16:	b923      	cbnz	r3, 20000e22 <run+0x22>
20000e18:	4b78      	ldr	r3, [pc, #480]	; (20000ffc <run+0x1fc>)
20000e1a:	4a7a      	ldr	r2, [pc, #488]	; (20001004 <run+0x204>)
20000e1c:	615a      	str	r2, [r3, #20]
20000e1e:	2201      	movs	r2, #1
20000e20:	731a      	strb	r2, [r3, #12]
20000e22:	4b76      	ldr	r3, [pc, #472]	; (20000ffc <run+0x1fc>)
20000e24:	7e1b      	ldrb	r3, [r3, #24]
20000e26:	b913      	cbnz	r3, 20000e2e <run+0x2e>
20000e28:	4b74      	ldr	r3, [pc, #464]	; (20000ffc <run+0x1fc>)
20000e2a:	2201      	movs	r2, #1
20000e2c:	761a      	strb	r2, [r3, #24]
20000e2e:	4b73      	ldr	r3, [pc, #460]	; (20000ffc <run+0x1fc>)
20000e30:	f893 3020 	ldrb.w	r3, [r3, #32]
20000e34:	b91b      	cbnz	r3, 20000e3e <run+0x3e>
20000e36:	4b71      	ldr	r3, [pc, #452]	; (20000ffc <run+0x1fc>)
20000e38:	2201      	movs	r2, #1
20000e3a:	f883 2020 	strb.w	r2, [r3, #32]
20000e3e:	4c6f      	ldr	r4, [pc, #444]	; (20000ffc <run+0x1fc>)
20000e40:	2200      	movs	r2, #0
20000e42:	68a1      	ldr	r1, [r4, #8]
20000e44:	4870      	ldr	r0, [pc, #448]	; (20001008 <run+0x208>)
20000e46:	f000 f946 	bl	200010d6 <do_test>
20000e4a:	2201      	movs	r2, #1
20000e4c:	68a1      	ldr	r1, [r4, #8]
20000e4e:	486f      	ldr	r0, [pc, #444]	; (2000100c <run+0x20c>)
20000e50:	f000 f941 	bl	200010d6 <do_test>
20000e54:	2202      	movs	r2, #2
20000e56:	68a1      	ldr	r1, [r4, #8]
20000e58:	486d      	ldr	r0, [pc, #436]	; (20001010 <run+0x210>)
20000e5a:	f000 f93c 	bl	200010d6 <do_test>
20000e5e:	2203      	movs	r2, #3
20000e60:	68a1      	ldr	r1, [r4, #8]
20000e62:	486c      	ldr	r0, [pc, #432]	; (20001014 <run+0x214>)
20000e64:	f000 f937 	bl	200010d6 <do_test>
20000e68:	2204      	movs	r2, #4
20000e6a:	68a1      	ldr	r1, [r4, #8]
20000e6c:	486a      	ldr	r0, [pc, #424]	; (20001018 <run+0x218>)
20000e6e:	f000 f932 	bl	200010d6 <do_test>
20000e72:	2205      	movs	r2, #5
20000e74:	68a1      	ldr	r1, [r4, #8]
20000e76:	4869      	ldr	r0, [pc, #420]	; (2000101c <run+0x21c>)
20000e78:	f000 f92d 	bl	200010d6 <do_test>
20000e7c:	2206      	movs	r2, #6
20000e7e:	68a1      	ldr	r1, [r4, #8]
20000e80:	4867      	ldr	r0, [pc, #412]	; (20001020 <run+0x220>)
20000e82:	f000 f928 	bl	200010d6 <do_test>
20000e86:	2207      	movs	r2, #7
20000e88:	68a1      	ldr	r1, [r4, #8]
20000e8a:	4866      	ldr	r0, [pc, #408]	; (20001024 <run+0x224>)
20000e8c:	f000 f923 	bl	200010d6 <do_test>
20000e90:	2208      	movs	r2, #8
20000e92:	68a1      	ldr	r1, [r4, #8]
20000e94:	4864      	ldr	r0, [pc, #400]	; (20001028 <run+0x228>)
20000e96:	f000 f91e 	bl	200010d6 <do_test>
20000e9a:	2209      	movs	r2, #9
20000e9c:	68a1      	ldr	r1, [r4, #8]
20000e9e:	4863      	ldr	r0, [pc, #396]	; (2000102c <run+0x22c>)
20000ea0:	f000 f919 	bl	200010d6 <do_test>
20000ea4:	220a      	movs	r2, #10
20000ea6:	68a1      	ldr	r1, [r4, #8]
20000ea8:	4861      	ldr	r0, [pc, #388]	; (20001030 <run+0x230>)
20000eaa:	f000 f914 	bl	200010d6 <do_test>
20000eae:	220b      	movs	r2, #11
20000eb0:	68a1      	ldr	r1, [r4, #8]
20000eb2:	4860      	ldr	r0, [pc, #384]	; (20001034 <run+0x234>)
20000eb4:	f000 f90f 	bl	200010d6 <do_test>
20000eb8:	220c      	movs	r2, #12
20000eba:	68a1      	ldr	r1, [r4, #8]
20000ebc:	485e      	ldr	r0, [pc, #376]	; (20001038 <run+0x238>)
20000ebe:	f000 f90a 	bl	200010d6 <do_test>
20000ec2:	220d      	movs	r2, #13
20000ec4:	68a1      	ldr	r1, [r4, #8]
20000ec6:	485d      	ldr	r0, [pc, #372]	; (2000103c <run+0x23c>)
20000ec8:	f000 f905 	bl	200010d6 <do_test>
20000ecc:	220e      	movs	r2, #14
20000ece:	68a1      	ldr	r1, [r4, #8]
20000ed0:	485b      	ldr	r0, [pc, #364]	; (20001040 <run+0x240>)
20000ed2:	f000 f900 	bl	200010d6 <do_test>
20000ed6:	220f      	movs	r2, #15
20000ed8:	68a1      	ldr	r1, [r4, #8]
20000eda:	485a      	ldr	r0, [pc, #360]	; (20001044 <run+0x244>)
20000edc:	f000 f8fb 	bl	200010d6 <do_test>
20000ee0:	2210      	movs	r2, #16
20000ee2:	68a1      	ldr	r1, [r4, #8]
20000ee4:	4858      	ldr	r0, [pc, #352]	; (20001048 <run+0x248>)
20000ee6:	f000 f8f6 	bl	200010d6 <do_test>
20000eea:	2211      	movs	r2, #17
20000eec:	68a1      	ldr	r1, [r4, #8]
20000eee:	4857      	ldr	r0, [pc, #348]	; (2000104c <run+0x24c>)
20000ef0:	f000 f8f1 	bl	200010d6 <do_test>
20000ef4:	2212      	movs	r2, #18
20000ef6:	68a1      	ldr	r1, [r4, #8]
20000ef8:	4855      	ldr	r0, [pc, #340]	; (20001050 <run+0x250>)
20000efa:	f000 f8ec 	bl	200010d6 <do_test>
20000efe:	2213      	movs	r2, #19
20000f00:	68a1      	ldr	r1, [r4, #8]
20000f02:	4854      	ldr	r0, [pc, #336]	; (20001054 <run+0x254>)
20000f04:	f000 f8e7 	bl	200010d6 <do_test>
20000f08:	2214      	movs	r2, #20
20000f0a:	68a1      	ldr	r1, [r4, #8]
20000f0c:	4852      	ldr	r0, [pc, #328]	; (20001058 <run+0x258>)
20000f0e:	f000 f8e2 	bl	200010d6 <do_test>
20000f12:	2215      	movs	r2, #21
20000f14:	68a1      	ldr	r1, [r4, #8]
20000f16:	4851      	ldr	r0, [pc, #324]	; (2000105c <run+0x25c>)
20000f18:	f000 f8dd 	bl	200010d6 <do_test>
20000f1c:	2216      	movs	r2, #22
20000f1e:	68a1      	ldr	r1, [r4, #8]
20000f20:	484f      	ldr	r0, [pc, #316]	; (20001060 <run+0x260>)
20000f22:	f000 f8d8 	bl	200010d6 <do_test>
20000f26:	2217      	movs	r2, #23
20000f28:	68a1      	ldr	r1, [r4, #8]
20000f2a:	484e      	ldr	r0, [pc, #312]	; (20001064 <run+0x264>)
20000f2c:	f000 f8d3 	bl	200010d6 <do_test>
20000f30:	2218      	movs	r2, #24
20000f32:	68a1      	ldr	r1, [r4, #8]
20000f34:	484c      	ldr	r0, [pc, #304]	; (20001068 <run+0x268>)
20000f36:	f000 f8ce 	bl	200010d6 <do_test>
20000f3a:	2219      	movs	r2, #25
20000f3c:	68a1      	ldr	r1, [r4, #8]
20000f3e:	484b      	ldr	r0, [pc, #300]	; (2000106c <run+0x26c>)
20000f40:	f000 f8c9 	bl	200010d6 <do_test>
20000f44:	221a      	movs	r2, #26
20000f46:	68a1      	ldr	r1, [r4, #8]
20000f48:	4849      	ldr	r0, [pc, #292]	; (20001070 <run+0x270>)
20000f4a:	f000 f8c4 	bl	200010d6 <do_test>
20000f4e:	221b      	movs	r2, #27
20000f50:	68a1      	ldr	r1, [r4, #8]
20000f52:	4848      	ldr	r0, [pc, #288]	; (20001074 <run+0x274>)
20000f54:	f000 f8bf 	bl	200010d6 <do_test>
20000f58:	221c      	movs	r2, #28
20000f5a:	68a1      	ldr	r1, [r4, #8]
20000f5c:	4846      	ldr	r0, [pc, #280]	; (20001078 <run+0x278>)
20000f5e:	f000 f8ba 	bl	200010d6 <do_test>
20000f62:	221d      	movs	r2, #29
20000f64:	68a1      	ldr	r1, [r4, #8]
20000f66:	4845      	ldr	r0, [pc, #276]	; (2000107c <run+0x27c>)
20000f68:	f000 f8b5 	bl	200010d6 <do_test>
20000f6c:	221e      	movs	r2, #30
20000f6e:	68a1      	ldr	r1, [r4, #8]
20000f70:	4843      	ldr	r0, [pc, #268]	; (20001080 <run+0x280>)
20000f72:	f000 f8b0 	bl	200010d6 <do_test>
20000f76:	221f      	movs	r2, #31
20000f78:	68a1      	ldr	r1, [r4, #8]
20000f7a:	4842      	ldr	r0, [pc, #264]	; (20001084 <run+0x284>)
20000f7c:	f000 f8ab 	bl	200010d6 <do_test>
20000f80:	2220      	movs	r2, #32
20000f82:	68a1      	ldr	r1, [r4, #8]
20000f84:	4840      	ldr	r0, [pc, #256]	; (20001088 <run+0x288>)
20000f86:	f000 f8a6 	bl	200010d6 <do_test>
20000f8a:	2221      	movs	r2, #33	; 0x21
20000f8c:	68a1      	ldr	r1, [r4, #8]
20000f8e:	483f      	ldr	r0, [pc, #252]	; (2000108c <run+0x28c>)
20000f90:	f000 f8a1 	bl	200010d6 <do_test>
20000f94:	2222      	movs	r2, #34	; 0x22
20000f96:	68a1      	ldr	r1, [r4, #8]
20000f98:	483d      	ldr	r0, [pc, #244]	; (20001090 <run+0x290>)
20000f9a:	f000 f89c 	bl	200010d6 <do_test>
20000f9e:	2223      	movs	r2, #35	; 0x23
20000fa0:	68a1      	ldr	r1, [r4, #8]
20000fa2:	483c      	ldr	r0, [pc, #240]	; (20001094 <run+0x294>)
20000fa4:	f000 f897 	bl	200010d6 <do_test>
20000fa8:	2224      	movs	r2, #36	; 0x24
20000faa:	68a1      	ldr	r1, [r4, #8]
20000fac:	483a      	ldr	r0, [pc, #232]	; (20001098 <run+0x298>)
20000fae:	f000 f892 	bl	200010d6 <do_test>
20000fb2:	2225      	movs	r2, #37	; 0x25
20000fb4:	6961      	ldr	r1, [r4, #20]
20000fb6:	4839      	ldr	r0, [pc, #228]	; (2000109c <run+0x29c>)
20000fb8:	f000 f88d 	bl	200010d6 <do_test>
20000fbc:	2226      	movs	r2, #38	; 0x26
20000fbe:	6961      	ldr	r1, [r4, #20]
20000fc0:	4837      	ldr	r0, [pc, #220]	; (200010a0 <run+0x2a0>)
20000fc2:	f000 f888 	bl	200010d6 <do_test>
20000fc6:	2227      	movs	r2, #39	; 0x27
20000fc8:	6961      	ldr	r1, [r4, #20]
20000fca:	4836      	ldr	r0, [pc, #216]	; (200010a4 <run+0x2a4>)
20000fcc:	f000 f883 	bl	200010d6 <do_test>
20000fd0:	2228      	movs	r2, #40	; 0x28
20000fd2:	68a1      	ldr	r1, [r4, #8]
20000fd4:	4834      	ldr	r0, [pc, #208]	; (200010a8 <run+0x2a8>)
20000fd6:	f000 f87e 	bl	200010d6 <do_test>
20000fda:	2229      	movs	r2, #41	; 0x29
20000fdc:	68a1      	ldr	r1, [r4, #8]
20000fde:	4833      	ldr	r0, [pc, #204]	; (200010ac <run+0x2ac>)
20000fe0:	f000 f879 	bl	200010d6 <do_test>
20000fe4:	222a      	movs	r2, #42	; 0x2a
20000fe6:	68a1      	ldr	r1, [r4, #8]
20000fe8:	4831      	ldr	r0, [pc, #196]	; (200010b0 <run+0x2b0>)
20000fea:	f000 f874 	bl	200010d6 <do_test>
20000fee:	222b      	movs	r2, #43	; 0x2b
20000ff0:	68a1      	ldr	r1, [r4, #8]
20000ff2:	4830      	ldr	r0, [pc, #192]	; (200010b4 <run+0x2b4>)
20000ff4:	f000 f86f 	bl	200010d6 <do_test>
20000ff8:	bd10      	pop	{r4, pc}
20000ffa:	bf00      	nop
20000ffc:	20001224 	.word	0x20001224
20001000:	20002484 	.word	0x20002484
20001004:	200023e4 	.word	0x200023e4
20001008:	200000ed 	.word	0x200000ed
2000100c:	200000f9 	.word	0x200000f9
20001010:	20000105 	.word	0x20000105
20001014:	20000115 	.word	0x20000115
20001018:	20000125 	.word	0x20000125
2000101c:	20000135 	.word	0x20000135
20001020:	20000145 	.word	0x20000145
20001024:	20000155 	.word	0x20000155
20001028:	20000165 	.word	0x20000165
2000102c:	20000175 	.word	0x20000175
20001030:	20000185 	.word	0x20000185
20001034:	20000191 	.word	0x20000191
20001038:	2000019d 	.word	0x2000019d
2000103c:	200001a9 	.word	0x200001a9
20001040:	200001b5 	.word	0x200001b5
20001044:	200001c5 	.word	0x200001c5
20001048:	200001d5 	.word	0x200001d5
2000104c:	200001e5 	.word	0x200001e5
20001050:	200001f5 	.word	0x200001f5
20001054:	20000209 	.word	0x20000209
20001058:	2000021d 	.word	0x2000021d
2000105c:	2000022d 	.word	0x2000022d
20001060:	2000023d 	.word	0x2000023d
20001064:	20000255 	.word	0x20000255
20001068:	2000026d 	.word	0x2000026d
2000106c:	20000279 	.word	0x20000279
20001070:	20000285 	.word	0x20000285
20001074:	20000295 	.word	0x20000295
20001078:	200002a5 	.word	0x200002a5
2000107c:	200002b1 	.word	0x200002b1
20001080:	200002bd 	.word	0x200002bd
20001084:	200002c9 	.word	0x200002c9
20001088:	200002d5 	.word	0x200002d5
2000108c:	200002e5 	.word	0x200002e5
20001090:	200002f9 	.word	0x200002f9
20001094:	20000321 	.word	0x20000321
20001098:	20000341 	.word	0x20000341
2000109c:	20000365 	.word	0x20000365
200010a0:	20000381 	.word	0x20000381
200010a4:	200003a5 	.word	0x200003a5
200010a8:	200003c9 	.word	0x200003c9
200010ac:	200003f9 	.word	0x200003f9
200010b0:	20000425 	.word	0x20000425
200010b4:	20000449 	.word	0x20000449

200010b8 <memset>:
200010b8:	4402      	add	r2, r0
200010ba:	4290      	cmp	r0, r2
200010bc:	d20a      	bcs.n	200010d4 <memset+0x1c>
200010be:	b410      	push	{r4}
200010c0:	4604      	mov	r4, r0
200010c2:	b2c9      	uxtb	r1, r1
200010c4:	4623      	mov	r3, r4
200010c6:	f803 1b01 	strb.w	r1, [r3], #1
200010ca:	461c      	mov	r4, r3
200010cc:	429a      	cmp	r2, r3
200010ce:	d1f9      	bne.n	200010c4 <memset+0xc>
200010d0:	bc10      	pop	{r4}
200010d2:	4770      	bx	lr
200010d4:	4770      	bx	lr

200010d6 <do_test>:
200010d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
200010da:	4607      	mov	r7, r0
200010dc:	460e      	mov	r6, r1
200010de:	4614      	mov	r4, r2
200010e0:	4b16      	ldr	r3, [pc, #88]	; (2000113c <do_test+0x66>)
200010e2:	2200      	movs	r2, #0
200010e4:	601a      	str	r2, [r3, #0]
200010e6:	609a      	str	r2, [r3, #8]
200010e8:	2205      	movs	r2, #5
200010ea:	601a      	str	r2, [r3, #0]
200010ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
200010f0:	605a      	str	r2, [r3, #4]
200010f2:	689b      	ldr	r3, [r3, #8]
200010f4:	b923      	cbnz	r3, 20001100 <do_test+0x2a>
200010f6:	4a11      	ldr	r2, [pc, #68]	; (2000113c <do_test+0x66>)
200010f8:	bf00      	nop
200010fa:	6893      	ldr	r3, [r2, #8]
200010fc:	2b00      	cmp	r3, #0
200010fe:	d0fb      	beq.n	200010f8 <do_test+0x22>
20001100:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2000113c <do_test+0x66>
20001104:	f8d8 5008 	ldr.w	r5, [r8, #8]
20001108:	2300      	movs	r3, #0
2000110a:	6033      	str	r3, [r6, #0]
2000110c:	47b8      	blx	r7
2000110e:	0064      	lsls	r4, r4, #1
20001110:	6833      	ldr	r3, [r6, #0]
20001112:	f8df 9030 	ldr.w	r9, [pc, #48]	; 20001144 <do_test+0x6e>
20001116:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
2000111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000111e:	6033      	str	r3, [r6, #0]
20001120:	47b8      	blx	r7
20001122:	6833      	ldr	r3, [r6, #0]
20001124:	3401      	adds	r4, #1
20001126:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
2000112a:	f8d8 1008 	ldr.w	r1, [r8, #8]
2000112e:	4a04      	ldr	r2, [pc, #16]	; (20001140 <do_test+0x6a>)
20001130:	6813      	ldr	r3, [r2, #0]
20001132:	442b      	add	r3, r5
20001134:	1a5b      	subs	r3, r3, r1
20001136:	6013      	str	r3, [r2, #0]
20001138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000113c:	e000e010 	.word	0xe000e010
20001140:	2000124c 	.word	0x2000124c
20001144:	20001250 	.word	0x20001250

20001148 <main>:
20001148:	b500      	push	{lr}
2000114a:	f7ff fe59 	bl	20000e00 <run>
2000114e:	bf00      	nop
20001150:	e7fd      	b.n	2000114e <main+0x6>
20001152:	bf00      	nop

20001154 <NMI_Handler>:
20001154:	e7fe      	b.n	20001154 <NMI_Handler>

20001156 <HardFault_Handler>:
20001156:	e7fe      	b.n	20001156 <HardFault_Handler>

20001158 <MemManage_Handler>:
20001158:	e7fe      	b.n	20001158 <MemManage_Handler>

2000115a <BusFault_Handler>:
2000115a:	e7fe      	b.n	2000115a <BusFault_Handler>

2000115c <UsageFault_Handler>:
2000115c:	e7fe      	b.n	2000115c <UsageFault_Handler>

2000115e <Reserved1_Handler>:
2000115e:	e7fe      	b.n	2000115e <Reserved1_Handler>

20001160 <Reserved2_Handler>:
20001160:	e7fe      	b.n	20001160 <Reserved2_Handler>

20001162 <Reserved3_Handler>:
20001162:	e7fe      	b.n	20001162 <Reserved3_Handler>

20001164 <Reserved4_Handler>:
20001164:	e7fe      	b.n	20001164 <Reserved4_Handler>

20001166 <SVCall_Handler>:
20001166:	e7fe      	b.n	20001166 <SVCall_Handler>

20001168 <Debug_Handler>:
20001168:	e7fe      	b.n	20001168 <Debug_Handler>

2000116a <Reserved5_Handler>:
2000116a:	e7fe      	b.n	2000116a <Reserved5_Handler>

2000116c <PendSV_Handler>:
2000116c:	e7fe      	b.n	2000116c <PendSV_Handler>

2000116e <SysTick_Handler>:
2000116e:	e7fe      	b.n	2000116e <SysTick_Handler>

20001170 <WWDG_IRQHandler>:
20001170:	e7fe      	b.n	20001170 <WWDG_IRQHandler>

20001172 <PVD_IRQHandler>:
20001172:	e7fe      	b.n	20001172 <PVD_IRQHandler>

20001174 <TAMPER_IRQHandler>:
20001174:	e7fe      	b.n	20001174 <TAMPER_IRQHandler>

20001176 <RTC_IRQHandler>:
20001176:	e7fe      	b.n	20001176 <RTC_IRQHandler>

20001178 <FLASH_IRQHandler>:
20001178:	e7fe      	b.n	20001178 <FLASH_IRQHandler>

2000117a <RCC_IRQHandler>:
2000117a:	e7fe      	b.n	2000117a <RCC_IRQHandler>

2000117c <EXTI0_IRQHandler>:
2000117c:	e7fe      	b.n	2000117c <EXTI0_IRQHandler>

2000117e <EXTI1_IRQHandler>:
2000117e:	e7fe      	b.n	2000117e <EXTI1_IRQHandler>

20001180 <EXTI2_IRQHandler>:
20001180:	e7fe      	b.n	20001180 <EXTI2_IRQHandler>

20001182 <EXTI3_IRQHandler>:
20001182:	e7fe      	b.n	20001182 <EXTI3_IRQHandler>

20001184 <EXTI4_IRQHandler>:
20001184:	e7fe      	b.n	20001184 <EXTI4_IRQHandler>

20001186 <DMA1_Channel1_IRQHandler>:
20001186:	e7fe      	b.n	20001186 <DMA1_Channel1_IRQHandler>

20001188 <DMA1_Channel2_IRQHandler>:
20001188:	e7fe      	b.n	20001188 <DMA1_Channel2_IRQHandler>

2000118a <DMA1_Channel3_IRQHandler>:
2000118a:	e7fe      	b.n	2000118a <DMA1_Channel3_IRQHandler>

2000118c <DMA1_Channel4_IRQHandler>:
2000118c:	e7fe      	b.n	2000118c <DMA1_Channel4_IRQHandler>

2000118e <DMA1_Channel5_IRQHandler>:
2000118e:	e7fe      	b.n	2000118e <DMA1_Channel5_IRQHandler>

20001190 <DMA1_Channel6_IRQHandler>:
20001190:	e7fe      	b.n	20001190 <DMA1_Channel6_IRQHandler>

20001192 <DMA1_Channel7_IRQHandler>:
20001192:	e7fe      	b.n	20001192 <DMA1_Channel7_IRQHandler>

20001194 <ADC1_2_IRQHandler>:
20001194:	e7fe      	b.n	20001194 <ADC1_2_IRQHandler>

20001196 <USB_HP_CAN1_TX_IRQHandle>:
20001196:	e7fe      	b.n	20001196 <USB_HP_CAN1_TX_IRQHandle>

20001198 <USB_LP_CAN1_RX0_IRQHandler>:
20001198:	e7fe      	b.n	20001198 <USB_LP_CAN1_RX0_IRQHandler>

2000119a <CAN1_RX1_IRQHandler>:
2000119a:	e7fe      	b.n	2000119a <CAN1_RX1_IRQHandler>

2000119c <CAN1_SCE_IRQHandler>:
2000119c:	e7fe      	b.n	2000119c <CAN1_SCE_IRQHandler>

2000119e <EXTI9_5_IRQHandler>:
2000119e:	e7fe      	b.n	2000119e <EXTI9_5_IRQHandler>

200011a0 <TIM1_BRK_IRQHandler>:
200011a0:	e7fe      	b.n	200011a0 <TIM1_BRK_IRQHandler>

200011a2 <TIM1_UP_IRQHandler>:
200011a2:	e7fe      	b.n	200011a2 <TIM1_UP_IRQHandler>

200011a4 <TIM1_TRG_COM_IRQHandler>:
200011a4:	e7fe      	b.n	200011a4 <TIM1_TRG_COM_IRQHandler>

200011a6 <TIM1_CC_IRQHandler>:
200011a6:	e7fe      	b.n	200011a6 <TIM1_CC_IRQHandler>

200011a8 <TIM2_IRQHandler>:
200011a8:	e7fe      	b.n	200011a8 <TIM2_IRQHandler>

200011aa <TIM3_IRQHandler>:
200011aa:	e7fe      	b.n	200011aa <TIM3_IRQHandler>

200011ac <TIM4_IRQHandler>:
200011ac:	e7fe      	b.n	200011ac <TIM4_IRQHandler>

200011ae <I2C1_EV_IRQHandler>:
200011ae:	e7fe      	b.n	200011ae <I2C1_EV_IRQHandler>

200011b0 <I2C1_ER_IRQHandler>:
200011b0:	e7fe      	b.n	200011b0 <I2C1_ER_IRQHandler>

200011b2 <I2C2_EV_IRQHandler>:
200011b2:	e7fe      	b.n	200011b2 <I2C2_EV_IRQHandler>

200011b4 <I2C2_ER_IRQHandler>:
200011b4:	e7fe      	b.n	200011b4 <I2C2_ER_IRQHandler>

200011b6 <SPI1_IRQHandler>:
200011b6:	e7fe      	b.n	200011b6 <SPI1_IRQHandler>

200011b8 <SPI2_IRQHandler>:
200011b8:	e7fe      	b.n	200011b8 <SPI2_IRQHandler>

200011ba <USART1_IRQHandler>:
200011ba:	e7fe      	b.n	200011ba <USART1_IRQHandler>

200011bc <USART2_IRQHandler>:
200011bc:	e7fe      	b.n	200011bc <USART2_IRQHandler>

200011be <USART3_IRQHandler>:
200011be:	e7fe      	b.n	200011be <USART3_IRQHandler>

200011c0 <EXTI15_10_IRQHandler>:
200011c0:	e7fe      	b.n	200011c0 <EXTI15_10_IRQHandler>

200011c2 <RTC_Alarm_IRQHandler>:
200011c2:	e7fe      	b.n	200011c2 <RTC_Alarm_IRQHandler>

200011c4 <USBWakeUp_IRQHandler>:
200011c4:	e7fe      	b.n	200011c4 <USBWakeUp_IRQHandler>

200011c6 <init>:
200011c6:	4668      	mov	r0, sp
200011c8:	f020 0107 	bic.w	r1, r0, #7
200011cc:	468d      	mov	sp, r1
200011ce:	b501      	push	{r0, lr}
200011d0:	4a08      	ldr	r2, [pc, #32]	; (200011f4 <init+0x2e>)
200011d2:	4b09      	ldr	r3, [pc, #36]	; (200011f8 <init+0x32>)
200011d4:	429a      	cmp	r2, r3
200011d6:	d004      	beq.n	200011e2 <init+0x1c>
200011d8:	2100      	movs	r1, #0
200011da:	f803 1b01 	strb.w	r1, [r3], #1
200011de:	4293      	cmp	r3, r2
200011e0:	d1fb      	bne.n	200011da <init+0x14>
200011e2:	4a06      	ldr	r2, [pc, #24]	; (200011fc <init+0x36>)
200011e4:	4b06      	ldr	r3, [pc, #24]	; (20001200 <init+0x3a>)
200011e6:	609a      	str	r2, [r3, #8]
200011e8:	f7ff ffae 	bl	20001148 <main>
200011ec:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200011f0:	4685      	mov	sp, r0
200011f2:	4770      	bx	lr
200011f4:	200015f0 	.word	0x200015f0
200011f8:	20001224 	.word	0x20001224
200011fc:	20000000 	.word	0x20000000
20001200:	e000ed00 	.word	0xe000ed00

Disassembly of section .rodata:

20001204 <app_config::TIMER_PRESCALER_SHIFT-0x8>:
20001204:	00000006 	.word	0x00000006
20001208:	00000002 	.word	0x00000002

2000120c <app_config::TIMER_PRESCALER_SHIFT>:
2000120c:	3e000000 00000019 3e000000 00000019     ...>.......>....
2000121c:	3e000000 00000019                       ...>....

Disassembly of section .bss:

20001224 <guard variable for run::serial2_config>:
	...

2000122c <run::serial2_config>:
2000122c:	00000000                                ....

20001230 <guard variable for run::timer1_prescale>:
	...

20001238 <run::timer1_prescale>:
20001238:	00000000                                ....

2000123c <guard variable for run::gpio1_words_3>:
	...

20001244 <guard variable for run::gpio1_set>:
	...

2000124c <elapsed_time>:
2000124c:	00000000                                ....

20001250 <results>:
	...
