
regbits.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <INTERRUPT_VECTORS>:
20000000:	00 50 00 20 29 15 00 20 45 14 00 20 49 14 00 20     .P. ).. E.. I.. 
20000010:	4d 14 00 20 51 14 00 20 55 14 00 20 59 14 00 20     M.. Q.. U.. Y.. 
20000020:	5d 14 00 20 61 14 00 20 65 14 00 20 69 14 00 20     ].. a.. e.. i.. 
20000030:	6d 14 00 20 71 14 00 20 75 14 00 20 79 14 00 20     m.. q.. u.. y.. 
20000040:	7d 14 00 20 81 14 00 20 85 14 00 20 89 14 00 20     }.. ... ... ... 
20000050:	8d 14 00 20 91 14 00 20 95 14 00 20 99 14 00 20     ... ... ... ... 
20000060:	9d 14 00 20 a1 14 00 20 a5 14 00 20 a9 14 00 20     ... ... ... ... 
20000070:	ad 14 00 20 b1 14 00 20 b5 14 00 20 b9 14 00 20     ... ... ... ... 
20000080:	bd 14 00 20 c1 14 00 20 c5 14 00 20 c9 14 00 20     ... ... ... ... 
20000090:	cd 14 00 20 d1 14 00 20 d5 14 00 20 d9 14 00 20     ... ... ... ... 
200000a0:	dd 14 00 20 e1 14 00 20 e5 14 00 20 e9 14 00 20     ... ... ... ... 
200000b0:	ed 14 00 20 f1 14 00 20 f5 14 00 20 f9 14 00 20     ... ... ... ... 
200000c0:	fd 14 00 20 01 15 00 20 05 15 00 20 09 15 00 20     ... ... ... ... 
200000d0:	0d 15 00 20 11 15 00 20 15 15 00 20 19 15 00 20     ... ... ... ... 
200000e0:	1d 15 00 20 21 15 00 20 25 15 00 20                 ... !.. %.. 

200000ec <zero_reg()>:
200000ec:	2200      	movs	r2, #0
200000ee:	4b01      	ldr	r3, [pc, #4]	; (200000f4 <zero_reg()+0x8>)
200000f0:	605a      	str	r2, [r3, #4]
200000f2:	4770      	bx	lr
200000f4:	20002480 	.word	0x20002480

200000f8 <zero_array()>:
200000f8:	2200      	movs	r2, #0
200000fa:	4b01      	ldr	r3, [pc, #4]	; (20000100 <zero_array()+0x8>)
200000fc:	62da      	str	r2, [r3, #44]	; 0x2c
200000fe:	4770      	bx	lr
20000100:	200022c0 	.word	0x200022c0

20000104 <set_singl_bits_operator()>:
20000104:	4a02      	ldr	r2, [pc, #8]	; (20000110 <set_singl_bits_operator()+0xc>)
20000106:	6853      	ldr	r3, [r2, #4]
20000108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000010c:	6053      	str	r3, [r2, #4]
2000010e:	4770      	bx	lr
20000110:	20002480 	.word	0x20002480

20000114 <set_singl_bits_method()>:
20000114:	4a02      	ldr	r2, [pc, #8]	; (20000120 <set_singl_bits_method()+0xc>)
20000116:	6853      	ldr	r3, [r2, #4]
20000118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000011c:	6053      	str	r3, [r2, #4]
2000011e:	4770      	bx	lr
20000120:	20002480 	.word	0x20002480

20000124 <clr_singl_bits_operator()>:
20000124:	4a02      	ldr	r2, [pc, #8]	; (20000130 <clr_singl_bits_operator()+0xc>)
20000126:	6853      	ldr	r3, [r2, #4]
20000128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000012c:	6053      	str	r3, [r2, #4]
2000012e:	4770      	bx	lr
20000130:	20002480 	.word	0x20002480

20000134 <clr_singl_bits_method()>:
20000134:	4a02      	ldr	r2, [pc, #8]	; (20000140 <clr_singl_bits_method()+0xc>)
20000136:	6853      	ldr	r3, [r2, #4]
20000138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000013c:	6053      	str	r3, [r2, #4]
2000013e:	4770      	bx	lr
20000140:	20002480 	.word	0x20002480

20000144 <set_singl_mskd_operator()>:
20000144:	4a02      	ldr	r2, [pc, #8]	; (20000150 <set_singl_mskd_operator()+0xc>)
20000146:	6853      	ldr	r3, [r2, #4]
20000148:	f043 0302 	orr.w	r3, r3, #2
2000014c:	6053      	str	r3, [r2, #4]
2000014e:	4770      	bx	lr
20000150:	20002480 	.word	0x20002480

20000154 <set_singl_mskd_method()>:
20000154:	4a02      	ldr	r2, [pc, #8]	; (20000160 <set_singl_mskd_method()+0xc>)
20000156:	6853      	ldr	r3, [r2, #4]
20000158:	f043 0302 	orr.w	r3, r3, #2
2000015c:	6053      	str	r3, [r2, #4]
2000015e:	4770      	bx	lr
20000160:	20002480 	.word	0x20002480

20000164 <clr_singl_mskd_operator()>:
20000164:	4a02      	ldr	r2, [pc, #8]	; (20000170 <clr_singl_mskd_operator()+0xc>)
20000166:	6853      	ldr	r3, [r2, #4]
20000168:	f023 0302 	bic.w	r3, r3, #2
2000016c:	6053      	str	r3, [r2, #4]
2000016e:	4770      	bx	lr
20000170:	20002480 	.word	0x20002480

20000174 <clr_singl_mskd_method()>:
20000174:	4a02      	ldr	r2, [pc, #8]	; (20000180 <clr_singl_mskd_method()+0xc>)
20000176:	6853      	ldr	r3, [r2, #4]
20000178:	f023 0302 	bic.w	r3, r3, #2
2000017c:	6053      	str	r3, [r2, #4]
2000017e:	4770      	bx	lr
20000180:	20002480 	.word	0x20002480

20000184 <equ_singl_bits_operator()>:
20000184:	2240      	movs	r2, #64	; 0x40
20000186:	4b01      	ldr	r3, [pc, #4]	; (2000018c <equ_singl_bits_operator()+0x8>)
20000188:	605a      	str	r2, [r3, #4]
2000018a:	4770      	bx	lr
2000018c:	20002480 	.word	0x20002480

20000190 <equ_singl_bits_method()>:
20000190:	2240      	movs	r2, #64	; 0x40
20000192:	4b01      	ldr	r3, [pc, #4]	; (20000198 <equ_singl_bits_method()+0x8>)
20000194:	605a      	str	r2, [r3, #4]
20000196:	4770      	bx	lr
20000198:	20002480 	.word	0x20002480

2000019c <equ_singl_mskd_operator()>:
2000019c:	2202      	movs	r2, #2
2000019e:	4b01      	ldr	r3, [pc, #4]	; (200001a4 <equ_singl_mskd_operator()+0x8>)
200001a0:	605a      	str	r2, [r3, #4]
200001a2:	4770      	bx	lr
200001a4:	20002480 	.word	0x20002480

200001a8 <equ_singl_mskd_method()>:
200001a8:	2202      	movs	r2, #2
200001aa:	4b01      	ldr	r3, [pc, #4]	; (200001b0 <equ_singl_mskd_method()+0x8>)
200001ac:	605a      	str	r2, [r3, #4]
200001ae:	4770      	bx	lr
200001b0:	20002480 	.word	0x20002480

200001b4 <flp_singl_bits_operator()>:
200001b4:	4a02      	ldr	r2, [pc, #8]	; (200001c0 <flp_singl_bits_operator()+0xc>)
200001b6:	6853      	ldr	r3, [r2, #4]
200001b8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001bc:	6053      	str	r3, [r2, #4]
200001be:	4770      	bx	lr
200001c0:	20002480 	.word	0x20002480

200001c4 <flp_singl_bits_method()>:
200001c4:	4a02      	ldr	r2, [pc, #8]	; (200001d0 <flp_singl_bits_method()+0xc>)
200001c6:	6853      	ldr	r3, [r2, #4]
200001c8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001cc:	6053      	str	r3, [r2, #4]
200001ce:	4770      	bx	lr
200001d0:	20002480 	.word	0x20002480

200001d4 <flp_singl_mskd_operator()>:
200001d4:	4a02      	ldr	r2, [pc, #8]	; (200001e0 <flp_singl_mskd_operator()+0xc>)
200001d6:	6853      	ldr	r3, [r2, #4]
200001d8:	f083 0302 	eor.w	r3, r3, #2
200001dc:	6053      	str	r3, [r2, #4]
200001de:	4770      	bx	lr
200001e0:	20002480 	.word	0x20002480

200001e4 <flp_singl_mskd_method()>:
200001e4:	4a02      	ldr	r2, [pc, #8]	; (200001f0 <flp_singl_mskd_method()+0xc>)
200001e6:	6853      	ldr	r3, [r2, #4]
200001e8:	f083 0302 	eor.w	r3, r3, #2
200001ec:	6053      	str	r3, [r2, #4]
200001ee:	4770      	bx	lr
200001f0:	20002480 	.word	0x20002480

200001f4 <ins_singl_mskd_operator()>:
200001f4:	4a03      	ldr	r2, [pc, #12]	; (20000204 <ins_singl_mskd_operator()+0x10>)
200001f6:	6853      	ldr	r3, [r2, #4]
200001f8:	f023 0306 	bic.w	r3, r3, #6
200001fc:	f043 0304 	orr.w	r3, r3, #4
20000200:	6053      	str	r3, [r2, #4]
20000202:	4770      	bx	lr
20000204:	20002480 	.word	0x20002480

20000208 <ins_singl_mskd_method()>:
20000208:	4a03      	ldr	r2, [pc, #12]	; (20000218 <ins_singl_mskd_method()+0x10>)
2000020a:	6853      	ldr	r3, [r2, #4]
2000020c:	f023 0306 	bic.w	r3, r3, #6
20000210:	f043 0304 	orr.w	r3, r3, #4
20000214:	6053      	str	r3, [r2, #4]
20000216:	4770      	bx	lr
20000218:	20002480 	.word	0x20002480

2000021c <set_multi_bits_operator()>:
2000021c:	4a02      	ldr	r2, [pc, #8]	; (20000228 <set_multi_bits_operator()+0xc>)
2000021e:	6853      	ldr	r3, [r2, #4]
20000220:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000224:	6053      	str	r3, [r2, #4]
20000226:	4770      	bx	lr
20000228:	20002480 	.word	0x20002480

2000022c <set_multi_bits_method()>:
2000022c:	4a02      	ldr	r2, [pc, #8]	; (20000238 <set_multi_bits_method()+0xc>)
2000022e:	6853      	ldr	r3, [r2, #4]
20000230:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000234:	6053      	str	r3, [r2, #4]
20000236:	4770      	bx	lr
20000238:	20002480 	.word	0x20002480

2000023c <ins_multi_mskd_operator()>:
2000023c:	4a04      	ldr	r2, [pc, #16]	; (20000250 <ins_multi_mskd_operator()+0x14>)
2000023e:	6853      	ldr	r3, [r2, #4]
20000240:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
20000244:	f023 0306 	bic.w	r3, r3, #6
20000248:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
2000024c:	6053      	str	r3, [r2, #4]
2000024e:	4770      	bx	lr
20000250:	20002480 	.word	0x20002480

20000254 <ins_multi_mskd_method()>:
20000254:	4a04      	ldr	r2, [pc, #16]	; (20000268 <ins_multi_mskd_method()+0x14>)
20000256:	6853      	ldr	r3, [r2, #4]
20000258:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
2000025c:	f023 0306 	bic.w	r3, r3, #6
20000260:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
20000264:	6053      	str	r3, [r2, #4]
20000266:	4770      	bx	lr
20000268:	20002480 	.word	0x20002480

2000026c <equ_multi_bits_operator()>:
2000026c:	2260      	movs	r2, #96	; 0x60
2000026e:	4b01      	ldr	r3, [pc, #4]	; (20000274 <equ_multi_bits_operator()+0x8>)
20000270:	605a      	str	r2, [r3, #4]
20000272:	4770      	bx	lr
20000274:	20002480 	.word	0x20002480

20000278 <equ_multi_bits_method()>:
20000278:	2260      	movs	r2, #96	; 0x60
2000027a:	4b01      	ldr	r3, [pc, #4]	; (20000280 <equ_multi_bits_method()+0x8>)
2000027c:	605a      	str	r2, [r3, #4]
2000027e:	4770      	bx	lr
20000280:	20002480 	.word	0x20002480

20000284 <equ_multi_mskd_operator()>:
20000284:	f44f 7242 	mov.w	r2, #776	; 0x308
20000288:	4b01      	ldr	r3, [pc, #4]	; (20000290 <equ_multi_mskd_operator()+0xc>)
2000028a:	605a      	str	r2, [r3, #4]
2000028c:	4770      	bx	lr
2000028e:	bf00      	nop
20000290:	20002480 	.word	0x20002480

20000294 <equ_multi_mskd_method()>:
20000294:	f44f 7242 	mov.w	r2, #776	; 0x308
20000298:	4b01      	ldr	r3, [pc, #4]	; (200002a0 <equ_multi_mskd_method()+0xc>)
2000029a:	605a      	str	r2, [r3, #4]
2000029c:	4770      	bx	lr
2000029e:	bf00      	nop
200002a0:	20002480 	.word	0x20002480

200002a4 <equ_bits_mskd_operator()>:
200002a4:	2222      	movs	r2, #34	; 0x22
200002a6:	4b01      	ldr	r3, [pc, #4]	; (200002ac <equ_bits_mskd_operator()+0x8>)
200002a8:	605a      	str	r2, [r3, #4]
200002aa:	4770      	bx	lr
200002ac:	20002480 	.word	0x20002480

200002b0 <equ_bits_mskd_method()>:
200002b0:	2222      	movs	r2, #34	; 0x22
200002b2:	4b01      	ldr	r3, [pc, #4]	; (200002b8 <equ_bits_mskd_method()+0x8>)
200002b4:	605a      	str	r2, [r3, #4]
200002b6:	4770      	bx	lr
200002b8:	20002480 	.word	0x20002480

200002bc <equ_mskd_bits_operator()>:
200002bc:	2244      	movs	r2, #68	; 0x44
200002be:	4b01      	ldr	r3, [pc, #4]	; (200002c4 <equ_mskd_bits_operator()+0x8>)
200002c0:	605a      	str	r2, [r3, #4]
200002c2:	4770      	bx	lr
200002c4:	20002480 	.word	0x20002480

200002c8 <equ_mskd_bits_method()>:
200002c8:	2244      	movs	r2, #68	; 0x44
200002ca:	4b01      	ldr	r3, [pc, #4]	; (200002d0 <equ_mskd_bits_method()+0x8>)
200002cc:	605a      	str	r2, [r3, #4]
200002ce:	4770      	bx	lr
200002d0:	20002480 	.word	0x20002480

200002d4 <equ_bits_var()>:
200002d4:	2140      	movs	r1, #64	; 0x40
200002d6:	2201      	movs	r2, #1
200002d8:	4b01      	ldr	r3, [pc, #4]	; (200002e0 <equ_bits_var()+0xc>)
200002da:	6059      	str	r1, [r3, #4]
200002dc:	605a      	str	r2, [r3, #4]
200002de:	4770      	bx	lr
200002e0:	20002480 	.word	0x20002480

200002e4 <equ_mskd_var()>:
200002e4:	2102      	movs	r1, #2
200002e6:	f44f 72c0 	mov.w	r2, #384	; 0x180
200002ea:	4b02      	ldr	r3, [pc, #8]	; (200002f4 <equ_mskd_var()+0x10>)
200002ec:	6059      	str	r1, [r3, #4]
200002ee:	605a      	str	r2, [r3, #4]
200002f0:	4770      	bx	lr
200002f2:	bf00      	nop
200002f4:	20002480 	.word	0x20002480

200002f8 <cmp_equ_zero()>:
200002f8:	2200      	movs	r2, #0
200002fa:	4b07      	ldr	r3, [pc, #28]	; (20000318 <cmp_equ_zero()+0x20>)
200002fc:	605a      	str	r2, [r3, #4]
200002fe:	685b      	ldr	r3, [r3, #4]
20000300:	b923      	cbnz	r3, 2000030c <cmp_equ_zero()+0x14>
20000302:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
20000306:	4b05      	ldr	r3, [pc, #20]	; (2000031c <cmp_equ_zero()+0x24>)
20000308:	605a      	str	r2, [r3, #4]
2000030a:	4770      	bx	lr
2000030c:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000310:	4b02      	ldr	r3, [pc, #8]	; (2000031c <cmp_equ_zero()+0x24>)
20000312:	605a      	str	r2, [r3, #4]
20000314:	4770      	bx	lr
20000316:	bf00      	nop
20000318:	20002480 	.word	0x20002480
2000031c:	200023e0 	.word	0x200023e0

20000320 <cmp_neq_zero()>:
20000320:	2200      	movs	r2, #0
20000322:	4b05      	ldr	r3, [pc, #20]	; (20000338 <cmp_neq_zero()+0x18>)
20000324:	605a      	str	r2, [r3, #4]
20000326:	685a      	ldr	r2, [r3, #4]
20000328:	b112      	cbz	r2, 20000330 <cmp_neq_zero()+0x10>
2000032a:	2204      	movs	r2, #4
2000032c:	605a      	str	r2, [r3, #4]
2000032e:	4770      	bx	lr
20000330:	2220      	movs	r2, #32
20000332:	605a      	str	r2, [r3, #4]
20000334:	4770      	bx	lr
20000336:	bf00      	nop
20000338:	20002480 	.word	0x20002480

2000033c <cmp_equ_bits()>:
2000033c:	2240      	movs	r2, #64	; 0x40
2000033e:	4b06      	ldr	r3, [pc, #24]	; (20000358 <cmp_equ_bits()+0x1c>)
20000340:	605a      	str	r2, [r3, #4]
20000342:	685b      	ldr	r3, [r3, #4]
20000344:	065b      	lsls	r3, r3, #25
20000346:	bf4c      	ite	mi
20000348:	f04f 52b0 	movmi.w	r2, #369098752	; 0x16000000
2000034c:	f04f 52d0 	movpl.w	r2, #436207616	; 0x1a000000
20000350:	4b02      	ldr	r3, [pc, #8]	; (2000035c <cmp_equ_bits()+0x20>)
20000352:	605a      	str	r2, [r3, #4]
20000354:	4770      	bx	lr
20000356:	bf00      	nop
20000358:	20002480 	.word	0x20002480
2000035c:	200023e0 	.word	0x200023e0

20000360 <cmp_neq_bits()>:
20000360:	2240      	movs	r2, #64	; 0x40
20000362:	4b04      	ldr	r3, [pc, #16]	; (20000374 <cmp_neq_bits()+0x14>)
20000364:	605a      	str	r2, [r3, #4]
20000366:	685a      	ldr	r2, [r3, #4]
20000368:	0652      	lsls	r2, r2, #25
2000036a:	bf54      	ite	pl
2000036c:	2202      	movpl	r2, #2
2000036e:	2220      	movmi	r2, #32
20000370:	605a      	str	r2, [r3, #4]
20000372:	4770      	bx	lr
20000374:	20002480 	.word	0x20002480

20000378 <cmp_equ_mskd()>:
20000378:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
2000037c:	4b08      	ldr	r3, [pc, #32]	; (200003a0 <cmp_equ_mskd()+0x28>)
2000037e:	605a      	str	r2, [r3, #4]
20000380:	685b      	ldr	r3, [r3, #4]
20000382:	4a08      	ldr	r2, [pc, #32]	; (200003a4 <cmp_equ_mskd()+0x2c>)
20000384:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
20000388:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
2000038c:	6853      	ldr	r3, [r2, #4]
2000038e:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
20000392:	bf0c      	ite	eq
20000394:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
20000398:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
2000039c:	6053      	str	r3, [r2, #4]
2000039e:	4770      	bx	lr
200003a0:	20002480 	.word	0x20002480
200003a4:	200023e0 	.word	0x200023e0

200003a8 <cmp_neq_mskd()>:
200003a8:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003ac:	4b08      	ldr	r3, [pc, #32]	; (200003d0 <cmp_neq_mskd()+0x28>)
200003ae:	605a      	str	r2, [r3, #4]
200003b0:	685a      	ldr	r2, [r3, #4]
200003b2:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
200003b6:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
200003ba:	685a      	ldr	r2, [r3, #4]
200003bc:	bf1a      	itte	ne
200003be:	f022 0206 	bicne.w	r2, r2, #6
200003c2:	f042 0204 	orrne.w	r2, r2, #4
200003c6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
200003ca:	605a      	str	r2, [r3, #4]
200003cc:	4770      	bx	lr
200003ce:	bf00      	nop
200003d0:	20002480 	.word	0x20002480

200003d4 <cmp_equ_reg()>:
200003d4:	2222      	movs	r2, #34	; 0x22
200003d6:	4b06      	ldr	r3, [pc, #24]	; (200003f0 <cmp_equ_reg()+0x1c>)
200003d8:	605a      	str	r2, [r3, #4]
200003da:	685b      	ldr	r3, [r3, #4]
200003dc:	4293      	cmp	r3, r2
200003de:	bf0c      	ite	eq
200003e0:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
200003e4:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
200003e8:	4b02      	ldr	r3, [pc, #8]	; (200003f4 <cmp_equ_reg()+0x20>)
200003ea:	605a      	str	r2, [r3, #4]
200003ec:	4770      	bx	lr
200003ee:	bf00      	nop
200003f0:	20002480 	.word	0x20002480
200003f4:	200023e0 	.word	0x200023e0

200003f8 <cmp_neq_reg()>:
200003f8:	2222      	movs	r2, #34	; 0x22
200003fa:	4b04      	ldr	r3, [pc, #16]	; (2000040c <cmp_neq_reg()+0x14>)
200003fc:	605a      	str	r2, [r3, #4]
200003fe:	685a      	ldr	r2, [r3, #4]
20000400:	2a22      	cmp	r2, #34	; 0x22
20000402:	bf14      	ite	ne
20000404:	2202      	movne	r2, #2
20000406:	2220      	moveq	r2, #32
20000408:	605a      	str	r2, [r3, #4]
2000040a:	4770      	bx	lr
2000040c:	20002480 	.word	0x20002480

20000410 <constexpr_bits_array()>:
20000410:	2106      	movs	r1, #6
20000412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
20000416:	4b02      	ldr	r3, [pc, #8]	; (20000420 <constexpr_bits_array()+0x10>)
20000418:	62d9      	str	r1, [r3, #44]	; 0x2c
2000041a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
2000041e:	4770      	bx	lr
20000420:	200022c0 	.word	0x200022c0

20000424 <runtime_bits_array()>:
20000424:	2203      	movs	r2, #3
20000426:	b410      	push	{r4}
20000428:	2007      	movs	r0, #7
2000042a:	2421      	movs	r4, #33	; 0x21
2000042c:	2301      	movs	r3, #1
2000042e:	b081      	sub	sp, #4
20000430:	9200      	str	r2, [sp, #0]
20000432:	9a00      	ldr	r2, [sp, #0]
20000434:	4905      	ldr	r1, [pc, #20]	; (2000044c <runtime_bits_array()+0x28>)
20000436:	eb01 0282 	add.w	r2, r1, r2, lsl #2
2000043a:	6214      	str	r4, [r2, #32]
2000043c:	9000      	str	r0, [sp, #0]
2000043e:	9a00      	ldr	r2, [sp, #0]
20000440:	4093      	lsls	r3, r2
20000442:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
20000446:	b001      	add	sp, #4
20000448:	bc10      	pop	{r4}
2000044a:	4770      	bx	lr
2000044c:	200022c0 	.word	0x200022c0

20000450 <prescaler_low()>:
20000450:	2177      	movs	r1, #119	; 0x77
20000452:	4b04      	ldr	r3, [pc, #16]	; (20000464 <prescaler_low()+0x14>)
20000454:	4a04      	ldr	r2, [pc, #16]	; (20000468 <prescaler_low()+0x18>)
20000456:	6059      	str	r1, [r3, #4]
20000458:	685b      	ldr	r3, [r3, #4]
2000045a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000045e:	62d3      	str	r3, [r2, #44]	; 0x2c
20000460:	4770      	bx	lr
20000462:	bf00      	nop
20000464:	200023e0 	.word	0x200023e0
20000468:	200022c0 	.word	0x200022c0

2000046c <prescaler_high()>:
2000046c:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
20000470:	4b03      	ldr	r3, [pc, #12]	; (20000480 <prescaler_high()+0x14>)
20000472:	4a04      	ldr	r2, [pc, #16]	; (20000484 <prescaler_high()+0x18>)
20000474:	6059      	str	r1, [r3, #4]
20000476:	685b      	ldr	r3, [r3, #4]
20000478:	f3c3 6344 	ubfx	r3, r3, #25, #5
2000047c:	62d3      	str	r3, [r2, #44]	; 0x2c
2000047e:	4770      	bx	lr
20000480:	200023e0 	.word	0x200023e0
20000484:	200022c0 	.word	0x200022c0

20000488 <reg_mskd_lss()>:
20000488:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
2000048c:	4b06      	ldr	r3, [pc, #24]	; (200004a8 <reg_mskd_lss()+0x20>)
2000048e:	605a      	str	r2, [r3, #4]
20000490:	685b      	ldr	r3, [r3, #4]
20000492:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000496:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
2000049a:	bf34      	ite	cc
2000049c:	2202      	movcc	r2, #2
2000049e:	2204      	movcs	r2, #4
200004a0:	4b02      	ldr	r3, [pc, #8]	; (200004ac <reg_mskd_lss()+0x24>)
200004a2:	605a      	str	r2, [r3, #4]
200004a4:	4770      	bx	lr
200004a6:	bf00      	nop
200004a8:	200023e0 	.word	0x200023e0
200004ac:	20002480 	.word	0x20002480

200004b0 <reg_mskd_leq()>:
200004b0:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
200004b4:	4a0a      	ldr	r2, [pc, #40]	; (200004e0 <reg_mskd_leq()+0x30>)
200004b6:	6053      	str	r3, [r2, #4]
200004b8:	6853      	ldr	r3, [r2, #4]
200004ba:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004be:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
200004c2:	d809      	bhi.n	200004d8 <reg_mskd_leq()+0x28>
200004c4:	6853      	ldr	r3, [r2, #4]
200004c6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
200004ce:	d803      	bhi.n	200004d8 <reg_mskd_leq()+0x28>
200004d0:	2202      	movs	r2, #2
200004d2:	4b04      	ldr	r3, [pc, #16]	; (200004e4 <reg_mskd_leq()+0x34>)
200004d4:	605a      	str	r2, [r3, #4]
200004d6:	4770      	bx	lr
200004d8:	2204      	movs	r2, #4
200004da:	4b02      	ldr	r3, [pc, #8]	; (200004e4 <reg_mskd_leq()+0x34>)
200004dc:	605a      	str	r2, [r3, #4]
200004de:	4770      	bx	lr
200004e0:	200023e0 	.word	0x200023e0
200004e4:	20002480 	.word	0x20002480

200004e8 <reg_mskd_gtr()>:
200004e8:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
200004ec:	4b06      	ldr	r3, [pc, #24]	; (20000508 <reg_mskd_gtr()+0x20>)
200004ee:	605a      	str	r2, [r3, #4]
200004f0:	685b      	ldr	r3, [r3, #4]
200004f2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004f6:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
200004fa:	bf8c      	ite	hi
200004fc:	2202      	movhi	r2, #2
200004fe:	2204      	movls	r2, #4
20000500:	4b02      	ldr	r3, [pc, #8]	; (2000050c <reg_mskd_gtr()+0x24>)
20000502:	605a      	str	r2, [r3, #4]
20000504:	4770      	bx	lr
20000506:	bf00      	nop
20000508:	200023e0 	.word	0x200023e0
2000050c:	20002480 	.word	0x20002480

20000510 <reg_mskd_geq()>:
20000510:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
20000514:	4a0a      	ldr	r2, [pc, #40]	; (20000540 <reg_mskd_geq()+0x30>)
20000516:	6053      	str	r3, [r2, #4]
20000518:	6853      	ldr	r3, [r2, #4]
2000051a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000051e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20000522:	d309      	bcc.n	20000538 <reg_mskd_geq()+0x28>
20000524:	6853      	ldr	r3, [r2, #4]
20000526:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000052a:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
2000052e:	d303      	bcc.n	20000538 <reg_mskd_geq()+0x28>
20000530:	2202      	movs	r2, #2
20000532:	4b04      	ldr	r3, [pc, #16]	; (20000544 <reg_mskd_geq()+0x34>)
20000534:	605a      	str	r2, [r3, #4]
20000536:	4770      	bx	lr
20000538:	2204      	movs	r2, #4
2000053a:	4b02      	ldr	r3, [pc, #8]	; (20000544 <reg_mskd_geq()+0x34>)
2000053c:	605a      	str	r2, [r3, #4]
2000053e:	4770      	bx	lr
20000540:	200023e0 	.word	0x200023e0
20000544:	20002480 	.word	0x20002480

20000548 <pos_cmp_eq()>:
20000548:	2202      	movs	r2, #2
2000054a:	4b01      	ldr	r3, [pc, #4]	; (20000550 <pos_cmp_eq()+0x8>)
2000054c:	605a      	str	r2, [r3, #4]
2000054e:	4770      	bx	lr
20000550:	20002480 	.word	0x20002480

20000554 <pos_cmp_ne()>:
20000554:	2202      	movs	r2, #2
20000556:	4b01      	ldr	r3, [pc, #4]	; (2000055c <pos_cmp_ne()+0x8>)
20000558:	605a      	str	r2, [r3, #4]
2000055a:	4770      	bx	lr
2000055c:	20002480 	.word	0x20002480

20000560 <bits_extract_eq()>:
20000560:	2240      	movs	r2, #64	; 0x40
20000562:	4b04      	ldr	r3, [pc, #16]	; (20000574 <bits_extract_eq()+0x14>)
20000564:	605a      	str	r2, [r3, #4]
20000566:	685a      	ldr	r2, [r3, #4]
20000568:	2a40      	cmp	r2, #64	; 0x40
2000056a:	bf0c      	ite	eq
2000056c:	2202      	moveq	r2, #2
2000056e:	2204      	movne	r2, #4
20000570:	605a      	str	r2, [r3, #4]
20000572:	4770      	bx	lr
20000574:	20002480 	.word	0x20002480

20000578 <mskd_extract_eq()>:
20000578:	2202      	movs	r2, #2
2000057a:	4b04      	ldr	r3, [pc, #16]	; (2000058c <mskd_extract_eq()+0x14>)
2000057c:	605a      	str	r2, [r3, #4]
2000057e:	685a      	ldr	r2, [r3, #4]
20000580:	2a02      	cmp	r2, #2
20000582:	bf0c      	ite	eq
20000584:	2220      	moveq	r2, #32
20000586:	2240      	movne	r2, #64	; 0x40
20000588:	605a      	str	r2, [r3, #4]
2000058a:	4770      	bx	lr
2000058c:	20002480 	.word	0x20002480

20000590 <mskd_extract_ne()>:
20000590:	2204      	movs	r2, #4
20000592:	4b04      	ldr	r3, [pc, #16]	; (200005a4 <mskd_extract_ne()+0x14>)
20000594:	605a      	str	r2, [r3, #4]
20000596:	685a      	ldr	r2, [r3, #4]
20000598:	2a04      	cmp	r2, #4
2000059a:	bf0c      	ite	eq
2000059c:	2240      	moveq	r2, #64	; 0x40
2000059e:	2220      	movne	r2, #32
200005a0:	605a      	str	r2, [r3, #4]
200005a2:	4770      	bx	lr
200005a4:	20002480 	.word	0x20002480

200005a8 <mskd_extract_lss()>:
200005a8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200005ac:	4b05      	ldr	r3, [pc, #20]	; (200005c4 <mskd_extract_lss()+0x1c>)
200005ae:	605a      	str	r2, [r3, #4]
200005b0:	685b      	ldr	r3, [r3, #4]
200005b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
200005b6:	bf34      	ite	cc
200005b8:	2220      	movcc	r2, #32
200005ba:	2240      	movcs	r2, #64	; 0x40
200005bc:	4b02      	ldr	r3, [pc, #8]	; (200005c8 <mskd_extract_lss()+0x20>)
200005be:	605a      	str	r2, [r3, #4]
200005c0:	4770      	bx	lr
200005c2:	bf00      	nop
200005c4:	200023e0 	.word	0x200023e0
200005c8:	20002480 	.word	0x20002480

200005cc <mskd_extract_leq()>:
200005cc:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
200005d0:	4b04      	ldr	r3, [pc, #16]	; (200005e4 <mskd_extract_leq()+0x18>)
200005d2:	605a      	str	r2, [r3, #4]
200005d4:	685b      	ldr	r3, [r3, #4]
200005d6:	4293      	cmp	r3, r2
200005d8:	bf94      	ite	ls
200005da:	2220      	movls	r2, #32
200005dc:	2240      	movhi	r2, #64	; 0x40
200005de:	4b02      	ldr	r3, [pc, #8]	; (200005e8 <mskd_extract_leq()+0x1c>)
200005e0:	605a      	str	r2, [r3, #4]
200005e2:	4770      	bx	lr
200005e4:	200023e0 	.word	0x200023e0
200005e8:	20002480 	.word	0x20002480

200005ec <mskd_extract_gtr()>:
200005ec:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
200005f0:	4b05      	ldr	r3, [pc, #20]	; (20000608 <mskd_extract_gtr()+0x1c>)
200005f2:	605a      	str	r2, [r3, #4]
200005f4:	685b      	ldr	r3, [r3, #4]
200005f6:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
200005fa:	bf8c      	ite	hi
200005fc:	2220      	movhi	r2, #32
200005fe:	2240      	movls	r2, #64	; 0x40
20000600:	4b02      	ldr	r3, [pc, #8]	; (2000060c <mskd_extract_gtr()+0x20>)
20000602:	605a      	str	r2, [r3, #4]
20000604:	4770      	bx	lr
20000606:	bf00      	nop
20000608:	200023e0 	.word	0x200023e0
2000060c:	20002480 	.word	0x20002480

20000610 <set_bits_global()>:
20000610:	4a02      	ldr	r2, [pc, #8]	; (2000061c <set_bits_global()+0xc>)
20000612:	6853      	ldr	r3, [r2, #4]
20000614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000618:	6053      	str	r3, [r2, #4]
2000061a:	4770      	bx	lr
2000061c:	20002480 	.word	0x20002480

20000620 <ins_mskd_global()>:
20000620:	4a03      	ldr	r2, [pc, #12]	; (20000630 <ins_mskd_global()+0x10>)
20000622:	6853      	ldr	r3, [r2, #4]
20000624:	f023 0306 	bic.w	r3, r3, #6
20000628:	f043 0302 	orr.w	r3, r3, #2
2000062c:	6053      	str	r3, [r2, #4]
2000062e:	4770      	bx	lr
20000630:	20002480 	.word	0x20002480

20000634 <assign_array_global()>:
20000634:	22bd      	movs	r2, #189	; 0xbd
20000636:	4b01      	ldr	r3, [pc, #4]	; (2000063c <assign_array_global()+0x8>)
20000638:	601a      	str	r2, [r3, #0]
2000063a:	4770      	bx	lr
2000063c:	200022ec 	.word	0x200022ec

20000640 <shifted_global()>:
20000640:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
20000644:	4b03      	ldr	r3, [pc, #12]	; (20000654 <shifted_global()+0x14>)
20000646:	4a04      	ldr	r2, [pc, #16]	; (20000658 <shifted_global()+0x18>)
20000648:	6059      	str	r1, [r3, #4]
2000064a:	685b      	ldr	r3, [r3, #4]
2000064c:	f3c3 6344 	ubfx	r3, r3, #25, #5
20000650:	62d3      	str	r3, [r2, #44]	; 0x2c
20000652:	4770      	bx	lr
20000654:	200023e0 	.word	0x200023e0
20000658:	200022c0 	.word	0x200022c0

2000065c <assign_register_global()>:
2000065c:	2204      	movs	r2, #4
2000065e:	4b01      	ldr	r3, [pc, #4]	; (20000664 <assign_register_global()+0x8>)
20000660:	605a      	str	r2, [r3, #4]
20000662:	4770      	bx	lr
20000664:	20002480 	.word	0x20002480

20000668 <copy_bits_equ()>:
20000668:	2240      	movs	r2, #64	; 0x40
2000066a:	4b04      	ldr	r3, [pc, #16]	; (2000067c <copy_bits_equ()+0x14>)
2000066c:	605a      	str	r2, [r3, #4]
2000066e:	685a      	ldr	r2, [r3, #4]
20000670:	0652      	lsls	r2, r2, #25
20000672:	bf4c      	ite	mi
20000674:	2202      	movmi	r2, #2
20000676:	2204      	movpl	r2, #4
20000678:	605a      	str	r2, [r3, #4]
2000067a:	4770      	bx	lr
2000067c:	20002480 	.word	0x20002480

20000680 <copy_bits_neq()>:
20000680:	2240      	movs	r2, #64	; 0x40
20000682:	4b04      	ldr	r3, [pc, #16]	; (20000694 <copy_bits_neq()+0x14>)
20000684:	605a      	str	r2, [r3, #4]
20000686:	685a      	ldr	r2, [r3, #4]
20000688:	0652      	lsls	r2, r2, #25
2000068a:	bf54      	ite	pl
2000068c:	2202      	movpl	r2, #2
2000068e:	2204      	movmi	r2, #4
20000690:	605a      	str	r2, [r3, #4]
20000692:	4770      	bx	lr
20000694:	20002480 	.word	0x20002480

20000698 <copy_mskd_equ()>:
20000698:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
2000069c:	4b05      	ldr	r3, [pc, #20]	; (200006b4 <copy_mskd_equ()+0x1c>)
2000069e:	605a      	str	r2, [r3, #4]
200006a0:	685b      	ldr	r3, [r3, #4]
200006a2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200006a6:	4293      	cmp	r3, r2
200006a8:	bf0c      	ite	eq
200006aa:	2202      	moveq	r2, #2
200006ac:	2204      	movne	r2, #4
200006ae:	4b02      	ldr	r3, [pc, #8]	; (200006b8 <copy_mskd_equ()+0x20>)
200006b0:	605a      	str	r2, [r3, #4]
200006b2:	4770      	bx	lr
200006b4:	200023e0 	.word	0x200023e0
200006b8:	20002480 	.word	0x20002480

200006bc <copy_mskd_neq()>:
200006bc:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
200006c0:	4b05      	ldr	r3, [pc, #20]	; (200006d8 <copy_mskd_neq()+0x1c>)
200006c2:	605a      	str	r2, [r3, #4]
200006c4:	685b      	ldr	r3, [r3, #4]
200006c6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200006ca:	4293      	cmp	r3, r2
200006cc:	bf14      	ite	ne
200006ce:	2202      	movne	r2, #2
200006d0:	2204      	moveq	r2, #4
200006d2:	4b02      	ldr	r3, [pc, #8]	; (200006dc <copy_mskd_neq()+0x20>)
200006d4:	605a      	str	r2, [r3, #4]
200006d6:	4770      	bx	lr
200006d8:	200023e0 	.word	0x200023e0
200006dc:	20002480 	.word	0x20002480

200006e0 <copy_mskd_lss()>:
200006e0:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
200006e4:	4b06      	ldr	r3, [pc, #24]	; (20000700 <copy_mskd_lss()+0x20>)
200006e6:	605a      	str	r2, [r3, #4]
200006e8:	685b      	ldr	r3, [r3, #4]
200006ea:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200006ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
200006f2:	bf34      	ite	cc
200006f4:	2202      	movcc	r2, #2
200006f6:	2204      	movcs	r2, #4
200006f8:	4b02      	ldr	r3, [pc, #8]	; (20000704 <copy_mskd_lss()+0x24>)
200006fa:	605a      	str	r2, [r3, #4]
200006fc:	4770      	bx	lr
200006fe:	bf00      	nop
20000700:	200023e0 	.word	0x200023e0
20000704:	20002480 	.word	0x20002480

20000708 <copy_mskd_leq()>:
20000708:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
2000070c:	4b05      	ldr	r3, [pc, #20]	; (20000724 <copy_mskd_leq()+0x1c>)
2000070e:	605a      	str	r2, [r3, #4]
20000710:	685b      	ldr	r3, [r3, #4]
20000712:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000716:	4293      	cmp	r3, r2
20000718:	bf94      	ite	ls
2000071a:	2202      	movls	r2, #2
2000071c:	2204      	movhi	r2, #4
2000071e:	4b02      	ldr	r3, [pc, #8]	; (20000728 <copy_mskd_leq()+0x20>)
20000720:	605a      	str	r2, [r3, #4]
20000722:	4770      	bx	lr
20000724:	200023e0 	.word	0x200023e0
20000728:	20002480 	.word	0x20002480

2000072c <copy_mskd_gtr()>:
2000072c:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000730:	4b06      	ldr	r3, [pc, #24]	; (2000074c <copy_mskd_gtr()+0x20>)
20000732:	605a      	str	r2, [r3, #4]
20000734:	685b      	ldr	r3, [r3, #4]
20000736:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000073a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2000073e:	bf8c      	ite	hi
20000740:	2202      	movhi	r2, #2
20000742:	2204      	movls	r2, #4
20000744:	4b02      	ldr	r3, [pc, #8]	; (20000750 <copy_mskd_gtr()+0x24>)
20000746:	605a      	str	r2, [r3, #4]
20000748:	4770      	bx	lr
2000074a:	bf00      	nop
2000074c:	200023e0 	.word	0x200023e0
20000750:	20002480 	.word	0x20002480

20000754 <copy_mskd_geq()>:
20000754:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000758:	4b05      	ldr	r3, [pc, #20]	; (20000770 <copy_mskd_geq()+0x1c>)
2000075a:	605a      	str	r2, [r3, #4]
2000075c:	685b      	ldr	r3, [r3, #4]
2000075e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000762:	4293      	cmp	r3, r2
20000764:	bf2c      	ite	cs
20000766:	2202      	movcs	r2, #2
20000768:	2204      	movcc	r2, #4
2000076a:	4b02      	ldr	r3, [pc, #8]	; (20000774 <copy_mskd_geq()+0x20>)
2000076c:	605a      	str	r2, [r3, #4]
2000076e:	4770      	bx	lr
20000770:	200023e0 	.word	0x200023e0
20000774:	20002480 	.word	0x20002480

20000778 <copy_shifted()>:
20000778:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
2000077c:	4b05      	ldr	r3, [pc, #20]	; (20000794 <copy_shifted()+0x1c>)
2000077e:	605a      	str	r2, [r3, #4]
20000780:	685b      	ldr	r3, [r3, #4]
20000782:	f3c3 6344 	ubfx	r3, r3, #25, #5
20000786:	2b0b      	cmp	r3, #11
20000788:	bf0c      	ite	eq
2000078a:	2202      	moveq	r2, #2
2000078c:	2204      	movne	r2, #4
2000078e:	4b02      	ldr	r3, [pc, #8]	; (20000798 <copy_shifted()+0x20>)
20000790:	605a      	str	r2, [r3, #4]
20000792:	4770      	bx	lr
20000794:	200023e0 	.word	0x200023e0
20000798:	20002480 	.word	0x20002480

2000079c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>:
2000079c:	2266      	movs	r2, #102	; 0x66
2000079e:	4b01      	ldr	r3, [pc, #4]	; (200007a4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]+0x8>)
200007a0:	62da      	str	r2, [r3, #44]	; 0x2c
200007a2:	4770      	bx	lr
200007a4:	200022c0 	.word	0x200022c0

200007a8 <call_pos_ref()>:
200007a8:	2105      	movs	r1, #5
200007aa:	b500      	push	{lr}
200007ac:	b081      	sub	sp, #4
200007ae:	4668      	mov	r0, sp
200007b0:	9100      	str	r1, [sp, #0]
200007b2:	f7ff fff3 	bl	2000079c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
200007b6:	4668      	mov	r0, sp
200007b8:	9100      	str	r1, [sp, #0]
200007ba:	f7ff ffef 	bl	2000079c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.42]>
200007be:	b001      	add	sp, #4
200007c0:	f85d fb04 	ldr.w	pc, [sp], #4

200007c4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>:
200007c4:	2277      	movs	r2, #119	; 0x77
200007c6:	4b01      	ldr	r3, [pc, #4]	; (200007cc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]+0x8>)
200007c8:	62da      	str	r2, [r3, #44]	; 0x2c
200007ca:	4770      	bx	lr
200007cc:	200022c0 	.word	0x200022c0

200007d0 <call_pos_ref_global()>:
200007d0:	2306      	movs	r3, #6
200007d2:	b500      	push	{lr}
200007d4:	b081      	sub	sp, #4
200007d6:	4668      	mov	r0, sp
200007d8:	9300      	str	r3, [sp, #0]
200007da:	f7ff fff3 	bl	200007c4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.43]>
200007de:	b001      	add	sp, #4
200007e0:	f85d fb04 	ldr.w	pc, [sp], #4

200007e4 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
200007e4:	2233      	movs	r2, #51	; 0x33
200007e6:	4b01      	ldr	r3, [pc, #4]	; (200007ec <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x8>)
200007e8:	62da      	str	r2, [r3, #44]	; 0x2c
200007ea:	4770      	bx	lr
200007ec:	200022c0 	.word	0x200022c0

200007f0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
200007f0:	2244      	movs	r2, #68	; 0x44
200007f2:	4b01      	ldr	r3, [pc, #4]	; (200007f8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
200007f4:	62da      	str	r2, [r3, #44]	; 0x2c
200007f6:	4770      	bx	lr
200007f8:	200022c0 	.word	0x200022c0

200007fc <call_pos_val()>:
200007fc:	b500      	push	{lr}
200007fe:	2005      	movs	r0, #5
20000800:	f7ff fff0 	bl	200007e4 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
20000804:	2006      	movs	r0, #6
20000806:	f85d eb04 	ldr.w	lr, [sp], #4
2000080a:	e7f1      	b.n	200007f0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

2000080c <call_pos_val_global()>:
2000080c:	2006      	movs	r0, #6
2000080e:	e7ef      	b.n	200007f0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

20000810 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>:
20000810:	4a03      	ldr	r2, [pc, #12]	; (20000820 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]+0x10>)
20000812:	6853      	ldr	r3, [r2, #4]
20000814:	f023 0306 	bic.w	r3, r3, #6
20000818:	f043 0302 	orr.w	r3, r3, #2
2000081c:	6053      	str	r3, [r2, #4]
2000081e:	4770      	bx	lr
20000820:	20002480 	.word	0x20002480

20000824 <call_mskd_val_const()>:
20000824:	2006      	movs	r0, #6
20000826:	2102      	movs	r1, #2
20000828:	e7f2      	b.n	20000810 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
2000082a:	bf00      	nop

2000082c <call_mskd_val_var()>:
2000082c:	2006      	movs	r0, #6
2000082e:	2102      	movs	r1, #2
20000830:	e7ee      	b.n	20000810 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
20000832:	bf00      	nop

20000834 <call_mskd_val_global()>:
20000834:	2006      	movs	r0, #6
20000836:	2102      	movs	r1, #2
20000838:	e7ea      	b.n	20000810 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.46]>
2000083a:	bf00      	nop

2000083c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>:
2000083c:	4a02      	ldr	r2, [pc, #8]	; (20000848 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]+0xc>)
2000083e:	6853      	ldr	r3, [r2, #4]
20000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000844:	6053      	str	r3, [r2, #4]
20000846:	4770      	bx	lr
20000848:	20002480 	.word	0x20002480

2000084c <call_bits_val_const()>:
2000084c:	2040      	movs	r0, #64	; 0x40
2000084e:	e7f5      	b.n	2000083c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

20000850 <call_bits_val_var()>:
20000850:	2040      	movs	r0, #64	; 0x40
20000852:	e7f3      	b.n	2000083c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

20000854 <call_bits_val_global()>:
20000854:	2040      	movs	r0, #64	; 0x40
20000856:	e7f1      	b.n	2000083c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.47]>

20000858 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000858:	4a02      	ldr	r2, [pc, #8]	; (20000864 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
2000085a:	6853      	ldr	r3, [r2, #4]
2000085c:	4318      	orrs	r0, r3
2000085e:	6050      	str	r0, [r2, #4]
20000860:	4770      	bx	lr
20000862:	bf00      	nop
20000864:	20002480 	.word	0x20002480

20000868 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
20000868:	4a02      	ldr	r2, [pc, #8]	; (20000874 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
2000086a:	6801      	ldr	r1, [r0, #0]
2000086c:	6853      	ldr	r3, [r2, #4]
2000086e:	430b      	orrs	r3, r1
20000870:	6053      	str	r3, [r2, #4]
20000872:	4770      	bx	lr
20000874:	20002480 	.word	0x20002480

20000878 <call_bits_ref_var()>:
20000878:	2301      	movs	r3, #1
2000087a:	b500      	push	{lr}
2000087c:	b081      	sub	sp, #4
2000087e:	4668      	mov	r0, sp
20000880:	9300      	str	r3, [sp, #0]
20000882:	f7ff fff1 	bl	20000868 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
20000886:	b001      	add	sp, #4
20000888:	f85d fb04 	ldr.w	pc, [sp], #4

2000088c <call_bits_ref_const()>:
2000088c:	2301      	movs	r3, #1
2000088e:	b500      	push	{lr}
20000890:	b081      	sub	sp, #4
20000892:	4668      	mov	r0, sp
20000894:	9300      	str	r3, [sp, #0]
20000896:	f7ff ffe7 	bl	20000868 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
2000089a:	b001      	add	sp, #4
2000089c:	f85d fb04 	ldr.w	pc, [sp], #4

200008a0 <call_bits_ref_global()>:
200008a0:	2340      	movs	r3, #64	; 0x40
200008a2:	b500      	push	{lr}
200008a4:	b081      	sub	sp, #4
200008a6:	4668      	mov	r0, sp
200008a8:	9300      	str	r3, [sp, #0]
200008aa:	f7ff ffdd 	bl	20000868 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200008ae:	b001      	add	sp, #4
200008b0:	f85d fb04 	ldr.w	pc, [sp], #4

200008b4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
200008b4:	4a03      	ldr	r2, [pc, #12]	; (200008c4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
200008b6:	6853      	ldr	r3, [r2, #4]
200008b8:	ea23 0000 	bic.w	r0, r3, r0
200008bc:	4308      	orrs	r0, r1
200008be:	6050      	str	r0, [r2, #4]
200008c0:	4770      	bx	lr
200008c2:	bf00      	nop
200008c4:	20002480 	.word	0x20002480

200008c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
200008c8:	4a05      	ldr	r2, [pc, #20]	; (200008e0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
200008ca:	b410      	push	{r4}
200008cc:	6853      	ldr	r3, [r2, #4]
200008ce:	6804      	ldr	r4, [r0, #0]
200008d0:	6841      	ldr	r1, [r0, #4]
200008d2:	ea23 0304 	bic.w	r3, r3, r4
200008d6:	430b      	orrs	r3, r1
200008d8:	6053      	str	r3, [r2, #4]
200008da:	bc10      	pop	{r4}
200008dc:	4770      	bx	lr
200008de:	bf00      	nop
200008e0:	20002480 	.word	0x20002480

200008e4 <call_mskd_ref_var()>:
200008e4:	b500      	push	{lr}
200008e6:	4b05      	ldr	r3, [pc, #20]	; (200008fc <call_mskd_ref_var()+0x18>)
200008e8:	b082      	sub	sp, #8
200008ea:	4668      	mov	r0, sp
200008ec:	cb0c      	ldmia	r3, {r2, r3}
200008ee:	e88d 000c 	stmia.w	sp, {r2, r3}
200008f2:	f7ff ffe9 	bl	200008c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
200008f6:	b002      	add	sp, #8
200008f8:	f85d fb04 	ldr.w	pc, [sp], #4
200008fc:	20001598 	.word	0x20001598

20000900 <call_mskd_ref_const()>:
20000900:	2206      	movs	r2, #6
20000902:	2304      	movs	r3, #4
20000904:	b500      	push	{lr}
20000906:	b082      	sub	sp, #8
20000908:	4668      	mov	r0, sp
2000090a:	e88d 000c 	stmia.w	sp, {r2, r3}
2000090e:	f7ff ffdb 	bl	200008c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
20000912:	b002      	add	sp, #8
20000914:	f85d fb04 	ldr.w	pc, [sp], #4

20000918 <call_mskd_ref_global()>:
20000918:	2206      	movs	r2, #6
2000091a:	2302      	movs	r3, #2
2000091c:	b500      	push	{lr}
2000091e:	b082      	sub	sp, #8
20000920:	4668      	mov	r0, sp
20000922:	e88d 000c 	stmia.w	sp, {r2, r3}
20000926:	f7ff ffcf 	bl	200008c8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
2000092a:	b002      	add	sp, #8
2000092c:	f85d fb04 	ldr.w	pc, [sp], #4

20000930 <periph_bits(mcu::Serial*)>:
20000930:	6843      	ldr	r3, [r0, #4]
20000932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000936:	6043      	str	r3, [r0, #4]
20000938:	4770      	bx	lr
2000093a:	bf00      	nop

2000093c <call_periph_bits()>:
2000093c:	4801      	ldr	r0, [pc, #4]	; (20000944 <call_periph_bits()+0x8>)
2000093e:	f7ff bff7 	b.w	20000930 <periph_bits(mcu::Serial*)>
20000942:	bf00      	nop
20000944:	20002480 	.word	0x20002480

20000948 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000948:	6843      	ldr	r3, [r0, #4]
2000094a:	4319      	orrs	r1, r3
2000094c:	6041      	str	r1, [r0, #4]
2000094e:	4770      	bx	lr

20000950 <call_periph_bits_val()>:
20000950:	2140      	movs	r1, #64	; 0x40
20000952:	4801      	ldr	r0, [pc, #4]	; (20000958 <call_periph_bits_val()+0x8>)
20000954:	f7ff bff8 	b.w	20000948 <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000958:	20002480 	.word	0x20002480

2000095c <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
2000095c:	6803      	ldr	r3, [r0, #0]
2000095e:	4319      	orrs	r1, r3
20000960:	6001      	str	r1, [r0, #0]
20000962:	4770      	bx	lr

20000964 <call_reg_bits_val()>:
20000964:	2140      	movs	r1, #64	; 0x40
20000966:	4801      	ldr	r0, [pc, #4]	; (2000096c <call_reg_bits_val()+0x8>)
20000968:	f7ff bff8 	b.w	2000095c <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
2000096c:	20002484 	.word	0x20002484

20000970 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
20000970:	680a      	ldr	r2, [r1, #0]
20000972:	6843      	ldr	r3, [r0, #4]
20000974:	4313      	orrs	r3, r2
20000976:	6043      	str	r3, [r0, #4]
20000978:	4770      	bx	lr
2000097a:	bf00      	nop

2000097c <call_periph_bits_ref()>:
2000097c:	2340      	movs	r3, #64	; 0x40
2000097e:	b500      	push	{lr}
20000980:	b081      	sub	sp, #4
20000982:	4669      	mov	r1, sp
20000984:	4803      	ldr	r0, [pc, #12]	; (20000994 <call_periph_bits_ref()+0x18>)
20000986:	9300      	str	r3, [sp, #0]
20000988:	f7ff fff2 	bl	20000970 <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
2000098c:	b001      	add	sp, #4
2000098e:	f85d fb04 	ldr.w	pc, [sp], #4
20000992:	bf00      	nop
20000994:	20002480 	.word	0x20002480

20000998 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
20000998:	680a      	ldr	r2, [r1, #0]
2000099a:	6803      	ldr	r3, [r0, #0]
2000099c:	4313      	orrs	r3, r2
2000099e:	6003      	str	r3, [r0, #0]
200009a0:	4770      	bx	lr
200009a2:	bf00      	nop

200009a4 <call_reg_bits_ref()>:
200009a4:	2340      	movs	r3, #64	; 0x40
200009a6:	b500      	push	{lr}
200009a8:	b081      	sub	sp, #4
200009aa:	4669      	mov	r1, sp
200009ac:	4803      	ldr	r0, [pc, #12]	; (200009bc <call_reg_bits_ref()+0x18>)
200009ae:	9300      	str	r3, [sp, #0]
200009b0:	f7ff fff2 	bl	20000998 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200009b4:	b001      	add	sp, #4
200009b6:	f85d fb04 	ldr.w	pc, [sp], #4
200009ba:	bf00      	nop
200009bc:	20002484 	.word	0x20002484

200009c0 <periph_mskd(mcu::Serial*)>:
200009c0:	6843      	ldr	r3, [r0, #4]
200009c2:	f023 0306 	bic.w	r3, r3, #6
200009c6:	f043 0302 	orr.w	r3, r3, #2
200009ca:	6043      	str	r3, [r0, #4]
200009cc:	4770      	bx	lr
200009ce:	bf00      	nop

200009d0 <call_periph_mskd()>:
200009d0:	4801      	ldr	r0, [pc, #4]	; (200009d8 <call_periph_mskd()+0x8>)
200009d2:	f7ff bff5 	b.w	200009c0 <periph_mskd(mcu::Serial*)>
200009d6:	bf00      	nop
200009d8:	20002480 	.word	0x20002480

200009dc <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
200009dc:	6843      	ldr	r3, [r0, #4]
200009de:	ea23 0101 	bic.w	r1, r3, r1
200009e2:	4311      	orrs	r1, r2
200009e4:	6041      	str	r1, [r0, #4]
200009e6:	4770      	bx	lr

200009e8 <call_periph_mskd_val()>:
200009e8:	2106      	movs	r1, #6
200009ea:	2202      	movs	r2, #2
200009ec:	4801      	ldr	r0, [pc, #4]	; (200009f4 <call_periph_mskd_val()+0xc>)
200009ee:	f7ff bff5 	b.w	200009dc <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
200009f2:	bf00      	nop
200009f4:	20002480 	.word	0x20002480

200009f8 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
200009f8:	6803      	ldr	r3, [r0, #0]
200009fa:	ea23 0101 	bic.w	r1, r3, r1
200009fe:	4311      	orrs	r1, r2
20000a00:	6001      	str	r1, [r0, #0]
20000a02:	4770      	bx	lr

20000a04 <call_reg_mskd_val()>:
20000a04:	2106      	movs	r1, #6
20000a06:	2202      	movs	r2, #2
20000a08:	4801      	ldr	r0, [pc, #4]	; (20000a10 <call_reg_mskd_val()+0xc>)
20000a0a:	f7ff bff5 	b.w	200009f8 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a0e:	bf00      	nop
20000a10:	20002484 	.word	0x20002484

20000a14 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a14:	6843      	ldr	r3, [r0, #4]
20000a16:	ea23 0101 	bic.w	r1, r3, r1
20000a1a:	4311      	orrs	r1, r2
20000a1c:	6041      	str	r1, [r0, #4]
20000a1e:	4770      	bx	lr

20000a20 <call_periph_mskd_ref()>:
20000a20:	2106      	movs	r1, #6
20000a22:	2202      	movs	r2, #2
20000a24:	4801      	ldr	r0, [pc, #4]	; (20000a2c <call_periph_mskd_ref()+0xc>)
20000a26:	f7ff bff5 	b.w	20000a14 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a2a:	bf00      	nop
20000a2c:	20002480 	.word	0x20002480

20000a30 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a30:	6803      	ldr	r3, [r0, #0]
20000a32:	ea23 0101 	bic.w	r1, r3, r1
20000a36:	4311      	orrs	r1, r2
20000a38:	6001      	str	r1, [r0, #0]
20000a3a:	4770      	bx	lr

20000a3c <call_reg_mskd_ref()>:
20000a3c:	2106      	movs	r1, #6
20000a3e:	2202      	movs	r2, #2
20000a40:	4801      	ldr	r0, [pc, #4]	; (20000a48 <call_reg_mskd_ref()+0xc>)
20000a42:	f7ff bff5 	b.w	20000a30 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config>&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a46:	bf00      	nop
20000a48:	20002484 	.word	0x20002484

20000a4c <return_bits()>:
20000a4c:	2020      	movs	r0, #32
20000a4e:	4770      	bx	lr

20000a50 <call_return_bits()>:
20000a50:	b500      	push	{lr}
20000a52:	f7ff fffb 	bl	20000a4c <return_bits()>
20000a56:	2820      	cmp	r0, #32
20000a58:	bf0c      	ite	eq
20000a5a:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
20000a5e:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
20000a62:	4b02      	ldr	r3, [pc, #8]	; (20000a6c <call_return_bits()+0x1c>)
20000a64:	605a      	str	r2, [r3, #4]
20000a66:	f85d fb04 	ldr.w	pc, [sp], #4
20000a6a:	bf00      	nop
20000a6c:	200023e0 	.word	0x200023e0

20000a70 <return_mskd()>:
20000a70:	2118      	movs	r1, #24
20000a72:	2208      	movs	r2, #8
20000a74:	e880 0006 	stmia.w	r0, {r1, r2}
20000a78:	4770      	bx	lr
20000a7a:	bf00      	nop

20000a7c <call_return_mskd()>:
20000a7c:	b500      	push	{lr}
20000a7e:	b082      	sub	sp, #8
20000a80:	4668      	mov	r0, sp
20000a82:	f7ff fff5 	bl	20000a70 <return_mskd()>
20000a86:	9b00      	ldr	r3, [sp, #0]
20000a88:	9a01      	ldr	r2, [sp, #4]
20000a8a:	2b18      	cmp	r3, #24
20000a8c:	d006      	beq.n	20000a9c <call_return_mskd()+0x20>
20000a8e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000a92:	4b07      	ldr	r3, [pc, #28]	; (20000ab0 <call_return_mskd()+0x34>)
20000a94:	605a      	str	r2, [r3, #4]
20000a96:	b002      	add	sp, #8
20000a98:	f85d fb04 	ldr.w	pc, [sp], #4
20000a9c:	2a08      	cmp	r2, #8
20000a9e:	d1f6      	bne.n	20000a8e <call_return_mskd()+0x12>
20000aa0:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000aa4:	4b02      	ldr	r3, [pc, #8]	; (20000ab0 <call_return_mskd()+0x34>)
20000aa6:	605a      	str	r2, [r3, #4]
20000aa8:	b002      	add	sp, #8
20000aaa:	f85d fb04 	ldr.w	pc, [sp], #4
20000aae:	bf00      	nop
20000ab0:	200023e0 	.word	0x200023e0

20000ab4 <return_reg()>:
20000ab4:	2240      	movs	r2, #64	; 0x40
20000ab6:	4b02      	ldr	r3, [pc, #8]	; (20000ac0 <return_reg()+0xc>)
20000ab8:	4802      	ldr	r0, [pc, #8]	; (20000ac4 <return_reg()+0x10>)
20000aba:	605a      	str	r2, [r3, #4]
20000abc:	4770      	bx	lr
20000abe:	bf00      	nop
20000ac0:	20002480 	.word	0x20002480
20000ac4:	20002484 	.word	0x20002484

20000ac8 <call_return_reg()>:
20000ac8:	b500      	push	{lr}
20000aca:	f7ff fff3 	bl	20000ab4 <return_reg()>
20000ace:	6803      	ldr	r3, [r0, #0]
20000ad0:	065b      	lsls	r3, r3, #25
20000ad2:	bf4c      	ite	mi
20000ad4:	f04f 52f0 	movmi.w	r2, #503316480	; 0x1e000000
20000ad8:	f04f 5238 	movpl.w	r2, #771751936	; 0x2e000000
20000adc:	4b01      	ldr	r3, [pc, #4]	; (20000ae4 <call_return_reg()+0x1c>)
20000ade:	605a      	str	r2, [r3, #4]
20000ae0:	f85d fb04 	ldr.w	pc, [sp], #4
20000ae4:	200023e0 	.word	0x200023e0

20000ae8 <return_periph()>:
20000ae8:	2340      	movs	r3, #64	; 0x40
20000aea:	4801      	ldr	r0, [pc, #4]	; (20000af0 <return_periph()+0x8>)
20000aec:	6043      	str	r3, [r0, #4]
20000aee:	4770      	bx	lr
20000af0:	20002480 	.word	0x20002480

20000af4 <call_return_periph()>:
20000af4:	b500      	push	{lr}
20000af6:	f7ff fff7 	bl	20000ae8 <return_periph()>
20000afa:	6843      	ldr	r3, [r0, #4]
20000afc:	065b      	lsls	r3, r3, #25
20000afe:	bf4c      	ite	mi
20000b00:	f04f 5218 	movmi.w	r2, #637534208	; 0x26000000
20000b04:	f04f 5228 	movpl.w	r2, #704643072	; 0x2a000000
20000b08:	4b01      	ldr	r3, [pc, #4]	; (20000b10 <call_return_periph()+0x1c>)
20000b0a:	605a      	str	r2, [r3, #4]
20000b0c:	f85d fb04 	ldr.w	pc, [sp], #4
20000b10:	200023e0 	.word	0x200023e0

20000b14 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
20000b14:	2805      	cmp	r0, #5
20000b16:	d006      	beq.n	20000b26 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
20000b18:	2806      	cmp	r0, #6
20000b1a:	bf0c      	ite	eq
20000b1c:	2244      	moveq	r2, #68	; 0x44
20000b1e:	2255      	movne	r2, #85	; 0x55
20000b20:	4b03      	ldr	r3, [pc, #12]	; (20000b30 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000b22:	62da      	str	r2, [r3, #44]	; 0x2c
20000b24:	4770      	bx	lr
20000b26:	2233      	movs	r2, #51	; 0x33
20000b28:	4b01      	ldr	r3, [pc, #4]	; (20000b30 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
20000b2c:	4770      	bx	lr
20000b2e:	bf00      	nop
20000b30:	200022c0 	.word	0x200022c0

20000b34 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
20000b34:	6803      	ldr	r3, [r0, #0]
20000b36:	2b05      	cmp	r3, #5
20000b38:	d006      	beq.n	20000b48 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
20000b3a:	2b06      	cmp	r3, #6
20000b3c:	bf0c      	ite	eq
20000b3e:	2277      	moveq	r2, #119	; 0x77
20000b40:	2288      	movne	r2, #136	; 0x88
20000b42:	4b03      	ldr	r3, [pc, #12]	; (20000b50 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
20000b44:	62da      	str	r2, [r3, #44]	; 0x2c
20000b46:	4770      	bx	lr
20000b48:	2266      	movs	r2, #102	; 0x66
20000b4a:	4b01      	ldr	r3, [pc, #4]	; (20000b50 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
20000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
20000b4e:	4770      	bx	lr
20000b50:	200022c0 	.word	0x200022c0

20000b54 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000b54:	4a03      	ldr	r2, [pc, #12]	; (20000b64 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
20000b56:	6853      	ldr	r3, [r2, #4]
20000b58:	ea23 0000 	bic.w	r0, r3, r0
20000b5c:	4308      	orrs	r0, r1
20000b5e:	6050      	str	r0, [r2, #4]
20000b60:	4770      	bx	lr
20000b62:	bf00      	nop
20000b64:	20002480 	.word	0x20002480

20000b68 <call_range_val(unsigned int)>:
20000b68:	0301      	lsls	r1, r0, #12
20000b6a:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000b6e:	f7ff bff1 	b.w	20000b54 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000b72:	bf00      	nop

20000b74 <call_range_val_port()>:
20000b74:	201f      	movs	r0, #31
20000b76:	f7ff bff7 	b.w	20000b68 <call_range_val(unsigned int)>
20000b7a:	bf00      	nop

20000b7c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000b7c:	4a03      	ldr	r2, [pc, #12]	; (20000b8c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
20000b7e:	6853      	ldr	r3, [r2, #4]
20000b80:	ea23 0000 	bic.w	r0, r3, r0
20000b84:	4308      	orrs	r0, r1
20000b86:	6050      	str	r0, [r2, #4]
20000b88:	4770      	bx	lr
20000b8a:	bf00      	nop
20000b8c:	20002480 	.word	0x20002480

20000b90 <call_range_ref(unsigned int)>:
20000b90:	0301      	lsls	r1, r0, #12
20000b92:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000b96:	f7ff bff1 	b.w	20000b7c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000b9a:	bf00      	nop

20000b9c <call_range_ref_port()>:
20000b9c:	200c      	movs	r0, #12
20000b9e:	f7ff bff7 	b.w	20000b90 <call_range_ref(unsigned int)>
20000ba2:	bf00      	nop

20000ba4 <check_array_range_pass(unsigned int)>:
20000ba4:	2816      	cmp	r0, #22
20000ba6:	bf94      	ite	ls
20000ba8:	227f      	movls	r2, #127	; 0x7f
20000baa:	2283      	movhi	r2, #131	; 0x83
20000bac:	4b01      	ldr	r3, [pc, #4]	; (20000bb4 <check_array_range_pass(unsigned int)+0x10>)
20000bae:	62da      	str	r2, [r3, #44]	; 0x2c
20000bb0:	4770      	bx	lr
20000bb2:	bf00      	nop
20000bb4:	200022c0 	.word	0x200022c0

20000bb8 <check_array_range_fail(unsigned int)>:
20000bb8:	2816      	cmp	r0, #22
20000bba:	bf94      	ite	ls
20000bbc:	2295      	movls	r2, #149	; 0x95
20000bbe:	2297      	movhi	r2, #151	; 0x97
20000bc0:	4b01      	ldr	r3, [pc, #4]	; (20000bc8 <check_array_range_fail(unsigned int)+0x10>)
20000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
20000bc4:	4770      	bx	lr
20000bc6:	bf00      	nop
20000bc8:	200022c0 	.word	0x200022c0

20000bcc <check_bits_range_pass(unsigned int)>:
20000bcc:	280f      	cmp	r0, #15
20000bce:	bf94      	ite	ls
20000bd0:	229d      	movls	r2, #157	; 0x9d
20000bd2:	22a3      	movhi	r2, #163	; 0xa3
20000bd4:	4b01      	ldr	r3, [pc, #4]	; (20000bdc <check_bits_range_pass(unsigned int)+0x10>)
20000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
20000bd8:	4770      	bx	lr
20000bda:	bf00      	nop
20000bdc:	200022c0 	.word	0x200022c0

20000be0 <check_bits_range_fail(unsigned int)>:
20000be0:	280f      	cmp	r0, #15
20000be2:	bf94      	ite	ls
20000be4:	22a7      	movls	r2, #167	; 0xa7
20000be6:	22ad      	movhi	r2, #173	; 0xad
20000be8:	4b01      	ldr	r3, [pc, #4]	; (20000bf0 <check_bits_range_fail(unsigned int)+0x10>)
20000bea:	62da      	str	r2, [r3, #44]	; 0x2c
20000bec:	4770      	bx	lr
20000bee:	bf00      	nop
20000bf0:	200022c0 	.word	0x200022c0

20000bf4 <check_mskd_range_pass(unsigned int)>:
20000bf4:	281f      	cmp	r0, #31
20000bf6:	bf94      	ite	ls
20000bf8:	22b3      	movls	r2, #179	; 0xb3
20000bfa:	22b5      	movhi	r2, #181	; 0xb5
20000bfc:	4b01      	ldr	r3, [pc, #4]	; (20000c04 <check_mskd_range_pass(unsigned int)+0x10>)
20000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
20000c00:	4770      	bx	lr
20000c02:	bf00      	nop
20000c04:	200022c0 	.word	0x200022c0

20000c08 <check_mskd_range_fail(unsigned int)>:
20000c08:	281f      	cmp	r0, #31
20000c0a:	bf94      	ite	ls
20000c0c:	22bf      	movls	r2, #191	; 0xbf
20000c0e:	22c1      	movhi	r2, #193	; 0xc1
20000c10:	4b01      	ldr	r3, [pc, #4]	; (20000c18 <check_mskd_range_fail(unsigned int)+0x10>)
20000c12:	62da      	str	r2, [r3, #44]	; 0x2c
20000c14:	4770      	bx	lr
20000c16:	bf00      	nop
20000c18:	200022c0 	.word	0x200022c0

20000c1c <bits_extract_ne()>:
20000c1c:	2220      	movs	r2, #32
20000c1e:	4b04      	ldr	r3, [pc, #16]	; (20000c30 <bits_extract_ne()+0x14>)
20000c20:	605a      	str	r2, [r3, #4]
20000c22:	685a      	ldr	r2, [r3, #4]
20000c24:	2a20      	cmp	r2, #32
20000c26:	bf14      	ite	ne
20000c28:	2202      	movne	r2, #2
20000c2a:	2204      	moveq	r2, #4
20000c2c:	605a      	str	r2, [r3, #4]
20000c2e:	4770      	bx	lr
20000c30:	20002480 	.word	0x20002480

20000c34 <mskd_extract_geq()>:
20000c34:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000c38:	4b04      	ldr	r3, [pc, #16]	; (20000c4c <mskd_extract_geq()+0x18>)
20000c3a:	605a      	str	r2, [r3, #4]
20000c3c:	685b      	ldr	r3, [r3, #4]
20000c3e:	4293      	cmp	r3, r2
20000c40:	bf2c      	ite	cs
20000c42:	2220      	movcs	r2, #32
20000c44:	2240      	movcc	r2, #64	; 0x40
20000c46:	4b02      	ldr	r3, [pc, #8]	; (20000c50 <mskd_extract_geq()+0x1c>)
20000c48:	605a      	str	r2, [r3, #4]
20000c4a:	4770      	bx	lr
20000c4c:	200023e0 	.word	0x200023e0
20000c50:	20002480 	.word	0x20002480

20000c54 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
20000c54:	b410      	push	{r4}
20000c56:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
20000c5a:	4b04      	ldr	r3, [pc, #16]	; (20000c6c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
20000c5c:	4a04      	ldr	r2, [pc, #16]	; (20000c70 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
20000c5e:	605c      	str	r4, [r3, #4]
20000c60:	685b      	ldr	r3, [r3, #4]
20000c62:	bc10      	pop	{r4}
20000c64:	4018      	ands	r0, r3
20000c66:	40c8      	lsrs	r0, r1
20000c68:	62d0      	str	r0, [r2, #44]	; 0x2c
20000c6a:	4770      	bx	lr
20000c6c:	200023e0 	.word	0x200023e0
20000c70:	200022c0 	.word	0x200022c0

20000c74 <call_shifted_const_val()>:
20000c74:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000c78:	2119      	movs	r1, #25
20000c7a:	f7ff bfeb 	b.w	20000c54 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000c7e:	bf00      	nop

20000c80 <call_shifted_var_val()>:
20000c80:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000c84:	2119      	movs	r1, #25
20000c86:	f7ff bfe5 	b.w	20000c54 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000c8a:	bf00      	nop

20000c8c <call_shifted_global_val()>:
20000c8c:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000c90:	2119      	movs	r1, #25
20000c92:	f7ff bfdf 	b.w	20000c54 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000c96:	bf00      	nop

20000c98 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
20000c98:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
20000c9c:	4b05      	ldr	r3, [pc, #20]	; (20000cb4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
20000c9e:	b410      	push	{r4}
20000ca0:	6059      	str	r1, [r3, #4]
20000ca2:	6804      	ldr	r4, [r0, #0]
20000ca4:	685b      	ldr	r3, [r3, #4]
20000ca6:	6841      	ldr	r1, [r0, #4]
20000ca8:	4023      	ands	r3, r4
20000caa:	4a03      	ldr	r2, [pc, #12]	; (20000cb8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
20000cac:	40cb      	lsrs	r3, r1
20000cae:	62d3      	str	r3, [r2, #44]	; 0x2c
20000cb0:	bc10      	pop	{r4}
20000cb2:	4770      	bx	lr
20000cb4:	200023e0 	.word	0x200023e0
20000cb8:	200022c0 	.word	0x200022c0

20000cbc <call_shifted_const_ref()>:
20000cbc:	b500      	push	{lr}
20000cbe:	4b06      	ldr	r3, [pc, #24]	; (20000cd8 <call_shifted_const_ref()+0x1c>)
20000cc0:	b082      	sub	sp, #8
20000cc2:	4668      	mov	r0, sp
20000cc4:	f103 0308 	add.w	r3, r3, #8
20000cc8:	cb0c      	ldmia	r3, {r2, r3}
20000cca:	e88d 000c 	stmia.w	sp, {r2, r3}
20000cce:	f7ff ffe3 	bl	20000c98 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000cd2:	b002      	add	sp, #8
20000cd4:	f85d fb04 	ldr.w	pc, [sp], #4
20000cd8:	20001598 	.word	0x20001598

20000cdc <call_shifted_var_ref()>:
20000cdc:	b500      	push	{lr}
20000cde:	4b06      	ldr	r3, [pc, #24]	; (20000cf8 <call_shifted_var_ref()+0x1c>)
20000ce0:	b082      	sub	sp, #8
20000ce2:	4668      	mov	r0, sp
20000ce4:	f103 0310 	add.w	r3, r3, #16
20000ce8:	cb0c      	ldmia	r3, {r2, r3}
20000cea:	e88d 000c 	stmia.w	sp, {r2, r3}
20000cee:	f7ff ffd3 	bl	20000c98 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000cf2:	b002      	add	sp, #8
20000cf4:	f85d fb04 	ldr.w	pc, [sp], #4
20000cf8:	20001598 	.word	0x20001598

20000cfc <call_shifted_global_ref()>:
20000cfc:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
20000d00:	2319      	movs	r3, #25
20000d02:	b500      	push	{lr}
20000d04:	b082      	sub	sp, #8
20000d06:	4668      	mov	r0, sp
20000d08:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d0c:	f7ff ffc4 	bl	20000c98 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d10:	b002      	add	sp, #8
20000d12:	f85d fb04 	ldr.w	pc, [sp], #4
20000d16:	bf00      	nop

20000d18 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>:
20000d18:	0643      	lsls	r3, r0, #25
20000d1a:	bf4c      	ite	mi
20000d1c:	2202      	movmi	r2, #2
20000d1e:	2204      	movpl	r2, #4
20000d20:	4b01      	ldr	r3, [pc, #4]	; (20000d28 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)+0x10>)
20000d22:	605a      	str	r2, [r3, #4]
20000d24:	4770      	bx	lr
20000d26:	bf00      	nop
20000d28:	20002480 	.word	0x20002480

20000d2c <call_copy_bits_val()>:
20000d2c:	2240      	movs	r2, #64	; 0x40
20000d2e:	4b02      	ldr	r3, [pc, #8]	; (20000d38 <call_copy_bits_val()+0xc>)
20000d30:	605a      	str	r2, [r3, #4]
20000d32:	6858      	ldr	r0, [r3, #4]
20000d34:	f7ff bff0 	b.w	20000d18 <copy_bits_val(regbits::Copy<unsigned long, mcu::Serial::Config>)>
20000d38:	20002480 	.word	0x20002480

20000d3c <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>:
20000d3c:	6803      	ldr	r3, [r0, #0]
20000d3e:	065b      	lsls	r3, r3, #25
20000d40:	bf4c      	ite	mi
20000d42:	2202      	movmi	r2, #2
20000d44:	2204      	movpl	r2, #4
20000d46:	4b01      	ldr	r3, [pc, #4]	; (20000d4c <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)+0x10>)
20000d48:	605a      	str	r2, [r3, #4]
20000d4a:	4770      	bx	lr
20000d4c:	20002480 	.word	0x20002480

20000d50 <call_copy_bits_ref()>:
20000d50:	2240      	movs	r2, #64	; 0x40
20000d52:	b500      	push	{lr}
20000d54:	4b05      	ldr	r3, [pc, #20]	; (20000d6c <call_copy_bits_ref()+0x1c>)
20000d56:	b081      	sub	sp, #4
20000d58:	605a      	str	r2, [r3, #4]
20000d5a:	685b      	ldr	r3, [r3, #4]
20000d5c:	4668      	mov	r0, sp
20000d5e:	9300      	str	r3, [sp, #0]
20000d60:	f7ff ffec 	bl	20000d3c <copy_bits_ref(regbits::Copy<unsigned long, mcu::Serial::Config> const&)>
20000d64:	b001      	add	sp, #4
20000d66:	f85d fb04 	ldr.w	pc, [sp], #4
20000d6a:	bf00      	nop
20000d6c:	20002480 	.word	0x20002480

20000d70 <run>:
20000d70:	b510      	push	{r4, lr}
20000d72:	4cb2      	ldr	r4, [pc, #712]	; (2000103c <run+0x2cc>)
20000d74:	7823      	ldrb	r3, [r4, #0]
20000d76:	2b00      	cmp	r3, #0
20000d78:	f000 82de 	beq.w	20001338 <run+0x5c8>
20000d7c:	68a1      	ldr	r1, [r4, #8]
20000d7e:	7b23      	ldrb	r3, [r4, #12]
20000d80:	b91b      	cbnz	r3, 20000d8a <run+0x1a>
20000d82:	2201      	movs	r2, #1
20000d84:	4bae      	ldr	r3, [pc, #696]	; (20001040 <run+0x2d0>)
20000d86:	7322      	strb	r2, [r4, #12]
20000d88:	6163      	str	r3, [r4, #20]
20000d8a:	7e23      	ldrb	r3, [r4, #24]
20000d8c:	b91b      	cbnz	r3, 20000d96 <run+0x26>
20000d8e:	2201      	movs	r2, #1
20000d90:	4bac      	ldr	r3, [pc, #688]	; (20001044 <run+0x2d4>)
20000d92:	7622      	strb	r2, [r4, #24]
20000d94:	6223      	str	r3, [r4, #32]
20000d96:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
20000d9a:	b923      	cbnz	r3, 20000da6 <run+0x36>
20000d9c:	2201      	movs	r2, #1
20000d9e:	4baa      	ldr	r3, [pc, #680]	; (20001048 <run+0x2d8>)
20000da0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
20000da4:	62e3      	str	r3, [r4, #44]	; 0x2c
20000da6:	2200      	movs	r2, #0
20000da8:	48a8      	ldr	r0, [pc, #672]	; (2000104c <run+0x2dc>)
20000daa:	f000 fb33 	bl	20001414 <do_test>
20000dae:	68a1      	ldr	r1, [r4, #8]
20000db0:	2201      	movs	r2, #1
20000db2:	48a7      	ldr	r0, [pc, #668]	; (20001050 <run+0x2e0>)
20000db4:	f000 fb2e 	bl	20001414 <do_test>
20000db8:	68a1      	ldr	r1, [r4, #8]
20000dba:	2202      	movs	r2, #2
20000dbc:	48a5      	ldr	r0, [pc, #660]	; (20001054 <run+0x2e4>)
20000dbe:	f000 fb29 	bl	20001414 <do_test>
20000dc2:	68a1      	ldr	r1, [r4, #8]
20000dc4:	2203      	movs	r2, #3
20000dc6:	48a4      	ldr	r0, [pc, #656]	; (20001058 <run+0x2e8>)
20000dc8:	f000 fb24 	bl	20001414 <do_test>
20000dcc:	68a1      	ldr	r1, [r4, #8]
20000dce:	2204      	movs	r2, #4
20000dd0:	48a2      	ldr	r0, [pc, #648]	; (2000105c <run+0x2ec>)
20000dd2:	f000 fb1f 	bl	20001414 <do_test>
20000dd6:	68a1      	ldr	r1, [r4, #8]
20000dd8:	2205      	movs	r2, #5
20000dda:	48a1      	ldr	r0, [pc, #644]	; (20001060 <run+0x2f0>)
20000ddc:	f000 fb1a 	bl	20001414 <do_test>
20000de0:	68a1      	ldr	r1, [r4, #8]
20000de2:	2206      	movs	r2, #6
20000de4:	489f      	ldr	r0, [pc, #636]	; (20001064 <run+0x2f4>)
20000de6:	f000 fb15 	bl	20001414 <do_test>
20000dea:	68a1      	ldr	r1, [r4, #8]
20000dec:	2207      	movs	r2, #7
20000dee:	489e      	ldr	r0, [pc, #632]	; (20001068 <run+0x2f8>)
20000df0:	f000 fb10 	bl	20001414 <do_test>
20000df4:	68a1      	ldr	r1, [r4, #8]
20000df6:	2208      	movs	r2, #8
20000df8:	489c      	ldr	r0, [pc, #624]	; (2000106c <run+0x2fc>)
20000dfa:	f000 fb0b 	bl	20001414 <do_test>
20000dfe:	68a1      	ldr	r1, [r4, #8]
20000e00:	2209      	movs	r2, #9
20000e02:	489b      	ldr	r0, [pc, #620]	; (20001070 <run+0x300>)
20000e04:	f000 fb06 	bl	20001414 <do_test>
20000e08:	68a1      	ldr	r1, [r4, #8]
20000e0a:	220a      	movs	r2, #10
20000e0c:	4899      	ldr	r0, [pc, #612]	; (20001074 <run+0x304>)
20000e0e:	f000 fb01 	bl	20001414 <do_test>
20000e12:	68a1      	ldr	r1, [r4, #8]
20000e14:	220b      	movs	r2, #11
20000e16:	4898      	ldr	r0, [pc, #608]	; (20001078 <run+0x308>)
20000e18:	f000 fafc 	bl	20001414 <do_test>
20000e1c:	68a1      	ldr	r1, [r4, #8]
20000e1e:	220c      	movs	r2, #12
20000e20:	4896      	ldr	r0, [pc, #600]	; (2000107c <run+0x30c>)
20000e22:	f000 faf7 	bl	20001414 <do_test>
20000e26:	68a1      	ldr	r1, [r4, #8]
20000e28:	220d      	movs	r2, #13
20000e2a:	4895      	ldr	r0, [pc, #596]	; (20001080 <run+0x310>)
20000e2c:	f000 faf2 	bl	20001414 <do_test>
20000e30:	68a1      	ldr	r1, [r4, #8]
20000e32:	220e      	movs	r2, #14
20000e34:	4893      	ldr	r0, [pc, #588]	; (20001084 <run+0x314>)
20000e36:	f000 faed 	bl	20001414 <do_test>
20000e3a:	68a1      	ldr	r1, [r4, #8]
20000e3c:	220f      	movs	r2, #15
20000e3e:	4892      	ldr	r0, [pc, #584]	; (20001088 <run+0x318>)
20000e40:	f000 fae8 	bl	20001414 <do_test>
20000e44:	68a1      	ldr	r1, [r4, #8]
20000e46:	2210      	movs	r2, #16
20000e48:	4890      	ldr	r0, [pc, #576]	; (2000108c <run+0x31c>)
20000e4a:	f000 fae3 	bl	20001414 <do_test>
20000e4e:	68a1      	ldr	r1, [r4, #8]
20000e50:	2211      	movs	r2, #17
20000e52:	488f      	ldr	r0, [pc, #572]	; (20001090 <run+0x320>)
20000e54:	f000 fade 	bl	20001414 <do_test>
20000e58:	68a1      	ldr	r1, [r4, #8]
20000e5a:	2212      	movs	r2, #18
20000e5c:	488d      	ldr	r0, [pc, #564]	; (20001094 <run+0x324>)
20000e5e:	f000 fad9 	bl	20001414 <do_test>
20000e62:	68a1      	ldr	r1, [r4, #8]
20000e64:	2213      	movs	r2, #19
20000e66:	488c      	ldr	r0, [pc, #560]	; (20001098 <run+0x328>)
20000e68:	f000 fad4 	bl	20001414 <do_test>
20000e6c:	68a1      	ldr	r1, [r4, #8]
20000e6e:	2214      	movs	r2, #20
20000e70:	488a      	ldr	r0, [pc, #552]	; (2000109c <run+0x32c>)
20000e72:	f000 facf 	bl	20001414 <do_test>
20000e76:	68a1      	ldr	r1, [r4, #8]
20000e78:	2215      	movs	r2, #21
20000e7a:	4889      	ldr	r0, [pc, #548]	; (200010a0 <run+0x330>)
20000e7c:	f000 faca 	bl	20001414 <do_test>
20000e80:	68a1      	ldr	r1, [r4, #8]
20000e82:	2216      	movs	r2, #22
20000e84:	4887      	ldr	r0, [pc, #540]	; (200010a4 <run+0x334>)
20000e86:	f000 fac5 	bl	20001414 <do_test>
20000e8a:	68a1      	ldr	r1, [r4, #8]
20000e8c:	2217      	movs	r2, #23
20000e8e:	4886      	ldr	r0, [pc, #536]	; (200010a8 <run+0x338>)
20000e90:	f000 fac0 	bl	20001414 <do_test>
20000e94:	68a1      	ldr	r1, [r4, #8]
20000e96:	2218      	movs	r2, #24
20000e98:	4884      	ldr	r0, [pc, #528]	; (200010ac <run+0x33c>)
20000e9a:	f000 fabb 	bl	20001414 <do_test>
20000e9e:	68a1      	ldr	r1, [r4, #8]
20000ea0:	2219      	movs	r2, #25
20000ea2:	4883      	ldr	r0, [pc, #524]	; (200010b0 <run+0x340>)
20000ea4:	f000 fab6 	bl	20001414 <do_test>
20000ea8:	68a1      	ldr	r1, [r4, #8]
20000eaa:	221a      	movs	r2, #26
20000eac:	4881      	ldr	r0, [pc, #516]	; (200010b4 <run+0x344>)
20000eae:	f000 fab1 	bl	20001414 <do_test>
20000eb2:	68a1      	ldr	r1, [r4, #8]
20000eb4:	221b      	movs	r2, #27
20000eb6:	4880      	ldr	r0, [pc, #512]	; (200010b8 <run+0x348>)
20000eb8:	f000 faac 	bl	20001414 <do_test>
20000ebc:	68a1      	ldr	r1, [r4, #8]
20000ebe:	221c      	movs	r2, #28
20000ec0:	487e      	ldr	r0, [pc, #504]	; (200010bc <run+0x34c>)
20000ec2:	f000 faa7 	bl	20001414 <do_test>
20000ec6:	68a1      	ldr	r1, [r4, #8]
20000ec8:	221d      	movs	r2, #29
20000eca:	487d      	ldr	r0, [pc, #500]	; (200010c0 <run+0x350>)
20000ecc:	f000 faa2 	bl	20001414 <do_test>
20000ed0:	68a1      	ldr	r1, [r4, #8]
20000ed2:	221e      	movs	r2, #30
20000ed4:	487b      	ldr	r0, [pc, #492]	; (200010c4 <run+0x354>)
20000ed6:	f000 fa9d 	bl	20001414 <do_test>
20000eda:	68a1      	ldr	r1, [r4, #8]
20000edc:	221f      	movs	r2, #31
20000ede:	487a      	ldr	r0, [pc, #488]	; (200010c8 <run+0x358>)
20000ee0:	f000 fa98 	bl	20001414 <do_test>
20000ee4:	68a1      	ldr	r1, [r4, #8]
20000ee6:	2220      	movs	r2, #32
20000ee8:	4878      	ldr	r0, [pc, #480]	; (200010cc <run+0x35c>)
20000eea:	f000 fa93 	bl	20001414 <do_test>
20000eee:	68a1      	ldr	r1, [r4, #8]
20000ef0:	2221      	movs	r2, #33	; 0x21
20000ef2:	4877      	ldr	r0, [pc, #476]	; (200010d0 <run+0x360>)
20000ef4:	f000 fa8e 	bl	20001414 <do_test>
20000ef8:	68a1      	ldr	r1, [r4, #8]
20000efa:	2222      	movs	r2, #34	; 0x22
20000efc:	4875      	ldr	r0, [pc, #468]	; (200010d4 <run+0x364>)
20000efe:	f000 fa89 	bl	20001414 <do_test>
20000f02:	68a1      	ldr	r1, [r4, #8]
20000f04:	2223      	movs	r2, #35	; 0x23
20000f06:	4874      	ldr	r0, [pc, #464]	; (200010d8 <run+0x368>)
20000f08:	f000 fa84 	bl	20001414 <do_test>
20000f0c:	68a1      	ldr	r1, [r4, #8]
20000f0e:	2224      	movs	r2, #36	; 0x24
20000f10:	4872      	ldr	r0, [pc, #456]	; (200010dc <run+0x36c>)
20000f12:	f000 fa7f 	bl	20001414 <do_test>
20000f16:	68a1      	ldr	r1, [r4, #8]
20000f18:	2225      	movs	r2, #37	; 0x25
20000f1a:	4871      	ldr	r0, [pc, #452]	; (200010e0 <run+0x370>)
20000f1c:	f000 fa7a 	bl	20001414 <do_test>
20000f20:	68a1      	ldr	r1, [r4, #8]
20000f22:	2226      	movs	r2, #38	; 0x26
20000f24:	486f      	ldr	r0, [pc, #444]	; (200010e4 <run+0x374>)
20000f26:	f000 fa75 	bl	20001414 <do_test>
20000f2a:	68a1      	ldr	r1, [r4, #8]
20000f2c:	2227      	movs	r2, #39	; 0x27
20000f2e:	486e      	ldr	r0, [pc, #440]	; (200010e8 <run+0x378>)
20000f30:	f000 fa70 	bl	20001414 <do_test>
20000f34:	68a1      	ldr	r1, [r4, #8]
20000f36:	2228      	movs	r2, #40	; 0x28
20000f38:	486c      	ldr	r0, [pc, #432]	; (200010ec <run+0x37c>)
20000f3a:	f000 fa6b 	bl	20001414 <do_test>
20000f3e:	68a1      	ldr	r1, [r4, #8]
20000f40:	2229      	movs	r2, #41	; 0x29
20000f42:	486b      	ldr	r0, [pc, #428]	; (200010f0 <run+0x380>)
20000f44:	f000 fa66 	bl	20001414 <do_test>
20000f48:	68a1      	ldr	r1, [r4, #8]
20000f4a:	222a      	movs	r2, #42	; 0x2a
20000f4c:	4869      	ldr	r0, [pc, #420]	; (200010f4 <run+0x384>)
20000f4e:	f000 fa61 	bl	20001414 <do_test>
20000f52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20000f54:	222b      	movs	r2, #43	; 0x2b
20000f56:	4868      	ldr	r0, [pc, #416]	; (200010f8 <run+0x388>)
20000f58:	f000 fa5c 	bl	20001414 <do_test>
20000f5c:	68a1      	ldr	r1, [r4, #8]
20000f5e:	222c      	movs	r2, #44	; 0x2c
20000f60:	4866      	ldr	r0, [pc, #408]	; (200010fc <run+0x38c>)
20000f62:	f000 fa57 	bl	20001414 <do_test>
20000f66:	68a1      	ldr	r1, [r4, #8]
20000f68:	222d      	movs	r2, #45	; 0x2d
20000f6a:	4865      	ldr	r0, [pc, #404]	; (20001100 <run+0x390>)
20000f6c:	f000 fa52 	bl	20001414 <do_test>
20000f70:	68a1      	ldr	r1, [r4, #8]
20000f72:	222e      	movs	r2, #46	; 0x2e
20000f74:	4863      	ldr	r0, [pc, #396]	; (20001104 <run+0x394>)
20000f76:	f000 fa4d 	bl	20001414 <do_test>
20000f7a:	68a1      	ldr	r1, [r4, #8]
20000f7c:	222f      	movs	r2, #47	; 0x2f
20000f7e:	4862      	ldr	r0, [pc, #392]	; (20001108 <run+0x398>)
20000f80:	f000 fa48 	bl	20001414 <do_test>
20000f84:	68a1      	ldr	r1, [r4, #8]
20000f86:	2230      	movs	r2, #48	; 0x30
20000f88:	4860      	ldr	r0, [pc, #384]	; (2000110c <run+0x39c>)
20000f8a:	f000 fa43 	bl	20001414 <do_test>
20000f8e:	68a1      	ldr	r1, [r4, #8]
20000f90:	2231      	movs	r2, #49	; 0x31
20000f92:	485f      	ldr	r0, [pc, #380]	; (20001110 <run+0x3a0>)
20000f94:	f000 fa3e 	bl	20001414 <do_test>
20000f98:	68a1      	ldr	r1, [r4, #8]
20000f9a:	2232      	movs	r2, #50	; 0x32
20000f9c:	485d      	ldr	r0, [pc, #372]	; (20001114 <run+0x3a4>)
20000f9e:	f000 fa39 	bl	20001414 <do_test>
20000fa2:	68a1      	ldr	r1, [r4, #8]
20000fa4:	2233      	movs	r2, #51	; 0x33
20000fa6:	485c      	ldr	r0, [pc, #368]	; (20001118 <run+0x3a8>)
20000fa8:	f000 fa34 	bl	20001414 <do_test>
20000fac:	68a1      	ldr	r1, [r4, #8]
20000fae:	2234      	movs	r2, #52	; 0x34
20000fb0:	485a      	ldr	r0, [pc, #360]	; (2000111c <run+0x3ac>)
20000fb2:	f000 fa2f 	bl	20001414 <do_test>
20000fb6:	68a1      	ldr	r1, [r4, #8]
20000fb8:	2235      	movs	r2, #53	; 0x35
20000fba:	4859      	ldr	r0, [pc, #356]	; (20001120 <run+0x3b0>)
20000fbc:	f000 fa2a 	bl	20001414 <do_test>
20000fc0:	68a1      	ldr	r1, [r4, #8]
20000fc2:	2236      	movs	r2, #54	; 0x36
20000fc4:	4857      	ldr	r0, [pc, #348]	; (20001124 <run+0x3b4>)
20000fc6:	f000 fa25 	bl	20001414 <do_test>
20000fca:	68a1      	ldr	r1, [r4, #8]
20000fcc:	2237      	movs	r2, #55	; 0x37
20000fce:	4856      	ldr	r0, [pc, #344]	; (20001128 <run+0x3b8>)
20000fd0:	f000 fa20 	bl	20001414 <do_test>
20000fd4:	68a1      	ldr	r1, [r4, #8]
20000fd6:	2238      	movs	r2, #56	; 0x38
20000fd8:	4854      	ldr	r0, [pc, #336]	; (2000112c <run+0x3bc>)
20000fda:	f000 fa1b 	bl	20001414 <do_test>
20000fde:	68a1      	ldr	r1, [r4, #8]
20000fe0:	2239      	movs	r2, #57	; 0x39
20000fe2:	4853      	ldr	r0, [pc, #332]	; (20001130 <run+0x3c0>)
20000fe4:	f000 fa16 	bl	20001414 <do_test>
20000fe8:	68a1      	ldr	r1, [r4, #8]
20000fea:	223a      	movs	r2, #58	; 0x3a
20000fec:	4851      	ldr	r0, [pc, #324]	; (20001134 <run+0x3c4>)
20000fee:	f000 fa11 	bl	20001414 <do_test>
20000ff2:	68a1      	ldr	r1, [r4, #8]
20000ff4:	223b      	movs	r2, #59	; 0x3b
20000ff6:	4850      	ldr	r0, [pc, #320]	; (20001138 <run+0x3c8>)
20000ff8:	f000 fa0c 	bl	20001414 <do_test>
20000ffc:	68a1      	ldr	r1, [r4, #8]
20000ffe:	223c      	movs	r2, #60	; 0x3c
20001000:	484e      	ldr	r0, [pc, #312]	; (2000113c <run+0x3cc>)
20001002:	f000 fa07 	bl	20001414 <do_test>
20001006:	68a1      	ldr	r1, [r4, #8]
20001008:	223d      	movs	r2, #61	; 0x3d
2000100a:	484d      	ldr	r0, [pc, #308]	; (20001140 <run+0x3d0>)
2000100c:	f000 fa02 	bl	20001414 <do_test>
20001010:	6961      	ldr	r1, [r4, #20]
20001012:	223e      	movs	r2, #62	; 0x3e
20001014:	484b      	ldr	r0, [pc, #300]	; (20001144 <run+0x3d4>)
20001016:	f000 f9fd 	bl	20001414 <do_test>
2000101a:	6961      	ldr	r1, [r4, #20]
2000101c:	223f      	movs	r2, #63	; 0x3f
2000101e:	484a      	ldr	r0, [pc, #296]	; (20001148 <run+0x3d8>)
20001020:	f000 f9f8 	bl	20001414 <do_test>
20001024:	6961      	ldr	r1, [r4, #20]
20001026:	2240      	movs	r2, #64	; 0x40
20001028:	4848      	ldr	r0, [pc, #288]	; (2000114c <run+0x3dc>)
2000102a:	f000 f9f3 	bl	20001414 <do_test>
2000102e:	68a1      	ldr	r1, [r4, #8]
20001030:	2241      	movs	r2, #65	; 0x41
20001032:	4847      	ldr	r0, [pc, #284]	; (20001150 <run+0x3e0>)
20001034:	f000 f9ee 	bl	20001414 <do_test>
20001038:	e08c      	b.n	20001154 <run+0x3e4>
2000103a:	bf00      	nop
2000103c:	200015b0 	.word	0x200015b0
20001040:	200023e4 	.word	0x200023e4
20001044:	200022ec 	.word	0x200022ec
20001048:	20002360 	.word	0x20002360
2000104c:	200000ed 	.word	0x200000ed
20001050:	200000f9 	.word	0x200000f9
20001054:	20000105 	.word	0x20000105
20001058:	20000115 	.word	0x20000115
2000105c:	20000125 	.word	0x20000125
20001060:	20000135 	.word	0x20000135
20001064:	20000145 	.word	0x20000145
20001068:	20000155 	.word	0x20000155
2000106c:	20000165 	.word	0x20000165
20001070:	20000175 	.word	0x20000175
20001074:	20000185 	.word	0x20000185
20001078:	20000191 	.word	0x20000191
2000107c:	2000019d 	.word	0x2000019d
20001080:	200001a9 	.word	0x200001a9
20001084:	200001b5 	.word	0x200001b5
20001088:	200001c5 	.word	0x200001c5
2000108c:	200001d5 	.word	0x200001d5
20001090:	200001e5 	.word	0x200001e5
20001094:	200001f5 	.word	0x200001f5
20001098:	20000209 	.word	0x20000209
2000109c:	2000021d 	.word	0x2000021d
200010a0:	2000022d 	.word	0x2000022d
200010a4:	2000023d 	.word	0x2000023d
200010a8:	20000255 	.word	0x20000255
200010ac:	2000026d 	.word	0x2000026d
200010b0:	20000279 	.word	0x20000279
200010b4:	20000285 	.word	0x20000285
200010b8:	20000295 	.word	0x20000295
200010bc:	200002a5 	.word	0x200002a5
200010c0:	200002b1 	.word	0x200002b1
200010c4:	200002bd 	.word	0x200002bd
200010c8:	200002c9 	.word	0x200002c9
200010cc:	200002d5 	.word	0x200002d5
200010d0:	200002e5 	.word	0x200002e5
200010d4:	200002f9 	.word	0x200002f9
200010d8:	20000321 	.word	0x20000321
200010dc:	2000033d 	.word	0x2000033d
200010e0:	20000361 	.word	0x20000361
200010e4:	20000379 	.word	0x20000379
200010e8:	200003a9 	.word	0x200003a9
200010ec:	200003d5 	.word	0x200003d5
200010f0:	200003f9 	.word	0x200003f9
200010f4:	20000411 	.word	0x20000411
200010f8:	20000425 	.word	0x20000425
200010fc:	2000084d 	.word	0x2000084d
20001100:	20000851 	.word	0x20000851
20001104:	2000088d 	.word	0x2000088d
20001108:	20000879 	.word	0x20000879
2000110c:	20000825 	.word	0x20000825
20001110:	2000082d 	.word	0x2000082d
20001114:	20000901 	.word	0x20000901
20001118:	200008e5 	.word	0x200008e5
2000111c:	2000093d 	.word	0x2000093d
20001120:	20000951 	.word	0x20000951
20001124:	20000965 	.word	0x20000965
20001128:	2000097d 	.word	0x2000097d
2000112c:	200009a5 	.word	0x200009a5
20001130:	200009d1 	.word	0x200009d1
20001134:	200009e9 	.word	0x200009e9
20001138:	20000a05 	.word	0x20000a05
2000113c:	20000a21 	.word	0x20000a21
20001140:	20000a3d 	.word	0x20000a3d
20001144:	20000a51 	.word	0x20000a51
20001148:	20000a7d 	.word	0x20000a7d
2000114c:	20000ac9 	.word	0x20000ac9
20001150:	20000af5 	.word	0x20000af5
20001154:	6a21      	ldr	r1, [r4, #32]
20001156:	2242      	movs	r2, #66	; 0x42
20001158:	487a      	ldr	r0, [pc, #488]	; (20001344 <run+0x5d4>)
2000115a:	f000 f95b 	bl	20001414 <do_test>
2000115e:	6a21      	ldr	r1, [r4, #32]
20001160:	2243      	movs	r2, #67	; 0x43
20001162:	4879      	ldr	r0, [pc, #484]	; (20001348 <run+0x5d8>)
20001164:	f000 f956 	bl	20001414 <do_test>
20001168:	68a1      	ldr	r1, [r4, #8]
2000116a:	2244      	movs	r2, #68	; 0x44
2000116c:	4877      	ldr	r0, [pc, #476]	; (2000134c <run+0x5dc>)
2000116e:	f000 f951 	bl	20001414 <do_test>
20001172:	68a1      	ldr	r1, [r4, #8]
20001174:	2245      	movs	r2, #69	; 0x45
20001176:	4876      	ldr	r0, [pc, #472]	; (20001350 <run+0x5e0>)
20001178:	f000 f94c 	bl	20001414 <do_test>
2000117c:	6a21      	ldr	r1, [r4, #32]
2000117e:	2246      	movs	r2, #70	; 0x46
20001180:	4874      	ldr	r0, [pc, #464]	; (20001354 <run+0x5e4>)
20001182:	f000 f947 	bl	20001414 <do_test>
20001186:	6a21      	ldr	r1, [r4, #32]
20001188:	2247      	movs	r2, #71	; 0x47
2000118a:	4873      	ldr	r0, [pc, #460]	; (20001358 <run+0x5e8>)
2000118c:	f000 f942 	bl	20001414 <do_test>
20001190:	68a1      	ldr	r1, [r4, #8]
20001192:	2248      	movs	r2, #72	; 0x48
20001194:	4871      	ldr	r0, [pc, #452]	; (2000135c <run+0x5ec>)
20001196:	f000 f93d 	bl	20001414 <do_test>
2000119a:	68a1      	ldr	r1, [r4, #8]
2000119c:	2249      	movs	r2, #73	; 0x49
2000119e:	4870      	ldr	r0, [pc, #448]	; (20001360 <run+0x5f0>)
200011a0:	f000 f938 	bl	20001414 <do_test>
200011a4:	68a1      	ldr	r1, [r4, #8]
200011a6:	224a      	movs	r2, #74	; 0x4a
200011a8:	486e      	ldr	r0, [pc, #440]	; (20001364 <run+0x5f4>)
200011aa:	f000 f933 	bl	20001414 <do_test>
200011ae:	68a1      	ldr	r1, [r4, #8]
200011b0:	224b      	movs	r2, #75	; 0x4b
200011b2:	486d      	ldr	r0, [pc, #436]	; (20001368 <run+0x5f8>)
200011b4:	f000 f92e 	bl	20001414 <do_test>
200011b8:	68a1      	ldr	r1, [r4, #8]
200011ba:	224c      	movs	r2, #76	; 0x4c
200011bc:	486b      	ldr	r0, [pc, #428]	; (2000136c <run+0x5fc>)
200011be:	f000 f929 	bl	20001414 <do_test>
200011c2:	68a1      	ldr	r1, [r4, #8]
200011c4:	224d      	movs	r2, #77	; 0x4d
200011c6:	486a      	ldr	r0, [pc, #424]	; (20001370 <run+0x600>)
200011c8:	f000 f924 	bl	20001414 <do_test>
200011cc:	68a1      	ldr	r1, [r4, #8]
200011ce:	224e      	movs	r2, #78	; 0x4e
200011d0:	4868      	ldr	r0, [pc, #416]	; (20001374 <run+0x604>)
200011d2:	f000 f91f 	bl	20001414 <do_test>
200011d6:	68a1      	ldr	r1, [r4, #8]
200011d8:	224f      	movs	r2, #79	; 0x4f
200011da:	4866      	ldr	r0, [pc, #408]	; (20001374 <run+0x604>)
200011dc:	f000 f91a 	bl	20001414 <do_test>
200011e0:	68a1      	ldr	r1, [r4, #8]
200011e2:	2250      	movs	r2, #80	; 0x50
200011e4:	4864      	ldr	r0, [pc, #400]	; (20001378 <run+0x608>)
200011e6:	f000 f915 	bl	20001414 <do_test>
200011ea:	68a1      	ldr	r1, [r4, #8]
200011ec:	2251      	movs	r2, #81	; 0x51
200011ee:	4863      	ldr	r0, [pc, #396]	; (2000137c <run+0x60c>)
200011f0:	f000 f910 	bl	20001414 <do_test>
200011f4:	68a1      	ldr	r1, [r4, #8]
200011f6:	2252      	movs	r2, #82	; 0x52
200011f8:	4861      	ldr	r0, [pc, #388]	; (20001380 <run+0x610>)
200011fa:	f000 f90b 	bl	20001414 <do_test>
200011fe:	68a1      	ldr	r1, [r4, #8]
20001200:	2253      	movs	r2, #83	; 0x53
20001202:	4860      	ldr	r0, [pc, #384]	; (20001384 <run+0x614>)
20001204:	f000 f906 	bl	20001414 <do_test>
20001208:	68a1      	ldr	r1, [r4, #8]
2000120a:	2254      	movs	r2, #84	; 0x54
2000120c:	485e      	ldr	r0, [pc, #376]	; (20001388 <run+0x618>)
2000120e:	f000 f901 	bl	20001414 <do_test>
20001212:	68a1      	ldr	r1, [r4, #8]
20001214:	2255      	movs	r2, #85	; 0x55
20001216:	485b      	ldr	r0, [pc, #364]	; (20001384 <run+0x614>)
20001218:	f000 f8fc 	bl	20001414 <do_test>
2000121c:	68a1      	ldr	r1, [r4, #8]
2000121e:	2256      	movs	r2, #86	; 0x56
20001220:	485a      	ldr	r0, [pc, #360]	; (2000138c <run+0x61c>)
20001222:	f000 f8f7 	bl	20001414 <do_test>
20001226:	68a1      	ldr	r1, [r4, #8]
20001228:	2257      	movs	r2, #87	; 0x57
2000122a:	4859      	ldr	r0, [pc, #356]	; (20001390 <run+0x620>)
2000122c:	f000 f8f2 	bl	20001414 <do_test>
20001230:	6a21      	ldr	r1, [r4, #32]
20001232:	2258      	movs	r2, #88	; 0x58
20001234:	4857      	ldr	r0, [pc, #348]	; (20001394 <run+0x624>)
20001236:	f000 f8ed 	bl	20001414 <do_test>
2000123a:	6a21      	ldr	r1, [r4, #32]
2000123c:	2259      	movs	r2, #89	; 0x59
2000123e:	4856      	ldr	r0, [pc, #344]	; (20001398 <run+0x628>)
20001240:	f000 f8e8 	bl	20001414 <do_test>
20001244:	68a1      	ldr	r1, [r4, #8]
20001246:	225a      	movs	r2, #90	; 0x5a
20001248:	4854      	ldr	r0, [pc, #336]	; (2000139c <run+0x62c>)
2000124a:	f000 f8e3 	bl	20001414 <do_test>
2000124e:	6a21      	ldr	r1, [r4, #32]
20001250:	225b      	movs	r2, #91	; 0x5b
20001252:	4853      	ldr	r0, [pc, #332]	; (200013a0 <run+0x630>)
20001254:	f000 f8de 	bl	20001414 <do_test>
20001258:	6a21      	ldr	r1, [r4, #32]
2000125a:	225c      	movs	r2, #92	; 0x5c
2000125c:	4851      	ldr	r0, [pc, #324]	; (200013a4 <run+0x634>)
2000125e:	f000 f8d9 	bl	20001414 <do_test>
20001262:	68a1      	ldr	r1, [r4, #8]
20001264:	225d      	movs	r2, #93	; 0x5d
20001266:	4850      	ldr	r0, [pc, #320]	; (200013a8 <run+0x638>)
20001268:	f000 f8d4 	bl	20001414 <do_test>
2000126c:	68a1      	ldr	r1, [r4, #8]
2000126e:	225e      	movs	r2, #94	; 0x5e
20001270:	484e      	ldr	r0, [pc, #312]	; (200013ac <run+0x63c>)
20001272:	f000 f8cf 	bl	20001414 <do_test>
20001276:	68a1      	ldr	r1, [r4, #8]
20001278:	225f      	movs	r2, #95	; 0x5f
2000127a:	484d      	ldr	r0, [pc, #308]	; (200013b0 <run+0x640>)
2000127c:	f000 f8ca 	bl	20001414 <do_test>
20001280:	68a1      	ldr	r1, [r4, #8]
20001282:	2260      	movs	r2, #96	; 0x60
20001284:	484b      	ldr	r0, [pc, #300]	; (200013b4 <run+0x644>)
20001286:	f000 f8c5 	bl	20001414 <do_test>
2000128a:	6a21      	ldr	r1, [r4, #32]
2000128c:	2261      	movs	r2, #97	; 0x61
2000128e:	484a      	ldr	r0, [pc, #296]	; (200013b8 <run+0x648>)
20001290:	f000 f8c0 	bl	20001414 <do_test>
20001294:	6a21      	ldr	r1, [r4, #32]
20001296:	2262      	movs	r2, #98	; 0x62
20001298:	4848      	ldr	r0, [pc, #288]	; (200013bc <run+0x64c>)
2000129a:	f000 f8bb 	bl	20001414 <do_test>
2000129e:	6a21      	ldr	r1, [r4, #32]
200012a0:	2263      	movs	r2, #99	; 0x63
200012a2:	4847      	ldr	r0, [pc, #284]	; (200013c0 <run+0x650>)
200012a4:	f000 f8b6 	bl	20001414 <do_test>
200012a8:	6a21      	ldr	r1, [r4, #32]
200012aa:	2264      	movs	r2, #100	; 0x64
200012ac:	4845      	ldr	r0, [pc, #276]	; (200013c4 <run+0x654>)
200012ae:	f000 f8b1 	bl	20001414 <do_test>
200012b2:	6a21      	ldr	r1, [r4, #32]
200012b4:	2265      	movs	r2, #101	; 0x65
200012b6:	4844      	ldr	r0, [pc, #272]	; (200013c8 <run+0x658>)
200012b8:	f000 f8ac 	bl	20001414 <do_test>
200012bc:	6a21      	ldr	r1, [r4, #32]
200012be:	2266      	movs	r2, #102	; 0x66
200012c0:	4842      	ldr	r0, [pc, #264]	; (200013cc <run+0x65c>)
200012c2:	f000 f8a7 	bl	20001414 <do_test>
200012c6:	68a1      	ldr	r1, [r4, #8]
200012c8:	2267      	movs	r2, #103	; 0x67
200012ca:	4841      	ldr	r0, [pc, #260]	; (200013d0 <run+0x660>)
200012cc:	f000 f8a2 	bl	20001414 <do_test>
200012d0:	68a1      	ldr	r1, [r4, #8]
200012d2:	2268      	movs	r2, #104	; 0x68
200012d4:	483f      	ldr	r0, [pc, #252]	; (200013d4 <run+0x664>)
200012d6:	f000 f89d 	bl	20001414 <do_test>
200012da:	68a1      	ldr	r1, [r4, #8]
200012dc:	2269      	movs	r2, #105	; 0x69
200012de:	483e      	ldr	r0, [pc, #248]	; (200013d8 <run+0x668>)
200012e0:	f000 f898 	bl	20001414 <do_test>
200012e4:	68a1      	ldr	r1, [r4, #8]
200012e6:	226a      	movs	r2, #106	; 0x6a
200012e8:	483c      	ldr	r0, [pc, #240]	; (200013dc <run+0x66c>)
200012ea:	f000 f893 	bl	20001414 <do_test>
200012ee:	68a1      	ldr	r1, [r4, #8]
200012f0:	226b      	movs	r2, #107	; 0x6b
200012f2:	483b      	ldr	r0, [pc, #236]	; (200013e0 <run+0x670>)
200012f4:	f000 f88e 	bl	20001414 <do_test>
200012f8:	68a1      	ldr	r1, [r4, #8]
200012fa:	226c      	movs	r2, #108	; 0x6c
200012fc:	4839      	ldr	r0, [pc, #228]	; (200013e4 <run+0x674>)
200012fe:	f000 f889 	bl	20001414 <do_test>
20001302:	68a1      	ldr	r1, [r4, #8]
20001304:	226d      	movs	r2, #109	; 0x6d
20001306:	4838      	ldr	r0, [pc, #224]	; (200013e8 <run+0x678>)
20001308:	f000 f884 	bl	20001414 <do_test>
2000130c:	68a1      	ldr	r1, [r4, #8]
2000130e:	226e      	movs	r2, #110	; 0x6e
20001310:	4836      	ldr	r0, [pc, #216]	; (200013ec <run+0x67c>)
20001312:	f000 f87f 	bl	20001414 <do_test>
20001316:	68a1      	ldr	r1, [r4, #8]
20001318:	226f      	movs	r2, #111	; 0x6f
2000131a:	4835      	ldr	r0, [pc, #212]	; (200013f0 <run+0x680>)
2000131c:	f000 f87a 	bl	20001414 <do_test>
20001320:	68a1      	ldr	r1, [r4, #8]
20001322:	2270      	movs	r2, #112	; 0x70
20001324:	4833      	ldr	r0, [pc, #204]	; (200013f4 <run+0x684>)
20001326:	f000 f875 	bl	20001414 <do_test>
2000132a:	68a1      	ldr	r1, [r4, #8]
2000132c:	2271      	movs	r2, #113	; 0x71
2000132e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20001332:	4831      	ldr	r0, [pc, #196]	; (200013f8 <run+0x688>)
20001334:	f000 b86e 	b.w	20001414 <do_test>
20001338:	2301      	movs	r3, #1
2000133a:	4930      	ldr	r1, [pc, #192]	; (200013fc <run+0x68c>)
2000133c:	7023      	strb	r3, [r4, #0]
2000133e:	60a1      	str	r1, [r4, #8]
20001340:	e51d      	b.n	20000d7e <run+0xe>
20001342:	bf00      	nop
20001344:	200007fd 	.word	0x200007fd
20001348:	200007a9 	.word	0x200007a9
2000134c:	20000b75 	.word	0x20000b75
20001350:	20000b9d 	.word	0x20000b9d
20001354:	20000451 	.word	0x20000451
20001358:	2000046d 	.word	0x2000046d
2000135c:	20000489 	.word	0x20000489
20001360:	200004b1 	.word	0x200004b1
20001364:	200004e9 	.word	0x200004e9
20001368:	20000511 	.word	0x20000511
2000136c:	20000549 	.word	0x20000549
20001370:	20000555 	.word	0x20000555
20001374:	20000561 	.word	0x20000561
20001378:	20000579 	.word	0x20000579
2000137c:	20000591 	.word	0x20000591
20001380:	200005a9 	.word	0x200005a9
20001384:	200005cd 	.word	0x200005cd
20001388:	200005ed 	.word	0x200005ed
2000138c:	20000611 	.word	0x20000611
20001390:	20000621 	.word	0x20000621
20001394:	20000635 	.word	0x20000635
20001398:	20000641 	.word	0x20000641
2000139c:	2000065d 	.word	0x2000065d
200013a0:	2000080d 	.word	0x2000080d
200013a4:	200007d1 	.word	0x200007d1
200013a8:	20000855 	.word	0x20000855
200013ac:	200008a1 	.word	0x200008a1
200013b0:	20000835 	.word	0x20000835
200013b4:	20000919 	.word	0x20000919
200013b8:	20000c75 	.word	0x20000c75
200013bc:	20000c81 	.word	0x20000c81
200013c0:	20000c8d 	.word	0x20000c8d
200013c4:	20000cbd 	.word	0x20000cbd
200013c8:	20000cdd 	.word	0x20000cdd
200013cc:	20000cfd 	.word	0x20000cfd
200013d0:	20000669 	.word	0x20000669
200013d4:	20000681 	.word	0x20000681
200013d8:	20000699 	.word	0x20000699
200013dc:	200006bd 	.word	0x200006bd
200013e0:	200006e1 	.word	0x200006e1
200013e4:	20000709 	.word	0x20000709
200013e8:	2000072d 	.word	0x2000072d
200013ec:	20000755 	.word	0x20000755
200013f0:	20000779 	.word	0x20000779
200013f4:	20000d2d 	.word	0x20000d2d
200013f8:	20000d51 	.word	0x20000d51
200013fc:	20002484 	.word	0x20002484

20001400 <memset>:
20001400:	4402      	add	r2, r0
20001402:	4290      	cmp	r0, r2
20001404:	d205      	bcs.n	20001412 <memset+0x12>
20001406:	4603      	mov	r3, r0
20001408:	b2c9      	uxtb	r1, r1
2000140a:	f803 1b01 	strb.w	r1, [r3], #1
2000140e:	429a      	cmp	r2, r3
20001410:	d1fb      	bne.n	2000140a <memset+0xa>
20001412:	4770      	bx	lr

20001414 <do_test>:
20001414:	2300      	movs	r3, #0
20001416:	b5f0      	push	{r4, r5, r6, r7, lr}
20001418:	460d      	mov	r5, r1
2000141a:	4614      	mov	r4, r2
2000141c:	600b      	str	r3, [r1, #0]
2000141e:	4607      	mov	r7, r0
20001420:	4780      	blx	r0
20001422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001426:	682a      	ldr	r2, [r5, #0]
20001428:	4e05      	ldr	r6, [pc, #20]	; (20001440 <do_test+0x2c>)
2000142a:	0064      	lsls	r4, r4, #1
2000142c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
20001430:	602b      	str	r3, [r5, #0]
20001432:	47b8      	blx	r7
20001434:	682b      	ldr	r3, [r5, #0]
20001436:	3401      	adds	r4, #1
20001438:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
2000143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000143e:	bf00      	nop
20001440:	200015e4 	.word	0x200015e4

20001444 <NMI_Handler>:
20001444:	e7fe      	b.n	20001444 <NMI_Handler>
20001446:	bf00      	nop

20001448 <HardFault_Handler>:
20001448:	e7fe      	b.n	20001448 <HardFault_Handler>
2000144a:	bf00      	nop

2000144c <MemManage_Handler>:
2000144c:	e7fe      	b.n	2000144c <MemManage_Handler>
2000144e:	bf00      	nop

20001450 <BusFault_Handler>:
20001450:	e7fe      	b.n	20001450 <BusFault_Handler>
20001452:	bf00      	nop

20001454 <UsageFault_Handler>:
20001454:	e7fe      	b.n	20001454 <UsageFault_Handler>
20001456:	bf00      	nop

20001458 <Reserved1_Handler>:
20001458:	e7fe      	b.n	20001458 <Reserved1_Handler>
2000145a:	bf00      	nop

2000145c <Reserved2_Handler>:
2000145c:	e7fe      	b.n	2000145c <Reserved2_Handler>
2000145e:	bf00      	nop

20001460 <Reserved3_Handler>:
20001460:	e7fe      	b.n	20001460 <Reserved3_Handler>
20001462:	bf00      	nop

20001464 <Reserved4_Handler>:
20001464:	e7fe      	b.n	20001464 <Reserved4_Handler>
20001466:	bf00      	nop

20001468 <SVCall_Handler>:
20001468:	e7fe      	b.n	20001468 <SVCall_Handler>
2000146a:	bf00      	nop

2000146c <Debug_Handler>:
2000146c:	e7fe      	b.n	2000146c <Debug_Handler>
2000146e:	bf00      	nop

20001470 <Reserved5_Handler>:
20001470:	e7fe      	b.n	20001470 <Reserved5_Handler>
20001472:	bf00      	nop

20001474 <PendSV_Handler>:
20001474:	e7fe      	b.n	20001474 <PendSV_Handler>
20001476:	bf00      	nop

20001478 <SysTick_Handler>:
20001478:	e7fe      	b.n	20001478 <SysTick_Handler>
2000147a:	bf00      	nop

2000147c <WWDG_IRQHandler>:
2000147c:	e7fe      	b.n	2000147c <WWDG_IRQHandler>
2000147e:	bf00      	nop

20001480 <PVD_IRQHandler>:
20001480:	e7fe      	b.n	20001480 <PVD_IRQHandler>
20001482:	bf00      	nop

20001484 <TAMPER_IRQHandler>:
20001484:	e7fe      	b.n	20001484 <TAMPER_IRQHandler>
20001486:	bf00      	nop

20001488 <RTC_IRQHandler>:
20001488:	e7fe      	b.n	20001488 <RTC_IRQHandler>
2000148a:	bf00      	nop

2000148c <FLASH_IRQHandler>:
2000148c:	e7fe      	b.n	2000148c <FLASH_IRQHandler>
2000148e:	bf00      	nop

20001490 <RCC_IRQHandler>:
20001490:	e7fe      	b.n	20001490 <RCC_IRQHandler>
20001492:	bf00      	nop

20001494 <EXTI0_IRQHandler>:
20001494:	e7fe      	b.n	20001494 <EXTI0_IRQHandler>
20001496:	bf00      	nop

20001498 <EXTI1_IRQHandler>:
20001498:	e7fe      	b.n	20001498 <EXTI1_IRQHandler>
2000149a:	bf00      	nop

2000149c <EXTI2_IRQHandler>:
2000149c:	e7fe      	b.n	2000149c <EXTI2_IRQHandler>
2000149e:	bf00      	nop

200014a0 <EXTI3_IRQHandler>:
200014a0:	e7fe      	b.n	200014a0 <EXTI3_IRQHandler>
200014a2:	bf00      	nop

200014a4 <EXTI4_IRQHandler>:
200014a4:	e7fe      	b.n	200014a4 <EXTI4_IRQHandler>
200014a6:	bf00      	nop

200014a8 <DMA1_Channel1_IRQHandler>:
200014a8:	e7fe      	b.n	200014a8 <DMA1_Channel1_IRQHandler>
200014aa:	bf00      	nop

200014ac <DMA1_Channel2_IRQHandler>:
200014ac:	e7fe      	b.n	200014ac <DMA1_Channel2_IRQHandler>
200014ae:	bf00      	nop

200014b0 <DMA1_Channel3_IRQHandler>:
200014b0:	e7fe      	b.n	200014b0 <DMA1_Channel3_IRQHandler>
200014b2:	bf00      	nop

200014b4 <DMA1_Channel4_IRQHandler>:
200014b4:	e7fe      	b.n	200014b4 <DMA1_Channel4_IRQHandler>
200014b6:	bf00      	nop

200014b8 <DMA1_Channel5_IRQHandler>:
200014b8:	e7fe      	b.n	200014b8 <DMA1_Channel5_IRQHandler>
200014ba:	bf00      	nop

200014bc <DMA1_Channel6_IRQHandler>:
200014bc:	e7fe      	b.n	200014bc <DMA1_Channel6_IRQHandler>
200014be:	bf00      	nop

200014c0 <DMA1_Channel7_IRQHandler>:
200014c0:	e7fe      	b.n	200014c0 <DMA1_Channel7_IRQHandler>
200014c2:	bf00      	nop

200014c4 <ADC1_2_IRQHandler>:
200014c4:	e7fe      	b.n	200014c4 <ADC1_2_IRQHandler>
200014c6:	bf00      	nop

200014c8 <USB_HP_CAN1_TX_IRQHandle>:
200014c8:	e7fe      	b.n	200014c8 <USB_HP_CAN1_TX_IRQHandle>
200014ca:	bf00      	nop

200014cc <USB_LP_CAN1_RX0_IRQHandler>:
200014cc:	e7fe      	b.n	200014cc <USB_LP_CAN1_RX0_IRQHandler>
200014ce:	bf00      	nop

200014d0 <CAN1_RX1_IRQHandler>:
200014d0:	e7fe      	b.n	200014d0 <CAN1_RX1_IRQHandler>
200014d2:	bf00      	nop

200014d4 <CAN1_SCE_IRQHandler>:
200014d4:	e7fe      	b.n	200014d4 <CAN1_SCE_IRQHandler>
200014d6:	bf00      	nop

200014d8 <EXTI9_5_IRQHandler>:
200014d8:	e7fe      	b.n	200014d8 <EXTI9_5_IRQHandler>
200014da:	bf00      	nop

200014dc <TIM1_BRK_IRQHandler>:
200014dc:	e7fe      	b.n	200014dc <TIM1_BRK_IRQHandler>
200014de:	bf00      	nop

200014e0 <TIM1_UP_IRQHandler>:
200014e0:	e7fe      	b.n	200014e0 <TIM1_UP_IRQHandler>
200014e2:	bf00      	nop

200014e4 <TIM1_TRG_COM_IRQHandler>:
200014e4:	e7fe      	b.n	200014e4 <TIM1_TRG_COM_IRQHandler>
200014e6:	bf00      	nop

200014e8 <TIM1_CC_IRQHandler>:
200014e8:	e7fe      	b.n	200014e8 <TIM1_CC_IRQHandler>
200014ea:	bf00      	nop

200014ec <TIM2_IRQHandler>:
200014ec:	e7fe      	b.n	200014ec <TIM2_IRQHandler>
200014ee:	bf00      	nop

200014f0 <TIM3_IRQHandler>:
200014f0:	e7fe      	b.n	200014f0 <TIM3_IRQHandler>
200014f2:	bf00      	nop

200014f4 <TIM4_IRQHandler>:
200014f4:	e7fe      	b.n	200014f4 <TIM4_IRQHandler>
200014f6:	bf00      	nop

200014f8 <I2C1_EV_IRQHandler>:
200014f8:	e7fe      	b.n	200014f8 <I2C1_EV_IRQHandler>
200014fa:	bf00      	nop

200014fc <I2C1_ER_IRQHandler>:
200014fc:	e7fe      	b.n	200014fc <I2C1_ER_IRQHandler>
200014fe:	bf00      	nop

20001500 <I2C2_EV_IRQHandler>:
20001500:	e7fe      	b.n	20001500 <I2C2_EV_IRQHandler>
20001502:	bf00      	nop

20001504 <I2C2_ER_IRQHandler>:
20001504:	e7fe      	b.n	20001504 <I2C2_ER_IRQHandler>
20001506:	bf00      	nop

20001508 <SPI1_IRQHandler>:
20001508:	e7fe      	b.n	20001508 <SPI1_IRQHandler>
2000150a:	bf00      	nop

2000150c <SPI2_IRQHandler>:
2000150c:	e7fe      	b.n	2000150c <SPI2_IRQHandler>
2000150e:	bf00      	nop

20001510 <USART1_IRQHandler>:
20001510:	e7fe      	b.n	20001510 <USART1_IRQHandler>
20001512:	bf00      	nop

20001514 <USART2_IRQHandler>:
20001514:	e7fe      	b.n	20001514 <USART2_IRQHandler>
20001516:	bf00      	nop

20001518 <USART3_IRQHandler>:
20001518:	e7fe      	b.n	20001518 <USART3_IRQHandler>
2000151a:	bf00      	nop

2000151c <EXTI15_10_IRQHandler>:
2000151c:	e7fe      	b.n	2000151c <EXTI15_10_IRQHandler>
2000151e:	bf00      	nop

20001520 <RTC_Alarm_IRQHandler>:
20001520:	e7fe      	b.n	20001520 <RTC_Alarm_IRQHandler>
20001522:	bf00      	nop

20001524 <USBWakeUp_IRQHandler>:
20001524:	e7fe      	b.n	20001524 <USBWakeUp_IRQHandler>
20001526:	bf00      	nop

20001528 <init>:
20001528:	4668      	mov	r0, sp
2000152a:	f020 0107 	bic.w	r1, r0, #7
2000152e:	468d      	mov	sp, r1
20001530:	4a08      	ldr	r2, [pc, #32]	; (20001554 <init+0x2c>)
20001532:	b501      	push	{r0, lr}
20001534:	4808      	ldr	r0, [pc, #32]	; (20001558 <init+0x30>)
20001536:	1a12      	subs	r2, r2, r0
20001538:	d002      	beq.n	20001540 <init+0x18>
2000153a:	2100      	movs	r1, #0
2000153c:	f7ff ff60 	bl	20001400 <memset>
20001540:	4a06      	ldr	r2, [pc, #24]	; (2000155c <init+0x34>)
20001542:	4b07      	ldr	r3, [pc, #28]	; (20001560 <init+0x38>)
20001544:	609a      	str	r2, [r3, #8]
20001546:	f000 f80d 	bl	20001564 <main>
2000154a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000154e:	4685      	mov	sp, r0
20001550:	4770      	bx	lr
20001552:	bf00      	nop
20001554:	20001978 	.word	0x20001978
20001558:	200015b0 	.word	0x200015b0
2000155c:	20000000 	.word	0x20000000
20001560:	e000ed00 	.word	0xe000ed00

Disassembly of section .rodata:

20001598 <.rodata>:
20001598:	00000006 	.word	0x00000006
2000159c:	00000002 	.word	0x00000002
200015a0:	3e000000 	.word	0x3e000000
200015a4:	00000019 	.word	0x00000019
200015a8:	3e000000 	.word	0x3e000000
200015ac:	00000019 	.word	0x00000019
