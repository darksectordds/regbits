
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       2:	2200      	movs	r2, #0
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	200226c0 	.word	0x200226c0

0000000c <zero_array()>:
       c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
       e:	2200      	movs	r2, #0
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	20022500 	.word	0x20022500

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	200226c0 	.word	0x200226c0

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	200226c0 	.word	0x200226c0

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	200226c0 	.word	0x200226c0

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	200226c0 	.word	0x200226c0

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	200226c0 	.word	0x200226c0

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	200226c0 	.word	0x200226c0

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	200226c0 	.word	0x200226c0

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	200226c0 	.word	0x200226c0

00000098 <equ_singl_bits_operator()>:
      98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9a:	2240      	movs	r2, #64	; 0x40
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	200226c0 	.word	0x200226c0

000000a4 <equ_singl_bits_method()>:
      a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a6:	2240      	movs	r2, #64	; 0x40
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	200226c0 	.word	0x200226c0

000000b0 <equ_singl_mskd_operator()>:
      b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b2:	2202      	movs	r2, #2
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	200226c0 	.word	0x200226c0

000000bc <equ_singl_mskd_method()>:
      bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      be:	2202      	movs	r2, #2
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	200226c0 	.word	0x200226c0

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	200226c0 	.word	0x200226c0

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	200226c0 	.word	0x200226c0

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	200226c0 	.word	0x200226c0

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	200226c0 	.word	0x200226c0

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	200226c0 	.word	0x200226c0

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	200226c0 	.word	0x200226c0

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	200226c0 	.word	0x200226c0

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	200226c0 	.word	0x200226c0

00000150 <ins_multi_mskd_operator()>:
     150:	4a03      	ldr	r2, [pc, #12]	; (160 <ins_multi_mskd_operator()+0x10>)
     152:	4b04      	ldr	r3, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     154:	6851      	ldr	r1, [r2, #4]
     156:	400b      	ands	r3, r1
     158:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     15c:	6053      	str	r3, [r2, #4]
     15e:	4770      	bx	lr
     160:	200226c0 	.word	0x200226c0
     164:	fffff079 	.word	0xfffff079

00000168 <ins_multi_mskd_method()>:
     168:	4a03      	ldr	r2, [pc, #12]	; (178 <ins_multi_mskd_method()+0x10>)
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16c:	6851      	ldr	r1, [r2, #4]
     16e:	400b      	ands	r3, r1
     170:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     174:	6053      	str	r3, [r2, #4]
     176:	4770      	bx	lr
     178:	200226c0 	.word	0x200226c0
     17c:	fffff079 	.word	0xfffff079

00000180 <equ_multi_bits_operator()>:
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     182:	2260      	movs	r2, #96	; 0x60
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	200226c0 	.word	0x200226c0

0000018c <equ_multi_bits_method()>:
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     18e:	2260      	movs	r2, #96	; 0x60
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	200226c0 	.word	0x200226c0

00000198 <equ_multi_mskd_operator()>:
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19a:	f44f 7242 	mov.w	r2, #776	; 0x308
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	200226c0 	.word	0x200226c0

000001a8 <equ_multi_mskd_method()>:
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	200226c0 	.word	0x200226c0

000001b8 <equ_bits_mskd_operator()>:
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1ba:	2222      	movs	r2, #34	; 0x22
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	200226c0 	.word	0x200226c0

000001c4 <equ_bits_mskd_method()>:
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c6:	2222      	movs	r2, #34	; 0x22
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	200226c0 	.word	0x200226c0

000001d0 <equ_mskd_bits_operator()>:
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d2:	2244      	movs	r2, #68	; 0x44
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	200226c0 	.word	0x200226c0

000001dc <equ_mskd_bits_method()>:
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1de:	2244      	movs	r2, #68	; 0x44
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	200226c0 	.word	0x200226c0

000001e8 <equ_bits_var()>:
     1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
     1ea:	2140      	movs	r1, #64	; 0x40
     1ec:	2201      	movs	r2, #1
     1ee:	6059      	str	r1, [r3, #4]
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	200226c0 	.word	0x200226c0

000001f8 <equ_mskd_var()>:
     1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
     1fa:	2102      	movs	r1, #2
     1fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
     200:	6059      	str	r1, [r3, #4]
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	200226c0 	.word	0x200226c0

0000020c <cmp_equ_zero()>:
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     20e:	2200      	movs	r2, #0
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
     218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
     222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	200226c0 	.word	0x200226c0
     230:	20022620 	.word	0x20022620

00000234 <cmp_neq_zero()>:
     234:	4b05      	ldr	r3, [pc, #20]	; (24c <cmp_neq_zero()+0x18>)
     236:	2200      	movs	r2, #0
     238:	605a      	str	r2, [r3, #4]
     23a:	685a      	ldr	r2, [r3, #4]
     23c:	b112      	cbz	r2, 244 <cmp_neq_zero()+0x10>
     23e:	2204      	movs	r2, #4
     240:	605a      	str	r2, [r3, #4]
     242:	4770      	bx	lr
     244:	2220      	movs	r2, #32
     246:	605a      	str	r2, [r3, #4]
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	200226c0 	.word	0x200226c0

00000250 <cmp_equ_bits()>:
     250:	2240      	movs	r2, #64	; 0x40
     252:	4b06      	ldr	r3, [pc, #24]	; (26c <cmp_equ_bits()+0x1c>)
     254:	605a      	str	r2, [r3, #4]
     256:	685b      	ldr	r3, [r3, #4]
     258:	f013 0f40 	tst.w	r3, #64	; 0x40
     25c:	4b04      	ldr	r3, [pc, #16]	; (270 <cmp_equ_bits()+0x20>)
     25e:	bf14      	ite	ne
     260:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
     264:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
     268:	605a      	str	r2, [r3, #4]
     26a:	4770      	bx	lr
     26c:	200226c0 	.word	0x200226c0
     270:	20022620 	.word	0x20022620

00000274 <cmp_neq_bits()>:
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <cmp_neq_bits()+0x14>)
     276:	2240      	movs	r2, #64	; 0x40
     278:	605a      	str	r2, [r3, #4]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	0652      	lsls	r2, r2, #25
     27e:	bf54      	ite	pl
     280:	2202      	movpl	r2, #2
     282:	2220      	movmi	r2, #32
     284:	605a      	str	r2, [r3, #4]
     286:	4770      	bx	lr
     288:	200226c0 	.word	0x200226c0

0000028c <cmp_equ_multi_bits()>:
     28c:	2260      	movs	r2, #96	; 0x60
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <cmp_equ_multi_bits()+0x1c>)
     290:	605a      	str	r2, [r3, #4]
     292:	685b      	ldr	r3, [r3, #4]
     294:	4013      	ands	r3, r2
     296:	4293      	cmp	r3, r2
     298:	4b04      	ldr	r3, [pc, #16]	; (2ac <cmp_equ_multi_bits()+0x20>)
     29a:	bf0c      	ite	eq
     29c:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     2a0:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2a4:	605a      	str	r2, [r3, #4]
     2a6:	4770      	bx	lr
     2a8:	200226c0 	.word	0x200226c0
     2ac:	20022620 	.word	0x20022620

000002b0 <cmp_neq_multi_bits()>:
     2b0:	2260      	movs	r2, #96	; 0x60
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <cmp_neq_multi_bits()+0x1c>)
     2b4:	605a      	str	r2, [r3, #4]
     2b6:	685b      	ldr	r3, [r3, #4]
     2b8:	4013      	ands	r3, r2
     2ba:	4293      	cmp	r3, r2
     2bc:	4b04      	ldr	r3, [pc, #16]	; (2d0 <cmp_neq_multi_bits()+0x20>)
     2be:	bf14      	ite	ne
     2c0:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2c4:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2c8:	605a      	str	r2, [r3, #4]
     2ca:	4770      	bx	lr
     2cc:	200226c0 	.word	0x200226c0
     2d0:	20022620 	.word	0x20022620

000002d4 <cmp_equ_mskd()>:
     2d4:	4b09      	ldr	r3, [pc, #36]	; (2fc <cmp_equ_mskd()+0x28>)
     2d6:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2da:	605a      	str	r2, [r3, #4]
     2dc:	685b      	ldr	r3, [r3, #4]
     2de:	4a08      	ldr	r2, [pc, #32]	; (300 <cmp_equ_mskd()+0x2c>)
     2e0:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2e4:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2e8:	6853      	ldr	r3, [r2, #4]
     2ea:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2ee:	bf0c      	ite	eq
     2f0:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2f4:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     2f8:	6053      	str	r3, [r2, #4]
     2fa:	4770      	bx	lr
     2fc:	200226c0 	.word	0x200226c0
     300:	20022620 	.word	0x20022620

00000304 <cmp_neq_mskd()>:
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <cmp_neq_mskd()+0x2c>)
     306:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     30a:	605a      	str	r2, [r3, #4]
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
     312:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
     316:	685a      	ldr	r2, [r3, #4]
     318:	d005      	beq.n	326 <cmp_neq_mskd()+0x22>
     31a:	f022 0206 	bic.w	r2, r2, #6
     31e:	f042 0204 	orr.w	r2, r2, #4
     322:	605a      	str	r2, [r3, #4]
     324:	4770      	bx	lr
     326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     32a:	605a      	str	r2, [r3, #4]
     32c:	4770      	bx	lr
     32e:	bf00      	nop
     330:	200226c0 	.word	0x200226c0

00000334 <cmp_equ_reg()>:
     334:	2222      	movs	r2, #34	; 0x22
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <cmp_equ_reg()+0x1c>)
     338:	605a      	str	r2, [r3, #4]
     33a:	685b      	ldr	r3, [r3, #4]
     33c:	4293      	cmp	r3, r2
     33e:	4b05      	ldr	r3, [pc, #20]	; (354 <cmp_equ_reg()+0x20>)
     340:	bf0c      	ite	eq
     342:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     346:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     34a:	605a      	str	r2, [r3, #4]
     34c:	4770      	bx	lr
     34e:	bf00      	nop
     350:	200226c0 	.word	0x200226c0
     354:	20022620 	.word	0x20022620

00000358 <cmp_neq_reg()>:
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <cmp_neq_reg()+0x14>)
     35a:	2222      	movs	r2, #34	; 0x22
     35c:	605a      	str	r2, [r3, #4]
     35e:	685a      	ldr	r2, [r3, #4]
     360:	2a22      	cmp	r2, #34	; 0x22
     362:	bf14      	ite	ne
     364:	2202      	movne	r2, #2
     366:	2220      	moveq	r2, #32
     368:	605a      	str	r2, [r3, #4]
     36a:	4770      	bx	lr
     36c:	200226c0 	.word	0x200226c0

00000370 <constexpr_bits_array()>:
     370:	4b03      	ldr	r3, [pc, #12]	; (380 <constexpr_bits_array()+0x10>)
     372:	2106      	movs	r1, #6
     374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     378:	62d9      	str	r1, [r3, #44]	; 0x2c
     37a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     37e:	4770      	bx	lr
     380:	20022500 	.word	0x20022500

00000384 <runtime_bits_array()>:
     384:	b081      	sub	sp, #4
     386:	2203      	movs	r2, #3
     388:	4b04      	ldr	r3, [pc, #16]	; (39c <runtime_bits_array()+0x18>)
     38a:	2121      	movs	r1, #33	; 0x21
     38c:	9200      	str	r2, [sp, #0]
     38e:	9a00      	ldr	r2, [sp, #0]
     390:	0092      	lsls	r2, r2, #2
     392:	4413      	add	r3, r2
     394:	6219      	str	r1, [r3, #32]
     396:	b001      	add	sp, #4
     398:	4770      	bx	lr
     39a:	bf00      	nop
     39c:	20022500 	.word	0x20022500

000003a0 <prescaler_low()>:
     3a0:	4b04      	ldr	r3, [pc, #16]	; (3b4 <prescaler_low()+0x14>)
     3a2:	2177      	movs	r1, #119	; 0x77
     3a4:	4a04      	ldr	r2, [pc, #16]	; (3b8 <prescaler_low()+0x18>)
     3a6:	6059      	str	r1, [r3, #4]
     3a8:	685b      	ldr	r3, [r3, #4]
     3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3ae:	62d3      	str	r3, [r2, #44]	; 0x2c
     3b0:	4770      	bx	lr
     3b2:	bf00      	nop
     3b4:	20022620 	.word	0x20022620
     3b8:	20022500 	.word	0x20022500

000003bc <prescaler_high()>:
     3bc:	4b04      	ldr	r3, [pc, #16]	; (3d0 <prescaler_high()+0x14>)
     3be:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     3c2:	4a04      	ldr	r2, [pc, #16]	; (3d4 <prescaler_high()+0x18>)
     3c4:	6059      	str	r1, [r3, #4]
     3c6:	685b      	ldr	r3, [r3, #4]
     3c8:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ce:	4770      	bx	lr
     3d0:	20022620 	.word	0x20022620
     3d4:	20022500 	.word	0x20022500

000003d8 <reg_mskd_lss()>:
     3d8:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <reg_mskd_lss()+0x20>)
     3de:	605a      	str	r2, [r3, #4]
     3e0:	685b      	ldr	r3, [r3, #4]
     3e2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3e6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3ea:	4b04      	ldr	r3, [pc, #16]	; (3fc <reg_mskd_lss()+0x24>)
     3ec:	bf34      	ite	cc
     3ee:	2202      	movcc	r2, #2
     3f0:	2204      	movcs	r2, #4
     3f2:	605a      	str	r2, [r3, #4]
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop
     3f8:	20022620 	.word	0x20022620
     3fc:	200226c0 	.word	0x200226c0

00000400 <reg_mskd_leq()>:
     400:	4a0b      	ldr	r2, [pc, #44]	; (430 <reg_mskd_leq()+0x30>)
     402:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
     406:	6053      	str	r3, [r2, #4]
     408:	6853      	ldr	r3, [r2, #4]
     40a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     40e:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
     412:	d809      	bhi.n	428 <reg_mskd_leq()+0x28>
     414:	6853      	ldr	r3, [r2, #4]
     416:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     41e:	d803      	bhi.n	428 <reg_mskd_leq()+0x28>
     420:	4b04      	ldr	r3, [pc, #16]	; (434 <reg_mskd_leq()+0x34>)
     422:	2202      	movs	r2, #2
     424:	605a      	str	r2, [r3, #4]
     426:	4770      	bx	lr
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <reg_mskd_leq()+0x34>)
     42a:	2204      	movs	r2, #4
     42c:	605a      	str	r2, [r3, #4]
     42e:	4770      	bx	lr
     430:	20022620 	.word	0x20022620
     434:	200226c0 	.word	0x200226c0

00000438 <reg_mskd_gtr()>:
     438:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     43c:	4b06      	ldr	r3, [pc, #24]	; (458 <reg_mskd_gtr()+0x20>)
     43e:	605a      	str	r2, [r3, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     446:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     44a:	4b04      	ldr	r3, [pc, #16]	; (45c <reg_mskd_gtr()+0x24>)
     44c:	bf8c      	ite	hi
     44e:	2202      	movhi	r2, #2
     450:	2204      	movls	r2, #4
     452:	605a      	str	r2, [r3, #4]
     454:	4770      	bx	lr
     456:	bf00      	nop
     458:	20022620 	.word	0x20022620
     45c:	200226c0 	.word	0x200226c0

00000460 <reg_mskd_geq()>:
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <reg_mskd_geq()+0x30>)
     462:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
     466:	6053      	str	r3, [r2, #4]
     468:	6853      	ldr	r3, [r2, #4]
     46a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     472:	d309      	bcc.n	488 <reg_mskd_geq()+0x28>
     474:	6853      	ldr	r3, [r2, #4]
     476:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     47a:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
     47e:	d303      	bcc.n	488 <reg_mskd_geq()+0x28>
     480:	4b04      	ldr	r3, [pc, #16]	; (494 <reg_mskd_geq()+0x34>)
     482:	2202      	movs	r2, #2
     484:	605a      	str	r2, [r3, #4]
     486:	4770      	bx	lr
     488:	4b02      	ldr	r3, [pc, #8]	; (494 <reg_mskd_geq()+0x34>)
     48a:	2204      	movs	r2, #4
     48c:	605a      	str	r2, [r3, #4]
     48e:	4770      	bx	lr
     490:	20022620 	.word	0x20022620
     494:	200226c0 	.word	0x200226c0

00000498 <pos_cmp_eq()>:
     498:	4b01      	ldr	r3, [pc, #4]	; (4a0 <pos_cmp_eq()+0x8>)
     49a:	2202      	movs	r2, #2
     49c:	605a      	str	r2, [r3, #4]
     49e:	4770      	bx	lr
     4a0:	200226c0 	.word	0x200226c0

000004a4 <pos_cmp_ne()>:
     4a4:	4b01      	ldr	r3, [pc, #4]	; (4ac <pos_cmp_ne()+0x8>)
     4a6:	2202      	movs	r2, #2
     4a8:	605a      	str	r2, [r3, #4]
     4aa:	4770      	bx	lr
     4ac:	200226c0 	.word	0x200226c0

000004b0 <bits_extract_eq()>:
     4b0:	4b04      	ldr	r3, [pc, #16]	; (4c4 <bits_extract_eq()+0x14>)
     4b2:	2240      	movs	r2, #64	; 0x40
     4b4:	605a      	str	r2, [r3, #4]
     4b6:	685a      	ldr	r2, [r3, #4]
     4b8:	2a40      	cmp	r2, #64	; 0x40
     4ba:	bf0c      	ite	eq
     4bc:	2202      	moveq	r2, #2
     4be:	2204      	movne	r2, #4
     4c0:	605a      	str	r2, [r3, #4]
     4c2:	4770      	bx	lr
     4c4:	200226c0 	.word	0x200226c0

000004c8 <mskd_extract_eq()>:
     4c8:	4b04      	ldr	r3, [pc, #16]	; (4dc <mskd_extract_eq()+0x14>)
     4ca:	2202      	movs	r2, #2
     4cc:	605a      	str	r2, [r3, #4]
     4ce:	685a      	ldr	r2, [r3, #4]
     4d0:	2a02      	cmp	r2, #2
     4d2:	bf0c      	ite	eq
     4d4:	2220      	moveq	r2, #32
     4d6:	2240      	movne	r2, #64	; 0x40
     4d8:	605a      	str	r2, [r3, #4]
     4da:	4770      	bx	lr
     4dc:	200226c0 	.word	0x200226c0

000004e0 <mskd_extract_ne()>:
     4e0:	4b04      	ldr	r3, [pc, #16]	; (4f4 <mskd_extract_ne()+0x14>)
     4e2:	2204      	movs	r2, #4
     4e4:	605a      	str	r2, [r3, #4]
     4e6:	685a      	ldr	r2, [r3, #4]
     4e8:	2a04      	cmp	r2, #4
     4ea:	bf0c      	ite	eq
     4ec:	2240      	moveq	r2, #64	; 0x40
     4ee:	2220      	movne	r2, #32
     4f0:	605a      	str	r2, [r3, #4]
     4f2:	4770      	bx	lr
     4f4:	200226c0 	.word	0x200226c0

000004f8 <mskd_extract_lss()>:
     4f8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     4fc:	4b05      	ldr	r3, [pc, #20]	; (514 <mskd_extract_lss()+0x1c>)
     4fe:	605a      	str	r2, [r3, #4]
     500:	685b      	ldr	r3, [r3, #4]
     502:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     506:	4b04      	ldr	r3, [pc, #16]	; (518 <mskd_extract_lss()+0x20>)
     508:	bf34      	ite	cc
     50a:	2220      	movcc	r2, #32
     50c:	2240      	movcs	r2, #64	; 0x40
     50e:	605a      	str	r2, [r3, #4]
     510:	4770      	bx	lr
     512:	bf00      	nop
     514:	20022620 	.word	0x20022620
     518:	200226c0 	.word	0x200226c0

0000051c <mskd_extract_leq()>:
     51c:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     520:	4b04      	ldr	r3, [pc, #16]	; (534 <mskd_extract_leq()+0x18>)
     522:	605a      	str	r2, [r3, #4]
     524:	685b      	ldr	r3, [r3, #4]
     526:	4293      	cmp	r3, r2
     528:	4b03      	ldr	r3, [pc, #12]	; (538 <mskd_extract_leq()+0x1c>)
     52a:	bf94      	ite	ls
     52c:	2220      	movls	r2, #32
     52e:	2240      	movhi	r2, #64	; 0x40
     530:	605a      	str	r2, [r3, #4]
     532:	4770      	bx	lr
     534:	20022620 	.word	0x20022620
     538:	200226c0 	.word	0x200226c0

0000053c <mskd_extract_gtr()>:
     53c:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     540:	4b05      	ldr	r3, [pc, #20]	; (558 <mskd_extract_gtr()+0x1c>)
     542:	605a      	str	r2, [r3, #4]
     544:	685b      	ldr	r3, [r3, #4]
     546:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     54a:	4b04      	ldr	r3, [pc, #16]	; (55c <mskd_extract_gtr()+0x20>)
     54c:	bf8c      	ite	hi
     54e:	2220      	movhi	r2, #32
     550:	2240      	movls	r2, #64	; 0x40
     552:	605a      	str	r2, [r3, #4]
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	20022620 	.word	0x20022620
     55c:	200226c0 	.word	0x200226c0

00000560 <set_bits_global()>:
     560:	4a02      	ldr	r2, [pc, #8]	; (56c <set_bits_global()+0xc>)
     562:	6853      	ldr	r3, [r2, #4]
     564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     568:	6053      	str	r3, [r2, #4]
     56a:	4770      	bx	lr
     56c:	200226c0 	.word	0x200226c0

00000570 <ins_mskd_global()>:
     570:	4a03      	ldr	r2, [pc, #12]	; (580 <ins_mskd_global()+0x10>)
     572:	6853      	ldr	r3, [r2, #4]
     574:	f023 0306 	bic.w	r3, r3, #6
     578:	f043 0302 	orr.w	r3, r3, #2
     57c:	6053      	str	r3, [r2, #4]
     57e:	4770      	bx	lr
     580:	200226c0 	.word	0x200226c0

00000584 <assign_array_global()>:
     584:	4b01      	ldr	r3, [pc, #4]	; (58c <assign_array_global()+0x8>)
     586:	22bd      	movs	r2, #189	; 0xbd
     588:	601a      	str	r2, [r3, #0]
     58a:	4770      	bx	lr
     58c:	2002252c 	.word	0x2002252c

00000590 <shifted_global()>:
     590:	4b04      	ldr	r3, [pc, #16]	; (5a4 <shifted_global()+0x14>)
     592:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     596:	4a04      	ldr	r2, [pc, #16]	; (5a8 <shifted_global()+0x18>)
     598:	6059      	str	r1, [r3, #4]
     59a:	685b      	ldr	r3, [r3, #4]
     59c:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5a0:	62d3      	str	r3, [r2, #44]	; 0x2c
     5a2:	4770      	bx	lr
     5a4:	20022620 	.word	0x20022620
     5a8:	20022500 	.word	0x20022500

000005ac <assign_register_global()>:
     5ac:	4b01      	ldr	r3, [pc, #4]	; (5b4 <assign_register_global()+0x8>)
     5ae:	2204      	movs	r2, #4
     5b0:	605a      	str	r2, [r3, #4]
     5b2:	4770      	bx	lr
     5b4:	200226c0 	.word	0x200226c0

000005b8 <copy_bits_equ()>:
     5b8:	4b04      	ldr	r3, [pc, #16]	; (5cc <copy_bits_equ()+0x14>)
     5ba:	2240      	movs	r2, #64	; 0x40
     5bc:	605a      	str	r2, [r3, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	0652      	lsls	r2, r2, #25
     5c2:	bf4c      	ite	mi
     5c4:	2202      	movmi	r2, #2
     5c6:	2204      	movpl	r2, #4
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	4770      	bx	lr
     5cc:	200226c0 	.word	0x200226c0

000005d0 <copy_bits_neq()>:
     5d0:	4b04      	ldr	r3, [pc, #16]	; (5e4 <copy_bits_neq()+0x14>)
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	605a      	str	r2, [r3, #4]
     5d6:	685a      	ldr	r2, [r3, #4]
     5d8:	0652      	lsls	r2, r2, #25
     5da:	bf54      	ite	pl
     5dc:	2202      	movpl	r2, #2
     5de:	2204      	movmi	r2, #4
     5e0:	605a      	str	r2, [r3, #4]
     5e2:	4770      	bx	lr
     5e4:	200226c0 	.word	0x200226c0

000005e8 <copy_mskd_equ()>:
     5e8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <copy_mskd_equ()+0x1c>)
     5ee:	605a      	str	r2, [r3, #4]
     5f0:	685b      	ldr	r3, [r3, #4]
     5f2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     5f6:	4293      	cmp	r3, r2
     5f8:	4b03      	ldr	r3, [pc, #12]	; (608 <copy_mskd_equ()+0x20>)
     5fa:	bf0c      	ite	eq
     5fc:	2202      	moveq	r2, #2
     5fe:	2204      	movne	r2, #4
     600:	605a      	str	r2, [r3, #4]
     602:	4770      	bx	lr
     604:	20022620 	.word	0x20022620
     608:	200226c0 	.word	0x200226c0

0000060c <copy_mskd_neq()>:
     60c:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     610:	4b05      	ldr	r3, [pc, #20]	; (628 <copy_mskd_neq()+0x1c>)
     612:	605a      	str	r2, [r3, #4]
     614:	685b      	ldr	r3, [r3, #4]
     616:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     61a:	4293      	cmp	r3, r2
     61c:	4b03      	ldr	r3, [pc, #12]	; (62c <copy_mskd_neq()+0x20>)
     61e:	bf14      	ite	ne
     620:	2202      	movne	r2, #2
     622:	2204      	moveq	r2, #4
     624:	605a      	str	r2, [r3, #4]
     626:	4770      	bx	lr
     628:	20022620 	.word	0x20022620
     62c:	200226c0 	.word	0x200226c0

00000630 <copy_mskd_lss()>:
     630:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     634:	4b06      	ldr	r3, [pc, #24]	; (650 <copy_mskd_lss()+0x20>)
     636:	605a      	str	r2, [r3, #4]
     638:	685b      	ldr	r3, [r3, #4]
     63a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     63e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     642:	4b04      	ldr	r3, [pc, #16]	; (654 <copy_mskd_lss()+0x24>)
     644:	bf34      	ite	cc
     646:	2202      	movcc	r2, #2
     648:	2204      	movcs	r2, #4
     64a:	605a      	str	r2, [r3, #4]
     64c:	4770      	bx	lr
     64e:	bf00      	nop
     650:	20022620 	.word	0x20022620
     654:	200226c0 	.word	0x200226c0

00000658 <copy_mskd_leq()>:
     658:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     65c:	4b05      	ldr	r3, [pc, #20]	; (674 <copy_mskd_leq()+0x1c>)
     65e:	605a      	str	r2, [r3, #4]
     660:	685b      	ldr	r3, [r3, #4]
     662:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     666:	4293      	cmp	r3, r2
     668:	4b03      	ldr	r3, [pc, #12]	; (678 <copy_mskd_leq()+0x20>)
     66a:	bf94      	ite	ls
     66c:	2202      	movls	r2, #2
     66e:	2204      	movhi	r2, #4
     670:	605a      	str	r2, [r3, #4]
     672:	4770      	bx	lr
     674:	20022620 	.word	0x20022620
     678:	200226c0 	.word	0x200226c0

0000067c <copy_mskd_gtr()>:
     67c:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     680:	4b06      	ldr	r3, [pc, #24]	; (69c <copy_mskd_gtr()+0x20>)
     682:	605a      	str	r2, [r3, #4]
     684:	685b      	ldr	r3, [r3, #4]
     686:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     68a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <copy_mskd_gtr()+0x24>)
     690:	bf8c      	ite	hi
     692:	2202      	movhi	r2, #2
     694:	2204      	movls	r2, #4
     696:	605a      	str	r2, [r3, #4]
     698:	4770      	bx	lr
     69a:	bf00      	nop
     69c:	20022620 	.word	0x20022620
     6a0:	200226c0 	.word	0x200226c0

000006a4 <copy_mskd_geq()>:
     6a4:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6a8:	4b05      	ldr	r3, [pc, #20]	; (6c0 <copy_mskd_geq()+0x1c>)
     6aa:	605a      	str	r2, [r3, #4]
     6ac:	685b      	ldr	r3, [r3, #4]
     6ae:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6b2:	4293      	cmp	r3, r2
     6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <copy_mskd_geq()+0x20>)
     6b6:	bf2c      	ite	cs
     6b8:	2202      	movcs	r2, #2
     6ba:	2204      	movcc	r2, #4
     6bc:	605a      	str	r2, [r3, #4]
     6be:	4770      	bx	lr
     6c0:	20022620 	.word	0x20022620
     6c4:	200226c0 	.word	0x200226c0

000006c8 <copy_shifted()>:
     6c8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6cc:	4b05      	ldr	r3, [pc, #20]	; (6e4 <copy_shifted()+0x1c>)
     6ce:	605a      	str	r2, [r3, #4]
     6d0:	685b      	ldr	r3, [r3, #4]
     6d2:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6d6:	2b0b      	cmp	r3, #11
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <copy_shifted()+0x20>)
     6da:	bf0c      	ite	eq
     6dc:	2202      	moveq	r2, #2
     6de:	2204      	movne	r2, #4
     6e0:	605a      	str	r2, [r3, #4]
     6e2:	4770      	bx	lr
     6e4:	20022620 	.word	0x20022620
     6e8:	200226c0 	.word	0x200226c0

000006ec <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>:
     6ec:	4b01      	ldr	r3, [pc, #4]	; (6f4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]+0x8>)
     6ee:	2266      	movs	r2, #102	; 0x66
     6f0:	62da      	str	r2, [r3, #44]	; 0x2c
     6f2:	4770      	bx	lr
     6f4:	20022500 	.word	0x20022500

000006f8 <call_pos_ref()>:
     6f8:	b500      	push	{lr}
     6fa:	b081      	sub	sp, #4
     6fc:	2105      	movs	r1, #5
     6fe:	4668      	mov	r0, sp
     700:	9100      	str	r1, [sp, #0]
     702:	f7ff fff3 	bl	6ec <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
     706:	4668      	mov	r0, sp
     708:	9100      	str	r1, [sp, #0]
     70a:	f7ff ffef 	bl	6ec <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
     70e:	b001      	add	sp, #4
     710:	f85d fb04 	ldr.w	pc, [sp], #4

00000714 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>:
     714:	4b01      	ldr	r3, [pc, #4]	; (71c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]+0x8>)
     716:	2277      	movs	r2, #119	; 0x77
     718:	62da      	str	r2, [r3, #44]	; 0x2c
     71a:	4770      	bx	lr
     71c:	20022500 	.word	0x20022500

00000720 <call_pos_ref_global()>:
     720:	b500      	push	{lr}
     722:	b081      	sub	sp, #4
     724:	2306      	movs	r3, #6
     726:	4668      	mov	r0, sp
     728:	9300      	str	r3, [sp, #0]
     72a:	f7ff fff3 	bl	714 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>
     72e:	b001      	add	sp, #4
     730:	f85d fb04 	ldr.w	pc, [sp], #4

00000734 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>:
     734:	4b01      	ldr	r3, [pc, #4]	; (73c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]+0x8>)
     736:	2233      	movs	r2, #51	; 0x33
     738:	62da      	str	r2, [r3, #44]	; 0x2c
     73a:	4770      	bx	lr
     73c:	20022500 	.word	0x20022500

00000740 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>:
     740:	4b01      	ldr	r3, [pc, #4]	; (748 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]+0x8>)
     742:	2244      	movs	r2, #68	; 0x44
     744:	62da      	str	r2, [r3, #44]	; 0x2c
     746:	4770      	bx	lr
     748:	20022500 	.word	0x20022500

0000074c <call_pos_val()>:
     74c:	b500      	push	{lr}
     74e:	2005      	movs	r0, #5
     750:	f7ff fff0 	bl	734 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>
     754:	2006      	movs	r0, #6
     756:	f85d eb04 	ldr.w	lr, [sp], #4
     75a:	e7f1      	b.n	740 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>

0000075c <call_pos_val_global()>:
     75c:	2006      	movs	r0, #6
     75e:	e7ef      	b.n	740 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>

00000760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     760:	4a03      	ldr	r2, [pc, #12]	; (770 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x10>)
     762:	6853      	ldr	r3, [r2, #4]
     764:	f023 0306 	bic.w	r3, r3, #6
     768:	f043 0302 	orr.w	r3, r3, #2
     76c:	6053      	str	r3, [r2, #4]
     76e:	4770      	bx	lr
     770:	200226c0 	.word	0x200226c0

00000774 <call_mskd_val_const()>:
     774:	2006      	movs	r0, #6
     776:	2102      	movs	r1, #2
     778:	e7f2      	b.n	760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     77a:	bf00      	nop

0000077c <call_mskd_val_var()>:
     77c:	2006      	movs	r0, #6
     77e:	2102      	movs	r1, #2
     780:	e7ee      	b.n	760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     782:	bf00      	nop

00000784 <call_mskd_val_global()>:
     784:	2006      	movs	r0, #6
     786:	2102      	movs	r1, #2
     788:	e7ea      	b.n	760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     78a:	bf00      	nop

0000078c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     78c:	4a02      	ldr	r2, [pc, #8]	; (798 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0xc>)
     78e:	6853      	ldr	r3, [r2, #4]
     790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     794:	6053      	str	r3, [r2, #4]
     796:	4770      	bx	lr
     798:	200226c0 	.word	0x200226c0

0000079c <call_bits_val_const()>:
     79c:	2040      	movs	r0, #64	; 0x40
     79e:	e7f5      	b.n	78c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

000007a0 <call_bits_val_var()>:
     7a0:	2040      	movs	r0, #64	; 0x40
     7a2:	e7f3      	b.n	78c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

000007a4 <call_bits_val_global()>:
     7a4:	2040      	movs	r0, #64	; 0x40
     7a6:	e7f1      	b.n	78c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>

000007a8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     7a8:	4a02      	ldr	r2, [pc, #8]	; (7b4 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     7aa:	6853      	ldr	r3, [r2, #4]
     7ac:	4318      	orrs	r0, r3
     7ae:	6050      	str	r0, [r2, #4]
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	200226c0 	.word	0x200226c0

000007b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     7b8:	4a02      	ldr	r2, [pc, #8]	; (7c4 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     7ba:	6801      	ldr	r1, [r0, #0]
     7bc:	6853      	ldr	r3, [r2, #4]
     7be:	430b      	orrs	r3, r1
     7c0:	6053      	str	r3, [r2, #4]
     7c2:	4770      	bx	lr
     7c4:	200226c0 	.word	0x200226c0

000007c8 <call_bits_ref_var()>:
     7c8:	b500      	push	{lr}
     7ca:	b081      	sub	sp, #4
     7cc:	2301      	movs	r3, #1
     7ce:	4668      	mov	r0, sp
     7d0:	9300      	str	r3, [sp, #0]
     7d2:	f7ff fffe 	bl	7b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7d6:	b001      	add	sp, #4
     7d8:	f85d fb04 	ldr.w	pc, [sp], #4

000007dc <call_bits_ref_const()>:
     7dc:	b500      	push	{lr}
     7de:	b081      	sub	sp, #4
     7e0:	2301      	movs	r3, #1
     7e2:	4668      	mov	r0, sp
     7e4:	9300      	str	r3, [sp, #0]
     7e6:	f7ff fffe 	bl	7b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7ea:	b001      	add	sp, #4
     7ec:	f85d fb04 	ldr.w	pc, [sp], #4

000007f0 <call_bits_ref_global()>:
     7f0:	b500      	push	{lr}
     7f2:	b081      	sub	sp, #4
     7f4:	2340      	movs	r3, #64	; 0x40
     7f6:	4668      	mov	r0, sp
     7f8:	9300      	str	r3, [sp, #0]
     7fa:	f7ff fffe 	bl	7b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7fe:	b001      	add	sp, #4
     800:	f85d fb04 	ldr.w	pc, [sp], #4

00000804 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     804:	4a03      	ldr	r2, [pc, #12]	; (814 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     806:	6853      	ldr	r3, [r2, #4]
     808:	ea23 0000 	bic.w	r0, r3, r0
     80c:	4308      	orrs	r0, r1
     80e:	6050      	str	r0, [r2, #4]
     810:	4770      	bx	lr
     812:	bf00      	nop
     814:	200226c0 	.word	0x200226c0

00000818 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     818:	4a05      	ldr	r2, [pc, #20]	; (830 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
     81a:	6841      	ldr	r1, [r0, #4]
     81c:	6853      	ldr	r3, [r2, #4]
     81e:	b410      	push	{r4}
     820:	6804      	ldr	r4, [r0, #0]
     822:	ea23 0304 	bic.w	r3, r3, r4
     826:	bc10      	pop	{r4}
     828:	430b      	orrs	r3, r1
     82a:	6053      	str	r3, [r2, #4]
     82c:	4770      	bx	lr
     82e:	bf00      	nop
     830:	200226c0 	.word	0x200226c0

00000834 <call_mskd_ref_var()>:
     834:	b500      	push	{lr}
     836:	4b05      	ldr	r3, [pc, #20]	; (84c <call_mskd_ref_var()+0x18>)
     838:	b082      	sub	sp, #8
     83a:	cb0c      	ldmia	r3, {r2, r3}
     83c:	4668      	mov	r0, sp
     83e:	e88d 000c 	stmia.w	sp, {r2, r3}
     842:	f7ff fffe 	bl	818 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     846:	b002      	add	sp, #8
     848:	f85d fb04 	ldr.w	pc, [sp], #4
     84c:	00000000 	.word	0x00000000

00000850 <call_mskd_ref_const()>:
     850:	b500      	push	{lr}
     852:	b082      	sub	sp, #8
     854:	2206      	movs	r2, #6
     856:	2304      	movs	r3, #4
     858:	4668      	mov	r0, sp
     85a:	e88d 000c 	stmia.w	sp, {r2, r3}
     85e:	f7ff fffe 	bl	818 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     862:	b002      	add	sp, #8
     864:	f85d fb04 	ldr.w	pc, [sp], #4

00000868 <call_mskd_ref_global()>:
     868:	b500      	push	{lr}
     86a:	b082      	sub	sp, #8
     86c:	2206      	movs	r2, #6
     86e:	2302      	movs	r3, #2
     870:	4668      	mov	r0, sp
     872:	e88d 000c 	stmia.w	sp, {r2, r3}
     876:	f7ff fffe 	bl	818 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     87a:	b002      	add	sp, #8
     87c:	f85d fb04 	ldr.w	pc, [sp], #4

00000880 <periph_bits(mcu::Serial volatile*)>:
     880:	6843      	ldr	r3, [r0, #4]
     882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     886:	6043      	str	r3, [r0, #4]
     888:	4770      	bx	lr
     88a:	bf00      	nop

0000088c <call_periph_bits()>:
     88c:	4801      	ldr	r0, [pc, #4]	; (894 <call_periph_bits()+0x8>)
     88e:	f7ff bffe 	b.w	880 <periph_bits(mcu::Serial volatile*)>
     892:	bf00      	nop
     894:	200226c0 	.word	0x200226c0

00000898 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     898:	6843      	ldr	r3, [r0, #4]
     89a:	4319      	orrs	r1, r3
     89c:	6041      	str	r1, [r0, #4]
     89e:	4770      	bx	lr

000008a0 <call_periph_bits_val()>:
     8a0:	2140      	movs	r1, #64	; 0x40
     8a2:	4801      	ldr	r0, [pc, #4]	; (8a8 <call_periph_bits_val()+0x8>)
     8a4:	f7ff bffe 	b.w	898 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8a8:	200226c0 	.word	0x200226c0

000008ac <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     8ac:	6803      	ldr	r3, [r0, #0]
     8ae:	4319      	orrs	r1, r3
     8b0:	6001      	str	r1, [r0, #0]
     8b2:	4770      	bx	lr

000008b4 <call_reg_bits_val()>:
     8b4:	2140      	movs	r1, #64	; 0x40
     8b6:	4801      	ldr	r0, [pc, #4]	; (8bc <call_reg_bits_val()+0x8>)
     8b8:	f7ff bffe 	b.w	8ac <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8bc:	200226c4 	.word	0x200226c4

000008c0 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8c0:	680a      	ldr	r2, [r1, #0]
     8c2:	6843      	ldr	r3, [r0, #4]
     8c4:	4313      	orrs	r3, r2
     8c6:	6043      	str	r3, [r0, #4]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop

000008cc <call_periph_bits_ref()>:
     8cc:	b500      	push	{lr}
     8ce:	b081      	sub	sp, #4
     8d0:	2340      	movs	r3, #64	; 0x40
     8d2:	4804      	ldr	r0, [pc, #16]	; (8e4 <call_periph_bits_ref()+0x18>)
     8d4:	4669      	mov	r1, sp
     8d6:	9300      	str	r3, [sp, #0]
     8d8:	f7ff fffe 	bl	8c0 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8dc:	b001      	add	sp, #4
     8de:	f85d fb04 	ldr.w	pc, [sp], #4
     8e2:	bf00      	nop
     8e4:	200226c0 	.word	0x200226c0

000008e8 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8e8:	680a      	ldr	r2, [r1, #0]
     8ea:	6803      	ldr	r3, [r0, #0]
     8ec:	4313      	orrs	r3, r2
     8ee:	6003      	str	r3, [r0, #0]
     8f0:	4770      	bx	lr
     8f2:	bf00      	nop

000008f4 <call_reg_bits_ref()>:
     8f4:	b500      	push	{lr}
     8f6:	b081      	sub	sp, #4
     8f8:	2340      	movs	r3, #64	; 0x40
     8fa:	4804      	ldr	r0, [pc, #16]	; (90c <call_reg_bits_ref()+0x18>)
     8fc:	4669      	mov	r1, sp
     8fe:	9300      	str	r3, [sp, #0]
     900:	f7ff fffe 	bl	8e8 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     904:	b001      	add	sp, #4
     906:	f85d fb04 	ldr.w	pc, [sp], #4
     90a:	bf00      	nop
     90c:	200226c4 	.word	0x200226c4

00000910 <periph_mskd(mcu::Serial volatile*)>:
     910:	6843      	ldr	r3, [r0, #4]
     912:	f023 0306 	bic.w	r3, r3, #6
     916:	f043 0302 	orr.w	r3, r3, #2
     91a:	6043      	str	r3, [r0, #4]
     91c:	4770      	bx	lr
     91e:	bf00      	nop

00000920 <call_periph_mskd()>:
     920:	4801      	ldr	r0, [pc, #4]	; (928 <call_periph_mskd()+0x8>)
     922:	f7ff bffe 	b.w	910 <periph_mskd(mcu::Serial volatile*)>
     926:	bf00      	nop
     928:	200226c0 	.word	0x200226c0

0000092c <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     92c:	6843      	ldr	r3, [r0, #4]
     92e:	ea23 0101 	bic.w	r1, r3, r1
     932:	4311      	orrs	r1, r2
     934:	6041      	str	r1, [r0, #4]
     936:	4770      	bx	lr

00000938 <call_periph_mskd_val()>:
     938:	2106      	movs	r1, #6
     93a:	2202      	movs	r2, #2
     93c:	4801      	ldr	r0, [pc, #4]	; (944 <call_periph_mskd_val()+0xc>)
     93e:	f7ff bffe 	b.w	92c <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     942:	bf00      	nop
     944:	200226c0 	.word	0x200226c0

00000948 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     948:	6803      	ldr	r3, [r0, #0]
     94a:	ea23 0101 	bic.w	r1, r3, r1
     94e:	4311      	orrs	r1, r2
     950:	6001      	str	r1, [r0, #0]
     952:	4770      	bx	lr

00000954 <call_reg_mskd_val()>:
     954:	2106      	movs	r1, #6
     956:	2202      	movs	r2, #2
     958:	4801      	ldr	r0, [pc, #4]	; (960 <call_reg_mskd_val()+0xc>)
     95a:	f7ff bffe 	b.w	948 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     95e:	bf00      	nop
     960:	200226c4 	.word	0x200226c4

00000964 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     964:	6843      	ldr	r3, [r0, #4]
     966:	ea23 0101 	bic.w	r1, r3, r1
     96a:	4311      	orrs	r1, r2
     96c:	6041      	str	r1, [r0, #4]
     96e:	4770      	bx	lr

00000970 <call_periph_mskd_ref()>:
     970:	2106      	movs	r1, #6
     972:	2202      	movs	r2, #2
     974:	4801      	ldr	r0, [pc, #4]	; (97c <call_periph_mskd_ref()+0xc>)
     976:	f7ff bffe 	b.w	964 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     97a:	bf00      	nop
     97c:	200226c0 	.word	0x200226c0

00000980 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     980:	6803      	ldr	r3, [r0, #0]
     982:	ea23 0101 	bic.w	r1, r3, r1
     986:	4311      	orrs	r1, r2
     988:	6001      	str	r1, [r0, #0]
     98a:	4770      	bx	lr

0000098c <call_reg_mskd_ref()>:
     98c:	2106      	movs	r1, #6
     98e:	2202      	movs	r2, #2
     990:	4801      	ldr	r0, [pc, #4]	; (998 <call_reg_mskd_ref()+0xc>)
     992:	f7ff bffe 	b.w	980 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     996:	bf00      	nop
     998:	200226c4 	.word	0x200226c4

0000099c <return_bits()>:
     99c:	2020      	movs	r0, #32
     99e:	4770      	bx	lr

000009a0 <call_return_bits()>:
     9a0:	b500      	push	{lr}
     9a2:	f7ff fffe 	bl	99c <return_bits()>
     9a6:	2820      	cmp	r0, #32
     9a8:	4b04      	ldr	r3, [pc, #16]	; (9bc <call_return_bits()+0x1c>)
     9aa:	bf0c      	ite	eq
     9ac:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     9b0:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     9b4:	605a      	str	r2, [r3, #4]
     9b6:	f85d fb04 	ldr.w	pc, [sp], #4
     9ba:	bf00      	nop
     9bc:	20022620 	.word	0x20022620

000009c0 <return_mskd()>:
     9c0:	2118      	movs	r1, #24
     9c2:	2208      	movs	r2, #8
     9c4:	e880 0006 	stmia.w	r0, {r1, r2}
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop

000009cc <call_return_mskd()>:
     9cc:	b500      	push	{lr}
     9ce:	b082      	sub	sp, #8
     9d0:	4668      	mov	r0, sp
     9d2:	f7ff fffe 	bl	9c0 <return_mskd()>
     9d6:	9b00      	ldr	r3, [sp, #0]
     9d8:	9a01      	ldr	r2, [sp, #4]
     9da:	2b18      	cmp	r3, #24
     9dc:	4b07      	ldr	r3, [pc, #28]	; (9fc <call_return_mskd()+0x30>)
     9de:	d005      	beq.n	9ec <call_return_mskd()+0x20>
     9e0:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9e4:	605a      	str	r2, [r3, #4]
     9e6:	b002      	add	sp, #8
     9e8:	f85d fb04 	ldr.w	pc, [sp], #4
     9ec:	2a08      	cmp	r2, #8
     9ee:	d1f7      	bne.n	9e0 <call_return_mskd()+0x14>
     9f0:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9f4:	605a      	str	r2, [r3, #4]
     9f6:	b002      	add	sp, #8
     9f8:	f85d fb04 	ldr.w	pc, [sp], #4
     9fc:	20022620 	.word	0x20022620

00000a00 <return_reg()>:
     a00:	4b02      	ldr	r3, [pc, #8]	; (a0c <return_reg()+0xc>)
     a02:	2240      	movs	r2, #64	; 0x40
     a04:	4802      	ldr	r0, [pc, #8]	; (a10 <return_reg()+0x10>)
     a06:	605a      	str	r2, [r3, #4]
     a08:	4770      	bx	lr
     a0a:	bf00      	nop
     a0c:	200226c0 	.word	0x200226c0
     a10:	200226c4 	.word	0x200226c4

00000a14 <call_return_reg()>:
     a14:	b500      	push	{lr}
     a16:	f7ff fffe 	bl	a00 <return_reg()>
     a1a:	6803      	ldr	r3, [r0, #0]
     a1c:	2b40      	cmp	r3, #64	; 0x40
     a1e:	4b04      	ldr	r3, [pc, #16]	; (a30 <call_return_reg()+0x1c>)
     a20:	bf0c      	ite	eq
     a22:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     a26:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     a2a:	605a      	str	r2, [r3, #4]
     a2c:	f85d fb04 	ldr.w	pc, [sp], #4
     a30:	20022620 	.word	0x20022620

00000a34 <return_periph()>:
     a34:	4b02      	ldr	r3, [pc, #8]	; (a40 <return_periph()+0xc>)
     a36:	2240      	movs	r2, #64	; 0x40
     a38:	4618      	mov	r0, r3
     a3a:	605a      	str	r2, [r3, #4]
     a3c:	4770      	bx	lr
     a3e:	bf00      	nop
     a40:	200226c0 	.word	0x200226c0

00000a44 <call_return_periph()>:
     a44:	b500      	push	{lr}
     a46:	f7ff fffe 	bl	a34 <return_periph()>
     a4a:	6843      	ldr	r3, [r0, #4]
     a4c:	2b40      	cmp	r3, #64	; 0x40
     a4e:	4b04      	ldr	r3, [pc, #16]	; (a60 <call_return_periph()+0x1c>)
     a50:	bf0c      	ite	eq
     a52:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     a56:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     a5a:	605a      	str	r2, [r3, #4]
     a5c:	f85d fb04 	ldr.w	pc, [sp], #4
     a60:	20022620 	.word	0x20022620

00000a64 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a64:	2805      	cmp	r0, #5
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x18>)
     a68:	d005      	beq.n	a76 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a6a:	2806      	cmp	r0, #6
     a6c:	bf0c      	ite	eq
     a6e:	2244      	moveq	r2, #68	; 0x44
     a70:	2255      	movne	r2, #85	; 0x55
     a72:	62da      	str	r2, [r3, #44]	; 0x2c
     a74:	4770      	bx	lr
     a76:	2233      	movs	r2, #51	; 0x33
     a78:	62da      	str	r2, [r3, #44]	; 0x2c
     a7a:	4770      	bx	lr
     a7c:	20022500 	.word	0x20022500

00000a80 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a80:	6803      	ldr	r3, [r0, #0]
     a82:	2b05      	cmp	r3, #5
     a84:	d006      	beq.n	a94 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a86:	2b06      	cmp	r3, #6
     a88:	4b04      	ldr	r3, [pc, #16]	; (a9c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a8a:	bf0c      	ite	eq
     a8c:	2277      	moveq	r2, #119	; 0x77
     a8e:	2288      	movne	r2, #136	; 0x88
     a90:	62da      	str	r2, [r3, #44]	; 0x2c
     a92:	4770      	bx	lr
     a94:	4b01      	ldr	r3, [pc, #4]	; (a9c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a96:	2266      	movs	r2, #102	; 0x66
     a98:	62da      	str	r2, [r3, #44]	; 0x2c
     a9a:	4770      	bx	lr
     a9c:	20022500 	.word	0x20022500

00000aa0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     aa0:	4a03      	ldr	r2, [pc, #12]	; (ab0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     aa2:	6853      	ldr	r3, [r2, #4]
     aa4:	ea23 0000 	bic.w	r0, r3, r0
     aa8:	4308      	orrs	r0, r1
     aaa:	6050      	str	r0, [r2, #4]
     aac:	4770      	bx	lr
     aae:	bf00      	nop
     ab0:	200226c0 	.word	0x200226c0

00000ab4 <call_range_val(unsigned int)>:
     ab4:	0301      	lsls	r1, r0, #12
     ab6:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     aba:	f7ff bffe 	b.w	aa0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     abe:	bf00      	nop

00000ac0 <call_range_val_port()>:
     ac0:	201f      	movs	r0, #31
     ac2:	f7ff bffe 	b.w	ab4 <call_range_val(unsigned int)>
     ac6:	bf00      	nop

00000ac8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ac8:	4a03      	ldr	r2, [pc, #12]	; (ad8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     aca:	6853      	ldr	r3, [r2, #4]
     acc:	ea23 0000 	bic.w	r0, r3, r0
     ad0:	4308      	orrs	r0, r1
     ad2:	6050      	str	r0, [r2, #4]
     ad4:	4770      	bx	lr
     ad6:	bf00      	nop
     ad8:	200226c0 	.word	0x200226c0

00000adc <call_range_ref(unsigned int)>:
     adc:	0301      	lsls	r1, r0, #12
     ade:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     ae2:	f7ff bffe 	b.w	ac8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     ae6:	bf00      	nop

00000ae8 <call_range_ref_port()>:
     ae8:	200c      	movs	r0, #12
     aea:	f7ff bffe 	b.w	adc <call_range_ref(unsigned int)>
     aee:	bf00      	nop

00000af0 <check_array_range_pass(unsigned int)>:
     af0:	2816      	cmp	r0, #22
     af2:	4b03      	ldr	r3, [pc, #12]	; (b00 <check_array_range_pass(unsigned int)+0x10>)
     af4:	bf94      	ite	ls
     af6:	227f      	movls	r2, #127	; 0x7f
     af8:	2283      	movhi	r2, #131	; 0x83
     afa:	62da      	str	r2, [r3, #44]	; 0x2c
     afc:	4770      	bx	lr
     afe:	bf00      	nop
     b00:	20022500 	.word	0x20022500

00000b04 <check_array_range_fail(unsigned int)>:
     b04:	2816      	cmp	r0, #22
     b06:	4b03      	ldr	r3, [pc, #12]	; (b14 <check_array_range_fail(unsigned int)+0x10>)
     b08:	bf94      	ite	ls
     b0a:	2295      	movls	r2, #149	; 0x95
     b0c:	2297      	movhi	r2, #151	; 0x97
     b0e:	62da      	str	r2, [r3, #44]	; 0x2c
     b10:	4770      	bx	lr
     b12:	bf00      	nop
     b14:	20022500 	.word	0x20022500

00000b18 <check_bits_range_pass(unsigned int)>:
     b18:	280f      	cmp	r0, #15
     b1a:	4b03      	ldr	r3, [pc, #12]	; (b28 <check_bits_range_pass(unsigned int)+0x10>)
     b1c:	bf94      	ite	ls
     b1e:	229d      	movls	r2, #157	; 0x9d
     b20:	22a3      	movhi	r2, #163	; 0xa3
     b22:	62da      	str	r2, [r3, #44]	; 0x2c
     b24:	4770      	bx	lr
     b26:	bf00      	nop
     b28:	20022500 	.word	0x20022500

00000b2c <check_bits_range_fail(unsigned int)>:
     b2c:	280f      	cmp	r0, #15
     b2e:	4b03      	ldr	r3, [pc, #12]	; (b3c <check_bits_range_fail(unsigned int)+0x10>)
     b30:	bf94      	ite	ls
     b32:	22a7      	movls	r2, #167	; 0xa7
     b34:	22ad      	movhi	r2, #173	; 0xad
     b36:	62da      	str	r2, [r3, #44]	; 0x2c
     b38:	4770      	bx	lr
     b3a:	bf00      	nop
     b3c:	20022500 	.word	0x20022500

00000b40 <check_mskd_range_pass(unsigned int)>:
     b40:	281f      	cmp	r0, #31
     b42:	4b03      	ldr	r3, [pc, #12]	; (b50 <check_mskd_range_pass(unsigned int)+0x10>)
     b44:	bf94      	ite	ls
     b46:	22b3      	movls	r2, #179	; 0xb3
     b48:	22b5      	movhi	r2, #181	; 0xb5
     b4a:	62da      	str	r2, [r3, #44]	; 0x2c
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop
     b50:	20022500 	.word	0x20022500

00000b54 <check_mskd_range_fail(unsigned int)>:
     b54:	281f      	cmp	r0, #31
     b56:	4b03      	ldr	r3, [pc, #12]	; (b64 <check_mskd_range_fail(unsigned int)+0x10>)
     b58:	bf94      	ite	ls
     b5a:	22bf      	movls	r2, #191	; 0xbf
     b5c:	22c1      	movhi	r2, #193	; 0xc1
     b5e:	62da      	str	r2, [r3, #44]	; 0x2c
     b60:	4770      	bx	lr
     b62:	bf00      	nop
     b64:	20022500 	.word	0x20022500

00000b68 <bits_extract_ne()>:
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <bits_extract_ne()+0x14>)
     b6a:	2220      	movs	r2, #32
     b6c:	605a      	str	r2, [r3, #4]
     b6e:	685a      	ldr	r2, [r3, #4]
     b70:	2a20      	cmp	r2, #32
     b72:	bf14      	ite	ne
     b74:	2202      	movne	r2, #2
     b76:	2204      	moveq	r2, #4
     b78:	605a      	str	r2, [r3, #4]
     b7a:	4770      	bx	lr
     b7c:	200226c0 	.word	0x200226c0

00000b80 <mskd_extract_geq()>:
     b80:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <mskd_extract_geq()+0x18>)
     b86:	605a      	str	r2, [r3, #4]
     b88:	685b      	ldr	r3, [r3, #4]
     b8a:	4293      	cmp	r3, r2
     b8c:	4b03      	ldr	r3, [pc, #12]	; (b9c <mskd_extract_geq()+0x1c>)
     b8e:	bf2c      	ite	cs
     b90:	2220      	movcs	r2, #32
     b92:	2240      	movcc	r2, #64	; 0x40
     b94:	605a      	str	r2, [r3, #4]
     b96:	4770      	bx	lr
     b98:	20022620 	.word	0x20022620
     b9c:	200226c0 	.word	0x200226c0

00000ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     ba0:	b410      	push	{r4}
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     ba4:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
     ba8:	4a04      	ldr	r2, [pc, #16]	; (bbc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
     baa:	605c      	str	r4, [r3, #4]
     bac:	685b      	ldr	r3, [r3, #4]
     bae:	bc10      	pop	{r4}
     bb0:	4018      	ands	r0, r3
     bb2:	40c8      	lsrs	r0, r1
     bb4:	62d0      	str	r0, [r2, #44]	; 0x2c
     bb6:	4770      	bx	lr
     bb8:	20022620 	.word	0x20022620
     bbc:	20022500 	.word	0x20022500

00000bc0 <call_shifted_const_val()>:
     bc0:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bc4:	2119      	movs	r1, #25
     bc6:	f7ff bffe 	b.w	ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bca:	bf00      	nop

00000bcc <call_shifted_var_val()>:
     bcc:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bd0:	2119      	movs	r1, #25
     bd2:	f7ff bffe 	b.w	ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bd6:	bf00      	nop

00000bd8 <call_shifted_global_val()>:
     bd8:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bdc:	2119      	movs	r1, #25
     bde:	f7ff bffe 	b.w	ba0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     be2:	bf00      	nop

00000be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     be4:	4b06      	ldr	r3, [pc, #24]	; (c00 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     be6:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     bea:	4a06      	ldr	r2, [pc, #24]	; (c04 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
     bec:	b410      	push	{r4}
     bee:	6059      	str	r1, [r3, #4]
     bf0:	6804      	ldr	r4, [r0, #0]
     bf2:	685b      	ldr	r3, [r3, #4]
     bf4:	6841      	ldr	r1, [r0, #4]
     bf6:	4023      	ands	r3, r4
     bf8:	bc10      	pop	{r4}
     bfa:	40cb      	lsrs	r3, r1
     bfc:	62d3      	str	r3, [r2, #44]	; 0x2c
     bfe:	4770      	bx	lr
     c00:	20022620 	.word	0x20022620
     c04:	20022500 	.word	0x20022500

00000c08 <call_shifted_const_ref()>:
     c08:	b500      	push	{lr}
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <call_shifted_const_ref()+0x1c>)
     c0c:	b082      	sub	sp, #8
     c0e:	f103 0308 	add.w	r3, r3, #8
     c12:	cb0c      	ldmia	r3, {r2, r3}
     c14:	4668      	mov	r0, sp
     c16:	e88d 000c 	stmia.w	sp, {r2, r3}
     c1a:	f7ff fffe 	bl	be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c1e:	b002      	add	sp, #8
     c20:	f85d fb04 	ldr.w	pc, [sp], #4
     c24:	00000000 	.word	0x00000000

00000c28 <call_shifted_var_ref()>:
     c28:	b500      	push	{lr}
     c2a:	4b06      	ldr	r3, [pc, #24]	; (c44 <call_shifted_var_ref()+0x1c>)
     c2c:	b082      	sub	sp, #8
     c2e:	f103 0310 	add.w	r3, r3, #16
     c32:	cb0c      	ldmia	r3, {r2, r3}
     c34:	4668      	mov	r0, sp
     c36:	e88d 000c 	stmia.w	sp, {r2, r3}
     c3a:	f7ff fffe 	bl	be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c3e:	b002      	add	sp, #8
     c40:	f85d fb04 	ldr.w	pc, [sp], #4
     c44:	00000000 	.word	0x00000000

00000c48 <call_shifted_global_ref()>:
     c48:	b500      	push	{lr}
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <call_shifted_global_ref()+0x1c>)
     c4c:	b082      	sub	sp, #8
     c4e:	f103 0308 	add.w	r3, r3, #8
     c52:	cb0c      	ldmia	r3, {r2, r3}
     c54:	4668      	mov	r0, sp
     c56:	e88d 000c 	stmia.w	sp, {r2, r3}
     c5a:	f7ff fffe 	bl	be4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c5e:	b002      	add	sp, #8
     c60:	f85d fb04 	ldr.w	pc, [sp], #4
     c64:	00000000 	.word	0x00000000

00000c68 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     c68:	0642      	lsls	r2, r0, #25
     c6a:	4b03      	ldr	r3, [pc, #12]	; (c78 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     c6c:	bf4c      	ite	mi
     c6e:	2202      	movmi	r2, #2
     c70:	2204      	movpl	r2, #4
     c72:	605a      	str	r2, [r3, #4]
     c74:	4770      	bx	lr
     c76:	bf00      	nop
     c78:	200226c0 	.word	0x200226c0

00000c7c <call_copy_bits_val()>:
     c7c:	4b02      	ldr	r3, [pc, #8]	; (c88 <call_copy_bits_val()+0xc>)
     c7e:	2240      	movs	r2, #64	; 0x40
     c80:	605a      	str	r2, [r3, #4]
     c82:	6858      	ldr	r0, [r3, #4]
     c84:	f7ff bffe 	b.w	c68 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     c88:	200226c0 	.word	0x200226c0

00000c8c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     c8c:	6803      	ldr	r3, [r0, #0]
     c8e:	f013 0f40 	tst.w	r3, #64	; 0x40
     c92:	4b03      	ldr	r3, [pc, #12]	; (ca0 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
     c94:	bf14      	ite	ne
     c96:	2202      	movne	r2, #2
     c98:	2204      	moveq	r2, #4
     c9a:	605a      	str	r2, [r3, #4]
     c9c:	4770      	bx	lr
     c9e:	bf00      	nop
     ca0:	200226c0 	.word	0x200226c0

00000ca4 <call_copy_bits_ref()>:
     ca4:	b500      	push	{lr}
     ca6:	2240      	movs	r2, #64	; 0x40
     ca8:	b081      	sub	sp, #4
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <call_copy_bits_ref()+0x1c>)
     cac:	4668      	mov	r0, sp
     cae:	605a      	str	r2, [r3, #4]
     cb0:	685b      	ldr	r3, [r3, #4]
     cb2:	9300      	str	r3, [sp, #0]
     cb4:	f7ff fffe 	bl	c8c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     cb8:	b001      	add	sp, #4
     cba:	f85d fb04 	ldr.w	pc, [sp], #4
     cbe:	bf00      	nop
     cc0:	200226c0 	.word	0x200226c0

00000cc4 <run>:
     cc4:	b510      	push	{r4, lr}
     cc6:	4cb3      	ldr	r4, [pc, #716]	; (f94 <run+0x2d0>)
     cc8:	7823      	ldrb	r3, [r4, #0]
     cca:	2b00      	cmp	r3, #0
     ccc:	f000 82e2 	beq.w	1294 <run+0x5d0>
     cd0:	68a1      	ldr	r1, [r4, #8]
     cd2:	7b23      	ldrb	r3, [r4, #12]
     cd4:	b91b      	cbnz	r3, cde <run+0x1a>
     cd6:	4ab0      	ldr	r2, [pc, #704]	; (f98 <run+0x2d4>)
     cd8:	2301      	movs	r3, #1
     cda:	6162      	str	r2, [r4, #20]
     cdc:	7323      	strb	r3, [r4, #12]
     cde:	7e23      	ldrb	r3, [r4, #24]
     ce0:	b91b      	cbnz	r3, cea <run+0x26>
     ce2:	4aae      	ldr	r2, [pc, #696]	; (f9c <run+0x2d8>)
     ce4:	2301      	movs	r3, #1
     ce6:	6222      	str	r2, [r4, #32]
     ce8:	7623      	strb	r3, [r4, #24]
     cea:	2200      	movs	r2, #0
     cec:	48ac      	ldr	r0, [pc, #688]	; (fa0 <run+0x2dc>)
     cee:	f7ff fffe 	bl	0 <do_test>
     cf2:	68a1      	ldr	r1, [r4, #8]
     cf4:	2201      	movs	r2, #1
     cf6:	48ab      	ldr	r0, [pc, #684]	; (fa4 <run+0x2e0>)
     cf8:	f7ff fffe 	bl	0 <do_test>
     cfc:	68a1      	ldr	r1, [r4, #8]
     cfe:	2202      	movs	r2, #2
     d00:	48a9      	ldr	r0, [pc, #676]	; (fa8 <run+0x2e4>)
     d02:	f7ff fffe 	bl	0 <do_test>
     d06:	68a1      	ldr	r1, [r4, #8]
     d08:	2203      	movs	r2, #3
     d0a:	48a8      	ldr	r0, [pc, #672]	; (fac <run+0x2e8>)
     d0c:	f7ff fffe 	bl	0 <do_test>
     d10:	68a1      	ldr	r1, [r4, #8]
     d12:	2204      	movs	r2, #4
     d14:	48a6      	ldr	r0, [pc, #664]	; (fb0 <run+0x2ec>)
     d16:	f7ff fffe 	bl	0 <do_test>
     d1a:	68a1      	ldr	r1, [r4, #8]
     d1c:	2205      	movs	r2, #5
     d1e:	48a5      	ldr	r0, [pc, #660]	; (fb4 <run+0x2f0>)
     d20:	f7ff fffe 	bl	0 <do_test>
     d24:	68a1      	ldr	r1, [r4, #8]
     d26:	2206      	movs	r2, #6
     d28:	48a3      	ldr	r0, [pc, #652]	; (fb8 <run+0x2f4>)
     d2a:	f7ff fffe 	bl	0 <do_test>
     d2e:	68a1      	ldr	r1, [r4, #8]
     d30:	2207      	movs	r2, #7
     d32:	48a2      	ldr	r0, [pc, #648]	; (fbc <run+0x2f8>)
     d34:	f7ff fffe 	bl	0 <do_test>
     d38:	68a1      	ldr	r1, [r4, #8]
     d3a:	2208      	movs	r2, #8
     d3c:	48a0      	ldr	r0, [pc, #640]	; (fc0 <run+0x2fc>)
     d3e:	f7ff fffe 	bl	0 <do_test>
     d42:	68a1      	ldr	r1, [r4, #8]
     d44:	2209      	movs	r2, #9
     d46:	489f      	ldr	r0, [pc, #636]	; (fc4 <run+0x300>)
     d48:	f7ff fffe 	bl	0 <do_test>
     d4c:	68a1      	ldr	r1, [r4, #8]
     d4e:	220a      	movs	r2, #10
     d50:	489d      	ldr	r0, [pc, #628]	; (fc8 <run+0x304>)
     d52:	f7ff fffe 	bl	0 <do_test>
     d56:	68a1      	ldr	r1, [r4, #8]
     d58:	220b      	movs	r2, #11
     d5a:	489c      	ldr	r0, [pc, #624]	; (fcc <run+0x308>)
     d5c:	f7ff fffe 	bl	0 <do_test>
     d60:	68a1      	ldr	r1, [r4, #8]
     d62:	220c      	movs	r2, #12
     d64:	489a      	ldr	r0, [pc, #616]	; (fd0 <run+0x30c>)
     d66:	f7ff fffe 	bl	0 <do_test>
     d6a:	68a1      	ldr	r1, [r4, #8]
     d6c:	220d      	movs	r2, #13
     d6e:	4899      	ldr	r0, [pc, #612]	; (fd4 <run+0x310>)
     d70:	f7ff fffe 	bl	0 <do_test>
     d74:	68a1      	ldr	r1, [r4, #8]
     d76:	220e      	movs	r2, #14
     d78:	4897      	ldr	r0, [pc, #604]	; (fd8 <run+0x314>)
     d7a:	f7ff fffe 	bl	0 <do_test>
     d7e:	68a1      	ldr	r1, [r4, #8]
     d80:	220f      	movs	r2, #15
     d82:	4896      	ldr	r0, [pc, #600]	; (fdc <run+0x318>)
     d84:	f7ff fffe 	bl	0 <do_test>
     d88:	68a1      	ldr	r1, [r4, #8]
     d8a:	2210      	movs	r2, #16
     d8c:	4894      	ldr	r0, [pc, #592]	; (fe0 <run+0x31c>)
     d8e:	f7ff fffe 	bl	0 <do_test>
     d92:	68a1      	ldr	r1, [r4, #8]
     d94:	2211      	movs	r2, #17
     d96:	4893      	ldr	r0, [pc, #588]	; (fe4 <run+0x320>)
     d98:	f7ff fffe 	bl	0 <do_test>
     d9c:	68a1      	ldr	r1, [r4, #8]
     d9e:	2212      	movs	r2, #18
     da0:	4891      	ldr	r0, [pc, #580]	; (fe8 <run+0x324>)
     da2:	f7ff fffe 	bl	0 <do_test>
     da6:	68a1      	ldr	r1, [r4, #8]
     da8:	2213      	movs	r2, #19
     daa:	4890      	ldr	r0, [pc, #576]	; (fec <run+0x328>)
     dac:	f7ff fffe 	bl	0 <do_test>
     db0:	68a1      	ldr	r1, [r4, #8]
     db2:	2214      	movs	r2, #20
     db4:	488e      	ldr	r0, [pc, #568]	; (ff0 <run+0x32c>)
     db6:	f7ff fffe 	bl	0 <do_test>
     dba:	68a1      	ldr	r1, [r4, #8]
     dbc:	2215      	movs	r2, #21
     dbe:	488d      	ldr	r0, [pc, #564]	; (ff4 <run+0x330>)
     dc0:	f7ff fffe 	bl	0 <do_test>
     dc4:	68a1      	ldr	r1, [r4, #8]
     dc6:	2216      	movs	r2, #22
     dc8:	488b      	ldr	r0, [pc, #556]	; (ff8 <run+0x334>)
     dca:	f7ff fffe 	bl	0 <do_test>
     dce:	68a1      	ldr	r1, [r4, #8]
     dd0:	2217      	movs	r2, #23
     dd2:	488a      	ldr	r0, [pc, #552]	; (ffc <run+0x338>)
     dd4:	f7ff fffe 	bl	0 <do_test>
     dd8:	68a1      	ldr	r1, [r4, #8]
     dda:	2218      	movs	r2, #24
     ddc:	4888      	ldr	r0, [pc, #544]	; (1000 <run+0x33c>)
     dde:	f7ff fffe 	bl	0 <do_test>
     de2:	68a1      	ldr	r1, [r4, #8]
     de4:	2219      	movs	r2, #25
     de6:	4887      	ldr	r0, [pc, #540]	; (1004 <run+0x340>)
     de8:	f7ff fffe 	bl	0 <do_test>
     dec:	68a1      	ldr	r1, [r4, #8]
     dee:	221a      	movs	r2, #26
     df0:	4885      	ldr	r0, [pc, #532]	; (1008 <run+0x344>)
     df2:	f7ff fffe 	bl	0 <do_test>
     df6:	68a1      	ldr	r1, [r4, #8]
     df8:	221b      	movs	r2, #27
     dfa:	4884      	ldr	r0, [pc, #528]	; (100c <run+0x348>)
     dfc:	f7ff fffe 	bl	0 <do_test>
     e00:	68a1      	ldr	r1, [r4, #8]
     e02:	221c      	movs	r2, #28
     e04:	4882      	ldr	r0, [pc, #520]	; (1010 <run+0x34c>)
     e06:	f7ff fffe 	bl	0 <do_test>
     e0a:	68a1      	ldr	r1, [r4, #8]
     e0c:	221d      	movs	r2, #29
     e0e:	4881      	ldr	r0, [pc, #516]	; (1014 <run+0x350>)
     e10:	f7ff fffe 	bl	0 <do_test>
     e14:	68a1      	ldr	r1, [r4, #8]
     e16:	221e      	movs	r2, #30
     e18:	487f      	ldr	r0, [pc, #508]	; (1018 <run+0x354>)
     e1a:	f7ff fffe 	bl	0 <do_test>
     e1e:	68a1      	ldr	r1, [r4, #8]
     e20:	221f      	movs	r2, #31
     e22:	487e      	ldr	r0, [pc, #504]	; (101c <run+0x358>)
     e24:	f7ff fffe 	bl	0 <do_test>
     e28:	68a1      	ldr	r1, [r4, #8]
     e2a:	2220      	movs	r2, #32
     e2c:	487c      	ldr	r0, [pc, #496]	; (1020 <run+0x35c>)
     e2e:	f7ff fffe 	bl	0 <do_test>
     e32:	68a1      	ldr	r1, [r4, #8]
     e34:	2221      	movs	r2, #33	; 0x21
     e36:	487b      	ldr	r0, [pc, #492]	; (1024 <run+0x360>)
     e38:	f7ff fffe 	bl	0 <do_test>
     e3c:	68a1      	ldr	r1, [r4, #8]
     e3e:	2222      	movs	r2, #34	; 0x22
     e40:	4879      	ldr	r0, [pc, #484]	; (1028 <run+0x364>)
     e42:	f7ff fffe 	bl	0 <do_test>
     e46:	68a1      	ldr	r1, [r4, #8]
     e48:	2223      	movs	r2, #35	; 0x23
     e4a:	4878      	ldr	r0, [pc, #480]	; (102c <run+0x368>)
     e4c:	f7ff fffe 	bl	0 <do_test>
     e50:	68a1      	ldr	r1, [r4, #8]
     e52:	2224      	movs	r2, #36	; 0x24
     e54:	4876      	ldr	r0, [pc, #472]	; (1030 <run+0x36c>)
     e56:	f7ff fffe 	bl	0 <do_test>
     e5a:	6961      	ldr	r1, [r4, #20]
     e5c:	2225      	movs	r2, #37	; 0x25
     e5e:	4875      	ldr	r0, [pc, #468]	; (1034 <run+0x370>)
     e60:	f7ff fffe 	bl	0 <do_test>
     e64:	6961      	ldr	r1, [r4, #20]
     e66:	2226      	movs	r2, #38	; 0x26
     e68:	4873      	ldr	r0, [pc, #460]	; (1038 <run+0x374>)
     e6a:	f7ff fffe 	bl	0 <do_test>
     e6e:	6961      	ldr	r1, [r4, #20]
     e70:	2227      	movs	r2, #39	; 0x27
     e72:	4872      	ldr	r0, [pc, #456]	; (103c <run+0x378>)
     e74:	f7ff fffe 	bl	0 <do_test>
     e78:	68a1      	ldr	r1, [r4, #8]
     e7a:	2228      	movs	r2, #40	; 0x28
     e7c:	4870      	ldr	r0, [pc, #448]	; (1040 <run+0x37c>)
     e7e:	f7ff fffe 	bl	0 <do_test>
     e82:	68a1      	ldr	r1, [r4, #8]
     e84:	2229      	movs	r2, #41	; 0x29
     e86:	486f      	ldr	r0, [pc, #444]	; (1044 <run+0x380>)
     e88:	f7ff fffe 	bl	0 <do_test>
     e8c:	68a1      	ldr	r1, [r4, #8]
     e8e:	222a      	movs	r2, #42	; 0x2a
     e90:	486d      	ldr	r0, [pc, #436]	; (1048 <run+0x384>)
     e92:	f7ff fffe 	bl	0 <do_test>
     e96:	68a1      	ldr	r1, [r4, #8]
     e98:	222b      	movs	r2, #43	; 0x2b
     e9a:	486c      	ldr	r0, [pc, #432]	; (104c <run+0x388>)
     e9c:	f7ff fffe 	bl	0 <do_test>
     ea0:	68a1      	ldr	r1, [r4, #8]
     ea2:	222c      	movs	r2, #44	; 0x2c
     ea4:	486a      	ldr	r0, [pc, #424]	; (1050 <run+0x38c>)
     ea6:	f7ff fffe 	bl	0 <do_test>
     eaa:	6a21      	ldr	r1, [r4, #32]
     eac:	222d      	movs	r2, #45	; 0x2d
     eae:	4869      	ldr	r0, [pc, #420]	; (1054 <run+0x390>)
     eb0:	f7ff fffe 	bl	0 <do_test>
     eb4:	68a1      	ldr	r1, [r4, #8]
     eb6:	222e      	movs	r2, #46	; 0x2e
     eb8:	4867      	ldr	r0, [pc, #412]	; (1058 <run+0x394>)
     eba:	f7ff fffe 	bl	0 <do_test>
     ebe:	68a1      	ldr	r1, [r4, #8]
     ec0:	222f      	movs	r2, #47	; 0x2f
     ec2:	4866      	ldr	r0, [pc, #408]	; (105c <run+0x398>)
     ec4:	f7ff fffe 	bl	0 <do_test>
     ec8:	68a1      	ldr	r1, [r4, #8]
     eca:	2230      	movs	r2, #48	; 0x30
     ecc:	4864      	ldr	r0, [pc, #400]	; (1060 <run+0x39c>)
     ece:	f7ff fffe 	bl	0 <do_test>
     ed2:	68a1      	ldr	r1, [r4, #8]
     ed4:	2231      	movs	r2, #49	; 0x31
     ed6:	4863      	ldr	r0, [pc, #396]	; (1064 <run+0x3a0>)
     ed8:	f7ff fffe 	bl	0 <do_test>
     edc:	68a1      	ldr	r1, [r4, #8]
     ede:	2232      	movs	r2, #50	; 0x32
     ee0:	4861      	ldr	r0, [pc, #388]	; (1068 <run+0x3a4>)
     ee2:	f7ff fffe 	bl	0 <do_test>
     ee6:	68a1      	ldr	r1, [r4, #8]
     ee8:	2233      	movs	r2, #51	; 0x33
     eea:	4860      	ldr	r0, [pc, #384]	; (106c <run+0x3a8>)
     eec:	f7ff fffe 	bl	0 <do_test>
     ef0:	68a1      	ldr	r1, [r4, #8]
     ef2:	2234      	movs	r2, #52	; 0x34
     ef4:	485e      	ldr	r0, [pc, #376]	; (1070 <run+0x3ac>)
     ef6:	f7ff fffe 	bl	0 <do_test>
     efa:	68a1      	ldr	r1, [r4, #8]
     efc:	2235      	movs	r2, #53	; 0x35
     efe:	485d      	ldr	r0, [pc, #372]	; (1074 <run+0x3b0>)
     f00:	f7ff fffe 	bl	0 <do_test>
     f04:	68a1      	ldr	r1, [r4, #8]
     f06:	2236      	movs	r2, #54	; 0x36
     f08:	485b      	ldr	r0, [pc, #364]	; (1078 <run+0x3b4>)
     f0a:	f7ff fffe 	bl	0 <do_test>
     f0e:	68a1      	ldr	r1, [r4, #8]
     f10:	2237      	movs	r2, #55	; 0x37
     f12:	485a      	ldr	r0, [pc, #360]	; (107c <run+0x3b8>)
     f14:	f7ff fffe 	bl	0 <do_test>
     f18:	68a1      	ldr	r1, [r4, #8]
     f1a:	2238      	movs	r2, #56	; 0x38
     f1c:	4858      	ldr	r0, [pc, #352]	; (1080 <run+0x3bc>)
     f1e:	f7ff fffe 	bl	0 <do_test>
     f22:	68a1      	ldr	r1, [r4, #8]
     f24:	2239      	movs	r2, #57	; 0x39
     f26:	4857      	ldr	r0, [pc, #348]	; (1084 <run+0x3c0>)
     f28:	f7ff fffe 	bl	0 <do_test>
     f2c:	68a1      	ldr	r1, [r4, #8]
     f2e:	223a      	movs	r2, #58	; 0x3a
     f30:	4855      	ldr	r0, [pc, #340]	; (1088 <run+0x3c4>)
     f32:	f7ff fffe 	bl	0 <do_test>
     f36:	68a1      	ldr	r1, [r4, #8]
     f38:	223b      	movs	r2, #59	; 0x3b
     f3a:	4854      	ldr	r0, [pc, #336]	; (108c <run+0x3c8>)
     f3c:	f7ff fffe 	bl	0 <do_test>
     f40:	68a1      	ldr	r1, [r4, #8]
     f42:	223c      	movs	r2, #60	; 0x3c
     f44:	4852      	ldr	r0, [pc, #328]	; (1090 <run+0x3cc>)
     f46:	f7ff fffe 	bl	0 <do_test>
     f4a:	68a1      	ldr	r1, [r4, #8]
     f4c:	223d      	movs	r2, #61	; 0x3d
     f4e:	4851      	ldr	r0, [pc, #324]	; (1094 <run+0x3d0>)
     f50:	f7ff fffe 	bl	0 <do_test>
     f54:	68a1      	ldr	r1, [r4, #8]
     f56:	223e      	movs	r2, #62	; 0x3e
     f58:	484f      	ldr	r0, [pc, #316]	; (1098 <run+0x3d4>)
     f5a:	f7ff fffe 	bl	0 <do_test>
     f5e:	68a1      	ldr	r1, [r4, #8]
     f60:	223f      	movs	r2, #63	; 0x3f
     f62:	484e      	ldr	r0, [pc, #312]	; (109c <run+0x3d8>)
     f64:	f7ff fffe 	bl	0 <do_test>
     f68:	6961      	ldr	r1, [r4, #20]
     f6a:	2240      	movs	r2, #64	; 0x40
     f6c:	484c      	ldr	r0, [pc, #304]	; (10a0 <run+0x3dc>)
     f6e:	f7ff fffe 	bl	0 <do_test>
     f72:	6961      	ldr	r1, [r4, #20]
     f74:	2241      	movs	r2, #65	; 0x41
     f76:	484b      	ldr	r0, [pc, #300]	; (10a4 <run+0x3e0>)
     f78:	f7ff fffe 	bl	0 <do_test>
     f7c:	6961      	ldr	r1, [r4, #20]
     f7e:	2242      	movs	r2, #66	; 0x42
     f80:	4849      	ldr	r0, [pc, #292]	; (10a8 <run+0x3e4>)
     f82:	f7ff fffe 	bl	0 <do_test>
     f86:	68a1      	ldr	r1, [r4, #8]
     f88:	2243      	movs	r2, #67	; 0x43
     f8a:	4848      	ldr	r0, [pc, #288]	; (10ac <run+0x3e8>)
     f8c:	f7ff fffe 	bl	0 <do_test>
     f90:	e08e      	b.n	10b0 <run+0x3ec>
     f92:	bf00      	nop
     f94:	00000000 	.word	0x00000000
     f98:	20022624 	.word	0x20022624
     f9c:	2002252c 	.word	0x2002252c
	...
    10b0:	6a21      	ldr	r1, [r4, #32]
    10b2:	2244      	movs	r2, #68	; 0x44
    10b4:	487a      	ldr	r0, [pc, #488]	; (12a0 <run+0x5dc>)
    10b6:	f7ff fffe 	bl	0 <do_test>
    10ba:	6a21      	ldr	r1, [r4, #32]
    10bc:	2245      	movs	r2, #69	; 0x45
    10be:	4879      	ldr	r0, [pc, #484]	; (12a4 <run+0x5e0>)
    10c0:	f7ff fffe 	bl	0 <do_test>
    10c4:	68a1      	ldr	r1, [r4, #8]
    10c6:	2246      	movs	r2, #70	; 0x46
    10c8:	4877      	ldr	r0, [pc, #476]	; (12a8 <run+0x5e4>)
    10ca:	f7ff fffe 	bl	0 <do_test>
    10ce:	68a1      	ldr	r1, [r4, #8]
    10d0:	2247      	movs	r2, #71	; 0x47
    10d2:	4876      	ldr	r0, [pc, #472]	; (12ac <run+0x5e8>)
    10d4:	f7ff fffe 	bl	0 <do_test>
    10d8:	6a21      	ldr	r1, [r4, #32]
    10da:	2248      	movs	r2, #72	; 0x48
    10dc:	4874      	ldr	r0, [pc, #464]	; (12b0 <run+0x5ec>)
    10de:	f7ff fffe 	bl	0 <do_test>
    10e2:	6a21      	ldr	r1, [r4, #32]
    10e4:	2249      	movs	r2, #73	; 0x49
    10e6:	4873      	ldr	r0, [pc, #460]	; (12b4 <run+0x5f0>)
    10e8:	f7ff fffe 	bl	0 <do_test>
    10ec:	68a1      	ldr	r1, [r4, #8]
    10ee:	224a      	movs	r2, #74	; 0x4a
    10f0:	4871      	ldr	r0, [pc, #452]	; (12b8 <run+0x5f4>)
    10f2:	f7ff fffe 	bl	0 <do_test>
    10f6:	68a1      	ldr	r1, [r4, #8]
    10f8:	224b      	movs	r2, #75	; 0x4b
    10fa:	4870      	ldr	r0, [pc, #448]	; (12bc <run+0x5f8>)
    10fc:	f7ff fffe 	bl	0 <do_test>
    1100:	68a1      	ldr	r1, [r4, #8]
    1102:	224c      	movs	r2, #76	; 0x4c
    1104:	486e      	ldr	r0, [pc, #440]	; (12c0 <run+0x5fc>)
    1106:	f7ff fffe 	bl	0 <do_test>
    110a:	68a1      	ldr	r1, [r4, #8]
    110c:	224d      	movs	r2, #77	; 0x4d
    110e:	486d      	ldr	r0, [pc, #436]	; (12c4 <run+0x600>)
    1110:	f7ff fffe 	bl	0 <do_test>
    1114:	68a1      	ldr	r1, [r4, #8]
    1116:	224e      	movs	r2, #78	; 0x4e
    1118:	486b      	ldr	r0, [pc, #428]	; (12c8 <run+0x604>)
    111a:	f7ff fffe 	bl	0 <do_test>
    111e:	68a1      	ldr	r1, [r4, #8]
    1120:	224f      	movs	r2, #79	; 0x4f
    1122:	486a      	ldr	r0, [pc, #424]	; (12cc <run+0x608>)
    1124:	f7ff fffe 	bl	0 <do_test>
    1128:	68a1      	ldr	r1, [r4, #8]
    112a:	2250      	movs	r2, #80	; 0x50
    112c:	4868      	ldr	r0, [pc, #416]	; (12d0 <run+0x60c>)
    112e:	f7ff fffe 	bl	0 <do_test>
    1132:	68a1      	ldr	r1, [r4, #8]
    1134:	2251      	movs	r2, #81	; 0x51
    1136:	4866      	ldr	r0, [pc, #408]	; (12d0 <run+0x60c>)
    1138:	f7ff fffe 	bl	0 <do_test>
    113c:	68a1      	ldr	r1, [r4, #8]
    113e:	2252      	movs	r2, #82	; 0x52
    1140:	4864      	ldr	r0, [pc, #400]	; (12d4 <run+0x610>)
    1142:	f7ff fffe 	bl	0 <do_test>
    1146:	68a1      	ldr	r1, [r4, #8]
    1148:	2253      	movs	r2, #83	; 0x53
    114a:	4863      	ldr	r0, [pc, #396]	; (12d8 <run+0x614>)
    114c:	f7ff fffe 	bl	0 <do_test>
    1150:	68a1      	ldr	r1, [r4, #8]
    1152:	2254      	movs	r2, #84	; 0x54
    1154:	4861      	ldr	r0, [pc, #388]	; (12dc <run+0x618>)
    1156:	f7ff fffe 	bl	0 <do_test>
    115a:	68a1      	ldr	r1, [r4, #8]
    115c:	2255      	movs	r2, #85	; 0x55
    115e:	4860      	ldr	r0, [pc, #384]	; (12e0 <run+0x61c>)
    1160:	f7ff fffe 	bl	0 <do_test>
    1164:	68a1      	ldr	r1, [r4, #8]
    1166:	2256      	movs	r2, #86	; 0x56
    1168:	485e      	ldr	r0, [pc, #376]	; (12e4 <run+0x620>)
    116a:	f7ff fffe 	bl	0 <do_test>
    116e:	68a1      	ldr	r1, [r4, #8]
    1170:	2257      	movs	r2, #87	; 0x57
    1172:	485b      	ldr	r0, [pc, #364]	; (12e0 <run+0x61c>)
    1174:	f7ff fffe 	bl	0 <do_test>
    1178:	68a1      	ldr	r1, [r4, #8]
    117a:	2258      	movs	r2, #88	; 0x58
    117c:	485a      	ldr	r0, [pc, #360]	; (12e8 <run+0x624>)
    117e:	f7ff fffe 	bl	0 <do_test>
    1182:	68a1      	ldr	r1, [r4, #8]
    1184:	2259      	movs	r2, #89	; 0x59
    1186:	4859      	ldr	r0, [pc, #356]	; (12ec <run+0x628>)
    1188:	f7ff fffe 	bl	0 <do_test>
    118c:	6a21      	ldr	r1, [r4, #32]
    118e:	225a      	movs	r2, #90	; 0x5a
    1190:	4857      	ldr	r0, [pc, #348]	; (12f0 <run+0x62c>)
    1192:	f7ff fffe 	bl	0 <do_test>
    1196:	6a21      	ldr	r1, [r4, #32]
    1198:	225b      	movs	r2, #91	; 0x5b
    119a:	4856      	ldr	r0, [pc, #344]	; (12f4 <run+0x630>)
    119c:	f7ff fffe 	bl	0 <do_test>
    11a0:	68a1      	ldr	r1, [r4, #8]
    11a2:	225c      	movs	r2, #92	; 0x5c
    11a4:	4854      	ldr	r0, [pc, #336]	; (12f8 <run+0x634>)
    11a6:	f7ff fffe 	bl	0 <do_test>
    11aa:	6a21      	ldr	r1, [r4, #32]
    11ac:	225d      	movs	r2, #93	; 0x5d
    11ae:	4853      	ldr	r0, [pc, #332]	; (12fc <run+0x638>)
    11b0:	f7ff fffe 	bl	0 <do_test>
    11b4:	6a21      	ldr	r1, [r4, #32]
    11b6:	225e      	movs	r2, #94	; 0x5e
    11b8:	4851      	ldr	r0, [pc, #324]	; (1300 <run+0x63c>)
    11ba:	f7ff fffe 	bl	0 <do_test>
    11be:	68a1      	ldr	r1, [r4, #8]
    11c0:	225f      	movs	r2, #95	; 0x5f
    11c2:	4850      	ldr	r0, [pc, #320]	; (1304 <run+0x640>)
    11c4:	f7ff fffe 	bl	0 <do_test>
    11c8:	68a1      	ldr	r1, [r4, #8]
    11ca:	2260      	movs	r2, #96	; 0x60
    11cc:	484e      	ldr	r0, [pc, #312]	; (1308 <run+0x644>)
    11ce:	f7ff fffe 	bl	0 <do_test>
    11d2:	68a1      	ldr	r1, [r4, #8]
    11d4:	2261      	movs	r2, #97	; 0x61
    11d6:	484d      	ldr	r0, [pc, #308]	; (130c <run+0x648>)
    11d8:	f7ff fffe 	bl	0 <do_test>
    11dc:	68a1      	ldr	r1, [r4, #8]
    11de:	2262      	movs	r2, #98	; 0x62
    11e0:	484b      	ldr	r0, [pc, #300]	; (1310 <run+0x64c>)
    11e2:	f7ff fffe 	bl	0 <do_test>
    11e6:	6a21      	ldr	r1, [r4, #32]
    11e8:	2263      	movs	r2, #99	; 0x63
    11ea:	484a      	ldr	r0, [pc, #296]	; (1314 <run+0x650>)
    11ec:	f7ff fffe 	bl	0 <do_test>
    11f0:	6a21      	ldr	r1, [r4, #32]
    11f2:	2264      	movs	r2, #100	; 0x64
    11f4:	4848      	ldr	r0, [pc, #288]	; (1318 <run+0x654>)
    11f6:	f7ff fffe 	bl	0 <do_test>
    11fa:	6a21      	ldr	r1, [r4, #32]
    11fc:	2265      	movs	r2, #101	; 0x65
    11fe:	4847      	ldr	r0, [pc, #284]	; (131c <run+0x658>)
    1200:	f7ff fffe 	bl	0 <do_test>
    1204:	6a21      	ldr	r1, [r4, #32]
    1206:	2266      	movs	r2, #102	; 0x66
    1208:	4845      	ldr	r0, [pc, #276]	; (1320 <run+0x65c>)
    120a:	f7ff fffe 	bl	0 <do_test>
    120e:	6a21      	ldr	r1, [r4, #32]
    1210:	2267      	movs	r2, #103	; 0x67
    1212:	4844      	ldr	r0, [pc, #272]	; (1324 <run+0x660>)
    1214:	f7ff fffe 	bl	0 <do_test>
    1218:	6a21      	ldr	r1, [r4, #32]
    121a:	2268      	movs	r2, #104	; 0x68
    121c:	4842      	ldr	r0, [pc, #264]	; (1328 <run+0x664>)
    121e:	f7ff fffe 	bl	0 <do_test>
    1222:	68a1      	ldr	r1, [r4, #8]
    1224:	2269      	movs	r2, #105	; 0x69
    1226:	4841      	ldr	r0, [pc, #260]	; (132c <run+0x668>)
    1228:	f7ff fffe 	bl	0 <do_test>
    122c:	68a1      	ldr	r1, [r4, #8]
    122e:	226a      	movs	r2, #106	; 0x6a
    1230:	483f      	ldr	r0, [pc, #252]	; (1330 <run+0x66c>)
    1232:	f7ff fffe 	bl	0 <do_test>
    1236:	68a1      	ldr	r1, [r4, #8]
    1238:	226b      	movs	r2, #107	; 0x6b
    123a:	483e      	ldr	r0, [pc, #248]	; (1334 <run+0x670>)
    123c:	f7ff fffe 	bl	0 <do_test>
    1240:	68a1      	ldr	r1, [r4, #8]
    1242:	226c      	movs	r2, #108	; 0x6c
    1244:	483c      	ldr	r0, [pc, #240]	; (1338 <run+0x674>)
    1246:	f7ff fffe 	bl	0 <do_test>
    124a:	68a1      	ldr	r1, [r4, #8]
    124c:	226d      	movs	r2, #109	; 0x6d
    124e:	483b      	ldr	r0, [pc, #236]	; (133c <run+0x678>)
    1250:	f7ff fffe 	bl	0 <do_test>
    1254:	68a1      	ldr	r1, [r4, #8]
    1256:	226e      	movs	r2, #110	; 0x6e
    1258:	4839      	ldr	r0, [pc, #228]	; (1340 <run+0x67c>)
    125a:	f7ff fffe 	bl	0 <do_test>
    125e:	68a1      	ldr	r1, [r4, #8]
    1260:	226f      	movs	r2, #111	; 0x6f
    1262:	4838      	ldr	r0, [pc, #224]	; (1344 <run+0x680>)
    1264:	f7ff fffe 	bl	0 <do_test>
    1268:	68a1      	ldr	r1, [r4, #8]
    126a:	2270      	movs	r2, #112	; 0x70
    126c:	4836      	ldr	r0, [pc, #216]	; (1348 <run+0x684>)
    126e:	f7ff fffe 	bl	0 <do_test>
    1272:	68a1      	ldr	r1, [r4, #8]
    1274:	2271      	movs	r2, #113	; 0x71
    1276:	4835      	ldr	r0, [pc, #212]	; (134c <run+0x688>)
    1278:	f7ff fffe 	bl	0 <do_test>
    127c:	68a1      	ldr	r1, [r4, #8]
    127e:	2272      	movs	r2, #114	; 0x72
    1280:	4833      	ldr	r0, [pc, #204]	; (1350 <run+0x68c>)
    1282:	f7ff fffe 	bl	0 <do_test>
    1286:	68a1      	ldr	r1, [r4, #8]
    1288:	2273      	movs	r2, #115	; 0x73
    128a:	4832      	ldr	r0, [pc, #200]	; (1354 <run+0x690>)
    128c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1290:	f7ff bffe 	b.w	0 <do_test>
    1294:	4930      	ldr	r1, [pc, #192]	; (1358 <run+0x694>)
    1296:	2301      	movs	r3, #1
    1298:	60a1      	str	r1, [r4, #8]
    129a:	7023      	strb	r3, [r4, #0]
    129c:	e519      	b.n	cd2 <run+0xe>
    129e:	bf00      	nop
	...
    1358:	200226c4 	.word	0x200226c4

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	00000000                                ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	00000000                                ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	00000000                                ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
