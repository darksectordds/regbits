
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       2:	2200      	movs	r2, #0
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	200226c0 	.word	0x200226c0

0000000c <zero_array()>:
       c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
       e:	2200      	movs	r2, #0
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	20022500 	.word	0x20022500

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	200226c0 	.word	0x200226c0

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	200226c0 	.word	0x200226c0

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	200226c0 	.word	0x200226c0

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	200226c0 	.word	0x200226c0

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	200226c0 	.word	0x200226c0

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	200226c0 	.word	0x200226c0

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	200226c0 	.word	0x200226c0

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	200226c0 	.word	0x200226c0

00000098 <equ_singl_bits_operator()>:
      98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9a:	2240      	movs	r2, #64	; 0x40
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	200226c0 	.word	0x200226c0

000000a4 <equ_singl_bits_method()>:
      a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a6:	2240      	movs	r2, #64	; 0x40
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	200226c0 	.word	0x200226c0

000000b0 <equ_singl_mskd_operator()>:
      b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b2:	2202      	movs	r2, #2
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	200226c0 	.word	0x200226c0

000000bc <equ_singl_mskd_method()>:
      bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      be:	2202      	movs	r2, #2
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	200226c0 	.word	0x200226c0

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	200226c0 	.word	0x200226c0

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	200226c0 	.word	0x200226c0

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	200226c0 	.word	0x200226c0

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	200226c0 	.word	0x200226c0

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	200226c0 	.word	0x200226c0

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	200226c0 	.word	0x200226c0

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	200226c0 	.word	0x200226c0

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	200226c0 	.word	0x200226c0

00000150 <ins_multi_mskd_operator()>:
     150:	4a03      	ldr	r2, [pc, #12]	; (160 <ins_multi_mskd_operator()+0x10>)
     152:	4b04      	ldr	r3, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     154:	6851      	ldr	r1, [r2, #4]
     156:	400b      	ands	r3, r1
     158:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     15c:	6053      	str	r3, [r2, #4]
     15e:	4770      	bx	lr
     160:	200226c0 	.word	0x200226c0
     164:	fffff079 	.word	0xfffff079

00000168 <ins_multi_mskd_method()>:
     168:	4a03      	ldr	r2, [pc, #12]	; (178 <ins_multi_mskd_method()+0x10>)
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16c:	6851      	ldr	r1, [r2, #4]
     16e:	400b      	ands	r3, r1
     170:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     174:	6053      	str	r3, [r2, #4]
     176:	4770      	bx	lr
     178:	200226c0 	.word	0x200226c0
     17c:	fffff079 	.word	0xfffff079

00000180 <equ_multi_bits_operator()>:
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     182:	2260      	movs	r2, #96	; 0x60
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	200226c0 	.word	0x200226c0

0000018c <equ_multi_bits_method()>:
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     18e:	2260      	movs	r2, #96	; 0x60
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	200226c0 	.word	0x200226c0

00000198 <equ_multi_mskd_operator()>:
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19a:	f44f 7242 	mov.w	r2, #776	; 0x308
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	200226c0 	.word	0x200226c0

000001a8 <equ_multi_mskd_method()>:
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	200226c0 	.word	0x200226c0

000001b8 <equ_bits_mskd_operator()>:
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1ba:	2222      	movs	r2, #34	; 0x22
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	200226c0 	.word	0x200226c0

000001c4 <equ_bits_mskd_method()>:
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c6:	2222      	movs	r2, #34	; 0x22
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	200226c0 	.word	0x200226c0

000001d0 <equ_mskd_bits_operator()>:
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d2:	2244      	movs	r2, #68	; 0x44
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	200226c0 	.word	0x200226c0

000001dc <equ_mskd_bits_method()>:
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1de:	2244      	movs	r2, #68	; 0x44
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	200226c0 	.word	0x200226c0

000001e8 <equ_bits_var()>:
     1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
     1ea:	2140      	movs	r1, #64	; 0x40
     1ec:	2201      	movs	r2, #1
     1ee:	6059      	str	r1, [r3, #4]
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	200226c0 	.word	0x200226c0

000001f8 <equ_mskd_var()>:
     1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
     1fa:	2102      	movs	r1, #2
     1fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
     200:	6059      	str	r1, [r3, #4]
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	200226c0 	.word	0x200226c0

0000020c <cmp_equ_zero()>:
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     20e:	2200      	movs	r2, #0
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
     218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
     222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	200226c0 	.word	0x200226c0
     230:	20022620 	.word	0x20022620

00000234 <cmp_neq_zero()>:
     234:	4b05      	ldr	r3, [pc, #20]	; (24c <cmp_neq_zero()+0x18>)
     236:	2200      	movs	r2, #0
     238:	605a      	str	r2, [r3, #4]
     23a:	685a      	ldr	r2, [r3, #4]
     23c:	b112      	cbz	r2, 244 <cmp_neq_zero()+0x10>
     23e:	2204      	movs	r2, #4
     240:	605a      	str	r2, [r3, #4]
     242:	4770      	bx	lr
     244:	2220      	movs	r2, #32
     246:	605a      	str	r2, [r3, #4]
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	200226c0 	.word	0x200226c0

00000250 <cmp_equ_bits()>:
     250:	2240      	movs	r2, #64	; 0x40
     252:	4b06      	ldr	r3, [pc, #24]	; (26c <cmp_equ_bits()+0x1c>)
     254:	605a      	str	r2, [r3, #4]
     256:	685b      	ldr	r3, [r3, #4]
     258:	f013 0f40 	tst.w	r3, #64	; 0x40
     25c:	4b04      	ldr	r3, [pc, #16]	; (270 <cmp_equ_bits()+0x20>)
     25e:	bf14      	ite	ne
     260:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
     264:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
     268:	605a      	str	r2, [r3, #4]
     26a:	4770      	bx	lr
     26c:	200226c0 	.word	0x200226c0
     270:	20022620 	.word	0x20022620

00000274 <cmp_neq_bits()>:
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <cmp_neq_bits()+0x14>)
     276:	2240      	movs	r2, #64	; 0x40
     278:	605a      	str	r2, [r3, #4]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	0652      	lsls	r2, r2, #25
     27e:	bf54      	ite	pl
     280:	2202      	movpl	r2, #2
     282:	2220      	movmi	r2, #32
     284:	605a      	str	r2, [r3, #4]
     286:	4770      	bx	lr
     288:	200226c0 	.word	0x200226c0

0000028c <cmp_equ_multi_bits()>:
     28c:	2260      	movs	r2, #96	; 0x60
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <cmp_equ_multi_bits()+0x1c>)
     290:	605a      	str	r2, [r3, #4]
     292:	685b      	ldr	r3, [r3, #4]
     294:	4013      	ands	r3, r2
     296:	4293      	cmp	r3, r2
     298:	4b04      	ldr	r3, [pc, #16]	; (2ac <cmp_equ_multi_bits()+0x20>)
     29a:	bf0c      	ite	eq
     29c:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     2a0:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2a4:	605a      	str	r2, [r3, #4]
     2a6:	4770      	bx	lr
     2a8:	200226c0 	.word	0x200226c0
     2ac:	20022620 	.word	0x20022620

000002b0 <cmp_neq_multi_bits()>:
     2b0:	2260      	movs	r2, #96	; 0x60
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <cmp_neq_multi_bits()+0x1c>)
     2b4:	605a      	str	r2, [r3, #4]
     2b6:	685b      	ldr	r3, [r3, #4]
     2b8:	4013      	ands	r3, r2
     2ba:	4293      	cmp	r3, r2
     2bc:	4b04      	ldr	r3, [pc, #16]	; (2d0 <cmp_neq_multi_bits()+0x20>)
     2be:	bf14      	ite	ne
     2c0:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2c4:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2c8:	605a      	str	r2, [r3, #4]
     2ca:	4770      	bx	lr
     2cc:	200226c0 	.word	0x200226c0
     2d0:	20022620 	.word	0x20022620

000002d4 <cmp_equ_mskd()>:
     2d4:	4b09      	ldr	r3, [pc, #36]	; (2fc <cmp_equ_mskd()+0x28>)
     2d6:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2da:	605a      	str	r2, [r3, #4]
     2dc:	685b      	ldr	r3, [r3, #4]
     2de:	4a08      	ldr	r2, [pc, #32]	; (300 <cmp_equ_mskd()+0x2c>)
     2e0:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2e4:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2e8:	6853      	ldr	r3, [r2, #4]
     2ea:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2ee:	bf0c      	ite	eq
     2f0:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2f4:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     2f8:	6053      	str	r3, [r2, #4]
     2fa:	4770      	bx	lr
     2fc:	200226c0 	.word	0x200226c0
     300:	20022620 	.word	0x20022620

00000304 <cmp_neq_mskd()>:
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <cmp_neq_mskd()+0x2c>)
     306:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     30a:	605a      	str	r2, [r3, #4]
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
     312:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
     316:	685a      	ldr	r2, [r3, #4]
     318:	d005      	beq.n	326 <cmp_neq_mskd()+0x22>
     31a:	f022 0206 	bic.w	r2, r2, #6
     31e:	f042 0204 	orr.w	r2, r2, #4
     322:	605a      	str	r2, [r3, #4]
     324:	4770      	bx	lr
     326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     32a:	605a      	str	r2, [r3, #4]
     32c:	4770      	bx	lr
     32e:	bf00      	nop
     330:	200226c0 	.word	0x200226c0

00000334 <cmp_equ_reg()>:
     334:	2222      	movs	r2, #34	; 0x22
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <cmp_equ_reg()+0x1c>)
     338:	605a      	str	r2, [r3, #4]
     33a:	685b      	ldr	r3, [r3, #4]
     33c:	4293      	cmp	r3, r2
     33e:	4b05      	ldr	r3, [pc, #20]	; (354 <cmp_equ_reg()+0x20>)
     340:	bf0c      	ite	eq
     342:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     346:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     34a:	605a      	str	r2, [r3, #4]
     34c:	4770      	bx	lr
     34e:	bf00      	nop
     350:	200226c0 	.word	0x200226c0
     354:	20022620 	.word	0x20022620

00000358 <cmp_neq_reg()>:
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <cmp_neq_reg()+0x14>)
     35a:	2222      	movs	r2, #34	; 0x22
     35c:	605a      	str	r2, [r3, #4]
     35e:	685a      	ldr	r2, [r3, #4]
     360:	2a22      	cmp	r2, #34	; 0x22
     362:	bf14      	ite	ne
     364:	2202      	movne	r2, #2
     366:	2220      	moveq	r2, #32
     368:	605a      	str	r2, [r3, #4]
     36a:	4770      	bx	lr
     36c:	200226c0 	.word	0x200226c0

00000370 <constexpr_bits_array()>:
     370:	4b03      	ldr	r3, [pc, #12]	; (380 <constexpr_bits_array()+0x10>)
     372:	2106      	movs	r1, #6
     374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     378:	62d9      	str	r1, [r3, #44]	; 0x2c
     37a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     37e:	4770      	bx	lr
     380:	20022500 	.word	0x20022500

00000384 <runtime_bits_array()>:
     384:	b081      	sub	sp, #4
     386:	2203      	movs	r2, #3
     388:	4b04      	ldr	r3, [pc, #16]	; (39c <runtime_bits_array()+0x18>)
     38a:	2121      	movs	r1, #33	; 0x21
     38c:	9200      	str	r2, [sp, #0]
     38e:	9a00      	ldr	r2, [sp, #0]
     390:	0092      	lsls	r2, r2, #2
     392:	4413      	add	r3, r2
     394:	6219      	str	r1, [r3, #32]
     396:	b001      	add	sp, #4
     398:	4770      	bx	lr
     39a:	bf00      	nop
     39c:	20022500 	.word	0x20022500

000003a0 <prescaler_low()>:
     3a0:	4b04      	ldr	r3, [pc, #16]	; (3b4 <prescaler_low()+0x14>)
     3a2:	2177      	movs	r1, #119	; 0x77
     3a4:	4a04      	ldr	r2, [pc, #16]	; (3b8 <prescaler_low()+0x18>)
     3a6:	6059      	str	r1, [r3, #4]
     3a8:	685b      	ldr	r3, [r3, #4]
     3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3ae:	62d3      	str	r3, [r2, #44]	; 0x2c
     3b0:	4770      	bx	lr
     3b2:	bf00      	nop
     3b4:	20022620 	.word	0x20022620
     3b8:	20022500 	.word	0x20022500

000003bc <prescaler_high()>:
     3bc:	4b04      	ldr	r3, [pc, #16]	; (3d0 <prescaler_high()+0x14>)
     3be:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     3c2:	4a04      	ldr	r2, [pc, #16]	; (3d4 <prescaler_high()+0x18>)
     3c4:	6059      	str	r1, [r3, #4]
     3c6:	685b      	ldr	r3, [r3, #4]
     3c8:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ce:	4770      	bx	lr
     3d0:	20022620 	.word	0x20022620
     3d4:	20022500 	.word	0x20022500

000003d8 <reg_mskd_lss()>:
     3d8:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <reg_mskd_lss()+0x20>)
     3de:	605a      	str	r2, [r3, #4]
     3e0:	685b      	ldr	r3, [r3, #4]
     3e2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3e6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3ea:	4b04      	ldr	r3, [pc, #16]	; (3fc <reg_mskd_lss()+0x24>)
     3ec:	bf34      	ite	cc
     3ee:	2202      	movcc	r2, #2
     3f0:	2204      	movcs	r2, #4
     3f2:	605a      	str	r2, [r3, #4]
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop
     3f8:	20022620 	.word	0x20022620
     3fc:	200226c0 	.word	0x200226c0

00000400 <reg_mskd_leq()>:
     400:	4a0b      	ldr	r2, [pc, #44]	; (430 <reg_mskd_leq()+0x30>)
     402:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
     406:	6053      	str	r3, [r2, #4]
     408:	6853      	ldr	r3, [r2, #4]
     40a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     40e:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
     412:	d809      	bhi.n	428 <reg_mskd_leq()+0x28>
     414:	6853      	ldr	r3, [r2, #4]
     416:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     41e:	d803      	bhi.n	428 <reg_mskd_leq()+0x28>
     420:	4b04      	ldr	r3, [pc, #16]	; (434 <reg_mskd_leq()+0x34>)
     422:	2202      	movs	r2, #2
     424:	605a      	str	r2, [r3, #4]
     426:	4770      	bx	lr
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <reg_mskd_leq()+0x34>)
     42a:	2204      	movs	r2, #4
     42c:	605a      	str	r2, [r3, #4]
     42e:	4770      	bx	lr
     430:	20022620 	.word	0x20022620
     434:	200226c0 	.word	0x200226c0

00000438 <reg_mskd_gtr()>:
     438:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     43c:	4b06      	ldr	r3, [pc, #24]	; (458 <reg_mskd_gtr()+0x20>)
     43e:	605a      	str	r2, [r3, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     446:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     44a:	4b04      	ldr	r3, [pc, #16]	; (45c <reg_mskd_gtr()+0x24>)
     44c:	bf8c      	ite	hi
     44e:	2202      	movhi	r2, #2
     450:	2204      	movls	r2, #4
     452:	605a      	str	r2, [r3, #4]
     454:	4770      	bx	lr
     456:	bf00      	nop
     458:	20022620 	.word	0x20022620
     45c:	200226c0 	.word	0x200226c0

00000460 <reg_mskd_geq()>:
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <reg_mskd_geq()+0x30>)
     462:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
     466:	6053      	str	r3, [r2, #4]
     468:	6853      	ldr	r3, [r2, #4]
     46a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     472:	d309      	bcc.n	488 <reg_mskd_geq()+0x28>
     474:	6853      	ldr	r3, [r2, #4]
     476:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     47a:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
     47e:	d303      	bcc.n	488 <reg_mskd_geq()+0x28>
     480:	4b04      	ldr	r3, [pc, #16]	; (494 <reg_mskd_geq()+0x34>)
     482:	2202      	movs	r2, #2
     484:	605a      	str	r2, [r3, #4]
     486:	4770      	bx	lr
     488:	4b02      	ldr	r3, [pc, #8]	; (494 <reg_mskd_geq()+0x34>)
     48a:	2204      	movs	r2, #4
     48c:	605a      	str	r2, [r3, #4]
     48e:	4770      	bx	lr
     490:	20022620 	.word	0x20022620
     494:	200226c0 	.word	0x200226c0

00000498 <pos_cmp_eq()>:
     498:	4b01      	ldr	r3, [pc, #4]	; (4a0 <pos_cmp_eq()+0x8>)
     49a:	2202      	movs	r2, #2
     49c:	605a      	str	r2, [r3, #4]
     49e:	4770      	bx	lr
     4a0:	200226c0 	.word	0x200226c0

000004a4 <pos_cmp_ne()>:
     4a4:	4b01      	ldr	r3, [pc, #4]	; (4ac <pos_cmp_ne()+0x8>)
     4a6:	2202      	movs	r2, #2
     4a8:	605a      	str	r2, [r3, #4]
     4aa:	4770      	bx	lr
     4ac:	200226c0 	.word	0x200226c0

000004b0 <bits_extract_eq()>:
     4b0:	4b04      	ldr	r3, [pc, #16]	; (4c4 <bits_extract_eq()+0x14>)
     4b2:	2240      	movs	r2, #64	; 0x40
     4b4:	605a      	str	r2, [r3, #4]
     4b6:	685a      	ldr	r2, [r3, #4]
     4b8:	2a40      	cmp	r2, #64	; 0x40
     4ba:	bf0c      	ite	eq
     4bc:	2202      	moveq	r2, #2
     4be:	2204      	movne	r2, #4
     4c0:	605a      	str	r2, [r3, #4]
     4c2:	4770      	bx	lr
     4c4:	200226c0 	.word	0x200226c0

000004c8 <mskd_extract_eq()>:
     4c8:	4b04      	ldr	r3, [pc, #16]	; (4dc <mskd_extract_eq()+0x14>)
     4ca:	2202      	movs	r2, #2
     4cc:	605a      	str	r2, [r3, #4]
     4ce:	685a      	ldr	r2, [r3, #4]
     4d0:	2a02      	cmp	r2, #2
     4d2:	bf0c      	ite	eq
     4d4:	2220      	moveq	r2, #32
     4d6:	2240      	movne	r2, #64	; 0x40
     4d8:	605a      	str	r2, [r3, #4]
     4da:	4770      	bx	lr
     4dc:	200226c0 	.word	0x200226c0

000004e0 <mskd_extract_ne()>:
     4e0:	4b04      	ldr	r3, [pc, #16]	; (4f4 <mskd_extract_ne()+0x14>)
     4e2:	2204      	movs	r2, #4
     4e4:	605a      	str	r2, [r3, #4]
     4e6:	685a      	ldr	r2, [r3, #4]
     4e8:	2a04      	cmp	r2, #4
     4ea:	bf0c      	ite	eq
     4ec:	2240      	moveq	r2, #64	; 0x40
     4ee:	2220      	movne	r2, #32
     4f0:	605a      	str	r2, [r3, #4]
     4f2:	4770      	bx	lr
     4f4:	200226c0 	.word	0x200226c0

000004f8 <mskd_extract_lss()>:
     4f8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     4fc:	4b05      	ldr	r3, [pc, #20]	; (514 <mskd_extract_lss()+0x1c>)
     4fe:	605a      	str	r2, [r3, #4]
     500:	685b      	ldr	r3, [r3, #4]
     502:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     506:	4b04      	ldr	r3, [pc, #16]	; (518 <mskd_extract_lss()+0x20>)
     508:	bf34      	ite	cc
     50a:	2220      	movcc	r2, #32
     50c:	2240      	movcs	r2, #64	; 0x40
     50e:	605a      	str	r2, [r3, #4]
     510:	4770      	bx	lr
     512:	bf00      	nop
     514:	20022620 	.word	0x20022620
     518:	200226c0 	.word	0x200226c0

0000051c <mskd_extract_leq()>:
     51c:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     520:	4b04      	ldr	r3, [pc, #16]	; (534 <mskd_extract_leq()+0x18>)
     522:	605a      	str	r2, [r3, #4]
     524:	685b      	ldr	r3, [r3, #4]
     526:	4293      	cmp	r3, r2
     528:	4b03      	ldr	r3, [pc, #12]	; (538 <mskd_extract_leq()+0x1c>)
     52a:	bf94      	ite	ls
     52c:	2220      	movls	r2, #32
     52e:	2240      	movhi	r2, #64	; 0x40
     530:	605a      	str	r2, [r3, #4]
     532:	4770      	bx	lr
     534:	20022620 	.word	0x20022620
     538:	200226c0 	.word	0x200226c0

0000053c <mskd_extract_gtr()>:
     53c:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     540:	4b05      	ldr	r3, [pc, #20]	; (558 <mskd_extract_gtr()+0x1c>)
     542:	605a      	str	r2, [r3, #4]
     544:	685b      	ldr	r3, [r3, #4]
     546:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     54a:	4b04      	ldr	r3, [pc, #16]	; (55c <mskd_extract_gtr()+0x20>)
     54c:	bf8c      	ite	hi
     54e:	2220      	movhi	r2, #32
     550:	2240      	movls	r2, #64	; 0x40
     552:	605a      	str	r2, [r3, #4]
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	20022620 	.word	0x20022620
     55c:	200226c0 	.word	0x200226c0

00000560 <set_bits_global()>:
     560:	4a02      	ldr	r2, [pc, #8]	; (56c <set_bits_global()+0xc>)
     562:	6853      	ldr	r3, [r2, #4]
     564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     568:	6053      	str	r3, [r2, #4]
     56a:	4770      	bx	lr
     56c:	200226c0 	.word	0x200226c0

00000570 <ins_mskd_global()>:
     570:	4a03      	ldr	r2, [pc, #12]	; (580 <ins_mskd_global()+0x10>)
     572:	6853      	ldr	r3, [r2, #4]
     574:	f023 0306 	bic.w	r3, r3, #6
     578:	f043 0302 	orr.w	r3, r3, #2
     57c:	6053      	str	r3, [r2, #4]
     57e:	4770      	bx	lr
     580:	200226c0 	.word	0x200226c0

00000584 <assign_array_global()>:
     584:	4b01      	ldr	r3, [pc, #4]	; (58c <assign_array_global()+0x8>)
     586:	22bd      	movs	r2, #189	; 0xbd
     588:	601a      	str	r2, [r3, #0]
     58a:	4770      	bx	lr
     58c:	2002252c 	.word	0x2002252c

00000590 <shifted_global()>:
     590:	4b04      	ldr	r3, [pc, #16]	; (5a4 <shifted_global()+0x14>)
     592:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     596:	4a04      	ldr	r2, [pc, #16]	; (5a8 <shifted_global()+0x18>)
     598:	6059      	str	r1, [r3, #4]
     59a:	685b      	ldr	r3, [r3, #4]
     59c:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5a0:	62d3      	str	r3, [r2, #44]	; 0x2c
     5a2:	4770      	bx	lr
     5a4:	20022620 	.word	0x20022620
     5a8:	20022500 	.word	0x20022500

000005ac <assign_register_global()>:
     5ac:	4b01      	ldr	r3, [pc, #4]	; (5b4 <assign_register_global()+0x8>)
     5ae:	2204      	movs	r2, #4
     5b0:	605a      	str	r2, [r3, #4]
     5b2:	4770      	bx	lr
     5b4:	200226c0 	.word	0x200226c0

000005b8 <copy_bits_equ()>:
     5b8:	4b04      	ldr	r3, [pc, #16]	; (5cc <copy_bits_equ()+0x14>)
     5ba:	2240      	movs	r2, #64	; 0x40
     5bc:	605a      	str	r2, [r3, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	0652      	lsls	r2, r2, #25
     5c2:	bf4c      	ite	mi
     5c4:	2202      	movmi	r2, #2
     5c6:	2204      	movpl	r2, #4
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	4770      	bx	lr
     5cc:	200226c0 	.word	0x200226c0

000005d0 <copy_bits_neq()>:
     5d0:	4b04      	ldr	r3, [pc, #16]	; (5e4 <copy_bits_neq()+0x14>)
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	605a      	str	r2, [r3, #4]
     5d6:	685a      	ldr	r2, [r3, #4]
     5d8:	0652      	lsls	r2, r2, #25
     5da:	bf54      	ite	pl
     5dc:	2202      	movpl	r2, #2
     5de:	2204      	movmi	r2, #4
     5e0:	605a      	str	r2, [r3, #4]
     5e2:	4770      	bx	lr
     5e4:	200226c0 	.word	0x200226c0

000005e8 <copy_mskd_equ()>:
     5e8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <copy_mskd_equ()+0x1c>)
     5ee:	605a      	str	r2, [r3, #4]
     5f0:	685b      	ldr	r3, [r3, #4]
     5f2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     5f6:	4293      	cmp	r3, r2
     5f8:	4b03      	ldr	r3, [pc, #12]	; (608 <copy_mskd_equ()+0x20>)
     5fa:	bf0c      	ite	eq
     5fc:	2202      	moveq	r2, #2
     5fe:	2204      	movne	r2, #4
     600:	605a      	str	r2, [r3, #4]
     602:	4770      	bx	lr
     604:	20022620 	.word	0x20022620
     608:	200226c0 	.word	0x200226c0

0000060c <copy_mskd_neq()>:
     60c:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     610:	4b05      	ldr	r3, [pc, #20]	; (628 <copy_mskd_neq()+0x1c>)
     612:	605a      	str	r2, [r3, #4]
     614:	685b      	ldr	r3, [r3, #4]
     616:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     61a:	4293      	cmp	r3, r2
     61c:	4b03      	ldr	r3, [pc, #12]	; (62c <copy_mskd_neq()+0x20>)
     61e:	bf14      	ite	ne
     620:	2202      	movne	r2, #2
     622:	2204      	moveq	r2, #4
     624:	605a      	str	r2, [r3, #4]
     626:	4770      	bx	lr
     628:	20022620 	.word	0x20022620
     62c:	200226c0 	.word	0x200226c0

00000630 <copy_mskd_lss()>:
     630:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     634:	4b06      	ldr	r3, [pc, #24]	; (650 <copy_mskd_lss()+0x20>)
     636:	605a      	str	r2, [r3, #4]
     638:	685b      	ldr	r3, [r3, #4]
     63a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     63e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     642:	4b04      	ldr	r3, [pc, #16]	; (654 <copy_mskd_lss()+0x24>)
     644:	bf34      	ite	cc
     646:	2202      	movcc	r2, #2
     648:	2204      	movcs	r2, #4
     64a:	605a      	str	r2, [r3, #4]
     64c:	4770      	bx	lr
     64e:	bf00      	nop
     650:	20022620 	.word	0x20022620
     654:	200226c0 	.word	0x200226c0

00000658 <copy_mskd_leq()>:
     658:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     65c:	4b05      	ldr	r3, [pc, #20]	; (674 <copy_mskd_leq()+0x1c>)
     65e:	605a      	str	r2, [r3, #4]
     660:	685b      	ldr	r3, [r3, #4]
     662:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     666:	4293      	cmp	r3, r2
     668:	4b03      	ldr	r3, [pc, #12]	; (678 <copy_mskd_leq()+0x20>)
     66a:	bf94      	ite	ls
     66c:	2202      	movls	r2, #2
     66e:	2204      	movhi	r2, #4
     670:	605a      	str	r2, [r3, #4]
     672:	4770      	bx	lr
     674:	20022620 	.word	0x20022620
     678:	200226c0 	.word	0x200226c0

0000067c <copy_mskd_gtr()>:
     67c:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     680:	4b06      	ldr	r3, [pc, #24]	; (69c <copy_mskd_gtr()+0x20>)
     682:	605a      	str	r2, [r3, #4]
     684:	685b      	ldr	r3, [r3, #4]
     686:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     68a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <copy_mskd_gtr()+0x24>)
     690:	bf8c      	ite	hi
     692:	2202      	movhi	r2, #2
     694:	2204      	movls	r2, #4
     696:	605a      	str	r2, [r3, #4]
     698:	4770      	bx	lr
     69a:	bf00      	nop
     69c:	20022620 	.word	0x20022620
     6a0:	200226c0 	.word	0x200226c0

000006a4 <copy_mskd_geq()>:
     6a4:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6a8:	4b05      	ldr	r3, [pc, #20]	; (6c0 <copy_mskd_geq()+0x1c>)
     6aa:	605a      	str	r2, [r3, #4]
     6ac:	685b      	ldr	r3, [r3, #4]
     6ae:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6b2:	4293      	cmp	r3, r2
     6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <copy_mskd_geq()+0x20>)
     6b6:	bf2c      	ite	cs
     6b8:	2202      	movcs	r2, #2
     6ba:	2204      	movcc	r2, #4
     6bc:	605a      	str	r2, [r3, #4]
     6be:	4770      	bx	lr
     6c0:	20022620 	.word	0x20022620
     6c4:	200226c0 	.word	0x200226c0

000006c8 <copy_shifted()>:
     6c8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6cc:	4b05      	ldr	r3, [pc, #20]	; (6e4 <copy_shifted()+0x1c>)
     6ce:	605a      	str	r2, [r3, #4]
     6d0:	685b      	ldr	r3, [r3, #4]
     6d2:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6d6:	2b0b      	cmp	r3, #11
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <copy_shifted()+0x20>)
     6da:	bf0c      	ite	eq
     6dc:	2202      	moveq	r2, #2
     6de:	2204      	movne	r2, #4
     6e0:	605a      	str	r2, [r3, #4]
     6e2:	4770      	bx	lr
     6e4:	20022620 	.word	0x20022620
     6e8:	200226c0 	.word	0x200226c0

000006ec <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     6ec:	4a02      	ldr	r2, [pc, #8]	; (6f8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     6ee:	6853      	ldr	r3, [r2, #4]
     6f0:	4318      	orrs	r0, r3
     6f2:	6050      	str	r0, [r2, #4]
     6f4:	4770      	bx	lr
     6f6:	bf00      	nop
     6f8:	200226c0 	.word	0x200226c0

000006fc <call_bits_val_var()>:
     6fc:	2040      	movs	r0, #64	; 0x40
     6fe:	f7ff bffe 	b.w	6ec <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     702:	bf00      	nop

00000704 <call_bits_val_const()>:
     704:	2040      	movs	r0, #64	; 0x40
     706:	f7ff bffe 	b.w	6ec <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     70a:	bf00      	nop

0000070c <call_bits_val_global()>:
     70c:	2040      	movs	r0, #64	; 0x40
     70e:	f7ff bffe 	b.w	6ec <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     712:	bf00      	nop

00000714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     714:	4a02      	ldr	r2, [pc, #8]	; (720 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     716:	6801      	ldr	r1, [r0, #0]
     718:	6853      	ldr	r3, [r2, #4]
     71a:	430b      	orrs	r3, r1
     71c:	6053      	str	r3, [r2, #4]
     71e:	4770      	bx	lr
     720:	200226c0 	.word	0x200226c0

00000724 <call_bits_ref_var()>:
     724:	b500      	push	{lr}
     726:	b081      	sub	sp, #4
     728:	2301      	movs	r3, #1
     72a:	4668      	mov	r0, sp
     72c:	9300      	str	r3, [sp, #0]
     72e:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     732:	b001      	add	sp, #4
     734:	f85d fb04 	ldr.w	pc, [sp], #4

00000738 <call_bits_ref_const()>:
     738:	b500      	push	{lr}
     73a:	b081      	sub	sp, #4
     73c:	2301      	movs	r3, #1
     73e:	4668      	mov	r0, sp
     740:	9300      	str	r3, [sp, #0]
     742:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     746:	b001      	add	sp, #4
     748:	f85d fb04 	ldr.w	pc, [sp], #4

0000074c <call_bits_ref_global()>:
     74c:	b500      	push	{lr}
     74e:	b081      	sub	sp, #4
     750:	2340      	movs	r3, #64	; 0x40
     752:	4668      	mov	r0, sp
     754:	9300      	str	r3, [sp, #0]
     756:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     75a:	b001      	add	sp, #4
     75c:	f85d fb04 	ldr.w	pc, [sp], #4

00000760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     760:	4a03      	ldr	r2, [pc, #12]	; (770 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     762:	6853      	ldr	r3, [r2, #4]
     764:	ea23 0000 	bic.w	r0, r3, r0
     768:	4308      	orrs	r0, r1
     76a:	6050      	str	r0, [r2, #4]
     76c:	4770      	bx	lr
     76e:	bf00      	nop
     770:	200226c0 	.word	0x200226c0

00000774 <call_mskd_val_var()>:
     774:	2006      	movs	r0, #6
     776:	2102      	movs	r1, #2
     778:	f7ff bffe 	b.w	760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>

0000077c <call_mskd_val_const()>:
     77c:	2006      	movs	r0, #6
     77e:	2102      	movs	r1, #2
     780:	f7ff bffe 	b.w	760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>

00000784 <call_mskd_val_global()>:
     784:	2006      	movs	r0, #6
     786:	2102      	movs	r1, #2
     788:	f7ff bffe 	b.w	760 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>

0000078c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     78c:	4a05      	ldr	r2, [pc, #20]	; (7a4 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
     78e:	6841      	ldr	r1, [r0, #4]
     790:	6853      	ldr	r3, [r2, #4]
     792:	b410      	push	{r4}
     794:	6804      	ldr	r4, [r0, #0]
     796:	ea23 0304 	bic.w	r3, r3, r4
     79a:	bc10      	pop	{r4}
     79c:	430b      	orrs	r3, r1
     79e:	6053      	str	r3, [r2, #4]
     7a0:	4770      	bx	lr
     7a2:	bf00      	nop
     7a4:	200226c0 	.word	0x200226c0

000007a8 <call_mskd_ref_var()>:
     7a8:	b500      	push	{lr}
     7aa:	4b05      	ldr	r3, [pc, #20]	; (7c0 <call_mskd_ref_var()+0x18>)
     7ac:	b082      	sub	sp, #8
     7ae:	cb0c      	ldmia	r3, {r2, r3}
     7b0:	4668      	mov	r0, sp
     7b2:	e88d 000c 	stmia.w	sp, {r2, r3}
     7b6:	f7ff fffe 	bl	78c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7ba:	b002      	add	sp, #8
     7bc:	f85d fb04 	ldr.w	pc, [sp], #4
     7c0:	00000000 	.word	0x00000000

000007c4 <call_mskd_ref_const()>:
     7c4:	b500      	push	{lr}
     7c6:	b082      	sub	sp, #8
     7c8:	2206      	movs	r2, #6
     7ca:	2304      	movs	r3, #4
     7cc:	4668      	mov	r0, sp
     7ce:	e88d 000c 	stmia.w	sp, {r2, r3}
     7d2:	f7ff fffe 	bl	78c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7d6:	b002      	add	sp, #8
     7d8:	f85d fb04 	ldr.w	pc, [sp], #4

000007dc <call_mskd_ref_global()>:
     7dc:	b500      	push	{lr}
     7de:	b082      	sub	sp, #8
     7e0:	2206      	movs	r2, #6
     7e2:	2302      	movs	r3, #2
     7e4:	4668      	mov	r0, sp
     7e6:	e88d 000c 	stmia.w	sp, {r2, r3}
     7ea:	f7ff fffe 	bl	78c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7ee:	b002      	add	sp, #8
     7f0:	f85d fb04 	ldr.w	pc, [sp], #4

000007f4 <periph_bits(mcu::Serial volatile*)>:
     7f4:	6843      	ldr	r3, [r0, #4]
     7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7fa:	6043      	str	r3, [r0, #4]
     7fc:	4770      	bx	lr
     7fe:	bf00      	nop

00000800 <call_periph_bits()>:
     800:	4801      	ldr	r0, [pc, #4]	; (808 <call_periph_bits()+0x8>)
     802:	f7ff bffe 	b.w	7f4 <periph_bits(mcu::Serial volatile*)>
     806:	bf00      	nop
     808:	200226c0 	.word	0x200226c0

0000080c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     80c:	6843      	ldr	r3, [r0, #4]
     80e:	4319      	orrs	r1, r3
     810:	6041      	str	r1, [r0, #4]
     812:	4770      	bx	lr

00000814 <call_periph_bits_val()>:
     814:	2140      	movs	r1, #64	; 0x40
     816:	4801      	ldr	r0, [pc, #4]	; (81c <call_periph_bits_val()+0x8>)
     818:	f7ff bffe 	b.w	80c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     81c:	200226c0 	.word	0x200226c0

00000820 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     820:	6803      	ldr	r3, [r0, #0]
     822:	4319      	orrs	r1, r3
     824:	6001      	str	r1, [r0, #0]
     826:	4770      	bx	lr

00000828 <call_reg_bits_val()>:
     828:	2140      	movs	r1, #64	; 0x40
     82a:	4801      	ldr	r0, [pc, #4]	; (830 <call_reg_bits_val()+0x8>)
     82c:	f7ff bffe 	b.w	820 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     830:	200226c4 	.word	0x200226c4

00000834 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     834:	680a      	ldr	r2, [r1, #0]
     836:	6843      	ldr	r3, [r0, #4]
     838:	4313      	orrs	r3, r2
     83a:	6043      	str	r3, [r0, #4]
     83c:	4770      	bx	lr
     83e:	bf00      	nop

00000840 <call_periph_bits_ref()>:
     840:	b500      	push	{lr}
     842:	b081      	sub	sp, #4
     844:	2340      	movs	r3, #64	; 0x40
     846:	4804      	ldr	r0, [pc, #16]	; (858 <call_periph_bits_ref()+0x18>)
     848:	4669      	mov	r1, sp
     84a:	9300      	str	r3, [sp, #0]
     84c:	f7ff fffe 	bl	834 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     850:	b001      	add	sp, #4
     852:	f85d fb04 	ldr.w	pc, [sp], #4
     856:	bf00      	nop
     858:	200226c0 	.word	0x200226c0

0000085c <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     85c:	680a      	ldr	r2, [r1, #0]
     85e:	6803      	ldr	r3, [r0, #0]
     860:	4313      	orrs	r3, r2
     862:	6003      	str	r3, [r0, #0]
     864:	4770      	bx	lr
     866:	bf00      	nop

00000868 <call_reg_bits_ref()>:
     868:	b500      	push	{lr}
     86a:	b081      	sub	sp, #4
     86c:	2340      	movs	r3, #64	; 0x40
     86e:	4804      	ldr	r0, [pc, #16]	; (880 <call_reg_bits_ref()+0x18>)
     870:	4669      	mov	r1, sp
     872:	9300      	str	r3, [sp, #0]
     874:	f7ff fffe 	bl	85c <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     878:	b001      	add	sp, #4
     87a:	f85d fb04 	ldr.w	pc, [sp], #4
     87e:	bf00      	nop
     880:	200226c4 	.word	0x200226c4

00000884 <periph_mskd(mcu::Serial volatile*)>:
     884:	6843      	ldr	r3, [r0, #4]
     886:	f023 0306 	bic.w	r3, r3, #6
     88a:	f043 0302 	orr.w	r3, r3, #2
     88e:	6043      	str	r3, [r0, #4]
     890:	4770      	bx	lr
     892:	bf00      	nop

00000894 <call_periph_mskd()>:
     894:	4801      	ldr	r0, [pc, #4]	; (89c <call_periph_mskd()+0x8>)
     896:	f7ff bffe 	b.w	884 <periph_mskd(mcu::Serial volatile*)>
     89a:	bf00      	nop
     89c:	200226c0 	.word	0x200226c0

000008a0 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8a0:	6843      	ldr	r3, [r0, #4]
     8a2:	ea23 0101 	bic.w	r1, r3, r1
     8a6:	4311      	orrs	r1, r2
     8a8:	6041      	str	r1, [r0, #4]
     8aa:	4770      	bx	lr

000008ac <call_periph_mskd_val()>:
     8ac:	2106      	movs	r1, #6
     8ae:	2202      	movs	r2, #2
     8b0:	4801      	ldr	r0, [pc, #4]	; (8b8 <call_periph_mskd_val()+0xc>)
     8b2:	f7ff bffe 	b.w	8a0 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8b6:	bf00      	nop
     8b8:	200226c0 	.word	0x200226c0

000008bc <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8bc:	6803      	ldr	r3, [r0, #0]
     8be:	ea23 0101 	bic.w	r1, r3, r1
     8c2:	4311      	orrs	r1, r2
     8c4:	6001      	str	r1, [r0, #0]
     8c6:	4770      	bx	lr

000008c8 <call_reg_mskd_val()>:
     8c8:	2106      	movs	r1, #6
     8ca:	2202      	movs	r2, #2
     8cc:	4801      	ldr	r0, [pc, #4]	; (8d4 <call_reg_mskd_val()+0xc>)
     8ce:	f7ff bffe 	b.w	8bc <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8d2:	bf00      	nop
     8d4:	200226c4 	.word	0x200226c4

000008d8 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8d8:	6843      	ldr	r3, [r0, #4]
     8da:	ea23 0101 	bic.w	r1, r3, r1
     8de:	4311      	orrs	r1, r2
     8e0:	6041      	str	r1, [r0, #4]
     8e2:	4770      	bx	lr

000008e4 <call_periph_mskd_ref()>:
     8e4:	2106      	movs	r1, #6
     8e6:	2202      	movs	r2, #2
     8e8:	4801      	ldr	r0, [pc, #4]	; (8f0 <call_periph_mskd_ref()+0xc>)
     8ea:	f7ff bffe 	b.w	8d8 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8ee:	bf00      	nop
     8f0:	200226c0 	.word	0x200226c0

000008f4 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8f4:	6803      	ldr	r3, [r0, #0]
     8f6:	ea23 0101 	bic.w	r1, r3, r1
     8fa:	4311      	orrs	r1, r2
     8fc:	6001      	str	r1, [r0, #0]
     8fe:	4770      	bx	lr

00000900 <call_reg_mskd_ref()>:
     900:	2106      	movs	r1, #6
     902:	2202      	movs	r2, #2
     904:	4801      	ldr	r0, [pc, #4]	; (90c <call_reg_mskd_ref()+0xc>)
     906:	f7ff bffe 	b.w	8f4 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     90a:	bf00      	nop
     90c:	200226c4 	.word	0x200226c4

00000910 <return_bits()>:
     910:	2020      	movs	r0, #32
     912:	4770      	bx	lr

00000914 <call_return_bits()>:
     914:	b500      	push	{lr}
     916:	f7ff fffe 	bl	910 <return_bits()>
     91a:	2820      	cmp	r0, #32
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <call_return_bits()+0x1c>)
     91e:	bf0c      	ite	eq
     920:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     924:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     928:	605a      	str	r2, [r3, #4]
     92a:	f85d fb04 	ldr.w	pc, [sp], #4
     92e:	bf00      	nop
     930:	20022620 	.word	0x20022620

00000934 <return_mskd()>:
     934:	2118      	movs	r1, #24
     936:	2208      	movs	r2, #8
     938:	e880 0006 	stmia.w	r0, {r1, r2}
     93c:	4770      	bx	lr
     93e:	bf00      	nop

00000940 <call_return_mskd()>:
     940:	b500      	push	{lr}
     942:	b082      	sub	sp, #8
     944:	4668      	mov	r0, sp
     946:	f7ff fffe 	bl	934 <return_mskd()>
     94a:	9b00      	ldr	r3, [sp, #0]
     94c:	9a01      	ldr	r2, [sp, #4]
     94e:	2b18      	cmp	r3, #24
     950:	4b07      	ldr	r3, [pc, #28]	; (970 <call_return_mskd()+0x30>)
     952:	d005      	beq.n	960 <call_return_mskd()+0x20>
     954:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     958:	605a      	str	r2, [r3, #4]
     95a:	b002      	add	sp, #8
     95c:	f85d fb04 	ldr.w	pc, [sp], #4
     960:	2a08      	cmp	r2, #8
     962:	d1f7      	bne.n	954 <call_return_mskd()+0x14>
     964:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     968:	605a      	str	r2, [r3, #4]
     96a:	b002      	add	sp, #8
     96c:	f85d fb04 	ldr.w	pc, [sp], #4
     970:	20022620 	.word	0x20022620

00000974 <return_reg()>:
     974:	4b02      	ldr	r3, [pc, #8]	; (980 <return_reg()+0xc>)
     976:	2240      	movs	r2, #64	; 0x40
     978:	4802      	ldr	r0, [pc, #8]	; (984 <return_reg()+0x10>)
     97a:	605a      	str	r2, [r3, #4]
     97c:	4770      	bx	lr
     97e:	bf00      	nop
     980:	200226c0 	.word	0x200226c0
     984:	200226c4 	.word	0x200226c4

00000988 <call_return_reg()>:
     988:	b500      	push	{lr}
     98a:	f7ff fffe 	bl	974 <return_reg()>
     98e:	6803      	ldr	r3, [r0, #0]
     990:	2b40      	cmp	r3, #64	; 0x40
     992:	4b04      	ldr	r3, [pc, #16]	; (9a4 <call_return_reg()+0x1c>)
     994:	bf0c      	ite	eq
     996:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     99a:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     99e:	605a      	str	r2, [r3, #4]
     9a0:	f85d fb04 	ldr.w	pc, [sp], #4
     9a4:	20022620 	.word	0x20022620

000009a8 <return_periph()>:
     9a8:	4b02      	ldr	r3, [pc, #8]	; (9b4 <return_periph()+0xc>)
     9aa:	2240      	movs	r2, #64	; 0x40
     9ac:	4618      	mov	r0, r3
     9ae:	605a      	str	r2, [r3, #4]
     9b0:	4770      	bx	lr
     9b2:	bf00      	nop
     9b4:	200226c0 	.word	0x200226c0

000009b8 <call_return_periph()>:
     9b8:	b500      	push	{lr}
     9ba:	f7ff fffe 	bl	9a8 <return_periph()>
     9be:	6843      	ldr	r3, [r0, #4]
     9c0:	2b40      	cmp	r3, #64	; 0x40
     9c2:	4b04      	ldr	r3, [pc, #16]	; (9d4 <call_return_periph()+0x1c>)
     9c4:	bf0c      	ite	eq
     9c6:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     9ca:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     9ce:	605a      	str	r2, [r3, #4]
     9d0:	f85d fb04 	ldr.w	pc, [sp], #4
     9d4:	20022620 	.word	0x20022620

000009d8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     9d8:	2805      	cmp	r0, #5
     9da:	4b05      	ldr	r3, [pc, #20]	; (9f0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x18>)
     9dc:	d005      	beq.n	9ea <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     9de:	2806      	cmp	r0, #6
     9e0:	bf0c      	ite	eq
     9e2:	2244      	moveq	r2, #68	; 0x44
     9e4:	2255      	movne	r2, #85	; 0x55
     9e6:	62da      	str	r2, [r3, #44]	; 0x2c
     9e8:	4770      	bx	lr
     9ea:	2233      	movs	r2, #51	; 0x33
     9ec:	62da      	str	r2, [r3, #44]	; 0x2c
     9ee:	4770      	bx	lr
     9f0:	20022500 	.word	0x20022500

000009f4 <call_pos_val()>:
     9f4:	b500      	push	{lr}
     9f6:	2005      	movs	r0, #5
     9f8:	f7ff fffe 	bl	9d8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     9fc:	2006      	movs	r0, #6
     9fe:	f85d eb04 	ldr.w	lr, [sp], #4
     a02:	f7ff bffe 	b.w	9d8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a06:	bf00      	nop

00000a08 <call_pos_val_global()>:
     a08:	2006      	movs	r0, #6
     a0a:	f7ff bffe 	b.w	9d8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a0e:	bf00      	nop

00000a10 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a10:	6803      	ldr	r3, [r0, #0]
     a12:	2b05      	cmp	r3, #5
     a14:	d006      	beq.n	a24 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a16:	2b06      	cmp	r3, #6
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a1a:	bf0c      	ite	eq
     a1c:	2277      	moveq	r2, #119	; 0x77
     a1e:	2288      	movne	r2, #136	; 0x88
     a20:	62da      	str	r2, [r3, #44]	; 0x2c
     a22:	4770      	bx	lr
     a24:	4b01      	ldr	r3, [pc, #4]	; (a2c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a26:	2266      	movs	r2, #102	; 0x66
     a28:	62da      	str	r2, [r3, #44]	; 0x2c
     a2a:	4770      	bx	lr
     a2c:	20022500 	.word	0x20022500

00000a30 <call_pos_ref()>:
     a30:	b500      	push	{lr}
     a32:	b081      	sub	sp, #4
     a34:	2105      	movs	r1, #5
     a36:	4668      	mov	r0, sp
     a38:	9100      	str	r1, [sp, #0]
     a3a:	f7ff fffe 	bl	a10 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a3e:	4668      	mov	r0, sp
     a40:	9100      	str	r1, [sp, #0]
     a42:	f7ff fffe 	bl	a10 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a46:	b001      	add	sp, #4
     a48:	f85d fb04 	ldr.w	pc, [sp], #4

00000a4c <call_pos_ref_global()>:
     a4c:	b500      	push	{lr}
     a4e:	b081      	sub	sp, #4
     a50:	2306      	movs	r3, #6
     a52:	4668      	mov	r0, sp
     a54:	9300      	str	r3, [sp, #0]
     a56:	f7ff fffe 	bl	a10 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a5a:	b001      	add	sp, #4
     a5c:	f85d fb04 	ldr.w	pc, [sp], #4

00000a60 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a60:	4a03      	ldr	r2, [pc, #12]	; (a70 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     a62:	6853      	ldr	r3, [r2, #4]
     a64:	ea23 0000 	bic.w	r0, r3, r0
     a68:	4308      	orrs	r0, r1
     a6a:	6050      	str	r0, [r2, #4]
     a6c:	4770      	bx	lr
     a6e:	bf00      	nop
     a70:	200226c0 	.word	0x200226c0

00000a74 <call_range_val(unsigned int)>:
     a74:	0301      	lsls	r1, r0, #12
     a76:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     a7a:	f7ff bffe 	b.w	a60 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a7e:	bf00      	nop

00000a80 <call_range_val_port()>:
     a80:	201f      	movs	r0, #31
     a82:	f7ff bffe 	b.w	a74 <call_range_val(unsigned int)>
     a86:	bf00      	nop

00000a88 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a88:	4a03      	ldr	r2, [pc, #12]	; (a98 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     a8a:	6853      	ldr	r3, [r2, #4]
     a8c:	ea23 0000 	bic.w	r0, r3, r0
     a90:	4308      	orrs	r0, r1
     a92:	6050      	str	r0, [r2, #4]
     a94:	4770      	bx	lr
     a96:	bf00      	nop
     a98:	200226c0 	.word	0x200226c0

00000a9c <call_range_ref(unsigned int)>:
     a9c:	0301      	lsls	r1, r0, #12
     a9e:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     aa2:	f7ff bffe 	b.w	a88 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     aa6:	bf00      	nop

00000aa8 <call_range_ref_port()>:
     aa8:	200c      	movs	r0, #12
     aaa:	f7ff bffe 	b.w	a9c <call_range_ref(unsigned int)>
     aae:	bf00      	nop

00000ab0 <check_array_range_pass(unsigned int)>:
     ab0:	2816      	cmp	r0, #22
     ab2:	4b03      	ldr	r3, [pc, #12]	; (ac0 <check_array_range_pass(unsigned int)+0x10>)
     ab4:	bf94      	ite	ls
     ab6:	227f      	movls	r2, #127	; 0x7f
     ab8:	2283      	movhi	r2, #131	; 0x83
     aba:	62da      	str	r2, [r3, #44]	; 0x2c
     abc:	4770      	bx	lr
     abe:	bf00      	nop
     ac0:	20022500 	.word	0x20022500

00000ac4 <check_array_range_fail(unsigned int)>:
     ac4:	2816      	cmp	r0, #22
     ac6:	4b03      	ldr	r3, [pc, #12]	; (ad4 <check_array_range_fail(unsigned int)+0x10>)
     ac8:	bf94      	ite	ls
     aca:	2295      	movls	r2, #149	; 0x95
     acc:	2297      	movhi	r2, #151	; 0x97
     ace:	62da      	str	r2, [r3, #44]	; 0x2c
     ad0:	4770      	bx	lr
     ad2:	bf00      	nop
     ad4:	20022500 	.word	0x20022500

00000ad8 <check_bits_range_pass(unsigned int)>:
     ad8:	280f      	cmp	r0, #15
     ada:	4b03      	ldr	r3, [pc, #12]	; (ae8 <check_bits_range_pass(unsigned int)+0x10>)
     adc:	bf94      	ite	ls
     ade:	229d      	movls	r2, #157	; 0x9d
     ae0:	22a3      	movhi	r2, #163	; 0xa3
     ae2:	62da      	str	r2, [r3, #44]	; 0x2c
     ae4:	4770      	bx	lr
     ae6:	bf00      	nop
     ae8:	20022500 	.word	0x20022500

00000aec <check_bits_range_fail(unsigned int)>:
     aec:	280f      	cmp	r0, #15
     aee:	4b03      	ldr	r3, [pc, #12]	; (afc <check_bits_range_fail(unsigned int)+0x10>)
     af0:	bf94      	ite	ls
     af2:	22a7      	movls	r2, #167	; 0xa7
     af4:	22ad      	movhi	r2, #173	; 0xad
     af6:	62da      	str	r2, [r3, #44]	; 0x2c
     af8:	4770      	bx	lr
     afa:	bf00      	nop
     afc:	20022500 	.word	0x20022500

00000b00 <check_mskd_range_pass(unsigned int)>:
     b00:	281f      	cmp	r0, #31
     b02:	4b03      	ldr	r3, [pc, #12]	; (b10 <check_mskd_range_pass(unsigned int)+0x10>)
     b04:	bf94      	ite	ls
     b06:	22b3      	movls	r2, #179	; 0xb3
     b08:	22b5      	movhi	r2, #181	; 0xb5
     b0a:	62da      	str	r2, [r3, #44]	; 0x2c
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	20022500 	.word	0x20022500

00000b14 <check_mskd_range_fail(unsigned int)>:
     b14:	281f      	cmp	r0, #31
     b16:	4b03      	ldr	r3, [pc, #12]	; (b24 <check_mskd_range_fail(unsigned int)+0x10>)
     b18:	bf94      	ite	ls
     b1a:	22bf      	movls	r2, #191	; 0xbf
     b1c:	22c1      	movhi	r2, #193	; 0xc1
     b1e:	62da      	str	r2, [r3, #44]	; 0x2c
     b20:	4770      	bx	lr
     b22:	bf00      	nop
     b24:	20022500 	.word	0x20022500

00000b28 <bits_extract_ne()>:
     b28:	4b04      	ldr	r3, [pc, #16]	; (b3c <bits_extract_ne()+0x14>)
     b2a:	2220      	movs	r2, #32
     b2c:	605a      	str	r2, [r3, #4]
     b2e:	685a      	ldr	r2, [r3, #4]
     b30:	2a20      	cmp	r2, #32
     b32:	bf14      	ite	ne
     b34:	2202      	movne	r2, #2
     b36:	2204      	moveq	r2, #4
     b38:	605a      	str	r2, [r3, #4]
     b3a:	4770      	bx	lr
     b3c:	200226c0 	.word	0x200226c0

00000b40 <mskd_extract_geq()>:
     b40:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <mskd_extract_geq()+0x18>)
     b46:	605a      	str	r2, [r3, #4]
     b48:	685b      	ldr	r3, [r3, #4]
     b4a:	4293      	cmp	r3, r2
     b4c:	4b03      	ldr	r3, [pc, #12]	; (b5c <mskd_extract_geq()+0x1c>)
     b4e:	bf2c      	ite	cs
     b50:	2220      	movcs	r2, #32
     b52:	2240      	movcc	r2, #64	; 0x40
     b54:	605a      	str	r2, [r3, #4]
     b56:	4770      	bx	lr
     b58:	20022620 	.word	0x20022620
     b5c:	200226c0 	.word	0x200226c0

00000b60 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     b60:	b410      	push	{r4}
     b62:	4b05      	ldr	r3, [pc, #20]	; (b78 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     b64:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
     b68:	4a04      	ldr	r2, [pc, #16]	; (b7c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
     b6a:	605c      	str	r4, [r3, #4]
     b6c:	685b      	ldr	r3, [r3, #4]
     b6e:	bc10      	pop	{r4}
     b70:	4018      	ands	r0, r3
     b72:	40c8      	lsrs	r0, r1
     b74:	62d0      	str	r0, [r2, #44]	; 0x2c
     b76:	4770      	bx	lr
     b78:	20022620 	.word	0x20022620
     b7c:	20022500 	.word	0x20022500

00000b80 <call_shifted_const_val()>:
     b80:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     b84:	2119      	movs	r1, #25
     b86:	f7ff bffe 	b.w	b60 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     b8a:	bf00      	nop

00000b8c <call_shifted_var_val()>:
     b8c:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     b90:	2119      	movs	r1, #25
     b92:	f7ff bffe 	b.w	b60 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     b96:	bf00      	nop

00000b98 <call_shifted_global_val()>:
     b98:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     b9c:	2119      	movs	r1, #25
     b9e:	f7ff bffe 	b.w	b60 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     ba2:	bf00      	nop

00000ba4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     ba4:	4b06      	ldr	r3, [pc, #24]	; (bc0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     ba6:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     baa:	4a06      	ldr	r2, [pc, #24]	; (bc4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
     bac:	b410      	push	{r4}
     bae:	6059      	str	r1, [r3, #4]
     bb0:	6804      	ldr	r4, [r0, #0]
     bb2:	685b      	ldr	r3, [r3, #4]
     bb4:	6841      	ldr	r1, [r0, #4]
     bb6:	4023      	ands	r3, r4
     bb8:	bc10      	pop	{r4}
     bba:	40cb      	lsrs	r3, r1
     bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
     bbe:	4770      	bx	lr
     bc0:	20022620 	.word	0x20022620
     bc4:	20022500 	.word	0x20022500

00000bc8 <call_shifted_const_ref()>:
     bc8:	b500      	push	{lr}
     bca:	4b06      	ldr	r3, [pc, #24]	; (be4 <call_shifted_const_ref()+0x1c>)
     bcc:	b082      	sub	sp, #8
     bce:	f103 0308 	add.w	r3, r3, #8
     bd2:	cb0c      	ldmia	r3, {r2, r3}
     bd4:	4668      	mov	r0, sp
     bd6:	e88d 000c 	stmia.w	sp, {r2, r3}
     bda:	f7ff fffe 	bl	ba4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     bde:	b002      	add	sp, #8
     be0:	f85d fb04 	ldr.w	pc, [sp], #4
     be4:	00000000 	.word	0x00000000

00000be8 <call_shifted_var_ref()>:
     be8:	b500      	push	{lr}
     bea:	4b06      	ldr	r3, [pc, #24]	; (c04 <call_shifted_var_ref()+0x1c>)
     bec:	b082      	sub	sp, #8
     bee:	f103 0310 	add.w	r3, r3, #16
     bf2:	cb0c      	ldmia	r3, {r2, r3}
     bf4:	4668      	mov	r0, sp
     bf6:	e88d 000c 	stmia.w	sp, {r2, r3}
     bfa:	f7ff fffe 	bl	ba4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     bfe:	b002      	add	sp, #8
     c00:	f85d fb04 	ldr.w	pc, [sp], #4
     c04:	00000000 	.word	0x00000000

00000c08 <call_shifted_global_ref()>:
     c08:	b500      	push	{lr}
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <call_shifted_global_ref()+0x1c>)
     c0c:	b082      	sub	sp, #8
     c0e:	f103 0308 	add.w	r3, r3, #8
     c12:	cb0c      	ldmia	r3, {r2, r3}
     c14:	4668      	mov	r0, sp
     c16:	e88d 000c 	stmia.w	sp, {r2, r3}
     c1a:	f7ff fffe 	bl	ba4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c1e:	b002      	add	sp, #8
     c20:	f85d fb04 	ldr.w	pc, [sp], #4
     c24:	00000000 	.word	0x00000000

00000c28 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     c28:	0642      	lsls	r2, r0, #25
     c2a:	4b03      	ldr	r3, [pc, #12]	; (c38 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     c2c:	bf4c      	ite	mi
     c2e:	2202      	movmi	r2, #2
     c30:	2204      	movpl	r2, #4
     c32:	605a      	str	r2, [r3, #4]
     c34:	4770      	bx	lr
     c36:	bf00      	nop
     c38:	200226c0 	.word	0x200226c0

00000c3c <call_copy_bits_val()>:
     c3c:	4b02      	ldr	r3, [pc, #8]	; (c48 <call_copy_bits_val()+0xc>)
     c3e:	2240      	movs	r2, #64	; 0x40
     c40:	605a      	str	r2, [r3, #4]
     c42:	6858      	ldr	r0, [r3, #4]
     c44:	f7ff bffe 	b.w	c28 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     c48:	200226c0 	.word	0x200226c0

00000c4c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     c4c:	6803      	ldr	r3, [r0, #0]
     c4e:	f013 0f40 	tst.w	r3, #64	; 0x40
     c52:	4b03      	ldr	r3, [pc, #12]	; (c60 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
     c54:	bf14      	ite	ne
     c56:	2202      	movne	r2, #2
     c58:	2204      	moveq	r2, #4
     c5a:	605a      	str	r2, [r3, #4]
     c5c:	4770      	bx	lr
     c5e:	bf00      	nop
     c60:	200226c0 	.word	0x200226c0

00000c64 <call_copy_bits_ref()>:
     c64:	b500      	push	{lr}
     c66:	2240      	movs	r2, #64	; 0x40
     c68:	b081      	sub	sp, #4
     c6a:	4b05      	ldr	r3, [pc, #20]	; (c80 <call_copy_bits_ref()+0x1c>)
     c6c:	4668      	mov	r0, sp
     c6e:	605a      	str	r2, [r3, #4]
     c70:	685b      	ldr	r3, [r3, #4]
     c72:	9300      	str	r3, [sp, #0]
     c74:	f7ff fffe 	bl	c4c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     c78:	b001      	add	sp, #4
     c7a:	f85d fb04 	ldr.w	pc, [sp], #4
     c7e:	bf00      	nop
     c80:	200226c0 	.word	0x200226c0

00000c84 <run>:
     c84:	b510      	push	{r4, lr}
     c86:	4cb3      	ldr	r4, [pc, #716]	; (f54 <run+0x2d0>)
     c88:	7823      	ldrb	r3, [r4, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	f000 82e2 	beq.w	1254 <run+0x5d0>
     c90:	68a1      	ldr	r1, [r4, #8]
     c92:	7b23      	ldrb	r3, [r4, #12]
     c94:	b91b      	cbnz	r3, c9e <run+0x1a>
     c96:	4ab0      	ldr	r2, [pc, #704]	; (f58 <run+0x2d4>)
     c98:	2301      	movs	r3, #1
     c9a:	6162      	str	r2, [r4, #20]
     c9c:	7323      	strb	r3, [r4, #12]
     c9e:	7e23      	ldrb	r3, [r4, #24]
     ca0:	b91b      	cbnz	r3, caa <run+0x26>
     ca2:	4aae      	ldr	r2, [pc, #696]	; (f5c <run+0x2d8>)
     ca4:	2301      	movs	r3, #1
     ca6:	6222      	str	r2, [r4, #32]
     ca8:	7623      	strb	r3, [r4, #24]
     caa:	2200      	movs	r2, #0
     cac:	48ac      	ldr	r0, [pc, #688]	; (f60 <run+0x2dc>)
     cae:	f7ff fffe 	bl	0 <do_test>
     cb2:	68a1      	ldr	r1, [r4, #8]
     cb4:	2201      	movs	r2, #1
     cb6:	48ab      	ldr	r0, [pc, #684]	; (f64 <run+0x2e0>)
     cb8:	f7ff fffe 	bl	0 <do_test>
     cbc:	68a1      	ldr	r1, [r4, #8]
     cbe:	2202      	movs	r2, #2
     cc0:	48a9      	ldr	r0, [pc, #676]	; (f68 <run+0x2e4>)
     cc2:	f7ff fffe 	bl	0 <do_test>
     cc6:	68a1      	ldr	r1, [r4, #8]
     cc8:	2203      	movs	r2, #3
     cca:	48a8      	ldr	r0, [pc, #672]	; (f6c <run+0x2e8>)
     ccc:	f7ff fffe 	bl	0 <do_test>
     cd0:	68a1      	ldr	r1, [r4, #8]
     cd2:	2204      	movs	r2, #4
     cd4:	48a6      	ldr	r0, [pc, #664]	; (f70 <run+0x2ec>)
     cd6:	f7ff fffe 	bl	0 <do_test>
     cda:	68a1      	ldr	r1, [r4, #8]
     cdc:	2205      	movs	r2, #5
     cde:	48a5      	ldr	r0, [pc, #660]	; (f74 <run+0x2f0>)
     ce0:	f7ff fffe 	bl	0 <do_test>
     ce4:	68a1      	ldr	r1, [r4, #8]
     ce6:	2206      	movs	r2, #6
     ce8:	48a3      	ldr	r0, [pc, #652]	; (f78 <run+0x2f4>)
     cea:	f7ff fffe 	bl	0 <do_test>
     cee:	68a1      	ldr	r1, [r4, #8]
     cf0:	2207      	movs	r2, #7
     cf2:	48a2      	ldr	r0, [pc, #648]	; (f7c <run+0x2f8>)
     cf4:	f7ff fffe 	bl	0 <do_test>
     cf8:	68a1      	ldr	r1, [r4, #8]
     cfa:	2208      	movs	r2, #8
     cfc:	48a0      	ldr	r0, [pc, #640]	; (f80 <run+0x2fc>)
     cfe:	f7ff fffe 	bl	0 <do_test>
     d02:	68a1      	ldr	r1, [r4, #8]
     d04:	2209      	movs	r2, #9
     d06:	489f      	ldr	r0, [pc, #636]	; (f84 <run+0x300>)
     d08:	f7ff fffe 	bl	0 <do_test>
     d0c:	68a1      	ldr	r1, [r4, #8]
     d0e:	220a      	movs	r2, #10
     d10:	489d      	ldr	r0, [pc, #628]	; (f88 <run+0x304>)
     d12:	f7ff fffe 	bl	0 <do_test>
     d16:	68a1      	ldr	r1, [r4, #8]
     d18:	220b      	movs	r2, #11
     d1a:	489c      	ldr	r0, [pc, #624]	; (f8c <run+0x308>)
     d1c:	f7ff fffe 	bl	0 <do_test>
     d20:	68a1      	ldr	r1, [r4, #8]
     d22:	220c      	movs	r2, #12
     d24:	489a      	ldr	r0, [pc, #616]	; (f90 <run+0x30c>)
     d26:	f7ff fffe 	bl	0 <do_test>
     d2a:	68a1      	ldr	r1, [r4, #8]
     d2c:	220d      	movs	r2, #13
     d2e:	4899      	ldr	r0, [pc, #612]	; (f94 <run+0x310>)
     d30:	f7ff fffe 	bl	0 <do_test>
     d34:	68a1      	ldr	r1, [r4, #8]
     d36:	220e      	movs	r2, #14
     d38:	4897      	ldr	r0, [pc, #604]	; (f98 <run+0x314>)
     d3a:	f7ff fffe 	bl	0 <do_test>
     d3e:	68a1      	ldr	r1, [r4, #8]
     d40:	220f      	movs	r2, #15
     d42:	4896      	ldr	r0, [pc, #600]	; (f9c <run+0x318>)
     d44:	f7ff fffe 	bl	0 <do_test>
     d48:	68a1      	ldr	r1, [r4, #8]
     d4a:	2210      	movs	r2, #16
     d4c:	4894      	ldr	r0, [pc, #592]	; (fa0 <run+0x31c>)
     d4e:	f7ff fffe 	bl	0 <do_test>
     d52:	68a1      	ldr	r1, [r4, #8]
     d54:	2211      	movs	r2, #17
     d56:	4893      	ldr	r0, [pc, #588]	; (fa4 <run+0x320>)
     d58:	f7ff fffe 	bl	0 <do_test>
     d5c:	68a1      	ldr	r1, [r4, #8]
     d5e:	2212      	movs	r2, #18
     d60:	4891      	ldr	r0, [pc, #580]	; (fa8 <run+0x324>)
     d62:	f7ff fffe 	bl	0 <do_test>
     d66:	68a1      	ldr	r1, [r4, #8]
     d68:	2213      	movs	r2, #19
     d6a:	4890      	ldr	r0, [pc, #576]	; (fac <run+0x328>)
     d6c:	f7ff fffe 	bl	0 <do_test>
     d70:	68a1      	ldr	r1, [r4, #8]
     d72:	2214      	movs	r2, #20
     d74:	488e      	ldr	r0, [pc, #568]	; (fb0 <run+0x32c>)
     d76:	f7ff fffe 	bl	0 <do_test>
     d7a:	68a1      	ldr	r1, [r4, #8]
     d7c:	2215      	movs	r2, #21
     d7e:	488d      	ldr	r0, [pc, #564]	; (fb4 <run+0x330>)
     d80:	f7ff fffe 	bl	0 <do_test>
     d84:	68a1      	ldr	r1, [r4, #8]
     d86:	2216      	movs	r2, #22
     d88:	488b      	ldr	r0, [pc, #556]	; (fb8 <run+0x334>)
     d8a:	f7ff fffe 	bl	0 <do_test>
     d8e:	68a1      	ldr	r1, [r4, #8]
     d90:	2217      	movs	r2, #23
     d92:	488a      	ldr	r0, [pc, #552]	; (fbc <run+0x338>)
     d94:	f7ff fffe 	bl	0 <do_test>
     d98:	68a1      	ldr	r1, [r4, #8]
     d9a:	2218      	movs	r2, #24
     d9c:	4888      	ldr	r0, [pc, #544]	; (fc0 <run+0x33c>)
     d9e:	f7ff fffe 	bl	0 <do_test>
     da2:	68a1      	ldr	r1, [r4, #8]
     da4:	2219      	movs	r2, #25
     da6:	4887      	ldr	r0, [pc, #540]	; (fc4 <run+0x340>)
     da8:	f7ff fffe 	bl	0 <do_test>
     dac:	68a1      	ldr	r1, [r4, #8]
     dae:	221a      	movs	r2, #26
     db0:	4885      	ldr	r0, [pc, #532]	; (fc8 <run+0x344>)
     db2:	f7ff fffe 	bl	0 <do_test>
     db6:	68a1      	ldr	r1, [r4, #8]
     db8:	221b      	movs	r2, #27
     dba:	4884      	ldr	r0, [pc, #528]	; (fcc <run+0x348>)
     dbc:	f7ff fffe 	bl	0 <do_test>
     dc0:	68a1      	ldr	r1, [r4, #8]
     dc2:	221c      	movs	r2, #28
     dc4:	4882      	ldr	r0, [pc, #520]	; (fd0 <run+0x34c>)
     dc6:	f7ff fffe 	bl	0 <do_test>
     dca:	68a1      	ldr	r1, [r4, #8]
     dcc:	221d      	movs	r2, #29
     dce:	4881      	ldr	r0, [pc, #516]	; (fd4 <run+0x350>)
     dd0:	f7ff fffe 	bl	0 <do_test>
     dd4:	68a1      	ldr	r1, [r4, #8]
     dd6:	221e      	movs	r2, #30
     dd8:	487f      	ldr	r0, [pc, #508]	; (fd8 <run+0x354>)
     dda:	f7ff fffe 	bl	0 <do_test>
     dde:	68a1      	ldr	r1, [r4, #8]
     de0:	221f      	movs	r2, #31
     de2:	487e      	ldr	r0, [pc, #504]	; (fdc <run+0x358>)
     de4:	f7ff fffe 	bl	0 <do_test>
     de8:	68a1      	ldr	r1, [r4, #8]
     dea:	2220      	movs	r2, #32
     dec:	487c      	ldr	r0, [pc, #496]	; (fe0 <run+0x35c>)
     dee:	f7ff fffe 	bl	0 <do_test>
     df2:	68a1      	ldr	r1, [r4, #8]
     df4:	2221      	movs	r2, #33	; 0x21
     df6:	487b      	ldr	r0, [pc, #492]	; (fe4 <run+0x360>)
     df8:	f7ff fffe 	bl	0 <do_test>
     dfc:	68a1      	ldr	r1, [r4, #8]
     dfe:	2222      	movs	r2, #34	; 0x22
     e00:	4879      	ldr	r0, [pc, #484]	; (fe8 <run+0x364>)
     e02:	f7ff fffe 	bl	0 <do_test>
     e06:	68a1      	ldr	r1, [r4, #8]
     e08:	2223      	movs	r2, #35	; 0x23
     e0a:	4878      	ldr	r0, [pc, #480]	; (fec <run+0x368>)
     e0c:	f7ff fffe 	bl	0 <do_test>
     e10:	68a1      	ldr	r1, [r4, #8]
     e12:	2224      	movs	r2, #36	; 0x24
     e14:	4876      	ldr	r0, [pc, #472]	; (ff0 <run+0x36c>)
     e16:	f7ff fffe 	bl	0 <do_test>
     e1a:	6961      	ldr	r1, [r4, #20]
     e1c:	2225      	movs	r2, #37	; 0x25
     e1e:	4875      	ldr	r0, [pc, #468]	; (ff4 <run+0x370>)
     e20:	f7ff fffe 	bl	0 <do_test>
     e24:	6961      	ldr	r1, [r4, #20]
     e26:	2226      	movs	r2, #38	; 0x26
     e28:	4873      	ldr	r0, [pc, #460]	; (ff8 <run+0x374>)
     e2a:	f7ff fffe 	bl	0 <do_test>
     e2e:	6961      	ldr	r1, [r4, #20]
     e30:	2227      	movs	r2, #39	; 0x27
     e32:	4872      	ldr	r0, [pc, #456]	; (ffc <run+0x378>)
     e34:	f7ff fffe 	bl	0 <do_test>
     e38:	68a1      	ldr	r1, [r4, #8]
     e3a:	2228      	movs	r2, #40	; 0x28
     e3c:	4870      	ldr	r0, [pc, #448]	; (1000 <run+0x37c>)
     e3e:	f7ff fffe 	bl	0 <do_test>
     e42:	68a1      	ldr	r1, [r4, #8]
     e44:	2229      	movs	r2, #41	; 0x29
     e46:	486f      	ldr	r0, [pc, #444]	; (1004 <run+0x380>)
     e48:	f7ff fffe 	bl	0 <do_test>
     e4c:	68a1      	ldr	r1, [r4, #8]
     e4e:	222a      	movs	r2, #42	; 0x2a
     e50:	486d      	ldr	r0, [pc, #436]	; (1008 <run+0x384>)
     e52:	f7ff fffe 	bl	0 <do_test>
     e56:	68a1      	ldr	r1, [r4, #8]
     e58:	222b      	movs	r2, #43	; 0x2b
     e5a:	486c      	ldr	r0, [pc, #432]	; (100c <run+0x388>)
     e5c:	f7ff fffe 	bl	0 <do_test>
     e60:	68a1      	ldr	r1, [r4, #8]
     e62:	222c      	movs	r2, #44	; 0x2c
     e64:	486a      	ldr	r0, [pc, #424]	; (1010 <run+0x38c>)
     e66:	f7ff fffe 	bl	0 <do_test>
     e6a:	6a21      	ldr	r1, [r4, #32]
     e6c:	222d      	movs	r2, #45	; 0x2d
     e6e:	4869      	ldr	r0, [pc, #420]	; (1014 <run+0x390>)
     e70:	f7ff fffe 	bl	0 <do_test>
     e74:	68a1      	ldr	r1, [r4, #8]
     e76:	222e      	movs	r2, #46	; 0x2e
     e78:	4867      	ldr	r0, [pc, #412]	; (1018 <run+0x394>)
     e7a:	f7ff fffe 	bl	0 <do_test>
     e7e:	68a1      	ldr	r1, [r4, #8]
     e80:	222f      	movs	r2, #47	; 0x2f
     e82:	4866      	ldr	r0, [pc, #408]	; (101c <run+0x398>)
     e84:	f7ff fffe 	bl	0 <do_test>
     e88:	68a1      	ldr	r1, [r4, #8]
     e8a:	2230      	movs	r2, #48	; 0x30
     e8c:	4864      	ldr	r0, [pc, #400]	; (1020 <run+0x39c>)
     e8e:	f7ff fffe 	bl	0 <do_test>
     e92:	68a1      	ldr	r1, [r4, #8]
     e94:	2231      	movs	r2, #49	; 0x31
     e96:	4863      	ldr	r0, [pc, #396]	; (1024 <run+0x3a0>)
     e98:	f7ff fffe 	bl	0 <do_test>
     e9c:	68a1      	ldr	r1, [r4, #8]
     e9e:	2232      	movs	r2, #50	; 0x32
     ea0:	4861      	ldr	r0, [pc, #388]	; (1028 <run+0x3a4>)
     ea2:	f7ff fffe 	bl	0 <do_test>
     ea6:	68a1      	ldr	r1, [r4, #8]
     ea8:	2233      	movs	r2, #51	; 0x33
     eaa:	4860      	ldr	r0, [pc, #384]	; (102c <run+0x3a8>)
     eac:	f7ff fffe 	bl	0 <do_test>
     eb0:	68a1      	ldr	r1, [r4, #8]
     eb2:	2234      	movs	r2, #52	; 0x34
     eb4:	485e      	ldr	r0, [pc, #376]	; (1030 <run+0x3ac>)
     eb6:	f7ff fffe 	bl	0 <do_test>
     eba:	68a1      	ldr	r1, [r4, #8]
     ebc:	2235      	movs	r2, #53	; 0x35
     ebe:	485d      	ldr	r0, [pc, #372]	; (1034 <run+0x3b0>)
     ec0:	f7ff fffe 	bl	0 <do_test>
     ec4:	68a1      	ldr	r1, [r4, #8]
     ec6:	2236      	movs	r2, #54	; 0x36
     ec8:	485b      	ldr	r0, [pc, #364]	; (1038 <run+0x3b4>)
     eca:	f7ff fffe 	bl	0 <do_test>
     ece:	68a1      	ldr	r1, [r4, #8]
     ed0:	2237      	movs	r2, #55	; 0x37
     ed2:	485a      	ldr	r0, [pc, #360]	; (103c <run+0x3b8>)
     ed4:	f7ff fffe 	bl	0 <do_test>
     ed8:	68a1      	ldr	r1, [r4, #8]
     eda:	2238      	movs	r2, #56	; 0x38
     edc:	4858      	ldr	r0, [pc, #352]	; (1040 <run+0x3bc>)
     ede:	f7ff fffe 	bl	0 <do_test>
     ee2:	68a1      	ldr	r1, [r4, #8]
     ee4:	2239      	movs	r2, #57	; 0x39
     ee6:	4857      	ldr	r0, [pc, #348]	; (1044 <run+0x3c0>)
     ee8:	f7ff fffe 	bl	0 <do_test>
     eec:	68a1      	ldr	r1, [r4, #8]
     eee:	223a      	movs	r2, #58	; 0x3a
     ef0:	4855      	ldr	r0, [pc, #340]	; (1048 <run+0x3c4>)
     ef2:	f7ff fffe 	bl	0 <do_test>
     ef6:	68a1      	ldr	r1, [r4, #8]
     ef8:	223b      	movs	r2, #59	; 0x3b
     efa:	4854      	ldr	r0, [pc, #336]	; (104c <run+0x3c8>)
     efc:	f7ff fffe 	bl	0 <do_test>
     f00:	68a1      	ldr	r1, [r4, #8]
     f02:	223c      	movs	r2, #60	; 0x3c
     f04:	4852      	ldr	r0, [pc, #328]	; (1050 <run+0x3cc>)
     f06:	f7ff fffe 	bl	0 <do_test>
     f0a:	68a1      	ldr	r1, [r4, #8]
     f0c:	223d      	movs	r2, #61	; 0x3d
     f0e:	4851      	ldr	r0, [pc, #324]	; (1054 <run+0x3d0>)
     f10:	f7ff fffe 	bl	0 <do_test>
     f14:	68a1      	ldr	r1, [r4, #8]
     f16:	223e      	movs	r2, #62	; 0x3e
     f18:	484f      	ldr	r0, [pc, #316]	; (1058 <run+0x3d4>)
     f1a:	f7ff fffe 	bl	0 <do_test>
     f1e:	68a1      	ldr	r1, [r4, #8]
     f20:	223f      	movs	r2, #63	; 0x3f
     f22:	484e      	ldr	r0, [pc, #312]	; (105c <run+0x3d8>)
     f24:	f7ff fffe 	bl	0 <do_test>
     f28:	6961      	ldr	r1, [r4, #20]
     f2a:	2240      	movs	r2, #64	; 0x40
     f2c:	484c      	ldr	r0, [pc, #304]	; (1060 <run+0x3dc>)
     f2e:	f7ff fffe 	bl	0 <do_test>
     f32:	6961      	ldr	r1, [r4, #20]
     f34:	2241      	movs	r2, #65	; 0x41
     f36:	484b      	ldr	r0, [pc, #300]	; (1064 <run+0x3e0>)
     f38:	f7ff fffe 	bl	0 <do_test>
     f3c:	6961      	ldr	r1, [r4, #20]
     f3e:	2242      	movs	r2, #66	; 0x42
     f40:	4849      	ldr	r0, [pc, #292]	; (1068 <run+0x3e4>)
     f42:	f7ff fffe 	bl	0 <do_test>
     f46:	68a1      	ldr	r1, [r4, #8]
     f48:	2243      	movs	r2, #67	; 0x43
     f4a:	4848      	ldr	r0, [pc, #288]	; (106c <run+0x3e8>)
     f4c:	f7ff fffe 	bl	0 <do_test>
     f50:	e08e      	b.n	1070 <run+0x3ec>
     f52:	bf00      	nop
     f54:	00000000 	.word	0x00000000
     f58:	20022624 	.word	0x20022624
     f5c:	2002252c 	.word	0x2002252c
	...
    1070:	6a21      	ldr	r1, [r4, #32]
    1072:	2244      	movs	r2, #68	; 0x44
    1074:	487a      	ldr	r0, [pc, #488]	; (1260 <run+0x5dc>)
    1076:	f7ff fffe 	bl	0 <do_test>
    107a:	6a21      	ldr	r1, [r4, #32]
    107c:	2245      	movs	r2, #69	; 0x45
    107e:	4879      	ldr	r0, [pc, #484]	; (1264 <run+0x5e0>)
    1080:	f7ff fffe 	bl	0 <do_test>
    1084:	68a1      	ldr	r1, [r4, #8]
    1086:	2246      	movs	r2, #70	; 0x46
    1088:	4877      	ldr	r0, [pc, #476]	; (1268 <run+0x5e4>)
    108a:	f7ff fffe 	bl	0 <do_test>
    108e:	68a1      	ldr	r1, [r4, #8]
    1090:	2247      	movs	r2, #71	; 0x47
    1092:	4876      	ldr	r0, [pc, #472]	; (126c <run+0x5e8>)
    1094:	f7ff fffe 	bl	0 <do_test>
    1098:	6a21      	ldr	r1, [r4, #32]
    109a:	2248      	movs	r2, #72	; 0x48
    109c:	4874      	ldr	r0, [pc, #464]	; (1270 <run+0x5ec>)
    109e:	f7ff fffe 	bl	0 <do_test>
    10a2:	6a21      	ldr	r1, [r4, #32]
    10a4:	2249      	movs	r2, #73	; 0x49
    10a6:	4873      	ldr	r0, [pc, #460]	; (1274 <run+0x5f0>)
    10a8:	f7ff fffe 	bl	0 <do_test>
    10ac:	68a1      	ldr	r1, [r4, #8]
    10ae:	224a      	movs	r2, #74	; 0x4a
    10b0:	4871      	ldr	r0, [pc, #452]	; (1278 <run+0x5f4>)
    10b2:	f7ff fffe 	bl	0 <do_test>
    10b6:	68a1      	ldr	r1, [r4, #8]
    10b8:	224b      	movs	r2, #75	; 0x4b
    10ba:	4870      	ldr	r0, [pc, #448]	; (127c <run+0x5f8>)
    10bc:	f7ff fffe 	bl	0 <do_test>
    10c0:	68a1      	ldr	r1, [r4, #8]
    10c2:	224c      	movs	r2, #76	; 0x4c
    10c4:	486e      	ldr	r0, [pc, #440]	; (1280 <run+0x5fc>)
    10c6:	f7ff fffe 	bl	0 <do_test>
    10ca:	68a1      	ldr	r1, [r4, #8]
    10cc:	224d      	movs	r2, #77	; 0x4d
    10ce:	486d      	ldr	r0, [pc, #436]	; (1284 <run+0x600>)
    10d0:	f7ff fffe 	bl	0 <do_test>
    10d4:	68a1      	ldr	r1, [r4, #8]
    10d6:	224e      	movs	r2, #78	; 0x4e
    10d8:	486b      	ldr	r0, [pc, #428]	; (1288 <run+0x604>)
    10da:	f7ff fffe 	bl	0 <do_test>
    10de:	68a1      	ldr	r1, [r4, #8]
    10e0:	224f      	movs	r2, #79	; 0x4f
    10e2:	486a      	ldr	r0, [pc, #424]	; (128c <run+0x608>)
    10e4:	f7ff fffe 	bl	0 <do_test>
    10e8:	68a1      	ldr	r1, [r4, #8]
    10ea:	2250      	movs	r2, #80	; 0x50
    10ec:	4868      	ldr	r0, [pc, #416]	; (1290 <run+0x60c>)
    10ee:	f7ff fffe 	bl	0 <do_test>
    10f2:	68a1      	ldr	r1, [r4, #8]
    10f4:	2251      	movs	r2, #81	; 0x51
    10f6:	4866      	ldr	r0, [pc, #408]	; (1290 <run+0x60c>)
    10f8:	f7ff fffe 	bl	0 <do_test>
    10fc:	68a1      	ldr	r1, [r4, #8]
    10fe:	2252      	movs	r2, #82	; 0x52
    1100:	4864      	ldr	r0, [pc, #400]	; (1294 <run+0x610>)
    1102:	f7ff fffe 	bl	0 <do_test>
    1106:	68a1      	ldr	r1, [r4, #8]
    1108:	2253      	movs	r2, #83	; 0x53
    110a:	4863      	ldr	r0, [pc, #396]	; (1298 <run+0x614>)
    110c:	f7ff fffe 	bl	0 <do_test>
    1110:	68a1      	ldr	r1, [r4, #8]
    1112:	2254      	movs	r2, #84	; 0x54
    1114:	4861      	ldr	r0, [pc, #388]	; (129c <run+0x618>)
    1116:	f7ff fffe 	bl	0 <do_test>
    111a:	68a1      	ldr	r1, [r4, #8]
    111c:	2255      	movs	r2, #85	; 0x55
    111e:	4860      	ldr	r0, [pc, #384]	; (12a0 <run+0x61c>)
    1120:	f7ff fffe 	bl	0 <do_test>
    1124:	68a1      	ldr	r1, [r4, #8]
    1126:	2256      	movs	r2, #86	; 0x56
    1128:	485e      	ldr	r0, [pc, #376]	; (12a4 <run+0x620>)
    112a:	f7ff fffe 	bl	0 <do_test>
    112e:	68a1      	ldr	r1, [r4, #8]
    1130:	2257      	movs	r2, #87	; 0x57
    1132:	485b      	ldr	r0, [pc, #364]	; (12a0 <run+0x61c>)
    1134:	f7ff fffe 	bl	0 <do_test>
    1138:	68a1      	ldr	r1, [r4, #8]
    113a:	2258      	movs	r2, #88	; 0x58
    113c:	485a      	ldr	r0, [pc, #360]	; (12a8 <run+0x624>)
    113e:	f7ff fffe 	bl	0 <do_test>
    1142:	68a1      	ldr	r1, [r4, #8]
    1144:	2259      	movs	r2, #89	; 0x59
    1146:	4859      	ldr	r0, [pc, #356]	; (12ac <run+0x628>)
    1148:	f7ff fffe 	bl	0 <do_test>
    114c:	6a21      	ldr	r1, [r4, #32]
    114e:	225a      	movs	r2, #90	; 0x5a
    1150:	4857      	ldr	r0, [pc, #348]	; (12b0 <run+0x62c>)
    1152:	f7ff fffe 	bl	0 <do_test>
    1156:	6a21      	ldr	r1, [r4, #32]
    1158:	225b      	movs	r2, #91	; 0x5b
    115a:	4856      	ldr	r0, [pc, #344]	; (12b4 <run+0x630>)
    115c:	f7ff fffe 	bl	0 <do_test>
    1160:	68a1      	ldr	r1, [r4, #8]
    1162:	225c      	movs	r2, #92	; 0x5c
    1164:	4854      	ldr	r0, [pc, #336]	; (12b8 <run+0x634>)
    1166:	f7ff fffe 	bl	0 <do_test>
    116a:	6a21      	ldr	r1, [r4, #32]
    116c:	225d      	movs	r2, #93	; 0x5d
    116e:	4853      	ldr	r0, [pc, #332]	; (12bc <run+0x638>)
    1170:	f7ff fffe 	bl	0 <do_test>
    1174:	6a21      	ldr	r1, [r4, #32]
    1176:	225e      	movs	r2, #94	; 0x5e
    1178:	4851      	ldr	r0, [pc, #324]	; (12c0 <run+0x63c>)
    117a:	f7ff fffe 	bl	0 <do_test>
    117e:	68a1      	ldr	r1, [r4, #8]
    1180:	225f      	movs	r2, #95	; 0x5f
    1182:	4850      	ldr	r0, [pc, #320]	; (12c4 <run+0x640>)
    1184:	f7ff fffe 	bl	0 <do_test>
    1188:	68a1      	ldr	r1, [r4, #8]
    118a:	2260      	movs	r2, #96	; 0x60
    118c:	484e      	ldr	r0, [pc, #312]	; (12c8 <run+0x644>)
    118e:	f7ff fffe 	bl	0 <do_test>
    1192:	68a1      	ldr	r1, [r4, #8]
    1194:	2261      	movs	r2, #97	; 0x61
    1196:	484d      	ldr	r0, [pc, #308]	; (12cc <run+0x648>)
    1198:	f7ff fffe 	bl	0 <do_test>
    119c:	68a1      	ldr	r1, [r4, #8]
    119e:	2262      	movs	r2, #98	; 0x62
    11a0:	484b      	ldr	r0, [pc, #300]	; (12d0 <run+0x64c>)
    11a2:	f7ff fffe 	bl	0 <do_test>
    11a6:	6a21      	ldr	r1, [r4, #32]
    11a8:	2263      	movs	r2, #99	; 0x63
    11aa:	484a      	ldr	r0, [pc, #296]	; (12d4 <run+0x650>)
    11ac:	f7ff fffe 	bl	0 <do_test>
    11b0:	6a21      	ldr	r1, [r4, #32]
    11b2:	2264      	movs	r2, #100	; 0x64
    11b4:	4848      	ldr	r0, [pc, #288]	; (12d8 <run+0x654>)
    11b6:	f7ff fffe 	bl	0 <do_test>
    11ba:	6a21      	ldr	r1, [r4, #32]
    11bc:	2265      	movs	r2, #101	; 0x65
    11be:	4847      	ldr	r0, [pc, #284]	; (12dc <run+0x658>)
    11c0:	f7ff fffe 	bl	0 <do_test>
    11c4:	6a21      	ldr	r1, [r4, #32]
    11c6:	2266      	movs	r2, #102	; 0x66
    11c8:	4845      	ldr	r0, [pc, #276]	; (12e0 <run+0x65c>)
    11ca:	f7ff fffe 	bl	0 <do_test>
    11ce:	6a21      	ldr	r1, [r4, #32]
    11d0:	2267      	movs	r2, #103	; 0x67
    11d2:	4844      	ldr	r0, [pc, #272]	; (12e4 <run+0x660>)
    11d4:	f7ff fffe 	bl	0 <do_test>
    11d8:	6a21      	ldr	r1, [r4, #32]
    11da:	2268      	movs	r2, #104	; 0x68
    11dc:	4842      	ldr	r0, [pc, #264]	; (12e8 <run+0x664>)
    11de:	f7ff fffe 	bl	0 <do_test>
    11e2:	68a1      	ldr	r1, [r4, #8]
    11e4:	2269      	movs	r2, #105	; 0x69
    11e6:	4841      	ldr	r0, [pc, #260]	; (12ec <run+0x668>)
    11e8:	f7ff fffe 	bl	0 <do_test>
    11ec:	68a1      	ldr	r1, [r4, #8]
    11ee:	226a      	movs	r2, #106	; 0x6a
    11f0:	483f      	ldr	r0, [pc, #252]	; (12f0 <run+0x66c>)
    11f2:	f7ff fffe 	bl	0 <do_test>
    11f6:	68a1      	ldr	r1, [r4, #8]
    11f8:	226b      	movs	r2, #107	; 0x6b
    11fa:	483e      	ldr	r0, [pc, #248]	; (12f4 <run+0x670>)
    11fc:	f7ff fffe 	bl	0 <do_test>
    1200:	68a1      	ldr	r1, [r4, #8]
    1202:	226c      	movs	r2, #108	; 0x6c
    1204:	483c      	ldr	r0, [pc, #240]	; (12f8 <run+0x674>)
    1206:	f7ff fffe 	bl	0 <do_test>
    120a:	68a1      	ldr	r1, [r4, #8]
    120c:	226d      	movs	r2, #109	; 0x6d
    120e:	483b      	ldr	r0, [pc, #236]	; (12fc <run+0x678>)
    1210:	f7ff fffe 	bl	0 <do_test>
    1214:	68a1      	ldr	r1, [r4, #8]
    1216:	226e      	movs	r2, #110	; 0x6e
    1218:	4839      	ldr	r0, [pc, #228]	; (1300 <run+0x67c>)
    121a:	f7ff fffe 	bl	0 <do_test>
    121e:	68a1      	ldr	r1, [r4, #8]
    1220:	226f      	movs	r2, #111	; 0x6f
    1222:	4838      	ldr	r0, [pc, #224]	; (1304 <run+0x680>)
    1224:	f7ff fffe 	bl	0 <do_test>
    1228:	68a1      	ldr	r1, [r4, #8]
    122a:	2270      	movs	r2, #112	; 0x70
    122c:	4836      	ldr	r0, [pc, #216]	; (1308 <run+0x684>)
    122e:	f7ff fffe 	bl	0 <do_test>
    1232:	68a1      	ldr	r1, [r4, #8]
    1234:	2271      	movs	r2, #113	; 0x71
    1236:	4835      	ldr	r0, [pc, #212]	; (130c <run+0x688>)
    1238:	f7ff fffe 	bl	0 <do_test>
    123c:	68a1      	ldr	r1, [r4, #8]
    123e:	2272      	movs	r2, #114	; 0x72
    1240:	4833      	ldr	r0, [pc, #204]	; (1310 <run+0x68c>)
    1242:	f7ff fffe 	bl	0 <do_test>
    1246:	68a1      	ldr	r1, [r4, #8]
    1248:	2273      	movs	r2, #115	; 0x73
    124a:	4832      	ldr	r0, [pc, #200]	; (1314 <run+0x690>)
    124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1250:	f7ff bffe 	b.w	0 <do_test>
    1254:	4930      	ldr	r1, [pc, #192]	; (1318 <run+0x694>)
    1256:	2301      	movs	r3, #1
    1258:	60a1      	str	r1, [r4, #8]
    125a:	7023      	strb	r3, [r4, #0]
    125c:	e519      	b.n	c92 <run+0xe>
    125e:	bf00      	nop
	...
    1318:	200226c4 	.word	0x200226c4

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	00000000                                ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	00000000                                ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	00000000                                ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
