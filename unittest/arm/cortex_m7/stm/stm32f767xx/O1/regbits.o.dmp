
regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       2:	2200      	movs	r2, #0
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	200226c0 	.word	0x200226c0

0000000c <zero_array()>:
       c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
       e:	2200      	movs	r2, #0
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	20022500 	.word	0x20022500

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	200226c0 	.word	0x200226c0

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	200226c0 	.word	0x200226c0

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	200226c0 	.word	0x200226c0

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	200226c0 	.word	0x200226c0

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	200226c0 	.word	0x200226c0

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	200226c0 	.word	0x200226c0

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	200226c0 	.word	0x200226c0

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	200226c0 	.word	0x200226c0

00000098 <equ_singl_bits_operator()>:
      98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9a:	2240      	movs	r2, #64	; 0x40
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	200226c0 	.word	0x200226c0

000000a4 <equ_singl_bits_method()>:
      a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a6:	2240      	movs	r2, #64	; 0x40
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	200226c0 	.word	0x200226c0

000000b0 <equ_singl_mskd_operator()>:
      b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b2:	2202      	movs	r2, #2
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	200226c0 	.word	0x200226c0

000000bc <equ_singl_mskd_method()>:
      bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      be:	2202      	movs	r2, #2
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	200226c0 	.word	0x200226c0

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	200226c0 	.word	0x200226c0

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	200226c0 	.word	0x200226c0

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	200226c0 	.word	0x200226c0

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	200226c0 	.word	0x200226c0

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	200226c0 	.word	0x200226c0

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	200226c0 	.word	0x200226c0

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	200226c0 	.word	0x200226c0

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	200226c0 	.word	0x200226c0

00000150 <ins_multi_mskd_operator()>:
     150:	4a03      	ldr	r2, [pc, #12]	; (160 <ins_multi_mskd_operator()+0x10>)
     152:	6851      	ldr	r1, [r2, #4]
     154:	4b03      	ldr	r3, [pc, #12]	; (164 <ins_multi_mskd_operator()+0x14>)
     156:	400b      	ands	r3, r1
     158:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     15c:	6053      	str	r3, [r2, #4]
     15e:	4770      	bx	lr
     160:	200226c0 	.word	0x200226c0
     164:	fffff079 	.word	0xfffff079

00000168 <ins_multi_mskd_method()>:
     168:	4a03      	ldr	r2, [pc, #12]	; (178 <ins_multi_mskd_method()+0x10>)
     16a:	6851      	ldr	r1, [r2, #4]
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <ins_multi_mskd_method()+0x14>)
     16e:	400b      	ands	r3, r1
     170:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     174:	6053      	str	r3, [r2, #4]
     176:	4770      	bx	lr
     178:	200226c0 	.word	0x200226c0
     17c:	fffff079 	.word	0xfffff079

00000180 <equ_multi_bits_operator()>:
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     182:	2260      	movs	r2, #96	; 0x60
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	200226c0 	.word	0x200226c0

0000018c <equ_multi_bits_method()>:
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     18e:	2260      	movs	r2, #96	; 0x60
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	200226c0 	.word	0x200226c0

00000198 <equ_multi_mskd_operator()>:
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19a:	f44f 7242 	mov.w	r2, #776	; 0x308
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	200226c0 	.word	0x200226c0

000001a8 <equ_multi_mskd_method()>:
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	200226c0 	.word	0x200226c0

000001b8 <equ_bits_mskd_operator()>:
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1ba:	2222      	movs	r2, #34	; 0x22
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	200226c0 	.word	0x200226c0

000001c4 <equ_bits_mskd_method()>:
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c6:	2222      	movs	r2, #34	; 0x22
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	200226c0 	.word	0x200226c0

000001d0 <equ_mskd_bits_operator()>:
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d2:	2244      	movs	r2, #68	; 0x44
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	200226c0 	.word	0x200226c0

000001dc <equ_mskd_bits_method()>:
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1de:	2244      	movs	r2, #68	; 0x44
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	200226c0 	.word	0x200226c0

000001e8 <equ_bits_var()>:
     1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
     1ea:	2240      	movs	r2, #64	; 0x40
     1ec:	605a      	str	r2, [r3, #4]
     1ee:	2201      	movs	r2, #1
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	200226c0 	.word	0x200226c0

000001f8 <equ_mskd_var()>:
     1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
     1fa:	2202      	movs	r2, #2
     1fc:	605a      	str	r2, [r3, #4]
     1fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	200226c0 	.word	0x200226c0

0000020c <cmp_equ_zero()>:
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     20e:	2200      	movs	r2, #0
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
     218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
     222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	200226c0 	.word	0x200226c0
     230:	20022620 	.word	0x20022620

00000234 <cmp_neq_zero()>:
     234:	4b06      	ldr	r3, [pc, #24]	; (250 <cmp_neq_zero()+0x1c>)
     236:	2200      	movs	r2, #0
     238:	605a      	str	r2, [r3, #4]
     23a:	685b      	ldr	r3, [r3, #4]
     23c:	b11b      	cbz	r3, 246 <cmp_neq_zero()+0x12>
     23e:	4b04      	ldr	r3, [pc, #16]	; (250 <cmp_neq_zero()+0x1c>)
     240:	2204      	movs	r2, #4
     242:	605a      	str	r2, [r3, #4]
     244:	4770      	bx	lr
     246:	4b02      	ldr	r3, [pc, #8]	; (250 <cmp_neq_zero()+0x1c>)
     248:	2220      	movs	r2, #32
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	bf00      	nop
     250:	200226c0 	.word	0x200226c0

00000254 <cmp_equ_bits()>:
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <cmp_equ_bits()+0x1c>)
     256:	2240      	movs	r2, #64	; 0x40
     258:	605a      	str	r2, [r3, #4]
     25a:	685b      	ldr	r3, [r3, #4]
     25c:	f013 0f40 	tst.w	r3, #64	; 0x40
     260:	4b04      	ldr	r3, [pc, #16]	; (274 <cmp_equ_bits()+0x20>)
     262:	bf14      	ite	ne
     264:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
     268:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
     26c:	605a      	str	r2, [r3, #4]
     26e:	4770      	bx	lr
     270:	200226c0 	.word	0x200226c0
     274:	20022620 	.word	0x20022620

00000278 <cmp_neq_bits()>:
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <cmp_neq_bits()+0x18>)
     27a:	2240      	movs	r2, #64	; 0x40
     27c:	605a      	str	r2, [r3, #4]
     27e:	685b      	ldr	r3, [r3, #4]
     280:	f013 0f40 	tst.w	r3, #64	; 0x40
     284:	4b02      	ldr	r3, [pc, #8]	; (290 <cmp_neq_bits()+0x18>)
     286:	bf0c      	ite	eq
     288:	2202      	moveq	r2, #2
     28a:	2220      	movne	r2, #32
     28c:	605a      	str	r2, [r3, #4]
     28e:	4770      	bx	lr
     290:	200226c0 	.word	0x200226c0

00000294 <cmp_equ_multi_bits()>:
     294:	4b06      	ldr	r3, [pc, #24]	; (2b0 <cmp_equ_multi_bits()+0x1c>)
     296:	2260      	movs	r2, #96	; 0x60
     298:	605a      	str	r2, [r3, #4]
     29a:	685b      	ldr	r3, [r3, #4]
     29c:	4013      	ands	r3, r2
     29e:	4293      	cmp	r3, r2
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <cmp_equ_multi_bits()+0x20>)
     2a2:	bf0c      	ite	eq
     2a4:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     2a8:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2ac:	605a      	str	r2, [r3, #4]
     2ae:	4770      	bx	lr
     2b0:	200226c0 	.word	0x200226c0
     2b4:	20022620 	.word	0x20022620

000002b8 <cmp_neq_multi_bits()>:
     2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <cmp_neq_multi_bits()+0x1c>)
     2ba:	2260      	movs	r2, #96	; 0x60
     2bc:	605a      	str	r2, [r3, #4]
     2be:	685b      	ldr	r3, [r3, #4]
     2c0:	4013      	ands	r3, r2
     2c2:	4293      	cmp	r3, r2
     2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <cmp_neq_multi_bits()+0x20>)
     2c6:	bf14      	ite	ne
     2c8:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2cc:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2d0:	605a      	str	r2, [r3, #4]
     2d2:	4770      	bx	lr
     2d4:	200226c0 	.word	0x200226c0
     2d8:	20022620 	.word	0x20022620

000002dc <cmp_equ_mskd()>:
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <cmp_equ_mskd()+0x28>)
     2de:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2e2:	605a      	str	r2, [r3, #4]
     2e4:	685b      	ldr	r3, [r3, #4]
     2e6:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2ea:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2ee:	4a06      	ldr	r2, [pc, #24]	; (308 <cmp_equ_mskd()+0x2c>)
     2f0:	6853      	ldr	r3, [r2, #4]
     2f2:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2f6:	bf0c      	ite	eq
     2f8:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2fc:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     300:	6053      	str	r3, [r2, #4]
     302:	4770      	bx	lr
     304:	200226c0 	.word	0x200226c0
     308:	20022620 	.word	0x20022620

0000030c <cmp_neq_mskd()>:
     30c:	4b0b      	ldr	r3, [pc, #44]	; (33c <cmp_neq_mskd()+0x30>)
     30e:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     312:	605a      	str	r2, [r3, #4]
     314:	685b      	ldr	r3, [r3, #4]
     316:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     31a:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     31e:	d007      	beq.n	330 <cmp_neq_mskd()+0x24>
     320:	4a06      	ldr	r2, [pc, #24]	; (33c <cmp_neq_mskd()+0x30>)
     322:	6853      	ldr	r3, [r2, #4]
     324:	f023 0306 	bic.w	r3, r3, #6
     328:	f043 0304 	orr.w	r3, r3, #4
     32c:	6053      	str	r3, [r2, #4]
     32e:	4770      	bx	lr
     330:	4a02      	ldr	r2, [pc, #8]	; (33c <cmp_neq_mskd()+0x30>)
     332:	6853      	ldr	r3, [r2, #4]
     334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     338:	6053      	str	r3, [r2, #4]
     33a:	4770      	bx	lr
     33c:	200226c0 	.word	0x200226c0

00000340 <cmp_equ_reg()>:
     340:	4b06      	ldr	r3, [pc, #24]	; (35c <cmp_equ_reg()+0x1c>)
     342:	2222      	movs	r2, #34	; 0x22
     344:	605a      	str	r2, [r3, #4]
     346:	685b      	ldr	r3, [r3, #4]
     348:	4293      	cmp	r3, r2
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <cmp_equ_reg()+0x20>)
     34c:	bf0c      	ite	eq
     34e:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     352:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     356:	605a      	str	r2, [r3, #4]
     358:	4770      	bx	lr
     35a:	bf00      	nop
     35c:	200226c0 	.word	0x200226c0
     360:	20022620 	.word	0x20022620

00000364 <cmp_neq_reg()>:
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <cmp_neq_reg()+0x18>)
     366:	2222      	movs	r2, #34	; 0x22
     368:	605a      	str	r2, [r3, #4]
     36a:	685b      	ldr	r3, [r3, #4]
     36c:	4293      	cmp	r3, r2
     36e:	4b03      	ldr	r3, [pc, #12]	; (37c <cmp_neq_reg()+0x18>)
     370:	bf14      	ite	ne
     372:	2202      	movne	r2, #2
     374:	2220      	moveq	r2, #32
     376:	605a      	str	r2, [r3, #4]
     378:	4770      	bx	lr
     37a:	bf00      	nop
     37c:	200226c0 	.word	0x200226c0

00000380 <constexpr_bits_array()>:
     380:	4b03      	ldr	r3, [pc, #12]	; (390 <constexpr_bits_array()+0x10>)
     382:	2206      	movs	r2, #6
     384:	62da      	str	r2, [r3, #44]	; 0x2c
     386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     38a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     38e:	4770      	bx	lr
     390:	20022500 	.word	0x20022500

00000394 <runtime_bits_array()>:
     394:	b081      	sub	sp, #4
     396:	2303      	movs	r3, #3
     398:	9300      	str	r3, [sp, #0]
     39a:	9a00      	ldr	r2, [sp, #0]
     39c:	0092      	lsls	r2, r2, #2
     39e:	4b03      	ldr	r3, [pc, #12]	; (3ac <runtime_bits_array()+0x18>)
     3a0:	4413      	add	r3, r2
     3a2:	2221      	movs	r2, #33	; 0x21
     3a4:	621a      	str	r2, [r3, #32]
     3a6:	b001      	add	sp, #4
     3a8:	4770      	bx	lr
     3aa:	bf00      	nop
     3ac:	20022500 	.word	0x20022500

000003b0 <prescaler_low()>:
     3b0:	4b04      	ldr	r3, [pc, #16]	; (3c4 <prescaler_low()+0x14>)
     3b2:	2277      	movs	r2, #119	; 0x77
     3b4:	605a      	str	r2, [r3, #4]
     3b6:	685b      	ldr	r3, [r3, #4]
     3b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3bc:	4a02      	ldr	r2, [pc, #8]	; (3c8 <prescaler_low()+0x18>)
     3be:	62d3      	str	r3, [r2, #44]	; 0x2c
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	20022620 	.word	0x20022620
     3c8:	20022500 	.word	0x20022500

000003cc <prescaler_high()>:
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <prescaler_high()+0x14>)
     3ce:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     3d2:	605a      	str	r2, [r3, #4]
     3d4:	685b      	ldr	r3, [r3, #4]
     3d6:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3da:	4a02      	ldr	r2, [pc, #8]	; (3e4 <prescaler_high()+0x18>)
     3dc:	62d3      	str	r3, [r2, #44]	; 0x2c
     3de:	4770      	bx	lr
     3e0:	20022620 	.word	0x20022620
     3e4:	20022500 	.word	0x20022500

000003e8 <reg_mskd_lss()>:
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <reg_mskd_lss()+0x20>)
     3ea:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3ee:	605a      	str	r2, [r3, #4]
     3f0:	685b      	ldr	r3, [r3, #4]
     3f2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3fa:	4b04      	ldr	r3, [pc, #16]	; (40c <reg_mskd_lss()+0x24>)
     3fc:	bf34      	ite	cc
     3fe:	2202      	movcc	r2, #2
     400:	2204      	movcs	r2, #4
     402:	605a      	str	r2, [r3, #4]
     404:	4770      	bx	lr
     406:	bf00      	nop
     408:	20022620 	.word	0x20022620
     40c:	200226c0 	.word	0x200226c0

00000410 <reg_mskd_leq()>:
     410:	4b0b      	ldr	r3, [pc, #44]	; (440 <reg_mskd_leq()+0x30>)
     412:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     416:	605a      	str	r2, [r3, #4]
     418:	685b      	ldr	r3, [r3, #4]
     41a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41e:	4293      	cmp	r3, r2
     420:	d80a      	bhi.n	438 <reg_mskd_leq()+0x28>
     422:	4b07      	ldr	r3, [pc, #28]	; (440 <reg_mskd_leq()+0x30>)
     424:	685b      	ldr	r3, [r3, #4]
     426:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     42a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     42e:	d803      	bhi.n	438 <reg_mskd_leq()+0x28>
     430:	4b04      	ldr	r3, [pc, #16]	; (444 <reg_mskd_leq()+0x34>)
     432:	2202      	movs	r2, #2
     434:	605a      	str	r2, [r3, #4]
     436:	4770      	bx	lr
     438:	4b02      	ldr	r3, [pc, #8]	; (444 <reg_mskd_leq()+0x34>)
     43a:	2204      	movs	r2, #4
     43c:	605a      	str	r2, [r3, #4]
     43e:	4770      	bx	lr
     440:	20022620 	.word	0x20022620
     444:	200226c0 	.word	0x200226c0

00000448 <reg_mskd_gtr()>:
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <reg_mskd_gtr()+0x20>)
     44a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     44e:	605a      	str	r2, [r3, #4]
     450:	685b      	ldr	r3, [r3, #4]
     452:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     456:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <reg_mskd_gtr()+0x24>)
     45c:	bf8c      	ite	hi
     45e:	2202      	movhi	r2, #2
     460:	2204      	movls	r2, #4
     462:	605a      	str	r2, [r3, #4]
     464:	4770      	bx	lr
     466:	bf00      	nop
     468:	20022620 	.word	0x20022620
     46c:	200226c0 	.word	0x200226c0

00000470 <reg_mskd_geq()>:
     470:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <reg_mskd_geq()+0x30>)
     472:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     476:	605a      	str	r2, [r3, #4]
     478:	685b      	ldr	r3, [r3, #4]
     47a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     47e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     482:	d309      	bcc.n	498 <reg_mskd_geq()+0x28>
     484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <reg_mskd_geq()+0x30>)
     486:	685b      	ldr	r3, [r3, #4]
     488:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     48c:	4293      	cmp	r3, r2
     48e:	d303      	bcc.n	498 <reg_mskd_geq()+0x28>
     490:	4b04      	ldr	r3, [pc, #16]	; (4a4 <reg_mskd_geq()+0x34>)
     492:	2202      	movs	r2, #2
     494:	605a      	str	r2, [r3, #4]
     496:	4770      	bx	lr
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <reg_mskd_geq()+0x34>)
     49a:	2204      	movs	r2, #4
     49c:	605a      	str	r2, [r3, #4]
     49e:	4770      	bx	lr
     4a0:	20022620 	.word	0x20022620
     4a4:	200226c0 	.word	0x200226c0

000004a8 <pos_cmp_eq()>:
     4a8:	4b01      	ldr	r3, [pc, #4]	; (4b0 <pos_cmp_eq()+0x8>)
     4aa:	2202      	movs	r2, #2
     4ac:	605a      	str	r2, [r3, #4]
     4ae:	4770      	bx	lr
     4b0:	200226c0 	.word	0x200226c0

000004b4 <pos_cmp_ne()>:
     4b4:	4b01      	ldr	r3, [pc, #4]	; (4bc <pos_cmp_ne()+0x8>)
     4b6:	2202      	movs	r2, #2
     4b8:	605a      	str	r2, [r3, #4]
     4ba:	4770      	bx	lr
     4bc:	200226c0 	.word	0x200226c0

000004c0 <bits_extract_eq()>:
     4c0:	4b05      	ldr	r3, [pc, #20]	; (4d8 <bits_extract_eq()+0x18>)
     4c2:	2240      	movs	r2, #64	; 0x40
     4c4:	605a      	str	r2, [r3, #4]
     4c6:	685b      	ldr	r3, [r3, #4]
     4c8:	4293      	cmp	r3, r2
     4ca:	4b03      	ldr	r3, [pc, #12]	; (4d8 <bits_extract_eq()+0x18>)
     4cc:	bf0c      	ite	eq
     4ce:	2202      	moveq	r2, #2
     4d0:	2204      	movne	r2, #4
     4d2:	605a      	str	r2, [r3, #4]
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop
     4d8:	200226c0 	.word	0x200226c0

000004dc <mskd_extract_eq()>:
     4dc:	4b05      	ldr	r3, [pc, #20]	; (4f4 <mskd_extract_eq()+0x18>)
     4de:	2202      	movs	r2, #2
     4e0:	605a      	str	r2, [r3, #4]
     4e2:	685b      	ldr	r3, [r3, #4]
     4e4:	4293      	cmp	r3, r2
     4e6:	4b03      	ldr	r3, [pc, #12]	; (4f4 <mskd_extract_eq()+0x18>)
     4e8:	bf0c      	ite	eq
     4ea:	2220      	moveq	r2, #32
     4ec:	2240      	movne	r2, #64	; 0x40
     4ee:	605a      	str	r2, [r3, #4]
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	200226c0 	.word	0x200226c0

000004f8 <mskd_extract_ne()>:
     4f8:	4b05      	ldr	r3, [pc, #20]	; (510 <mskd_extract_ne()+0x18>)
     4fa:	2204      	movs	r2, #4
     4fc:	605a      	str	r2, [r3, #4]
     4fe:	685b      	ldr	r3, [r3, #4]
     500:	4293      	cmp	r3, r2
     502:	4b03      	ldr	r3, [pc, #12]	; (510 <mskd_extract_ne()+0x18>)
     504:	bf0c      	ite	eq
     506:	2240      	moveq	r2, #64	; 0x40
     508:	2220      	movne	r2, #32
     50a:	605a      	str	r2, [r3, #4]
     50c:	4770      	bx	lr
     50e:	bf00      	nop
     510:	200226c0 	.word	0x200226c0

00000514 <mskd_extract_lss()>:
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <mskd_extract_lss()+0x1c>)
     516:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     51a:	605a      	str	r2, [r3, #4]
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     522:	4b04      	ldr	r3, [pc, #16]	; (534 <mskd_extract_lss()+0x20>)
     524:	bf34      	ite	cc
     526:	2220      	movcc	r2, #32
     528:	2240      	movcs	r2, #64	; 0x40
     52a:	605a      	str	r2, [r3, #4]
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	20022620 	.word	0x20022620
     534:	200226c0 	.word	0x200226c0

00000538 <mskd_extract_leq()>:
     538:	4b05      	ldr	r3, [pc, #20]	; (550 <mskd_extract_leq()+0x18>)
     53a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     53e:	605a      	str	r2, [r3, #4]
     540:	685b      	ldr	r3, [r3, #4]
     542:	4293      	cmp	r3, r2
     544:	4b03      	ldr	r3, [pc, #12]	; (554 <mskd_extract_leq()+0x1c>)
     546:	bf94      	ite	ls
     548:	2220      	movls	r2, #32
     54a:	2240      	movhi	r2, #64	; 0x40
     54c:	605a      	str	r2, [r3, #4]
     54e:	4770      	bx	lr
     550:	20022620 	.word	0x20022620
     554:	200226c0 	.word	0x200226c0

00000558 <mskd_extract_gtr()>:
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <mskd_extract_gtr()+0x1c>)
     55a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     55e:	605a      	str	r2, [r3, #4]
     560:	685b      	ldr	r3, [r3, #4]
     562:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <mskd_extract_gtr()+0x20>)
     568:	bf8c      	ite	hi
     56a:	2220      	movhi	r2, #32
     56c:	2240      	movls	r2, #64	; 0x40
     56e:	605a      	str	r2, [r3, #4]
     570:	4770      	bx	lr
     572:	bf00      	nop
     574:	20022620 	.word	0x20022620
     578:	200226c0 	.word	0x200226c0

0000057c <set_bits_global()>:
     57c:	4a02      	ldr	r2, [pc, #8]	; (588 <set_bits_global()+0xc>)
     57e:	6853      	ldr	r3, [r2, #4]
     580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     584:	6053      	str	r3, [r2, #4]
     586:	4770      	bx	lr
     588:	200226c0 	.word	0x200226c0

0000058c <ins_mskd_global()>:
     58c:	4a03      	ldr	r2, [pc, #12]	; (59c <ins_mskd_global()+0x10>)
     58e:	6853      	ldr	r3, [r2, #4]
     590:	f023 0306 	bic.w	r3, r3, #6
     594:	f043 0302 	orr.w	r3, r3, #2
     598:	6053      	str	r3, [r2, #4]
     59a:	4770      	bx	lr
     59c:	200226c0 	.word	0x200226c0

000005a0 <assign_array_global()>:
     5a0:	4b01      	ldr	r3, [pc, #4]	; (5a8 <assign_array_global()+0x8>)
     5a2:	22bd      	movs	r2, #189	; 0xbd
     5a4:	601a      	str	r2, [r3, #0]
     5a6:	4770      	bx	lr
     5a8:	2002252c 	.word	0x2002252c

000005ac <shifted_global()>:
     5ac:	4b04      	ldr	r3, [pc, #16]	; (5c0 <shifted_global()+0x14>)
     5ae:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     5b2:	605a      	str	r2, [r3, #4]
     5b4:	685b      	ldr	r3, [r3, #4]
     5b6:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5ba:	4a02      	ldr	r2, [pc, #8]	; (5c4 <shifted_global()+0x18>)
     5bc:	62d3      	str	r3, [r2, #44]	; 0x2c
     5be:	4770      	bx	lr
     5c0:	20022620 	.word	0x20022620
     5c4:	20022500 	.word	0x20022500

000005c8 <assign_register_global()>:
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <assign_register_global()+0x8>)
     5ca:	2204      	movs	r2, #4
     5cc:	605a      	str	r2, [r3, #4]
     5ce:	4770      	bx	lr
     5d0:	200226c0 	.word	0x200226c0

000005d4 <copy_bits_equ()>:
     5d4:	4b05      	ldr	r3, [pc, #20]	; (5ec <copy_bits_equ()+0x18>)
     5d6:	2240      	movs	r2, #64	; 0x40
     5d8:	605a      	str	r2, [r3, #4]
     5da:	685b      	ldr	r3, [r3, #4]
     5dc:	f013 0f40 	tst.w	r3, #64	; 0x40
     5e0:	4b02      	ldr	r3, [pc, #8]	; (5ec <copy_bits_equ()+0x18>)
     5e2:	bf14      	ite	ne
     5e4:	2202      	movne	r2, #2
     5e6:	2204      	moveq	r2, #4
     5e8:	605a      	str	r2, [r3, #4]
     5ea:	4770      	bx	lr
     5ec:	200226c0 	.word	0x200226c0

000005f0 <copy_bits_neq()>:
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <copy_bits_neq()+0x18>)
     5f2:	2240      	movs	r2, #64	; 0x40
     5f4:	605a      	str	r2, [r3, #4]
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	f013 0f40 	tst.w	r3, #64	; 0x40
     5fc:	4b02      	ldr	r3, [pc, #8]	; (608 <copy_bits_neq()+0x18>)
     5fe:	bf0c      	ite	eq
     600:	2202      	moveq	r2, #2
     602:	2204      	movne	r2, #4
     604:	605a      	str	r2, [r3, #4]
     606:	4770      	bx	lr
     608:	200226c0 	.word	0x200226c0

0000060c <copy_mskd_equ()>:
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <copy_mskd_equ()+0x1c>)
     60e:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     612:	605a      	str	r2, [r3, #4]
     614:	685b      	ldr	r3, [r3, #4]
     616:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     61a:	4293      	cmp	r3, r2
     61c:	4b03      	ldr	r3, [pc, #12]	; (62c <copy_mskd_equ()+0x20>)
     61e:	bf0c      	ite	eq
     620:	2202      	moveq	r2, #2
     622:	2204      	movne	r2, #4
     624:	605a      	str	r2, [r3, #4]
     626:	4770      	bx	lr
     628:	20022620 	.word	0x20022620
     62c:	200226c0 	.word	0x200226c0

00000630 <copy_mskd_neq()>:
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <copy_mskd_neq()+0x1c>)
     632:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     636:	605a      	str	r2, [r3, #4]
     638:	685b      	ldr	r3, [r3, #4]
     63a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     63e:	4293      	cmp	r3, r2
     640:	4b03      	ldr	r3, [pc, #12]	; (650 <copy_mskd_neq()+0x20>)
     642:	bf14      	ite	ne
     644:	2202      	movne	r2, #2
     646:	2204      	moveq	r2, #4
     648:	605a      	str	r2, [r3, #4]
     64a:	4770      	bx	lr
     64c:	20022620 	.word	0x20022620
     650:	200226c0 	.word	0x200226c0

00000654 <copy_mskd_lss()>:
     654:	4b07      	ldr	r3, [pc, #28]	; (674 <copy_mskd_lss()+0x20>)
     656:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     65a:	605a      	str	r2, [r3, #4]
     65c:	685b      	ldr	r3, [r3, #4]
     65e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     662:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <copy_mskd_lss()+0x24>)
     668:	bf34      	ite	cc
     66a:	2202      	movcc	r2, #2
     66c:	2204      	movcs	r2, #4
     66e:	605a      	str	r2, [r3, #4]
     670:	4770      	bx	lr
     672:	bf00      	nop
     674:	20022620 	.word	0x20022620
     678:	200226c0 	.word	0x200226c0

0000067c <copy_mskd_leq()>:
     67c:	4b06      	ldr	r3, [pc, #24]	; (698 <copy_mskd_leq()+0x1c>)
     67e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     682:	605a      	str	r2, [r3, #4]
     684:	685b      	ldr	r3, [r3, #4]
     686:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     68a:	4293      	cmp	r3, r2
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <copy_mskd_leq()+0x20>)
     68e:	bf94      	ite	ls
     690:	2202      	movls	r2, #2
     692:	2204      	movhi	r2, #4
     694:	605a      	str	r2, [r3, #4]
     696:	4770      	bx	lr
     698:	20022620 	.word	0x20022620
     69c:	200226c0 	.word	0x200226c0

000006a0 <copy_mskd_gtr()>:
     6a0:	4b07      	ldr	r3, [pc, #28]	; (6c0 <copy_mskd_gtr()+0x20>)
     6a2:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     6a6:	605a      	str	r2, [r3, #4]
     6a8:	685b      	ldr	r3, [r3, #4]
     6aa:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6ae:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     6b2:	4b04      	ldr	r3, [pc, #16]	; (6c4 <copy_mskd_gtr()+0x24>)
     6b4:	bf8c      	ite	hi
     6b6:	2202      	movhi	r2, #2
     6b8:	2204      	movls	r2, #4
     6ba:	605a      	str	r2, [r3, #4]
     6bc:	4770      	bx	lr
     6be:	bf00      	nop
     6c0:	20022620 	.word	0x20022620
     6c4:	200226c0 	.word	0x200226c0

000006c8 <copy_mskd_geq()>:
     6c8:	4b06      	ldr	r3, [pc, #24]	; (6e4 <copy_mskd_geq()+0x1c>)
     6ca:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6ce:	605a      	str	r2, [r3, #4]
     6d0:	685b      	ldr	r3, [r3, #4]
     6d2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6d6:	4293      	cmp	r3, r2
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <copy_mskd_geq()+0x20>)
     6da:	bf2c      	ite	cs
     6dc:	2202      	movcs	r2, #2
     6de:	2204      	movcc	r2, #4
     6e0:	605a      	str	r2, [r3, #4]
     6e2:	4770      	bx	lr
     6e4:	20022620 	.word	0x20022620
     6e8:	200226c0 	.word	0x200226c0

000006ec <copy_shifted()>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <copy_shifted()+0x1c>)
     6ee:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6f2:	605a      	str	r2, [r3, #4]
     6f4:	685b      	ldr	r3, [r3, #4]
     6f6:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6fa:	2b0b      	cmp	r3, #11
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <copy_shifted()+0x20>)
     6fe:	bf0c      	ite	eq
     700:	2202      	moveq	r2, #2
     702:	2204      	movne	r2, #4
     704:	605a      	str	r2, [r3, #4]
     706:	4770      	bx	lr
     708:	20022620 	.word	0x20022620
     70c:	200226c0 	.word	0x200226c0

00000710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     710:	4a02      	ldr	r2, [pc, #8]	; (71c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0xc>)
     712:	6853      	ldr	r3, [r2, #4]
     714:	4318      	orrs	r0, r3
     716:	6050      	str	r0, [r2, #4]
     718:	4770      	bx	lr
     71a:	bf00      	nop
     71c:	200226c0 	.word	0x200226c0

00000720 <call_bits_val_var()>:
     720:	b500      	push	{lr}
     722:	2040      	movs	r0, #64	; 0x40
     724:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     728:	f85d fb04 	ldr.w	pc, [sp], #4

0000072c <call_bits_val_const()>:
     72c:	b500      	push	{lr}
     72e:	2040      	movs	r0, #64	; 0x40
     730:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     734:	f85d fb04 	ldr.w	pc, [sp], #4

00000738 <call_bits_val_global()>:
     738:	b500      	push	{lr}
     73a:	2040      	movs	r0, #64	; 0x40
     73c:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     740:	f85d fb04 	ldr.w	pc, [sp], #4

00000744 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     744:	4a02      	ldr	r2, [pc, #8]	; (750 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0xc>)
     746:	6853      	ldr	r3, [r2, #4]
     748:	6801      	ldr	r1, [r0, #0]
     74a:	430b      	orrs	r3, r1
     74c:	6053      	str	r3, [r2, #4]
     74e:	4770      	bx	lr
     750:	200226c0 	.word	0x200226c0

00000754 <call_bits_ref_var()>:
     754:	b500      	push	{lr}
     756:	b081      	sub	sp, #4
     758:	2301      	movs	r3, #1
     75a:	9300      	str	r3, [sp, #0]
     75c:	4668      	mov	r0, sp
     75e:	f7ff fffe 	bl	744 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     762:	b001      	add	sp, #4
     764:	f85d fb04 	ldr.w	pc, [sp], #4

00000768 <call_bits_ref_const()>:
     768:	b500      	push	{lr}
     76a:	b081      	sub	sp, #4
     76c:	2301      	movs	r3, #1
     76e:	9300      	str	r3, [sp, #0]
     770:	4668      	mov	r0, sp
     772:	f7ff fffe 	bl	744 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     776:	b001      	add	sp, #4
     778:	f85d fb04 	ldr.w	pc, [sp], #4

0000077c <call_bits_ref_global()>:
     77c:	b500      	push	{lr}
     77e:	b081      	sub	sp, #4
     780:	2340      	movs	r3, #64	; 0x40
     782:	9300      	str	r3, [sp, #0]
     784:	4668      	mov	r0, sp
     786:	f7ff fffe 	bl	744 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     78a:	b001      	add	sp, #4
     78c:	f85d fb04 	ldr.w	pc, [sp], #4

00000790 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     790:	4a03      	ldr	r2, [pc, #12]	; (7a0 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     792:	6853      	ldr	r3, [r2, #4]
     794:	ea23 0000 	bic.w	r0, r3, r0
     798:	4308      	orrs	r0, r1
     79a:	6050      	str	r0, [r2, #4]
     79c:	4770      	bx	lr
     79e:	bf00      	nop
     7a0:	200226c0 	.word	0x200226c0

000007a4 <call_mskd_val_var()>:
     7a4:	b500      	push	{lr}
     7a6:	2006      	movs	r0, #6
     7a8:	2102      	movs	r1, #2
     7aa:	f7ff fffe 	bl	790 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7ae:	f85d fb04 	ldr.w	pc, [sp], #4

000007b2 <call_mskd_val_const()>:
     7b2:	b500      	push	{lr}
     7b4:	2006      	movs	r0, #6
     7b6:	2102      	movs	r1, #2
     7b8:	f7ff fffe 	bl	790 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7bc:	f85d fb04 	ldr.w	pc, [sp], #4

000007c0 <call_mskd_val_global()>:
     7c0:	b500      	push	{lr}
     7c2:	2006      	movs	r0, #6
     7c4:	2102      	movs	r1, #2
     7c6:	f7ff fffe 	bl	790 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7ca:	f85d fb04 	ldr.w	pc, [sp], #4

000007ce <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     7ce:	4a04      	ldr	r2, [pc, #16]	; (7e0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x12>)
     7d0:	6853      	ldr	r3, [r2, #4]
     7d2:	6801      	ldr	r1, [r0, #0]
     7d4:	ea23 0301 	bic.w	r3, r3, r1
     7d8:	6841      	ldr	r1, [r0, #4]
     7da:	430b      	orrs	r3, r1
     7dc:	6053      	str	r3, [r2, #4]
     7de:	4770      	bx	lr
     7e0:	200226c0 	.word	0x200226c0

000007e4 <call_mskd_ref_var()>:
     7e4:	b500      	push	{lr}
     7e6:	b082      	sub	sp, #8
     7e8:	4b04      	ldr	r3, [pc, #16]	; (7fc <call_mskd_ref_var()+0x18>)
     7ea:	cb0c      	ldmia	r3, {r2, r3}
     7ec:	e88d 000c 	stmia.w	sp, {r2, r3}
     7f0:	4668      	mov	r0, sp
     7f2:	f7ff fffe 	bl	7ce <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7f6:	b002      	add	sp, #8
     7f8:	f85d fb04 	ldr.w	pc, [sp], #4
     7fc:	00000000 	.word	0x00000000

00000800 <call_mskd_ref_const()>:
     800:	b500      	push	{lr}
     802:	b082      	sub	sp, #8
     804:	2306      	movs	r3, #6
     806:	9300      	str	r3, [sp, #0]
     808:	2304      	movs	r3, #4
     80a:	9301      	str	r3, [sp, #4]
     80c:	4668      	mov	r0, sp
     80e:	f7ff fffe 	bl	7ce <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     812:	b002      	add	sp, #8
     814:	f85d fb04 	ldr.w	pc, [sp], #4

00000818 <call_mskd_ref_global()>:
     818:	b500      	push	{lr}
     81a:	b082      	sub	sp, #8
     81c:	2306      	movs	r3, #6
     81e:	9300      	str	r3, [sp, #0]
     820:	2302      	movs	r3, #2
     822:	9301      	str	r3, [sp, #4]
     824:	4668      	mov	r0, sp
     826:	f7ff fffe 	bl	7ce <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     82a:	b002      	add	sp, #8
     82c:	f85d fb04 	ldr.w	pc, [sp], #4

00000830 <periph_bits(mcu::Serial volatile*)>:
     830:	6843      	ldr	r3, [r0, #4]
     832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     836:	6043      	str	r3, [r0, #4]
     838:	4770      	bx	lr

0000083a <call_periph_bits()>:
     83a:	b500      	push	{lr}
     83c:	4802      	ldr	r0, [pc, #8]	; (848 <call_periph_bits()+0xe>)
     83e:	f7ff fffe 	bl	830 <periph_bits(mcu::Serial volatile*)>
     842:	f85d fb04 	ldr.w	pc, [sp], #4
     846:	bf00      	nop
     848:	200226c0 	.word	0x200226c0

0000084c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     84c:	6843      	ldr	r3, [r0, #4]
     84e:	4319      	orrs	r1, r3
     850:	6041      	str	r1, [r0, #4]
     852:	4770      	bx	lr

00000854 <call_periph_bits_val()>:
     854:	b500      	push	{lr}
     856:	2140      	movs	r1, #64	; 0x40
     858:	4802      	ldr	r0, [pc, #8]	; (864 <call_periph_bits_val()+0x10>)
     85a:	f7ff fffe 	bl	84c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     85e:	f85d fb04 	ldr.w	pc, [sp], #4
     862:	bf00      	nop
     864:	200226c0 	.word	0x200226c0

00000868 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     868:	6803      	ldr	r3, [r0, #0]
     86a:	4319      	orrs	r1, r3
     86c:	6001      	str	r1, [r0, #0]
     86e:	4770      	bx	lr

00000870 <call_reg_bits_val()>:
     870:	b500      	push	{lr}
     872:	2140      	movs	r1, #64	; 0x40
     874:	4802      	ldr	r0, [pc, #8]	; (880 <call_reg_bits_val()+0x10>)
     876:	f7ff fffe 	bl	868 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     87a:	f85d fb04 	ldr.w	pc, [sp], #4
     87e:	bf00      	nop
     880:	200226c4 	.word	0x200226c4

00000884 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     884:	6843      	ldr	r3, [r0, #4]
     886:	680a      	ldr	r2, [r1, #0]
     888:	4313      	orrs	r3, r2
     88a:	6043      	str	r3, [r0, #4]
     88c:	4770      	bx	lr

0000088e <call_periph_bits_ref()>:
     88e:	b500      	push	{lr}
     890:	b081      	sub	sp, #4
     892:	2340      	movs	r3, #64	; 0x40
     894:	9300      	str	r3, [sp, #0]
     896:	4669      	mov	r1, sp
     898:	4802      	ldr	r0, [pc, #8]	; (8a4 <call_periph_bits_ref()+0x16>)
     89a:	f7ff fffe 	bl	884 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     89e:	b001      	add	sp, #4
     8a0:	f85d fb04 	ldr.w	pc, [sp], #4
     8a4:	200226c0 	.word	0x200226c0

000008a8 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8a8:	6803      	ldr	r3, [r0, #0]
     8aa:	680a      	ldr	r2, [r1, #0]
     8ac:	4313      	orrs	r3, r2
     8ae:	6003      	str	r3, [r0, #0]
     8b0:	4770      	bx	lr

000008b2 <call_reg_bits_ref()>:
     8b2:	b500      	push	{lr}
     8b4:	b081      	sub	sp, #4
     8b6:	2340      	movs	r3, #64	; 0x40
     8b8:	9300      	str	r3, [sp, #0]
     8ba:	4669      	mov	r1, sp
     8bc:	4802      	ldr	r0, [pc, #8]	; (8c8 <call_reg_bits_ref()+0x16>)
     8be:	f7ff fffe 	bl	8a8 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8c2:	b001      	add	sp, #4
     8c4:	f85d fb04 	ldr.w	pc, [sp], #4
     8c8:	200226c4 	.word	0x200226c4

000008cc <periph_mskd(mcu::Serial volatile*)>:
     8cc:	6843      	ldr	r3, [r0, #4]
     8ce:	f023 0306 	bic.w	r3, r3, #6
     8d2:	f043 0302 	orr.w	r3, r3, #2
     8d6:	6043      	str	r3, [r0, #4]
     8d8:	4770      	bx	lr

000008da <call_periph_mskd()>:
     8da:	b500      	push	{lr}
     8dc:	4802      	ldr	r0, [pc, #8]	; (8e8 <call_periph_mskd()+0xe>)
     8de:	f7ff fffe 	bl	8cc <periph_mskd(mcu::Serial volatile*)>
     8e2:	f85d fb04 	ldr.w	pc, [sp], #4
     8e6:	bf00      	nop
     8e8:	200226c0 	.word	0x200226c0

000008ec <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8ec:	6843      	ldr	r3, [r0, #4]
     8ee:	ea23 0101 	bic.w	r1, r3, r1
     8f2:	4311      	orrs	r1, r2
     8f4:	6041      	str	r1, [r0, #4]
     8f6:	4770      	bx	lr

000008f8 <call_periph_mskd_val()>:
     8f8:	b500      	push	{lr}
     8fa:	2106      	movs	r1, #6
     8fc:	2202      	movs	r2, #2
     8fe:	4802      	ldr	r0, [pc, #8]	; (908 <call_periph_mskd_val()+0x10>)
     900:	f7ff fffe 	bl	8ec <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     904:	f85d fb04 	ldr.w	pc, [sp], #4
     908:	200226c0 	.word	0x200226c0

0000090c <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     90c:	6803      	ldr	r3, [r0, #0]
     90e:	ea23 0101 	bic.w	r1, r3, r1
     912:	4311      	orrs	r1, r2
     914:	6001      	str	r1, [r0, #0]
     916:	4770      	bx	lr

00000918 <call_reg_mskd_val()>:
     918:	b500      	push	{lr}
     91a:	2106      	movs	r1, #6
     91c:	2202      	movs	r2, #2
     91e:	4802      	ldr	r0, [pc, #8]	; (928 <call_reg_mskd_val()+0x10>)
     920:	f7ff fffe 	bl	90c <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     924:	f85d fb04 	ldr.w	pc, [sp], #4
     928:	200226c4 	.word	0x200226c4

0000092c <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     92c:	6843      	ldr	r3, [r0, #4]
     92e:	ea23 0101 	bic.w	r1, r3, r1
     932:	4311      	orrs	r1, r2
     934:	6041      	str	r1, [r0, #4]
     936:	4770      	bx	lr

00000938 <call_periph_mskd_ref()>:
     938:	b500      	push	{lr}
     93a:	2106      	movs	r1, #6
     93c:	2202      	movs	r2, #2
     93e:	4802      	ldr	r0, [pc, #8]	; (948 <call_periph_mskd_ref()+0x10>)
     940:	f7ff fffe 	bl	92c <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     944:	f85d fb04 	ldr.w	pc, [sp], #4
     948:	200226c0 	.word	0x200226c0

0000094c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     94c:	6803      	ldr	r3, [r0, #0]
     94e:	ea23 0101 	bic.w	r1, r3, r1
     952:	4311      	orrs	r1, r2
     954:	6001      	str	r1, [r0, #0]
     956:	4770      	bx	lr

00000958 <call_reg_mskd_ref()>:
     958:	b500      	push	{lr}
     95a:	2106      	movs	r1, #6
     95c:	2202      	movs	r2, #2
     95e:	4802      	ldr	r0, [pc, #8]	; (968 <call_reg_mskd_ref()+0x10>)
     960:	f7ff fffe 	bl	94c <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     964:	f85d fb04 	ldr.w	pc, [sp], #4
     968:	200226c4 	.word	0x200226c4

0000096c <return_bits()>:
     96c:	2020      	movs	r0, #32
     96e:	4770      	bx	lr

00000970 <call_return_bits()>:
     970:	b500      	push	{lr}
     972:	f7ff fffe 	bl	96c <return_bits()>
     976:	2820      	cmp	r0, #32
     978:	4b04      	ldr	r3, [pc, #16]	; (98c <call_return_bits()+0x1c>)
     97a:	bf0c      	ite	eq
     97c:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     980:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     984:	605a      	str	r2, [r3, #4]
     986:	f85d fb04 	ldr.w	pc, [sp], #4
     98a:	bf00      	nop
     98c:	20022620 	.word	0x20022620

00000990 <return_mskd()>:
     990:	2218      	movs	r2, #24
     992:	6002      	str	r2, [r0, #0]
     994:	2208      	movs	r2, #8
     996:	6042      	str	r2, [r0, #4]
     998:	4770      	bx	lr

0000099a <call_return_mskd()>:
     99a:	b500      	push	{lr}
     99c:	b082      	sub	sp, #8
     99e:	4668      	mov	r0, sp
     9a0:	f7ff fffe 	bl	990 <return_mskd()>
     9a4:	9a01      	ldr	r2, [sp, #4]
     9a6:	9b00      	ldr	r3, [sp, #0]
     9a8:	2b18      	cmp	r3, #24
     9aa:	d006      	beq.n	9ba <call_return_mskd()+0x20>
     9ac:	4b06      	ldr	r3, [pc, #24]	; (9c8 <call_return_mskd()+0x2e>)
     9ae:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9b2:	605a      	str	r2, [r3, #4]
     9b4:	b002      	add	sp, #8
     9b6:	f85d fb04 	ldr.w	pc, [sp], #4
     9ba:	2a08      	cmp	r2, #8
     9bc:	d1f6      	bne.n	9ac <call_return_mskd()+0x12>
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <call_return_mskd()+0x2e>)
     9c0:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9c4:	605a      	str	r2, [r3, #4]
     9c6:	e7f5      	b.n	9b4 <call_return_mskd()+0x1a>
     9c8:	20022620 	.word	0x20022620

000009cc <return_reg()>:
     9cc:	4b02      	ldr	r3, [pc, #8]	; (9d8 <return_reg()+0xc>)
     9ce:	2240      	movs	r2, #64	; 0x40
     9d0:	605a      	str	r2, [r3, #4]
     9d2:	4802      	ldr	r0, [pc, #8]	; (9dc <return_reg()+0x10>)
     9d4:	4770      	bx	lr
     9d6:	bf00      	nop
     9d8:	200226c0 	.word	0x200226c0
     9dc:	200226c4 	.word	0x200226c4

000009e0 <call_return_reg()>:
     9e0:	b500      	push	{lr}
     9e2:	f7ff fffe 	bl	9cc <return_reg()>
     9e6:	6803      	ldr	r3, [r0, #0]
     9e8:	2b40      	cmp	r3, #64	; 0x40
     9ea:	4b04      	ldr	r3, [pc, #16]	; (9fc <call_return_reg()+0x1c>)
     9ec:	bf0c      	ite	eq
     9ee:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     9f2:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     9f6:	605a      	str	r2, [r3, #4]
     9f8:	f85d fb04 	ldr.w	pc, [sp], #4
     9fc:	20022620 	.word	0x20022620

00000a00 <return_periph()>:
     a00:	4801      	ldr	r0, [pc, #4]	; (a08 <return_periph()+0x8>)
     a02:	2340      	movs	r3, #64	; 0x40
     a04:	6043      	str	r3, [r0, #4]
     a06:	4770      	bx	lr
     a08:	200226c0 	.word	0x200226c0

00000a0c <call_return_periph()>:
     a0c:	b500      	push	{lr}
     a0e:	f7ff fffe 	bl	a00 <return_periph()>
     a12:	6843      	ldr	r3, [r0, #4]
     a14:	2b40      	cmp	r3, #64	; 0x40
     a16:	4b04      	ldr	r3, [pc, #16]	; (a28 <call_return_periph()+0x1c>)
     a18:	bf0c      	ite	eq
     a1a:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     a1e:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     a22:	605a      	str	r2, [r3, #4]
     a24:	f85d fb04 	ldr.w	pc, [sp], #4
     a28:	20022620 	.word	0x20022620

00000a2c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a2c:	2805      	cmp	r0, #5
     a2e:	d006      	beq.n	a3e <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a30:	2806      	cmp	r0, #6
     a32:	4b05      	ldr	r3, [pc, #20]	; (a48 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a34:	bf0c      	ite	eq
     a36:	2244      	moveq	r2, #68	; 0x44
     a38:	2255      	movne	r2, #85	; 0x55
     a3a:	62da      	str	r2, [r3, #44]	; 0x2c
     a3c:	4770      	bx	lr
     a3e:	4b02      	ldr	r3, [pc, #8]	; (a48 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a40:	2233      	movs	r2, #51	; 0x33
     a42:	62da      	str	r2, [r3, #44]	; 0x2c
     a44:	4770      	bx	lr
     a46:	bf00      	nop
     a48:	20022500 	.word	0x20022500

00000a4c <call_pos_val()>:
     a4c:	b500      	push	{lr}
     a4e:	2005      	movs	r0, #5
     a50:	f7ff fffe 	bl	a2c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a54:	2006      	movs	r0, #6
     a56:	f7ff fffe 	bl	a2c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a5a:	f85d fb04 	ldr.w	pc, [sp], #4

00000a5e <call_pos_val_global()>:
     a5e:	b500      	push	{lr}
     a60:	2006      	movs	r0, #6
     a62:	f7ff fffe 	bl	a2c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a66:	f85d fb04 	ldr.w	pc, [sp], #4

00000a6a <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a6a:	6803      	ldr	r3, [r0, #0]
     a6c:	2b05      	cmp	r3, #5
     a6e:	d006      	beq.n	a7e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a70:	2b06      	cmp	r3, #6
     a72:	4b05      	ldr	r3, [pc, #20]	; (a88 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a74:	bf0c      	ite	eq
     a76:	2277      	moveq	r2, #119	; 0x77
     a78:	2288      	movne	r2, #136	; 0x88
     a7a:	62da      	str	r2, [r3, #44]	; 0x2c
     a7c:	4770      	bx	lr
     a7e:	4b02      	ldr	r3, [pc, #8]	; (a88 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a80:	2266      	movs	r2, #102	; 0x66
     a82:	62da      	str	r2, [r3, #44]	; 0x2c
     a84:	4770      	bx	lr
     a86:	bf00      	nop
     a88:	20022500 	.word	0x20022500

00000a8c <call_pos_ref()>:
     a8c:	b510      	push	{r4, lr}
     a8e:	b082      	sub	sp, #8
     a90:	2405      	movs	r4, #5
     a92:	9401      	str	r4, [sp, #4]
     a94:	a801      	add	r0, sp, #4
     a96:	f7ff fffe 	bl	a6a <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a9a:	9400      	str	r4, [sp, #0]
     a9c:	4668      	mov	r0, sp
     a9e:	f7ff fffe 	bl	a6a <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     aa2:	b002      	add	sp, #8
     aa4:	bd10      	pop	{r4, pc}

00000aa6 <call_pos_ref_global()>:
     aa6:	b500      	push	{lr}
     aa8:	b081      	sub	sp, #4
     aaa:	2306      	movs	r3, #6
     aac:	9300      	str	r3, [sp, #0]
     aae:	4668      	mov	r0, sp
     ab0:	f7ff fffe 	bl	a6a <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     ab4:	b001      	add	sp, #4
     ab6:	f85d fb04 	ldr.w	pc, [sp], #4

00000aba <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     aba:	4a03      	ldr	r2, [pc, #12]	; (ac8 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
     abc:	6853      	ldr	r3, [r2, #4]
     abe:	ea23 0000 	bic.w	r0, r3, r0
     ac2:	4308      	orrs	r0, r1
     ac4:	6050      	str	r0, [r2, #4]
     ac6:	4770      	bx	lr
     ac8:	200226c0 	.word	0x200226c0

00000acc <call_range_val(unsigned int)>:
     acc:	b500      	push	{lr}
     ace:	0301      	lsls	r1, r0, #12
     ad0:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     ad4:	f7ff fffe 	bl	aba <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     ad8:	f85d fb04 	ldr.w	pc, [sp], #4

00000adc <call_range_val_port()>:
     adc:	b500      	push	{lr}
     ade:	201f      	movs	r0, #31
     ae0:	f7ff fffe 	bl	acc <call_range_val(unsigned int)>
     ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ae8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ae8:	4a03      	ldr	r2, [pc, #12]	; (af8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     aea:	6853      	ldr	r3, [r2, #4]
     aec:	ea23 0000 	bic.w	r0, r3, r0
     af0:	4308      	orrs	r0, r1
     af2:	6050      	str	r0, [r2, #4]
     af4:	4770      	bx	lr
     af6:	bf00      	nop
     af8:	200226c0 	.word	0x200226c0

00000afc <call_range_ref(unsigned int)>:
     afc:	b500      	push	{lr}
     afe:	0301      	lsls	r1, r0, #12
     b00:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     b04:	f7ff fffe 	bl	ae8 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     b08:	f85d fb04 	ldr.w	pc, [sp], #4

00000b0c <call_range_ref_port()>:
     b0c:	b500      	push	{lr}
     b0e:	200c      	movs	r0, #12
     b10:	f7ff fffe 	bl	afc <call_range_ref(unsigned int)>
     b14:	f85d fb04 	ldr.w	pc, [sp], #4

00000b18 <check_array_range_pass(unsigned int)>:
     b18:	2816      	cmp	r0, #22
     b1a:	4b03      	ldr	r3, [pc, #12]	; (b28 <check_array_range_pass(unsigned int)+0x10>)
     b1c:	bf94      	ite	ls
     b1e:	227f      	movls	r2, #127	; 0x7f
     b20:	2283      	movhi	r2, #131	; 0x83
     b22:	62da      	str	r2, [r3, #44]	; 0x2c
     b24:	4770      	bx	lr
     b26:	bf00      	nop
     b28:	20022500 	.word	0x20022500

00000b2c <check_array_range_fail(unsigned int)>:
     b2c:	2816      	cmp	r0, #22
     b2e:	4b03      	ldr	r3, [pc, #12]	; (b3c <check_array_range_fail(unsigned int)+0x10>)
     b30:	bf94      	ite	ls
     b32:	2295      	movls	r2, #149	; 0x95
     b34:	2297      	movhi	r2, #151	; 0x97
     b36:	62da      	str	r2, [r3, #44]	; 0x2c
     b38:	4770      	bx	lr
     b3a:	bf00      	nop
     b3c:	20022500 	.word	0x20022500

00000b40 <check_bits_range_pass(unsigned int)>:
     b40:	280f      	cmp	r0, #15
     b42:	4b03      	ldr	r3, [pc, #12]	; (b50 <check_bits_range_pass(unsigned int)+0x10>)
     b44:	bf94      	ite	ls
     b46:	229d      	movls	r2, #157	; 0x9d
     b48:	22a3      	movhi	r2, #163	; 0xa3
     b4a:	62da      	str	r2, [r3, #44]	; 0x2c
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop
     b50:	20022500 	.word	0x20022500

00000b54 <check_bits_range_fail(unsigned int)>:
     b54:	280f      	cmp	r0, #15
     b56:	4b03      	ldr	r3, [pc, #12]	; (b64 <check_bits_range_fail(unsigned int)+0x10>)
     b58:	bf94      	ite	ls
     b5a:	22a7      	movls	r2, #167	; 0xa7
     b5c:	22ad      	movhi	r2, #173	; 0xad
     b5e:	62da      	str	r2, [r3, #44]	; 0x2c
     b60:	4770      	bx	lr
     b62:	bf00      	nop
     b64:	20022500 	.word	0x20022500

00000b68 <check_mskd_range_pass(unsigned int)>:
     b68:	281f      	cmp	r0, #31
     b6a:	4b03      	ldr	r3, [pc, #12]	; (b78 <check_mskd_range_pass(unsigned int)+0x10>)
     b6c:	bf94      	ite	ls
     b6e:	22b3      	movls	r2, #179	; 0xb3
     b70:	22b5      	movhi	r2, #181	; 0xb5
     b72:	62da      	str	r2, [r3, #44]	; 0x2c
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	20022500 	.word	0x20022500

00000b7c <check_mskd_range_fail(unsigned int)>:
     b7c:	281f      	cmp	r0, #31
     b7e:	4b03      	ldr	r3, [pc, #12]	; (b8c <check_mskd_range_fail(unsigned int)+0x10>)
     b80:	bf94      	ite	ls
     b82:	22bf      	movls	r2, #191	; 0xbf
     b84:	22c1      	movhi	r2, #193	; 0xc1
     b86:	62da      	str	r2, [r3, #44]	; 0x2c
     b88:	4770      	bx	lr
     b8a:	bf00      	nop
     b8c:	20022500 	.word	0x20022500

00000b90 <bits_extract_ne()>:
     b90:	4b05      	ldr	r3, [pc, #20]	; (ba8 <bits_extract_ne()+0x18>)
     b92:	2220      	movs	r2, #32
     b94:	605a      	str	r2, [r3, #4]
     b96:	685b      	ldr	r3, [r3, #4]
     b98:	4293      	cmp	r3, r2
     b9a:	4b03      	ldr	r3, [pc, #12]	; (ba8 <bits_extract_ne()+0x18>)
     b9c:	bf14      	ite	ne
     b9e:	2202      	movne	r2, #2
     ba0:	2204      	moveq	r2, #4
     ba2:	605a      	str	r2, [r3, #4]
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop
     ba8:	200226c0 	.word	0x200226c0

00000bac <mskd_extract_geq()>:
     bac:	4b05      	ldr	r3, [pc, #20]	; (bc4 <mskd_extract_geq()+0x18>)
     bae:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     bb2:	605a      	str	r2, [r3, #4]
     bb4:	685b      	ldr	r3, [r3, #4]
     bb6:	4293      	cmp	r3, r2
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <mskd_extract_geq()+0x1c>)
     bba:	bf2c      	ite	cs
     bbc:	2220      	movcs	r2, #32
     bbe:	2240      	movcc	r2, #64	; 0x40
     bc0:	605a      	str	r2, [r3, #4]
     bc2:	4770      	bx	lr
     bc4:	20022620 	.word	0x20022620
     bc8:	200226c0 	.word	0x200226c0

00000bcc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     bcc:	4b04      	ldr	r3, [pc, #16]	; (be0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     bce:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     bd2:	605a      	str	r2, [r3, #4]
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	4018      	ands	r0, r3
     bd8:	40c8      	lsrs	r0, r1
     bda:	4b02      	ldr	r3, [pc, #8]	; (be4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     bdc:	62d8      	str	r0, [r3, #44]	; 0x2c
     bde:	4770      	bx	lr
     be0:	20022620 	.word	0x20022620
     be4:	20022500 	.word	0x20022500

00000be8 <call_shifted_const_val()>:
     be8:	b500      	push	{lr}
     bea:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bee:	2119      	movs	r1, #25
     bf0:	f7ff fffe 	bl	bcc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bf4:	f85d fb04 	ldr.w	pc, [sp], #4

00000bf8 <call_shifted_var_val()>:
     bf8:	b500      	push	{lr}
     bfa:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bfe:	2119      	movs	r1, #25
     c00:	f7ff fffe 	bl	bcc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c04:	f85d fb04 	ldr.w	pc, [sp], #4

00000c08 <call_shifted_global_val()>:
     c08:	b500      	push	{lr}
     c0a:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c0e:	2119      	movs	r1, #25
     c10:	f7ff fffe 	bl	bcc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c14:	f85d fb04 	ldr.w	pc, [sp], #4

00000c18 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     c18:	4b05      	ldr	r3, [pc, #20]	; (c30 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     c1a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     c1e:	605a      	str	r2, [r3, #4]
     c20:	685b      	ldr	r3, [r3, #4]
     c22:	6802      	ldr	r2, [r0, #0]
     c24:	4013      	ands	r3, r2
     c26:	6842      	ldr	r2, [r0, #4]
     c28:	40d3      	lsrs	r3, r2
     c2a:	4a02      	ldr	r2, [pc, #8]	; (c34 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
     c2e:	4770      	bx	lr
     c30:	20022620 	.word	0x20022620
     c34:	20022500 	.word	0x20022500

00000c38 <call_shifted_const_ref()>:
     c38:	b500      	push	{lr}
     c3a:	b082      	sub	sp, #8
     c3c:	4b05      	ldr	r3, [pc, #20]	; (c54 <call_shifted_const_ref()+0x1c>)
     c3e:	f103 0308 	add.w	r3, r3, #8
     c42:	cb0c      	ldmia	r3, {r2, r3}
     c44:	e88d 000c 	stmia.w	sp, {r2, r3}
     c48:	4668      	mov	r0, sp
     c4a:	f7ff fffe 	bl	c18 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c4e:	b002      	add	sp, #8
     c50:	f85d fb04 	ldr.w	pc, [sp], #4
     c54:	00000000 	.word	0x00000000

00000c58 <call_shifted_var_ref()>:
     c58:	b500      	push	{lr}
     c5a:	b082      	sub	sp, #8
     c5c:	4b05      	ldr	r3, [pc, #20]	; (c74 <call_shifted_var_ref()+0x1c>)
     c5e:	f103 0310 	add.w	r3, r3, #16
     c62:	cb0c      	ldmia	r3, {r2, r3}
     c64:	e88d 000c 	stmia.w	sp, {r2, r3}
     c68:	4668      	mov	r0, sp
     c6a:	f7ff fffe 	bl	c18 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c6e:	b002      	add	sp, #8
     c70:	f85d fb04 	ldr.w	pc, [sp], #4
     c74:	00000000 	.word	0x00000000

00000c78 <call_shifted_global_ref()>:
     c78:	b500      	push	{lr}
     c7a:	b082      	sub	sp, #8
     c7c:	4b05      	ldr	r3, [pc, #20]	; (c94 <call_shifted_global_ref()+0x1c>)
     c7e:	f103 0308 	add.w	r3, r3, #8
     c82:	cb0c      	ldmia	r3, {r2, r3}
     c84:	e88d 000c 	stmia.w	sp, {r2, r3}
     c88:	4668      	mov	r0, sp
     c8a:	f7ff fffe 	bl	c18 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c8e:	b002      	add	sp, #8
     c90:	f85d fb04 	ldr.w	pc, [sp], #4
     c94:	00000000 	.word	0x00000000

00000c98 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     c98:	f010 0f40 	tst.w	r0, #64	; 0x40
     c9c:	4b02      	ldr	r3, [pc, #8]	; (ca8 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     c9e:	bf14      	ite	ne
     ca0:	2202      	movne	r2, #2
     ca2:	2204      	moveq	r2, #4
     ca4:	605a      	str	r2, [r3, #4]
     ca6:	4770      	bx	lr
     ca8:	200226c0 	.word	0x200226c0

00000cac <call_copy_bits_val()>:
     cac:	b500      	push	{lr}
     cae:	4b04      	ldr	r3, [pc, #16]	; (cc0 <call_copy_bits_val()+0x14>)
     cb0:	2240      	movs	r2, #64	; 0x40
     cb2:	605a      	str	r2, [r3, #4]
     cb4:	6858      	ldr	r0, [r3, #4]
     cb6:	f7ff fffe 	bl	c98 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     cba:	f85d fb04 	ldr.w	pc, [sp], #4
     cbe:	bf00      	nop
     cc0:	200226c0 	.word	0x200226c0

00000cc4 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     cc4:	6803      	ldr	r3, [r0, #0]
     cc6:	f013 0f40 	tst.w	r3, #64	; 0x40
     cca:	4b03      	ldr	r3, [pc, #12]	; (cd8 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
     ccc:	bf14      	ite	ne
     cce:	2202      	movne	r2, #2
     cd0:	2204      	moveq	r2, #4
     cd2:	605a      	str	r2, [r3, #4]
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop
     cd8:	200226c0 	.word	0x200226c0

00000cdc <call_copy_bits_ref()>:
     cdc:	b500      	push	{lr}
     cde:	b081      	sub	sp, #4
     ce0:	4b05      	ldr	r3, [pc, #20]	; (cf8 <call_copy_bits_ref()+0x1c>)
     ce2:	2240      	movs	r2, #64	; 0x40
     ce4:	605a      	str	r2, [r3, #4]
     ce6:	685b      	ldr	r3, [r3, #4]
     ce8:	9300      	str	r3, [sp, #0]
     cea:	4668      	mov	r0, sp
     cec:	f7ff fffe 	bl	cc4 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     cf0:	b001      	add	sp, #4
     cf2:	f85d fb04 	ldr.w	pc, [sp], #4
     cf6:	bf00      	nop
     cf8:	200226c0 	.word	0x200226c0

00000cfc <run>:
     cfc:	b530      	push	{r4, r5, lr}
     cfe:	4bb0      	ldr	r3, [pc, #704]	; (fc0 <run+0x2c4>)
     d00:	781b      	ldrb	r3, [r3, #0]
     d02:	b923      	cbnz	r3, d0e <run+0x12>
     d04:	4bae      	ldr	r3, [pc, #696]	; (fc0 <run+0x2c4>)
     d06:	4aaf      	ldr	r2, [pc, #700]	; (fc4 <run+0x2c8>)
     d08:	609a      	str	r2, [r3, #8]
     d0a:	2201      	movs	r2, #1
     d0c:	701a      	strb	r2, [r3, #0]
     d0e:	4bac      	ldr	r3, [pc, #688]	; (fc0 <run+0x2c4>)
     d10:	7b1b      	ldrb	r3, [r3, #12]
     d12:	b923      	cbnz	r3, d1e <run+0x22>
     d14:	4baa      	ldr	r3, [pc, #680]	; (fc0 <run+0x2c4>)
     d16:	4aac      	ldr	r2, [pc, #688]	; (fc8 <run+0x2cc>)
     d18:	615a      	str	r2, [r3, #20]
     d1a:	2201      	movs	r2, #1
     d1c:	731a      	strb	r2, [r3, #12]
     d1e:	4ba8      	ldr	r3, [pc, #672]	; (fc0 <run+0x2c4>)
     d20:	7e1b      	ldrb	r3, [r3, #24]
     d22:	b923      	cbnz	r3, d2e <run+0x32>
     d24:	4ba6      	ldr	r3, [pc, #664]	; (fc0 <run+0x2c4>)
     d26:	4aa9      	ldr	r2, [pc, #676]	; (fcc <run+0x2d0>)
     d28:	621a      	str	r2, [r3, #32]
     d2a:	2201      	movs	r2, #1
     d2c:	761a      	strb	r2, [r3, #24]
     d2e:	4ca4      	ldr	r4, [pc, #656]	; (fc0 <run+0x2c4>)
     d30:	2200      	movs	r2, #0
     d32:	68a1      	ldr	r1, [r4, #8]
     d34:	48a6      	ldr	r0, [pc, #664]	; (fd0 <run+0x2d4>)
     d36:	f7ff fffe 	bl	0 <do_test>
     d3a:	2201      	movs	r2, #1
     d3c:	68a1      	ldr	r1, [r4, #8]
     d3e:	48a5      	ldr	r0, [pc, #660]	; (fd4 <run+0x2d8>)
     d40:	f7ff fffe 	bl	0 <do_test>
     d44:	2202      	movs	r2, #2
     d46:	68a1      	ldr	r1, [r4, #8]
     d48:	48a3      	ldr	r0, [pc, #652]	; (fd8 <run+0x2dc>)
     d4a:	f7ff fffe 	bl	0 <do_test>
     d4e:	2203      	movs	r2, #3
     d50:	68a1      	ldr	r1, [r4, #8]
     d52:	48a2      	ldr	r0, [pc, #648]	; (fdc <run+0x2e0>)
     d54:	f7ff fffe 	bl	0 <do_test>
     d58:	2204      	movs	r2, #4
     d5a:	68a1      	ldr	r1, [r4, #8]
     d5c:	48a0      	ldr	r0, [pc, #640]	; (fe0 <run+0x2e4>)
     d5e:	f7ff fffe 	bl	0 <do_test>
     d62:	2205      	movs	r2, #5
     d64:	68a1      	ldr	r1, [r4, #8]
     d66:	489f      	ldr	r0, [pc, #636]	; (fe4 <run+0x2e8>)
     d68:	f7ff fffe 	bl	0 <do_test>
     d6c:	2206      	movs	r2, #6
     d6e:	68a1      	ldr	r1, [r4, #8]
     d70:	489d      	ldr	r0, [pc, #628]	; (fe8 <run+0x2ec>)
     d72:	f7ff fffe 	bl	0 <do_test>
     d76:	2207      	movs	r2, #7
     d78:	68a1      	ldr	r1, [r4, #8]
     d7a:	489c      	ldr	r0, [pc, #624]	; (fec <run+0x2f0>)
     d7c:	f7ff fffe 	bl	0 <do_test>
     d80:	2208      	movs	r2, #8
     d82:	68a1      	ldr	r1, [r4, #8]
     d84:	489a      	ldr	r0, [pc, #616]	; (ff0 <run+0x2f4>)
     d86:	f7ff fffe 	bl	0 <do_test>
     d8a:	2209      	movs	r2, #9
     d8c:	68a1      	ldr	r1, [r4, #8]
     d8e:	4899      	ldr	r0, [pc, #612]	; (ff4 <run+0x2f8>)
     d90:	f7ff fffe 	bl	0 <do_test>
     d94:	220a      	movs	r2, #10
     d96:	68a1      	ldr	r1, [r4, #8]
     d98:	4897      	ldr	r0, [pc, #604]	; (ff8 <run+0x2fc>)
     d9a:	f7ff fffe 	bl	0 <do_test>
     d9e:	220b      	movs	r2, #11
     da0:	68a1      	ldr	r1, [r4, #8]
     da2:	4896      	ldr	r0, [pc, #600]	; (ffc <run+0x300>)
     da4:	f7ff fffe 	bl	0 <do_test>
     da8:	220c      	movs	r2, #12
     daa:	68a1      	ldr	r1, [r4, #8]
     dac:	4894      	ldr	r0, [pc, #592]	; (1000 <run+0x304>)
     dae:	f7ff fffe 	bl	0 <do_test>
     db2:	220d      	movs	r2, #13
     db4:	68a1      	ldr	r1, [r4, #8]
     db6:	4893      	ldr	r0, [pc, #588]	; (1004 <run+0x308>)
     db8:	f7ff fffe 	bl	0 <do_test>
     dbc:	220e      	movs	r2, #14
     dbe:	68a1      	ldr	r1, [r4, #8]
     dc0:	4891      	ldr	r0, [pc, #580]	; (1008 <run+0x30c>)
     dc2:	f7ff fffe 	bl	0 <do_test>
     dc6:	220f      	movs	r2, #15
     dc8:	68a1      	ldr	r1, [r4, #8]
     dca:	4890      	ldr	r0, [pc, #576]	; (100c <run+0x310>)
     dcc:	f7ff fffe 	bl	0 <do_test>
     dd0:	2210      	movs	r2, #16
     dd2:	68a1      	ldr	r1, [r4, #8]
     dd4:	488e      	ldr	r0, [pc, #568]	; (1010 <run+0x314>)
     dd6:	f7ff fffe 	bl	0 <do_test>
     dda:	2211      	movs	r2, #17
     ddc:	68a1      	ldr	r1, [r4, #8]
     dde:	488d      	ldr	r0, [pc, #564]	; (1014 <run+0x318>)
     de0:	f7ff fffe 	bl	0 <do_test>
     de4:	2212      	movs	r2, #18
     de6:	68a1      	ldr	r1, [r4, #8]
     de8:	488b      	ldr	r0, [pc, #556]	; (1018 <run+0x31c>)
     dea:	f7ff fffe 	bl	0 <do_test>
     dee:	2213      	movs	r2, #19
     df0:	68a1      	ldr	r1, [r4, #8]
     df2:	488a      	ldr	r0, [pc, #552]	; (101c <run+0x320>)
     df4:	f7ff fffe 	bl	0 <do_test>
     df8:	2214      	movs	r2, #20
     dfa:	68a1      	ldr	r1, [r4, #8]
     dfc:	4888      	ldr	r0, [pc, #544]	; (1020 <run+0x324>)
     dfe:	f7ff fffe 	bl	0 <do_test>
     e02:	2215      	movs	r2, #21
     e04:	68a1      	ldr	r1, [r4, #8]
     e06:	4887      	ldr	r0, [pc, #540]	; (1024 <run+0x328>)
     e08:	f7ff fffe 	bl	0 <do_test>
     e0c:	2216      	movs	r2, #22
     e0e:	68a1      	ldr	r1, [r4, #8]
     e10:	4885      	ldr	r0, [pc, #532]	; (1028 <run+0x32c>)
     e12:	f7ff fffe 	bl	0 <do_test>
     e16:	2217      	movs	r2, #23
     e18:	68a1      	ldr	r1, [r4, #8]
     e1a:	4884      	ldr	r0, [pc, #528]	; (102c <run+0x330>)
     e1c:	f7ff fffe 	bl	0 <do_test>
     e20:	2218      	movs	r2, #24
     e22:	68a1      	ldr	r1, [r4, #8]
     e24:	4882      	ldr	r0, [pc, #520]	; (1030 <run+0x334>)
     e26:	f7ff fffe 	bl	0 <do_test>
     e2a:	2219      	movs	r2, #25
     e2c:	68a1      	ldr	r1, [r4, #8]
     e2e:	4881      	ldr	r0, [pc, #516]	; (1034 <run+0x338>)
     e30:	f7ff fffe 	bl	0 <do_test>
     e34:	221a      	movs	r2, #26
     e36:	68a1      	ldr	r1, [r4, #8]
     e38:	487f      	ldr	r0, [pc, #508]	; (1038 <run+0x33c>)
     e3a:	f7ff fffe 	bl	0 <do_test>
     e3e:	221b      	movs	r2, #27
     e40:	68a1      	ldr	r1, [r4, #8]
     e42:	487e      	ldr	r0, [pc, #504]	; (103c <run+0x340>)
     e44:	f7ff fffe 	bl	0 <do_test>
     e48:	221c      	movs	r2, #28
     e4a:	68a1      	ldr	r1, [r4, #8]
     e4c:	487c      	ldr	r0, [pc, #496]	; (1040 <run+0x344>)
     e4e:	f7ff fffe 	bl	0 <do_test>
     e52:	221d      	movs	r2, #29
     e54:	68a1      	ldr	r1, [r4, #8]
     e56:	487b      	ldr	r0, [pc, #492]	; (1044 <run+0x348>)
     e58:	f7ff fffe 	bl	0 <do_test>
     e5c:	221e      	movs	r2, #30
     e5e:	68a1      	ldr	r1, [r4, #8]
     e60:	4879      	ldr	r0, [pc, #484]	; (1048 <run+0x34c>)
     e62:	f7ff fffe 	bl	0 <do_test>
     e66:	221f      	movs	r2, #31
     e68:	68a1      	ldr	r1, [r4, #8]
     e6a:	4878      	ldr	r0, [pc, #480]	; (104c <run+0x350>)
     e6c:	f7ff fffe 	bl	0 <do_test>
     e70:	2220      	movs	r2, #32
     e72:	68a1      	ldr	r1, [r4, #8]
     e74:	4876      	ldr	r0, [pc, #472]	; (1050 <run+0x354>)
     e76:	f7ff fffe 	bl	0 <do_test>
     e7a:	2221      	movs	r2, #33	; 0x21
     e7c:	68a1      	ldr	r1, [r4, #8]
     e7e:	4875      	ldr	r0, [pc, #468]	; (1054 <run+0x358>)
     e80:	f7ff fffe 	bl	0 <do_test>
     e84:	2222      	movs	r2, #34	; 0x22
     e86:	68a1      	ldr	r1, [r4, #8]
     e88:	4873      	ldr	r0, [pc, #460]	; (1058 <run+0x35c>)
     e8a:	f7ff fffe 	bl	0 <do_test>
     e8e:	2223      	movs	r2, #35	; 0x23
     e90:	68a1      	ldr	r1, [r4, #8]
     e92:	4872      	ldr	r0, [pc, #456]	; (105c <run+0x360>)
     e94:	f7ff fffe 	bl	0 <do_test>
     e98:	2224      	movs	r2, #36	; 0x24
     e9a:	68a1      	ldr	r1, [r4, #8]
     e9c:	4870      	ldr	r0, [pc, #448]	; (1060 <run+0x364>)
     e9e:	f7ff fffe 	bl	0 <do_test>
     ea2:	2225      	movs	r2, #37	; 0x25
     ea4:	6961      	ldr	r1, [r4, #20]
     ea6:	486f      	ldr	r0, [pc, #444]	; (1064 <run+0x368>)
     ea8:	f7ff fffe 	bl	0 <do_test>
     eac:	2226      	movs	r2, #38	; 0x26
     eae:	6961      	ldr	r1, [r4, #20]
     eb0:	486d      	ldr	r0, [pc, #436]	; (1068 <run+0x36c>)
     eb2:	f7ff fffe 	bl	0 <do_test>
     eb6:	2227      	movs	r2, #39	; 0x27
     eb8:	6961      	ldr	r1, [r4, #20]
     eba:	486c      	ldr	r0, [pc, #432]	; (106c <run+0x370>)
     ebc:	f7ff fffe 	bl	0 <do_test>
     ec0:	2228      	movs	r2, #40	; 0x28
     ec2:	68a1      	ldr	r1, [r4, #8]
     ec4:	486a      	ldr	r0, [pc, #424]	; (1070 <run+0x374>)
     ec6:	f7ff fffe 	bl	0 <do_test>
     eca:	2229      	movs	r2, #41	; 0x29
     ecc:	68a1      	ldr	r1, [r4, #8]
     ece:	4869      	ldr	r0, [pc, #420]	; (1074 <run+0x378>)
     ed0:	f7ff fffe 	bl	0 <do_test>
     ed4:	222a      	movs	r2, #42	; 0x2a
     ed6:	68a1      	ldr	r1, [r4, #8]
     ed8:	4867      	ldr	r0, [pc, #412]	; (1078 <run+0x37c>)
     eda:	f7ff fffe 	bl	0 <do_test>
     ede:	222b      	movs	r2, #43	; 0x2b
     ee0:	68a1      	ldr	r1, [r4, #8]
     ee2:	4866      	ldr	r0, [pc, #408]	; (107c <run+0x380>)
     ee4:	f7ff fffe 	bl	0 <do_test>
     ee8:	222c      	movs	r2, #44	; 0x2c
     eea:	68a1      	ldr	r1, [r4, #8]
     eec:	4864      	ldr	r0, [pc, #400]	; (1080 <run+0x384>)
     eee:	f7ff fffe 	bl	0 <do_test>
     ef2:	222d      	movs	r2, #45	; 0x2d
     ef4:	6a21      	ldr	r1, [r4, #32]
     ef6:	4863      	ldr	r0, [pc, #396]	; (1084 <run+0x388>)
     ef8:	f7ff fffe 	bl	0 <do_test>
     efc:	222e      	movs	r2, #46	; 0x2e
     efe:	68a1      	ldr	r1, [r4, #8]
     f00:	4861      	ldr	r0, [pc, #388]	; (1088 <run+0x38c>)
     f02:	f7ff fffe 	bl	0 <do_test>
     f06:	222f      	movs	r2, #47	; 0x2f
     f08:	68a1      	ldr	r1, [r4, #8]
     f0a:	4860      	ldr	r0, [pc, #384]	; (108c <run+0x390>)
     f0c:	f7ff fffe 	bl	0 <do_test>
     f10:	2230      	movs	r2, #48	; 0x30
     f12:	68a1      	ldr	r1, [r4, #8]
     f14:	485e      	ldr	r0, [pc, #376]	; (1090 <run+0x394>)
     f16:	f7ff fffe 	bl	0 <do_test>
     f1a:	2231      	movs	r2, #49	; 0x31
     f1c:	68a1      	ldr	r1, [r4, #8]
     f1e:	485d      	ldr	r0, [pc, #372]	; (1094 <run+0x398>)
     f20:	f7ff fffe 	bl	0 <do_test>
     f24:	2232      	movs	r2, #50	; 0x32
     f26:	68a1      	ldr	r1, [r4, #8]
     f28:	485b      	ldr	r0, [pc, #364]	; (1098 <run+0x39c>)
     f2a:	f7ff fffe 	bl	0 <do_test>
     f2e:	2233      	movs	r2, #51	; 0x33
     f30:	68a1      	ldr	r1, [r4, #8]
     f32:	485a      	ldr	r0, [pc, #360]	; (109c <run+0x3a0>)
     f34:	f7ff fffe 	bl	0 <do_test>
     f38:	2234      	movs	r2, #52	; 0x34
     f3a:	68a1      	ldr	r1, [r4, #8]
     f3c:	4858      	ldr	r0, [pc, #352]	; (10a0 <run+0x3a4>)
     f3e:	f7ff fffe 	bl	0 <do_test>
     f42:	2235      	movs	r2, #53	; 0x35
     f44:	68a1      	ldr	r1, [r4, #8]
     f46:	4857      	ldr	r0, [pc, #348]	; (10a4 <run+0x3a8>)
     f48:	f7ff fffe 	bl	0 <do_test>
     f4c:	2236      	movs	r2, #54	; 0x36
     f4e:	68a1      	ldr	r1, [r4, #8]
     f50:	4855      	ldr	r0, [pc, #340]	; (10a8 <run+0x3ac>)
     f52:	f7ff fffe 	bl	0 <do_test>
     f56:	2237      	movs	r2, #55	; 0x37
     f58:	68a1      	ldr	r1, [r4, #8]
     f5a:	4854      	ldr	r0, [pc, #336]	; (10ac <run+0x3b0>)
     f5c:	f7ff fffe 	bl	0 <do_test>
     f60:	2238      	movs	r2, #56	; 0x38
     f62:	68a1      	ldr	r1, [r4, #8]
     f64:	4852      	ldr	r0, [pc, #328]	; (10b0 <run+0x3b4>)
     f66:	f7ff fffe 	bl	0 <do_test>
     f6a:	2239      	movs	r2, #57	; 0x39
     f6c:	68a1      	ldr	r1, [r4, #8]
     f6e:	4851      	ldr	r0, [pc, #324]	; (10b4 <run+0x3b8>)
     f70:	f7ff fffe 	bl	0 <do_test>
     f74:	223a      	movs	r2, #58	; 0x3a
     f76:	68a1      	ldr	r1, [r4, #8]
     f78:	484f      	ldr	r0, [pc, #316]	; (10b8 <run+0x3bc>)
     f7a:	f7ff fffe 	bl	0 <do_test>
     f7e:	223b      	movs	r2, #59	; 0x3b
     f80:	68a1      	ldr	r1, [r4, #8]
     f82:	484e      	ldr	r0, [pc, #312]	; (10bc <run+0x3c0>)
     f84:	f7ff fffe 	bl	0 <do_test>
     f88:	223c      	movs	r2, #60	; 0x3c
     f8a:	68a1      	ldr	r1, [r4, #8]
     f8c:	484c      	ldr	r0, [pc, #304]	; (10c0 <run+0x3c4>)
     f8e:	f7ff fffe 	bl	0 <do_test>
     f92:	223d      	movs	r2, #61	; 0x3d
     f94:	68a1      	ldr	r1, [r4, #8]
     f96:	484b      	ldr	r0, [pc, #300]	; (10c4 <run+0x3c8>)
     f98:	f7ff fffe 	bl	0 <do_test>
     f9c:	223e      	movs	r2, #62	; 0x3e
     f9e:	68a1      	ldr	r1, [r4, #8]
     fa0:	4849      	ldr	r0, [pc, #292]	; (10c8 <run+0x3cc>)
     fa2:	f7ff fffe 	bl	0 <do_test>
     fa6:	223f      	movs	r2, #63	; 0x3f
     fa8:	68a1      	ldr	r1, [r4, #8]
     faa:	4848      	ldr	r0, [pc, #288]	; (10cc <run+0x3d0>)
     fac:	f7ff fffe 	bl	0 <do_test>
     fb0:	2240      	movs	r2, #64	; 0x40
     fb2:	6961      	ldr	r1, [r4, #20]
     fb4:	4846      	ldr	r0, [pc, #280]	; (10d0 <run+0x3d4>)
     fb6:	f7ff fffe 	bl	0 <do_test>
     fba:	2241      	movs	r2, #65	; 0x41
     fbc:	6961      	ldr	r1, [r4, #20]
     fbe:	e089      	b.n	10d4 <run+0x3d8>
     fc0:	00000000 	.word	0x00000000
     fc4:	200226c4 	.word	0x200226c4
     fc8:	20022624 	.word	0x20022624
     fcc:	2002252c 	.word	0x2002252c
	...
    10d4:	487f      	ldr	r0, [pc, #508]	; (200 <do_test+0x200>)
    10d6:	f7ff fffe 	bl	0 <do_test>
    10da:	2242      	movs	r2, #66	; 0x42
    10dc:	6961      	ldr	r1, [r4, #20]
    10de:	487e      	ldr	r0, [pc, #504]	; (12d8 <run+0x5dc>)
    10e0:	f7ff fffe 	bl	0 <do_test>
    10e4:	2243      	movs	r2, #67	; 0x43
    10e6:	68a1      	ldr	r1, [r4, #8]
    10e8:	487c      	ldr	r0, [pc, #496]	; (12dc <run+0x5e0>)
    10ea:	f7ff fffe 	bl	0 <do_test>
    10ee:	2244      	movs	r2, #68	; 0x44
    10f0:	6a21      	ldr	r1, [r4, #32]
    10f2:	487b      	ldr	r0, [pc, #492]	; (12e0 <run+0x5e4>)
    10f4:	f7ff fffe 	bl	0 <do_test>
    10f8:	2245      	movs	r2, #69	; 0x45
    10fa:	6a21      	ldr	r1, [r4, #32]
    10fc:	4879      	ldr	r0, [pc, #484]	; (12e4 <run+0x5e8>)
    10fe:	f7ff fffe 	bl	0 <do_test>
    1102:	2246      	movs	r2, #70	; 0x46
    1104:	68a1      	ldr	r1, [r4, #8]
    1106:	4878      	ldr	r0, [pc, #480]	; (12e8 <run+0x5ec>)
    1108:	f7ff fffe 	bl	0 <do_test>
    110c:	2247      	movs	r2, #71	; 0x47
    110e:	68a1      	ldr	r1, [r4, #8]
    1110:	4876      	ldr	r0, [pc, #472]	; (12ec <run+0x5f0>)
    1112:	f7ff fffe 	bl	0 <do_test>
    1116:	2248      	movs	r2, #72	; 0x48
    1118:	6a21      	ldr	r1, [r4, #32]
    111a:	4875      	ldr	r0, [pc, #468]	; (12f0 <run+0x5f4>)
    111c:	f7ff fffe 	bl	0 <do_test>
    1120:	2249      	movs	r2, #73	; 0x49
    1122:	6a21      	ldr	r1, [r4, #32]
    1124:	4873      	ldr	r0, [pc, #460]	; (12f4 <run+0x5f8>)
    1126:	f7ff fffe 	bl	0 <do_test>
    112a:	224a      	movs	r2, #74	; 0x4a
    112c:	68a1      	ldr	r1, [r4, #8]
    112e:	4872      	ldr	r0, [pc, #456]	; (12f8 <run+0x5fc>)
    1130:	f7ff fffe 	bl	0 <do_test>
    1134:	224b      	movs	r2, #75	; 0x4b
    1136:	68a1      	ldr	r1, [r4, #8]
    1138:	4870      	ldr	r0, [pc, #448]	; (12fc <run+0x600>)
    113a:	f7ff fffe 	bl	0 <do_test>
    113e:	224c      	movs	r2, #76	; 0x4c
    1140:	68a1      	ldr	r1, [r4, #8]
    1142:	486f      	ldr	r0, [pc, #444]	; (1300 <run+0x604>)
    1144:	f7ff fffe 	bl	0 <do_test>
    1148:	224d      	movs	r2, #77	; 0x4d
    114a:	68a1      	ldr	r1, [r4, #8]
    114c:	486d      	ldr	r0, [pc, #436]	; (1304 <run+0x608>)
    114e:	f7ff fffe 	bl	0 <do_test>
    1152:	224e      	movs	r2, #78	; 0x4e
    1154:	68a1      	ldr	r1, [r4, #8]
    1156:	486c      	ldr	r0, [pc, #432]	; (1308 <run+0x60c>)
    1158:	f7ff fffe 	bl	0 <do_test>
    115c:	224f      	movs	r2, #79	; 0x4f
    115e:	68a1      	ldr	r1, [r4, #8]
    1160:	486a      	ldr	r0, [pc, #424]	; (130c <run+0x610>)
    1162:	f7ff fffe 	bl	0 <do_test>
    1166:	4d6a      	ldr	r5, [pc, #424]	; (1310 <run+0x614>)
    1168:	2250      	movs	r2, #80	; 0x50
    116a:	68a1      	ldr	r1, [r4, #8]
    116c:	4628      	mov	r0, r5
    116e:	f7ff fffe 	bl	0 <do_test>
    1172:	2251      	movs	r2, #81	; 0x51
    1174:	68a1      	ldr	r1, [r4, #8]
    1176:	4628      	mov	r0, r5
    1178:	f7ff fffe 	bl	0 <do_test>
    117c:	2252      	movs	r2, #82	; 0x52
    117e:	68a1      	ldr	r1, [r4, #8]
    1180:	4864      	ldr	r0, [pc, #400]	; (1314 <run+0x618>)
    1182:	f7ff fffe 	bl	0 <do_test>
    1186:	2253      	movs	r2, #83	; 0x53
    1188:	68a1      	ldr	r1, [r4, #8]
    118a:	4863      	ldr	r0, [pc, #396]	; (1318 <run+0x61c>)
    118c:	f7ff fffe 	bl	0 <do_test>
    1190:	2254      	movs	r2, #84	; 0x54
    1192:	68a1      	ldr	r1, [r4, #8]
    1194:	4861      	ldr	r0, [pc, #388]	; (131c <run+0x620>)
    1196:	f7ff fffe 	bl	0 <do_test>
    119a:	4d61      	ldr	r5, [pc, #388]	; (1320 <run+0x624>)
    119c:	2255      	movs	r2, #85	; 0x55
    119e:	68a1      	ldr	r1, [r4, #8]
    11a0:	4628      	mov	r0, r5
    11a2:	f7ff fffe 	bl	0 <do_test>
    11a6:	2256      	movs	r2, #86	; 0x56
    11a8:	68a1      	ldr	r1, [r4, #8]
    11aa:	485e      	ldr	r0, [pc, #376]	; (1324 <run+0x628>)
    11ac:	f7ff fffe 	bl	0 <do_test>
    11b0:	2257      	movs	r2, #87	; 0x57
    11b2:	68a1      	ldr	r1, [r4, #8]
    11b4:	4628      	mov	r0, r5
    11b6:	f7ff fffe 	bl	0 <do_test>
    11ba:	2258      	movs	r2, #88	; 0x58
    11bc:	68a1      	ldr	r1, [r4, #8]
    11be:	485a      	ldr	r0, [pc, #360]	; (1328 <run+0x62c>)
    11c0:	f7ff fffe 	bl	0 <do_test>
    11c4:	2259      	movs	r2, #89	; 0x59
    11c6:	68a1      	ldr	r1, [r4, #8]
    11c8:	4858      	ldr	r0, [pc, #352]	; (132c <run+0x630>)
    11ca:	f7ff fffe 	bl	0 <do_test>
    11ce:	225a      	movs	r2, #90	; 0x5a
    11d0:	6a21      	ldr	r1, [r4, #32]
    11d2:	4857      	ldr	r0, [pc, #348]	; (1330 <run+0x634>)
    11d4:	f7ff fffe 	bl	0 <do_test>
    11d8:	225b      	movs	r2, #91	; 0x5b
    11da:	6a21      	ldr	r1, [r4, #32]
    11dc:	4855      	ldr	r0, [pc, #340]	; (1334 <run+0x638>)
    11de:	f7ff fffe 	bl	0 <do_test>
    11e2:	225c      	movs	r2, #92	; 0x5c
    11e4:	68a1      	ldr	r1, [r4, #8]
    11e6:	4854      	ldr	r0, [pc, #336]	; (1338 <run+0x63c>)
    11e8:	f7ff fffe 	bl	0 <do_test>
    11ec:	225d      	movs	r2, #93	; 0x5d
    11ee:	6a21      	ldr	r1, [r4, #32]
    11f0:	4852      	ldr	r0, [pc, #328]	; (133c <run+0x640>)
    11f2:	f7ff fffe 	bl	0 <do_test>
    11f6:	225e      	movs	r2, #94	; 0x5e
    11f8:	6a21      	ldr	r1, [r4, #32]
    11fa:	4851      	ldr	r0, [pc, #324]	; (1340 <run+0x644>)
    11fc:	f7ff fffe 	bl	0 <do_test>
    1200:	225f      	movs	r2, #95	; 0x5f
    1202:	68a1      	ldr	r1, [r4, #8]
    1204:	484f      	ldr	r0, [pc, #316]	; (1344 <run+0x648>)
    1206:	f7ff fffe 	bl	0 <do_test>
    120a:	2260      	movs	r2, #96	; 0x60
    120c:	68a1      	ldr	r1, [r4, #8]
    120e:	484e      	ldr	r0, [pc, #312]	; (1348 <run+0x64c>)
    1210:	f7ff fffe 	bl	0 <do_test>
    1214:	2261      	movs	r2, #97	; 0x61
    1216:	68a1      	ldr	r1, [r4, #8]
    1218:	484c      	ldr	r0, [pc, #304]	; (134c <run+0x650>)
    121a:	f7ff fffe 	bl	0 <do_test>
    121e:	2262      	movs	r2, #98	; 0x62
    1220:	68a1      	ldr	r1, [r4, #8]
    1222:	484b      	ldr	r0, [pc, #300]	; (1350 <run+0x654>)
    1224:	f7ff fffe 	bl	0 <do_test>
    1228:	2263      	movs	r2, #99	; 0x63
    122a:	6a21      	ldr	r1, [r4, #32]
    122c:	4849      	ldr	r0, [pc, #292]	; (1354 <run+0x658>)
    122e:	f7ff fffe 	bl	0 <do_test>
    1232:	2264      	movs	r2, #100	; 0x64
    1234:	6a21      	ldr	r1, [r4, #32]
    1236:	4848      	ldr	r0, [pc, #288]	; (1358 <run+0x65c>)
    1238:	f7ff fffe 	bl	0 <do_test>
    123c:	2265      	movs	r2, #101	; 0x65
    123e:	6a21      	ldr	r1, [r4, #32]
    1240:	4846      	ldr	r0, [pc, #280]	; (135c <run+0x660>)
    1242:	f7ff fffe 	bl	0 <do_test>
    1246:	2266      	movs	r2, #102	; 0x66
    1248:	6a21      	ldr	r1, [r4, #32]
    124a:	4845      	ldr	r0, [pc, #276]	; (1360 <run+0x664>)
    124c:	f7ff fffe 	bl	0 <do_test>
    1250:	2267      	movs	r2, #103	; 0x67
    1252:	6a21      	ldr	r1, [r4, #32]
    1254:	4843      	ldr	r0, [pc, #268]	; (1364 <run+0x668>)
    1256:	f7ff fffe 	bl	0 <do_test>
    125a:	2268      	movs	r2, #104	; 0x68
    125c:	6a21      	ldr	r1, [r4, #32]
    125e:	4842      	ldr	r0, [pc, #264]	; (1368 <run+0x66c>)
    1260:	f7ff fffe 	bl	0 <do_test>
    1264:	2269      	movs	r2, #105	; 0x69
    1266:	68a1      	ldr	r1, [r4, #8]
    1268:	4840      	ldr	r0, [pc, #256]	; (136c <run+0x670>)
    126a:	f7ff fffe 	bl	0 <do_test>
    126e:	226a      	movs	r2, #106	; 0x6a
    1270:	68a1      	ldr	r1, [r4, #8]
    1272:	483f      	ldr	r0, [pc, #252]	; (1370 <run+0x674>)
    1274:	f7ff fffe 	bl	0 <do_test>
    1278:	226b      	movs	r2, #107	; 0x6b
    127a:	68a1      	ldr	r1, [r4, #8]
    127c:	483d      	ldr	r0, [pc, #244]	; (1374 <run+0x678>)
    127e:	f7ff fffe 	bl	0 <do_test>
    1282:	226c      	movs	r2, #108	; 0x6c
    1284:	68a1      	ldr	r1, [r4, #8]
    1286:	483c      	ldr	r0, [pc, #240]	; (1378 <run+0x67c>)
    1288:	f7ff fffe 	bl	0 <do_test>
    128c:	226d      	movs	r2, #109	; 0x6d
    128e:	68a1      	ldr	r1, [r4, #8]
    1290:	483a      	ldr	r0, [pc, #232]	; (137c <run+0x680>)
    1292:	f7ff fffe 	bl	0 <do_test>
    1296:	226e      	movs	r2, #110	; 0x6e
    1298:	68a1      	ldr	r1, [r4, #8]
    129a:	4839      	ldr	r0, [pc, #228]	; (1380 <run+0x684>)
    129c:	f7ff fffe 	bl	0 <do_test>
    12a0:	226f      	movs	r2, #111	; 0x6f
    12a2:	68a1      	ldr	r1, [r4, #8]
    12a4:	4837      	ldr	r0, [pc, #220]	; (1384 <run+0x688>)
    12a6:	f7ff fffe 	bl	0 <do_test>
    12aa:	2270      	movs	r2, #112	; 0x70
    12ac:	68a1      	ldr	r1, [r4, #8]
    12ae:	4836      	ldr	r0, [pc, #216]	; (1388 <run+0x68c>)
    12b0:	f7ff fffe 	bl	0 <do_test>
    12b4:	2271      	movs	r2, #113	; 0x71
    12b6:	68a1      	ldr	r1, [r4, #8]
    12b8:	4834      	ldr	r0, [pc, #208]	; (138c <run+0x690>)
    12ba:	f7ff fffe 	bl	0 <do_test>
    12be:	2272      	movs	r2, #114	; 0x72
    12c0:	68a1      	ldr	r1, [r4, #8]
    12c2:	4833      	ldr	r0, [pc, #204]	; (1390 <run+0x694>)
    12c4:	f7ff fffe 	bl	0 <do_test>
    12c8:	2273      	movs	r2, #115	; 0x73
    12ca:	68a1      	ldr	r1, [r4, #8]
    12cc:	4831      	ldr	r0, [pc, #196]	; (1394 <run+0x698>)
    12ce:	f7ff fffe 	bl	0 <do_test>
    12d2:	bd30      	pop	{r4, r5, pc}
	...

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	0000 0000                                   ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	0000 0000                                   ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	0000 0000                                   ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
