
regbits.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <zero_reg()>:
       0:	c7 04 25 c4 02 70 00 	movl   $0x0,0x7002c4
       7:	00 00 00 00 
       b:	c3                   	retq   

000000000000000c <zero_array()>:
       c:	c7 04 25 2c 01 70 00 	movl   $0x0,0x70012c
      13:	00 00 00 00 
      17:	c3                   	retq   

0000000000000018 <set_singl_bits_operator()>:
      18:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      1f:	83 c8 40             	or     $0x40,%eax
      22:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      29:	c3                   	retq   

000000000000002a <set_singl_bits_method()>:
      2a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      31:	83 c8 40             	or     $0x40,%eax
      34:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      3b:	c3                   	retq   

000000000000003c <clr_singl_bits_operator()>:
      3c:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      43:	83 e0 bf             	and    $0xffffffbf,%eax
      46:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      4d:	c3                   	retq   

000000000000004e <clr_singl_bits_method()>:
      4e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      55:	83 e0 bf             	and    $0xffffffbf,%eax
      58:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      5f:	c3                   	retq   

0000000000000060 <set_singl_mskd_operator()>:
      60:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      67:	83 c8 02             	or     $0x2,%eax
      6a:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      71:	c3                   	retq   

0000000000000072 <set_singl_mskd_method()>:
      72:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      79:	83 c8 02             	or     $0x2,%eax
      7c:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      83:	c3                   	retq   

0000000000000084 <clr_singl_mskd_operator()>:
      84:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      8b:	83 e0 fd             	and    $0xfffffffd,%eax
      8e:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      95:	c3                   	retq   

0000000000000096 <clr_singl_mskd_method()>:
      96:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      9d:	83 e0 fd             	and    $0xfffffffd,%eax
      a0:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      a7:	c3                   	retq   

00000000000000a8 <equ_singl_bits_operator()>:
      a8:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
      af:	40 00 00 00 
      b3:	c3                   	retq   

00000000000000b4 <equ_singl_bits_method()>:
      b4:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
      bb:	40 00 00 00 
      bf:	c3                   	retq   

00000000000000c0 <equ_singl_mskd_operator()>:
      c0:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
      c7:	02 00 00 00 
      cb:	c3                   	retq   

00000000000000cc <equ_singl_mskd_method()>:
      cc:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
      d3:	02 00 00 00 
      d7:	c3                   	retq   

00000000000000d8 <flp_singl_bits_operator()>:
      d8:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      df:	83 f0 40             	xor    $0x40,%eax
      e2:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      e9:	c3                   	retq   

00000000000000ea <flp_singl_bits_method()>:
      ea:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      f1:	83 f0 40             	xor    $0x40,%eax
      f4:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      fb:	c3                   	retq   

00000000000000fc <flp_singl_mskd_operator()>:
      fc:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     103:	83 f0 02             	xor    $0x2,%eax
     106:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     10d:	c3                   	retq   

000000000000010e <flp_singl_mskd_method()>:
     10e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     115:	83 f0 02             	xor    $0x2,%eax
     118:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     11f:	c3                   	retq   

0000000000000120 <ins_singl_mskd_operator()>:
     120:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     127:	83 e0 f9             	and    $0xfffffff9,%eax
     12a:	83 c8 04             	or     $0x4,%eax
     12d:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     134:	c3                   	retq   

0000000000000135 <ins_singl_mskd_method()>:
     135:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     13c:	83 e0 f9             	and    $0xfffffff9,%eax
     13f:	83 c8 04             	or     $0x4,%eax
     142:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     149:	c3                   	retq   

000000000000014a <set_multi_bits_operator()>:
     14a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     151:	83 c8 21             	or     $0x21,%eax
     154:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     15b:	c3                   	retq   

000000000000015c <set_multi_bits_method()>:
     15c:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     163:	83 c8 21             	or     $0x21,%eax
     166:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     16d:	c3                   	retq   

000000000000016e <ins_multi_mskd_operator()>:
     16e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     175:	25 79 f0 ff ff       	and    $0xfffff079,%eax
     17a:	0d 82 01 00 00       	or     $0x182,%eax
     17f:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     186:	c3                   	retq   

0000000000000187 <ins_multi_mskd_method()>:
     187:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     18e:	25 79 f0 ff ff       	and    $0xfffff079,%eax
     193:	0d 82 01 00 00       	or     $0x182,%eax
     198:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     19f:	c3                   	retq   

00000000000001a0 <equ_multi_bits_operator()>:
     1a0:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     1a7:	60 00 00 00 
     1ab:	c3                   	retq   

00000000000001ac <equ_multi_bits_method()>:
     1ac:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     1b3:	60 00 00 00 
     1b7:	c3                   	retq   

00000000000001b8 <equ_multi_mskd_operator()>:
     1b8:	c7 04 25 c4 02 70 00 	movl   $0x308,0x7002c4
     1bf:	08 03 00 00 
     1c3:	c3                   	retq   

00000000000001c4 <equ_multi_mskd_method()>:
     1c4:	c7 04 25 c4 02 70 00 	movl   $0x308,0x7002c4
     1cb:	08 03 00 00 
     1cf:	c3                   	retq   

00000000000001d0 <equ_bits_mskd_operator()>:
     1d0:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     1d7:	22 00 00 00 
     1db:	c3                   	retq   

00000000000001dc <equ_bits_mskd_method()>:
     1dc:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     1e3:	22 00 00 00 
     1e7:	c3                   	retq   

00000000000001e8 <equ_mskd_bits_operator()>:
     1e8:	c7 04 25 c4 02 70 00 	movl   $0x44,0x7002c4
     1ef:	44 00 00 00 
     1f3:	c3                   	retq   

00000000000001f4 <equ_mskd_bits_method()>:
     1f4:	c7 04 25 c4 02 70 00 	movl   $0x44,0x7002c4
     1fb:	44 00 00 00 
     1ff:	c3                   	retq   

0000000000000200 <equ_bits_var()>:
     200:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     207:	40 00 00 00 
     20b:	c7 04 25 c4 02 70 00 	movl   $0x1,0x7002c4
     212:	01 00 00 00 
     216:	c3                   	retq   

0000000000000217 <equ_mskd_var()>:
     217:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     21e:	02 00 00 00 
     222:	c7 04 25 c4 02 70 00 	movl   $0x180,0x7002c4
     229:	80 01 00 00 
     22d:	c3                   	retq   

000000000000022e <cmp_equ_zero()>:
     22e:	c7 04 25 c4 02 70 00 	movl   $0x0,0x7002c4
     235:	00 00 00 00 
     239:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     240:	85 c0                	test   %eax,%eax
     242:	75 0c                	jne    250 <cmp_equ_zero()+0x22>
     244:	c7 04 25 24 02 70 00 	movl   $0x3a000000,0x700224
     24b:	00 00 00 3a 
     24f:	c3                   	retq   
     250:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     257:	00 00 00 22 
     25b:	c3                   	retq   

000000000000025c <cmp_neq_zero()>:
     25c:	c7 04 25 c4 02 70 00 	movl   $0x0,0x7002c4
     263:	00 00 00 00 
     267:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     26e:	85 c0                	test   %eax,%eax
     270:	74 0c                	je     27e <cmp_neq_zero()+0x22>
     272:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     279:	04 00 00 00 
     27d:	c3                   	retq   
     27e:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     285:	20 00 00 00 
     289:	c3                   	retq   

000000000000028a <cmp_equ_bits()>:
     28a:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     291:	40 00 00 00 
     295:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     29c:	a8 40                	test   $0x40,%al
     29e:	74 0c                	je     2ac <cmp_equ_bits()+0x22>
     2a0:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     2a7:	00 00 00 16 
     2ab:	c3                   	retq   
     2ac:	c7 04 25 24 02 70 00 	movl   $0x1a000000,0x700224
     2b3:	00 00 00 1a 
     2b7:	c3                   	retq   

00000000000002b8 <cmp_neq_bits()>:
     2b8:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     2bf:	40 00 00 00 
     2c3:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     2ca:	a8 40                	test   $0x40,%al
     2cc:	75 0c                	jne    2da <cmp_neq_bits()+0x22>
     2ce:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     2d5:	02 00 00 00 
     2d9:	c3                   	retq   
     2da:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     2e1:	20 00 00 00 
     2e5:	c3                   	retq   

00000000000002e6 <cmp_equ_multi_bits()>:
     2e6:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     2ed:	60 00 00 00 
     2f1:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     2f8:	83 e0 60             	and    $0x60,%eax
     2fb:	83 f8 60             	cmp    $0x60,%eax
     2fe:	75 0c                	jne    30c <cmp_equ_multi_bits()+0x26>
     300:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     307:	00 00 00 22 
     30b:	c3                   	retq   
     30c:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     313:	00 00 00 2e 
     317:	c3                   	retq   

0000000000000318 <cmp_neq_multi_bits()>:
     318:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     31f:	60 00 00 00 
     323:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     32a:	83 e0 60             	and    $0x60,%eax
     32d:	83 f8 60             	cmp    $0x60,%eax
     330:	74 0c                	je     33e <cmp_neq_multi_bits()+0x26>
     332:	c7 04 25 24 02 70 00 	movl   $0x3a000000,0x700224
     339:	00 00 00 3a 
     33d:	c3                   	retq   
     33e:	c7 04 25 24 02 70 00 	movl   $0x3e000000,0x700224
     345:	00 00 00 3e 
     349:	c3                   	retq   

000000000000034a <cmp_equ_mskd()>:
     34a:	c7 04 25 c4 02 70 00 	movl   $0x1d000,0x7002c4
     351:	00 d0 01 00 
     355:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     35c:	25 00 f0 01 00       	and    $0x1f000,%eax
     361:	3d 00 10 01 00       	cmp    $0x11000,%eax
     366:	75 19                	jne    381 <cmp_equ_mskd()+0x37>
     368:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     36f:	25 ff ff ff c1       	and    $0xc1ffffff,%eax
     374:	0d 00 00 00 0e       	or     $0xe000000,%eax
     379:	89 04 25 24 02 70 00 	mov    %eax,0x700224
     380:	c3                   	retq   
     381:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     388:	25 ff ff ff c1       	and    $0xc1ffffff,%eax
     38d:	0d 00 00 00 22       	or     $0x22000000,%eax
     392:	89 04 25 24 02 70 00 	mov    %eax,0x700224
     399:	c3                   	retq   

000000000000039a <cmp_neq_mskd()>:
     39a:	c7 04 25 c4 02 70 00 	movl   $0x1d000,0x7002c4
     3a1:	00 d0 01 00 
     3a5:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3ac:	25 00 f0 01 00       	and    $0x1f000,%eax
     3b1:	3d 00 10 01 00       	cmp    $0x11000,%eax
     3b6:	74 15                	je     3cd <cmp_neq_mskd()+0x33>
     3b8:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3bf:	83 e0 f9             	and    $0xfffffff9,%eax
     3c2:	83 c8 04             	or     $0x4,%eax
     3c5:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     3cc:	c3                   	retq   
     3cd:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3d4:	83 c8 40             	or     $0x40,%eax
     3d7:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     3de:	c3                   	retq   

00000000000003df <cmp_equ_reg()>:
     3df:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     3e6:	22 00 00 00 
     3ea:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3f1:	83 f8 22             	cmp    $0x22,%eax
     3f4:	75 0c                	jne    402 <cmp_equ_reg()+0x23>
     3f6:	c7 04 25 24 02 70 00 	movl   $0x2a000000,0x700224
     3fd:	00 00 00 2a 
     401:	c3                   	retq   
     402:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     409:	00 00 00 2e 
     40d:	c3                   	retq   

000000000000040e <cmp_neq_reg()>:
     40e:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     415:	22 00 00 00 
     419:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     420:	83 f8 22             	cmp    $0x22,%eax
     423:	74 0c                	je     431 <cmp_neq_reg()+0x23>
     425:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     42c:	02 00 00 00 
     430:	c3                   	retq   
     431:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     438:	20 00 00 00 
     43c:	c3                   	retq   

000000000000043d <constexpr_bits_array()>:
     43d:	c7 04 25 2c 01 70 00 	movl   $0x6,0x70012c
     444:	06 00 00 00 
     448:	c7 04 25 a0 01 70 00 	movl   $0x2000,0x7001a0
     44f:	00 20 00 00 
     453:	c3                   	retq   

0000000000000454 <runtime_bits_array()>:
     454:	c7 44 24 fc 03 00 00 	movl   $0x3,-0x4(%rsp)
     45b:	00 
     45c:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
     460:	89 c0                	mov    %eax,%eax
     462:	c7 04 85 20 01 70 00 	movl   $0x21,0x700120(,%rax,4)
     469:	21 00 00 00 
     46d:	c7 44 24 fc 07 00 00 	movl   $0x7,-0x4(%rsp)
     474:	00 
     475:	8b 4c 24 fc          	mov    -0x4(%rsp),%ecx
     479:	b8 01 00 00 00       	mov    $0x1,%eax
     47e:	d3 e0                	shl    %cl,%eax
     480:	89 04 25 a0 01 70 00 	mov    %eax,0x7001a0
     487:	c3                   	retq   

0000000000000488 <prescaler_low()>:
     488:	c7 04 25 24 02 70 00 	movl   $0x77,0x700224
     48f:	77 00 00 00 
     493:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     49a:	83 e0 7f             	and    $0x7f,%eax
     49d:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     4a4:	c3                   	retq   

00000000000004a5 <prescaler_high()>:
     4a5:	c7 04 25 24 02 70 00 	movl   $0x3a000000,0x700224
     4ac:	00 00 00 3a 
     4b0:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     4b7:	25 00 00 00 3e       	and    $0x3e000000,%eax
     4bc:	c1 e8 19             	shr    $0x19,%eax
     4bf:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     4c6:	c3                   	retq   

00000000000004c7 <reg_mskd_lss()>:
     4c7:	c7 04 25 24 02 70 00 	movl   $0x36000000,0x700224
     4ce:	00 00 00 36 
     4d2:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     4d9:	25 00 00 00 3e       	and    $0x3e000000,%eax
     4de:	3d ff ff ff 37       	cmp    $0x37ffffff,%eax
     4e3:	77 0c                	ja     4f1 <reg_mskd_lss()+0x2a>
     4e5:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     4ec:	02 00 00 00 
     4f0:	c3                   	retq   
     4f1:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     4f8:	04 00 00 00 
     4fc:	c3                   	retq   

00000000000004fd <reg_mskd_leq()>:
     4fd:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     504:	00 00 00 2e 
     508:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     50f:	25 00 00 00 3e       	and    $0x3e000000,%eax
     514:	3d 00 00 00 2e       	cmp    $0x2e000000,%eax
     519:	77 1f                	ja     53a <reg_mskd_leq()+0x3d>
     51b:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     522:	25 00 00 00 3e       	and    $0x3e000000,%eax
     527:	3d 00 00 00 30       	cmp    $0x30000000,%eax
     52c:	77 0c                	ja     53a <reg_mskd_leq()+0x3d>
     52e:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     535:	02 00 00 00 
     539:	c3                   	retq   
     53a:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     541:	04 00 00 00 
     545:	c3                   	retq   

0000000000000546 <reg_mskd_gtr()>:
     546:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     54d:	00 00 00 26 
     551:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     558:	25 00 00 00 3e       	and    $0x3e000000,%eax
     55d:	3d 00 00 00 24       	cmp    $0x24000000,%eax
     562:	76 0c                	jbe    570 <reg_mskd_gtr()+0x2a>
     564:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     56b:	02 00 00 00 
     56f:	c3                   	retq   
     570:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     577:	04 00 00 00 
     57b:	c3                   	retq   

000000000000057c <reg_mskd_geq()>:
     57c:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     583:	00 00 00 22 
     587:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     58e:	25 00 00 00 3e       	and    $0x3e000000,%eax
     593:	3d ff ff ff 1f       	cmp    $0x1fffffff,%eax
     598:	76 1f                	jbe    5b9 <reg_mskd_geq()+0x3d>
     59a:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     5a1:	25 00 00 00 3e       	and    $0x3e000000,%eax
     5a6:	3d ff ff ff 21       	cmp    $0x21ffffff,%eax
     5ab:	76 0c                	jbe    5b9 <reg_mskd_geq()+0x3d>
     5ad:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5b4:	02 00 00 00 
     5b8:	c3                   	retq   
     5b9:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     5c0:	04 00 00 00 
     5c4:	c3                   	retq   

00000000000005c5 <pos_cmp_eq()>:
     5c5:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5cc:	02 00 00 00 
     5d0:	c3                   	retq   

00000000000005d1 <pos_cmp_ne()>:
     5d1:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5d8:	02 00 00 00 
     5dc:	c3                   	retq   

00000000000005dd <bits_extract_eq()>:
     5dd:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     5e4:	40 00 00 00 
     5e8:	83 3c 25 c4 02 70 00 	cmpl   $0x40,0x7002c4
     5ef:	40 
     5f0:	75 0c                	jne    5fe <bits_extract_eq()+0x21>
     5f2:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5f9:	02 00 00 00 
     5fd:	c3                   	retq   
     5fe:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     605:	04 00 00 00 
     609:	c3                   	retq   

000000000000060a <mskd_extract_eq()>:
     60a:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     611:	02 00 00 00 
     615:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     61c:	83 f8 02             	cmp    $0x2,%eax
     61f:	75 0c                	jne    62d <mskd_extract_eq()+0x23>
     621:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     628:	20 00 00 00 
     62c:	c3                   	retq   
     62d:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     634:	40 00 00 00 
     638:	c3                   	retq   

0000000000000639 <mskd_extract_ne()>:
     639:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     640:	04 00 00 00 
     644:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     64b:	83 f8 04             	cmp    $0x4,%eax
     64e:	74 0c                	je     65c <mskd_extract_ne()+0x23>
     650:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     657:	20 00 00 00 
     65b:	c3                   	retq   
     65c:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     663:	40 00 00 00 
     667:	c3                   	retq   

0000000000000668 <mskd_extract_lss()>:
     668:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     66f:	00 00 00 16 
     673:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     67a:	3d ff ff ff 17       	cmp    $0x17ffffff,%eax
     67f:	77 0c                	ja     68d <mskd_extract_lss()+0x25>
     681:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     688:	20 00 00 00 
     68c:	c3                   	retq   
     68d:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     694:	40 00 00 00 
     698:	c3                   	retq   

0000000000000699 <mskd_extract_leq()>:
     699:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     6a0:	00 00 00 2e 
     6a4:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     6ab:	3d 00 00 00 2e       	cmp    $0x2e000000,%eax
     6b0:	77 0c                	ja     6be <mskd_extract_leq()+0x25>
     6b2:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     6b9:	20 00 00 00 
     6bd:	c3                   	retq   
     6be:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     6c5:	40 00 00 00 
     6c9:	c3                   	retq   

00000000000006ca <mskd_extract_gtr()>:
     6ca:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     6d1:	00 00 00 26 
     6d5:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     6dc:	3d 00 00 00 24       	cmp    $0x24000000,%eax
     6e1:	76 0c                	jbe    6ef <mskd_extract_gtr()+0x25>
     6e3:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     6ea:	20 00 00 00 
     6ee:	c3                   	retq   
     6ef:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     6f6:	40 00 00 00 
     6fa:	c3                   	retq   

00000000000006fb <set_bits_global()>:
     6fb:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     702:	83 c8 40             	or     $0x40,%eax
     705:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     70c:	c3                   	retq   

000000000000070d <ins_mskd_global()>:
     70d:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     714:	83 e0 f9             	and    $0xfffffff9,%eax
     717:	83 c8 02             	or     $0x2,%eax
     71a:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     721:	c3                   	retq   

0000000000000722 <assign_array_global()>:
     722:	c7 04 25 2c 01 70 00 	movl   $0xbd,0x70012c
     729:	bd 00 00 00 
     72d:	c3                   	retq   

000000000000072e <shifted_global()>:
     72e:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     735:	00 00 00 2e 
     739:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     740:	25 00 00 00 3e       	and    $0x3e000000,%eax
     745:	c1 e8 19             	shr    $0x19,%eax
     748:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     74f:	c3                   	retq   

0000000000000750 <assign_register_global()>:
     750:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     757:	04 00 00 00 
     75b:	c3                   	retq   

000000000000075c <copy_bits_equ()>:
     75c:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     763:	40 00 00 00 
     767:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     76e:	a8 40                	test   $0x40,%al
     770:	74 0c                	je     77e <copy_bits_equ()+0x22>
     772:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     779:	02 00 00 00 
     77d:	c3                   	retq   
     77e:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     785:	04 00 00 00 
     789:	c3                   	retq   

000000000000078a <copy_bits_neq()>:
     78a:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     791:	40 00 00 00 
     795:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     79c:	a8 40                	test   $0x40,%al
     79e:	75 0c                	jne    7ac <copy_bits_neq()+0x22>
     7a0:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     7a7:	02 00 00 00 
     7ab:	c3                   	retq   
     7ac:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     7b3:	04 00 00 00 
     7b7:	c3                   	retq   

00000000000007b8 <copy_mskd_equ()>:
     7b8:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     7bf:	00 00 00 16 
     7c3:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     7ca:	25 00 00 00 3e       	and    $0x3e000000,%eax
     7cf:	3d 00 00 00 16       	cmp    $0x16000000,%eax
     7d4:	75 0c                	jne    7e2 <copy_mskd_equ()+0x2a>
     7d6:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     7dd:	02 00 00 00 
     7e1:	c3                   	retq   
     7e2:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     7e9:	04 00 00 00 
     7ed:	c3                   	retq   

00000000000007ee <copy_mskd_neq()>:
     7ee:	c7 04 25 24 02 70 00 	movl   $0x1a000000,0x700224
     7f5:	00 00 00 1a 
     7f9:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     800:	25 00 00 00 3e       	and    $0x3e000000,%eax
     805:	3d 00 00 00 1a       	cmp    $0x1a000000,%eax
     80a:	74 0c                	je     818 <copy_mskd_neq()+0x2a>
     80c:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     813:	02 00 00 00 
     817:	c3                   	retq   
     818:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     81f:	04 00 00 00 
     823:	c3                   	retq   

0000000000000824 <copy_mskd_lss()>:
     824:	c7 04 25 24 02 70 00 	movl   $0x36000000,0x700224
     82b:	00 00 00 36 
     82f:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     836:	25 00 00 00 3e       	and    $0x3e000000,%eax
     83b:	3d ff ff ff 37       	cmp    $0x37ffffff,%eax
     840:	77 0c                	ja     84e <copy_mskd_lss()+0x2a>
     842:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     849:	02 00 00 00 
     84d:	c3                   	retq   
     84e:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     855:	04 00 00 00 
     859:	c3                   	retq   

000000000000085a <copy_mskd_leq()>:
     85a:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     861:	00 00 00 2e 
     865:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     86c:	25 00 00 00 3e       	and    $0x3e000000,%eax
     871:	3d 00 00 00 2e       	cmp    $0x2e000000,%eax
     876:	77 0c                	ja     884 <copy_mskd_leq()+0x2a>
     878:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     87f:	02 00 00 00 
     883:	c3                   	retq   
     884:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     88b:	04 00 00 00 
     88f:	c3                   	retq   

0000000000000890 <copy_mskd_gtr()>:
     890:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     897:	00 00 00 26 
     89b:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     8a2:	25 00 00 00 3e       	and    $0x3e000000,%eax
     8a7:	3d 00 00 00 24       	cmp    $0x24000000,%eax
     8ac:	76 0c                	jbe    8ba <copy_mskd_gtr()+0x2a>
     8ae:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     8b5:	02 00 00 00 
     8b9:	c3                   	retq   
     8ba:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     8c1:	04 00 00 00 
     8c5:	c3                   	retq   

00000000000008c6 <copy_mskd_geq()>:
     8c6:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     8cd:	00 00 00 22 
     8d1:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     8d8:	25 00 00 00 3e       	and    $0x3e000000,%eax
     8dd:	3d ff ff ff 21       	cmp    $0x21ffffff,%eax
     8e2:	76 0c                	jbe    8f0 <copy_mskd_geq()+0x2a>
     8e4:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     8eb:	02 00 00 00 
     8ef:	c3                   	retq   
     8f0:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     8f7:	04 00 00 00 
     8fb:	c3                   	retq   

00000000000008fc <copy_shifted()>:
     8fc:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     903:	00 00 00 16 
     907:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     90e:	25 00 00 00 3e       	and    $0x3e000000,%eax
     913:	3d 00 00 00 16       	cmp    $0x16000000,%eax
     918:	75 0c                	jne    926 <copy_shifted()+0x2a>
     91a:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     921:	02 00 00 00 
     925:	c3                   	retq   
     926:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     92d:	04 00 00 00 
     931:	c3                   	retq   

0000000000000932 <bits_val(regbits::Bits<unsigned int, mcu::Serial::Config>)>:
     932:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     939:	09 c7                	or     %eax,%edi
     93b:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     942:	c3                   	retq   

0000000000000943 <call_bits_val_var()>:
     943:	bf 40 00 00 00       	mov    $0x40,%edi
     948:	e8 00 00 00 00       	callq  94d <call_bits_val_var()+0xa>
     94d:	f3 c3                	repz retq 

000000000000094f <call_bits_val_const()>:
     94f:	bf 40 00 00 00       	mov    $0x40,%edi
     954:	e8 00 00 00 00       	callq  959 <call_bits_val_const()+0xa>
     959:	f3 c3                	repz retq 

000000000000095b <call_bits_val_global()>:
     95b:	bf 40 00 00 00       	mov    $0x40,%edi
     960:	e8 00 00 00 00       	callq  965 <call_bits_val_global()+0xa>
     965:	f3 c3                	repz retq 

0000000000000967 <bits_ref(regbits::Bits<unsigned int, mcu::Serial::Config> const&)>:
     967:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     96e:	0b 07                	or     (%rdi),%eax
     970:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     977:	c3                   	retq   

0000000000000978 <call_bits_ref_var()>:
     978:	48 83 ec 10          	sub    $0x10,%rsp
     97c:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
     983:	48 89 e7             	mov    %rsp,%rdi
     986:	e8 00 00 00 00       	callq  98b <call_bits_ref_var()+0x13>
     98b:	48 83 c4 10          	add    $0x10,%rsp
     98f:	c3                   	retq   

0000000000000990 <call_bits_ref_const()>:
     990:	48 83 ec 10          	sub    $0x10,%rsp
     994:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
     99b:	48 89 e7             	mov    %rsp,%rdi
     99e:	e8 00 00 00 00       	callq  9a3 <call_bits_ref_const()+0x13>
     9a3:	48 83 c4 10          	add    $0x10,%rsp
     9a7:	c3                   	retq   

00000000000009a8 <call_bits_ref_global()>:
     9a8:	48 83 ec 10          	sub    $0x10,%rsp
     9ac:	c7 04 24 40 00 00 00 	movl   $0x40,(%rsp)
     9b3:	48 89 e7             	mov    %rsp,%rdi
     9b6:	e8 00 00 00 00       	callq  9bb <call_bits_ref_global()+0x13>
     9bb:	48 83 c4 10          	add    $0x10,%rsp
     9bf:	c3                   	retq   

00000000000009c0 <mskd_val(regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     9c0:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     9c7:	89 fa                	mov    %edi,%edx
     9c9:	f7 d2                	not    %edx
     9cb:	21 d0                	and    %edx,%eax
     9cd:	48 c1 ef 20          	shr    $0x20,%rdi
     9d1:	09 c7                	or     %eax,%edi
     9d3:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     9da:	c3                   	retq   

00000000000009db <call_mskd_val_var()>:
     9db:	48 bf 06 00 00 00 02 	movabs $0x200000006,%rdi
     9e2:	00 00 00 
     9e5:	e8 00 00 00 00       	callq  9ea <call_mskd_val_var()+0xf>
     9ea:	f3 c3                	repz retq 

00000000000009ec <call_mskd_val_const()>:
     9ec:	48 bf 06 00 00 00 02 	movabs $0x200000006,%rdi
     9f3:	00 00 00 
     9f6:	e8 00 00 00 00       	callq  9fb <call_mskd_val_const()+0xf>
     9fb:	f3 c3                	repz retq 

00000000000009fd <call_mskd_val_global()>:
     9fd:	48 bf 06 00 00 00 02 	movabs $0x200000006,%rdi
     a04:	00 00 00 
     a07:	e8 00 00 00 00       	callq  a0c <call_mskd_val_global()+0xf>
     a0c:	f3 c3                	repz retq 

0000000000000a0e <mskd_ref(regbits::Mskd<unsigned int, mcu::Serial::Config> const&)>:
     a0e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     a15:	8b 17                	mov    (%rdi),%edx
     a17:	f7 d2                	not    %edx
     a19:	21 d0                	and    %edx,%eax
     a1b:	0b 47 04             	or     0x4(%rdi),%eax
     a1e:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     a25:	c3                   	retq   

0000000000000a26 <call_mskd_ref_var()>:
     a26:	48 83 ec 10          	sub    $0x10,%rsp
     a2a:	c7 04 24 06 00 00 00 	movl   $0x6,(%rsp)
     a31:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp)
     a38:	00 
     a39:	48 89 e7             	mov    %rsp,%rdi
     a3c:	e8 00 00 00 00       	callq  a41 <call_mskd_ref_var()+0x1b>
     a41:	48 83 c4 10          	add    $0x10,%rsp
     a45:	c3                   	retq   

0000000000000a46 <call_mskd_ref_const()>:
     a46:	48 83 ec 10          	sub    $0x10,%rsp
     a4a:	c7 04 24 06 00 00 00 	movl   $0x6,(%rsp)
     a51:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%rsp)
     a58:	00 
     a59:	48 89 e7             	mov    %rsp,%rdi
     a5c:	e8 00 00 00 00       	callq  a61 <call_mskd_ref_const()+0x1b>
     a61:	48 83 c4 10          	add    $0x10,%rsp
     a65:	c3                   	retq   

0000000000000a66 <call_mskd_ref_global()>:
     a66:	48 83 ec 10          	sub    $0x10,%rsp
     a6a:	c7 04 24 06 00 00 00 	movl   $0x6,(%rsp)
     a71:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp)
     a78:	00 
     a79:	48 89 e7             	mov    %rsp,%rdi
     a7c:	e8 00 00 00 00       	callq  a81 <call_mskd_ref_global()+0x1b>
     a81:	48 83 c4 10          	add    $0x10,%rsp
     a85:	c3                   	retq   

0000000000000a86 <periph_bits(mcu::Serial*)>:
     a86:	8b 47 04             	mov    0x4(%rdi),%eax
     a89:	83 c8 40             	or     $0x40,%eax
     a8c:	89 47 04             	mov    %eax,0x4(%rdi)
     a8f:	c3                   	retq   

0000000000000a90 <call_periph_bits()>:
     a90:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     a95:	e8 00 00 00 00       	callq  a9a <call_periph_bits()+0xa>
     a9a:	f3 c3                	repz retq 

0000000000000a9c <periph_bits_val(mcu::Serial*, regbits::Bits<unsigned int, mcu::Serial::Config>)>:
     a9c:	8b 47 04             	mov    0x4(%rdi),%eax
     a9f:	09 c6                	or     %eax,%esi
     aa1:	89 77 04             	mov    %esi,0x4(%rdi)
     aa4:	c3                   	retq   

0000000000000aa5 <call_periph_bits_val()>:
     aa5:	be 40 00 00 00       	mov    $0x40,%esi
     aaa:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     aaf:	e8 00 00 00 00       	callq  ab4 <call_periph_bits_val()+0xf>
     ab4:	f3 c3                	repz retq 

0000000000000ab6 <reg_bits_val(regbits::Reg<unsigned int, mcu::Serial::Config>&, regbits::Bits<unsigned int, mcu::Serial::Config>)>:
     ab6:	8b 07                	mov    (%rdi),%eax
     ab8:	09 c6                	or     %eax,%esi
     aba:	89 37                	mov    %esi,(%rdi)
     abc:	c3                   	retq   

0000000000000abd <call_reg_bits_val()>:
     abd:	be 40 00 00 00       	mov    $0x40,%esi
     ac2:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     ac7:	e8 00 00 00 00       	callq  acc <call_reg_bits_val()+0xf>
     acc:	f3 c3                	repz retq 

0000000000000ace <periph_bits_ref(mcu::Serial*, regbits::Bits<unsigned int, mcu::Serial::Config> const&)>:
     ace:	8b 47 04             	mov    0x4(%rdi),%eax
     ad1:	0b 06                	or     (%rsi),%eax
     ad3:	89 47 04             	mov    %eax,0x4(%rdi)
     ad6:	c3                   	retq   

0000000000000ad7 <call_periph_bits_ref()>:
     ad7:	48 83 ec 10          	sub    $0x10,%rsp
     adb:	c7 04 24 40 00 00 00 	movl   $0x40,(%rsp)
     ae2:	48 89 e6             	mov    %rsp,%rsi
     ae5:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     aea:	e8 00 00 00 00       	callq  aef <call_periph_bits_ref()+0x18>
     aef:	48 83 c4 10          	add    $0x10,%rsp
     af3:	c3                   	retq   

0000000000000af4 <reg_bits_ref(regbits::Reg<unsigned int, mcu::Serial::Config>&, regbits::Bits<unsigned int, mcu::Serial::Config> const&)>:
     af4:	8b 07                	mov    (%rdi),%eax
     af6:	0b 06                	or     (%rsi),%eax
     af8:	89 07                	mov    %eax,(%rdi)
     afa:	c3                   	retq   

0000000000000afb <call_reg_bits_ref()>:
     afb:	48 83 ec 10          	sub    $0x10,%rsp
     aff:	c7 04 24 40 00 00 00 	movl   $0x40,(%rsp)
     b06:	48 89 e6             	mov    %rsp,%rsi
     b09:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     b0e:	e8 00 00 00 00       	callq  b13 <call_reg_bits_ref()+0x18>
     b13:	48 83 c4 10          	add    $0x10,%rsp
     b17:	c3                   	retq   

0000000000000b18 <periph_mskd(mcu::Serial*)>:
     b18:	8b 47 04             	mov    0x4(%rdi),%eax
     b1b:	83 e0 f9             	and    $0xfffffff9,%eax
     b1e:	83 c8 02             	or     $0x2,%eax
     b21:	89 47 04             	mov    %eax,0x4(%rdi)
     b24:	c3                   	retq   

0000000000000b25 <call_periph_mskd()>:
     b25:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     b2a:	e8 00 00 00 00       	callq  b2f <call_periph_mskd()+0xa>
     b2f:	f3 c3                	repz retq 

0000000000000b31 <periph_mskd_val(mcu::Serial*, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     b31:	8b 47 04             	mov    0x4(%rdi),%eax
     b34:	89 f2                	mov    %esi,%edx
     b36:	f7 d2                	not    %edx
     b38:	21 d0                	and    %edx,%eax
     b3a:	48 c1 ee 20          	shr    $0x20,%rsi
     b3e:	09 c6                	or     %eax,%esi
     b40:	89 77 04             	mov    %esi,0x4(%rdi)
     b43:	c3                   	retq   

0000000000000b44 <call_periph_mskd_val()>:
     b44:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     b4b:	00 00 00 
     b4e:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     b53:	e8 00 00 00 00       	callq  b58 <call_periph_mskd_val()+0x14>
     b58:	f3 c3                	repz retq 

0000000000000b5a <reg_mskd_val(regbits::Reg<unsigned int, mcu::Serial::Config>&, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     b5a:	8b 07                	mov    (%rdi),%eax
     b5c:	89 f2                	mov    %esi,%edx
     b5e:	f7 d2                	not    %edx
     b60:	21 d0                	and    %edx,%eax
     b62:	48 c1 ee 20          	shr    $0x20,%rsi
     b66:	09 c6                	or     %eax,%esi
     b68:	89 37                	mov    %esi,(%rdi)
     b6a:	c3                   	retq   

0000000000000b6b <call_reg_mskd_val()>:
     b6b:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     b72:	00 00 00 
     b75:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     b7a:	e8 00 00 00 00       	callq  b7f <call_reg_mskd_val()+0x14>
     b7f:	f3 c3                	repz retq 

0000000000000b81 <periph_mskd_ref(mcu::Serial*, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     b81:	8b 47 04             	mov    0x4(%rdi),%eax
     b84:	89 f2                	mov    %esi,%edx
     b86:	f7 d2                	not    %edx
     b88:	21 d0                	and    %edx,%eax
     b8a:	48 c1 ee 20          	shr    $0x20,%rsi
     b8e:	09 c6                	or     %eax,%esi
     b90:	89 77 04             	mov    %esi,0x4(%rdi)
     b93:	c3                   	retq   

0000000000000b94 <call_periph_mskd_ref()>:
     b94:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     b9b:	00 00 00 
     b9e:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     ba3:	e8 00 00 00 00       	callq  ba8 <call_periph_mskd_ref()+0x14>
     ba8:	f3 c3                	repz retq 

0000000000000baa <reg_mskd_ref(regbits::Reg<unsigned int, mcu::Serial::Config>&, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     baa:	8b 07                	mov    (%rdi),%eax
     bac:	89 f2                	mov    %esi,%edx
     bae:	f7 d2                	not    %edx
     bb0:	21 d0                	and    %edx,%eax
     bb2:	48 c1 ee 20          	shr    $0x20,%rsi
     bb6:	09 c6                	or     %eax,%esi
     bb8:	89 37                	mov    %esi,(%rdi)
     bba:	c3                   	retq   

0000000000000bbb <call_reg_mskd_ref()>:
     bbb:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     bc2:	00 00 00 
     bc5:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     bca:	e8 00 00 00 00       	callq  bcf <call_reg_mskd_ref()+0x14>
     bcf:	f3 c3                	repz retq 

0000000000000bd1 <return_bits()>:
     bd1:	b8 20 00 00 00       	mov    $0x20,%eax
     bd6:	c3                   	retq   

0000000000000bd7 <call_return_bits()>:
     bd7:	e8 00 00 00 00       	callq  bdc <call_return_bits()+0x5>
     bdc:	83 f8 20             	cmp    $0x20,%eax
     bdf:	75 0c                	jne    bed <call_return_bits()+0x16>
     be1:	c7 04 25 24 02 70 00 	movl   $0x2a000000,0x700224
     be8:	00 00 00 2a 
     bec:	c3                   	retq   
     bed:	c7 04 25 24 02 70 00 	movl   $0x6000000,0x700224
     bf4:	00 00 00 06 
     bf8:	c3                   	retq   

0000000000000bf9 <return_mskd()>:
     bf9:	48 b8 18 00 00 00 08 	movabs $0x800000018,%rax
     c00:	00 00 00 
     c03:	c3                   	retq   

0000000000000c04 <call_return_mskd()>:
     c04:	e8 00 00 00 00       	callq  c09 <call_return_mskd()+0x5>
     c09:	83 f8 18             	cmp    $0x18,%eax
     c0c:	75 09                	jne    c17 <call_return_mskd()+0x13>
     c0e:	48 c1 e8 20          	shr    $0x20,%rax
     c12:	83 f8 08             	cmp    $0x8,%eax
     c15:	74 0c                	je     c23 <call_return_mskd()+0x1f>
     c17:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     c1e:	00 00 00 26 
     c22:	c3                   	retq   
     c23:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     c2a:	00 00 00 22 
     c2e:	c3                   	retq   

0000000000000c2f <return_reg()>:
     c2f:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     c36:	40 00 00 00 
     c3a:	b8 c4 02 70 00       	mov    $0x7002c4,%eax
     c3f:	c3                   	retq   

0000000000000c40 <call_return_reg()>:
     c40:	e8 00 00 00 00       	callq  c45 <call_return_reg()+0x5>
     c45:	8b 00                	mov    (%rax),%eax
     c47:	a8 40                	test   $0x40,%al
     c49:	74 0c                	je     c57 <call_return_reg()+0x17>
     c4b:	c7 04 25 24 02 70 00 	movl   $0x1e000000,0x700224
     c52:	00 00 00 1e 
     c56:	c3                   	retq   
     c57:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     c5e:	00 00 00 2e 
     c62:	c3                   	retq   

0000000000000c63 <return_periph()>:
     c63:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     c6a:	40 00 00 00 
     c6e:	b8 c0 02 70 00       	mov    $0x7002c0,%eax
     c73:	c3                   	retq   

0000000000000c74 <call_return_periph()>:
     c74:	e8 00 00 00 00       	callq  c79 <call_return_periph()+0x5>
     c79:	8b 40 04             	mov    0x4(%rax),%eax
     c7c:	a8 40                	test   $0x40,%al
     c7e:	74 0c                	je     c8c <call_return_periph()+0x18>
     c80:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     c87:	00 00 00 26 
     c8b:	c3                   	retq   
     c8c:	c7 04 25 24 02 70 00 	movl   $0x2a000000,0x700224
     c93:	00 00 00 2a 
     c97:	c3                   	retq   

0000000000000c98 <pos_val(regbits::Pos<unsigned int, mcu::Serial::Config>)>:
     c98:	83 ff 05             	cmp    $0x5,%edi
     c9b:	75 0c                	jne    ca9 <pos_val(regbits::Pos<unsigned int, mcu::Serial::Config>)+0x11>
     c9d:	c7 04 25 2c 01 70 00 	movl   $0x33,0x70012c
     ca4:	33 00 00 00 
     ca8:	c3                   	retq   
     ca9:	83 ff 06             	cmp    $0x6,%edi
     cac:	75 0c                	jne    cba <pos_val(regbits::Pos<unsigned int, mcu::Serial::Config>)+0x22>
     cae:	c7 04 25 2c 01 70 00 	movl   $0x44,0x70012c
     cb5:	44 00 00 00 
     cb9:	c3                   	retq   
     cba:	c7 04 25 2c 01 70 00 	movl   $0x55,0x70012c
     cc1:	55 00 00 00 
     cc5:	c3                   	retq   

0000000000000cc6 <call_pos_val()>:
     cc6:	bf 05 00 00 00       	mov    $0x5,%edi
     ccb:	e8 00 00 00 00       	callq  cd0 <call_pos_val()+0xa>
     cd0:	bf 06 00 00 00       	mov    $0x6,%edi
     cd5:	e8 00 00 00 00       	callq  cda <call_pos_val()+0x14>
     cda:	f3 c3                	repz retq 

0000000000000cdc <call_pos_val_global()>:
     cdc:	bf 06 00 00 00       	mov    $0x6,%edi
     ce1:	e8 00 00 00 00       	callq  ce6 <call_pos_val_global()+0xa>
     ce6:	f3 c3                	repz retq 

0000000000000ce8 <pos_ref(regbits::Pos<unsigned int, mcu::Serial::Config> const&)>:
     ce8:	8b 07                	mov    (%rdi),%eax
     cea:	83 f8 05             	cmp    $0x5,%eax
     ced:	75 0c                	jne    cfb <pos_ref(regbits::Pos<unsigned int, mcu::Serial::Config> const&)+0x13>
     cef:	c7 04 25 2c 01 70 00 	movl   $0x66,0x70012c
     cf6:	66 00 00 00 
     cfa:	c3                   	retq   
     cfb:	83 f8 06             	cmp    $0x6,%eax
     cfe:	75 0c                	jne    d0c <pos_ref(regbits::Pos<unsigned int, mcu::Serial::Config> const&)+0x24>
     d00:	c7 04 25 2c 01 70 00 	movl   $0x77,0x70012c
     d07:	77 00 00 00 
     d0b:	c3                   	retq   
     d0c:	c7 04 25 2c 01 70 00 	movl   $0x88,0x70012c
     d13:	88 00 00 00 
     d17:	c3                   	retq   

0000000000000d18 <call_pos_ref()>:
     d18:	48 83 ec 20          	sub    $0x20,%rsp
     d1c:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%rsp)
     d23:	00 
     d24:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
     d29:	e8 00 00 00 00       	callq  d2e <call_pos_ref()+0x16>
     d2e:	c7 04 24 05 00 00 00 	movl   $0x5,(%rsp)
     d35:	48 89 e7             	mov    %rsp,%rdi
     d38:	e8 00 00 00 00       	callq  d3d <call_pos_ref()+0x25>
     d3d:	48 83 c4 20          	add    $0x20,%rsp
     d41:	c3                   	retq   

0000000000000d42 <call_pos_ref_global()>:
     d42:	48 83 ec 10          	sub    $0x10,%rsp
     d46:	c7 04 24 06 00 00 00 	movl   $0x6,(%rsp)
     d4d:	48 89 e7             	mov    %rsp,%rdi
     d50:	e8 00 00 00 00       	callq  d55 <call_pos_ref_global()+0x13>
     d55:	48 83 c4 10          	add    $0x10,%rsp
     d59:	c3                   	retq   

0000000000000d5a <runtime_range_val(regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     d5a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     d61:	89 fa                	mov    %edi,%edx
     d63:	f7 d2                	not    %edx
     d65:	21 d0                	and    %edx,%eax
     d67:	48 c1 ef 20          	shr    $0x20,%rdi
     d6b:	09 c7                	or     %eax,%edi
     d6d:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     d74:	c3                   	retq   

0000000000000d75 <call_range_val(unsigned int)>:
     d75:	c1 e7 0c             	shl    $0xc,%edi
     d78:	48 c1 e7 20          	shl    $0x20,%rdi
     d7c:	48 81 cf 00 f0 01 00 	or     $0x1f000,%rdi
     d83:	e8 00 00 00 00       	callq  d88 <call_range_val(unsigned int)+0x13>
     d88:	f3 c3                	repz retq 

0000000000000d8a <call_range_val_port()>:
     d8a:	bf 1f 00 00 00       	mov    $0x1f,%edi
     d8f:	e8 00 00 00 00       	callq  d94 <call_range_val_port()+0xa>
     d94:	f3 c3                	repz retq 

0000000000000d96 <runtime_range_ref(regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     d96:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     d9d:	89 fa                	mov    %edi,%edx
     d9f:	f7 d2                	not    %edx
     da1:	21 d0                	and    %edx,%eax
     da3:	48 c1 ef 20          	shr    $0x20,%rdi
     da7:	09 c7                	or     %eax,%edi
     da9:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     db0:	c3                   	retq   

0000000000000db1 <call_range_ref(unsigned int)>:
     db1:	c1 e7 0c             	shl    $0xc,%edi
     db4:	48 c1 e7 20          	shl    $0x20,%rdi
     db8:	48 81 cf 00 f0 01 00 	or     $0x1f000,%rdi
     dbf:	e8 00 00 00 00       	callq  dc4 <call_range_ref(unsigned int)+0x13>
     dc4:	f3 c3                	repz retq 

0000000000000dc6 <call_range_ref_port()>:
     dc6:	bf 0c 00 00 00       	mov    $0xc,%edi
     dcb:	e8 00 00 00 00       	callq  dd0 <call_range_ref_port()+0xa>
     dd0:	f3 c3                	repz retq 

0000000000000dd2 <check_array_range_pass(unsigned int)>:
     dd2:	83 ff 16             	cmp    $0x16,%edi
     dd5:	77 0c                	ja     de3 <check_array_range_pass(unsigned int)+0x11>
     dd7:	c7 04 25 2c 01 70 00 	movl   $0x7f,0x70012c
     dde:	7f 00 00 00 
     de2:	c3                   	retq   
     de3:	c7 04 25 2c 01 70 00 	movl   $0x83,0x70012c
     dea:	83 00 00 00 
     dee:	c3                   	retq   

0000000000000def <check_array_range_fail(unsigned int)>:
     def:	83 ff 16             	cmp    $0x16,%edi
     df2:	77 0c                	ja     e00 <check_array_range_fail(unsigned int)+0x11>
     df4:	c7 04 25 2c 01 70 00 	movl   $0x95,0x70012c
     dfb:	95 00 00 00 
     dff:	c3                   	retq   
     e00:	c7 04 25 2c 01 70 00 	movl   $0x97,0x70012c
     e07:	97 00 00 00 
     e0b:	c3                   	retq   

0000000000000e0c <check_bits_range_pass(unsigned int)>:
     e0c:	83 ff 0f             	cmp    $0xf,%edi
     e0f:	77 0c                	ja     e1d <check_bits_range_pass(unsigned int)+0x11>
     e11:	c7 04 25 2c 01 70 00 	movl   $0x9d,0x70012c
     e18:	9d 00 00 00 
     e1c:	c3                   	retq   
     e1d:	c7 04 25 2c 01 70 00 	movl   $0xa3,0x70012c
     e24:	a3 00 00 00 
     e28:	c3                   	retq   

0000000000000e29 <check_bits_range_fail(unsigned int)>:
     e29:	83 ff 0f             	cmp    $0xf,%edi
     e2c:	77 0c                	ja     e3a <check_bits_range_fail(unsigned int)+0x11>
     e2e:	c7 04 25 2c 01 70 00 	movl   $0xa7,0x70012c
     e35:	a7 00 00 00 
     e39:	c3                   	retq   
     e3a:	c7 04 25 2c 01 70 00 	movl   $0xad,0x70012c
     e41:	ad 00 00 00 
     e45:	c3                   	retq   

0000000000000e46 <check_mskd_range_pass(unsigned int)>:
     e46:	83 ff 1f             	cmp    $0x1f,%edi
     e49:	77 0c                	ja     e57 <check_mskd_range_pass(unsigned int)+0x11>
     e4b:	c7 04 25 2c 01 70 00 	movl   $0xb3,0x70012c
     e52:	b3 00 00 00 
     e56:	c3                   	retq   
     e57:	c7 04 25 2c 01 70 00 	movl   $0xb5,0x70012c
     e5e:	b5 00 00 00 
     e62:	c3                   	retq   

0000000000000e63 <check_mskd_range_fail(unsigned int)>:
     e63:	83 ff 1f             	cmp    $0x1f,%edi
     e66:	77 0c                	ja     e74 <check_mskd_range_fail(unsigned int)+0x11>
     e68:	c7 04 25 2c 01 70 00 	movl   $0xbf,0x70012c
     e6f:	bf 00 00 00 
     e73:	c3                   	retq   
     e74:	c7 04 25 2c 01 70 00 	movl   $0xc1,0x70012c
     e7b:	c1 00 00 00 
     e7f:	c3                   	retq   

0000000000000e80 <bits_extract_ne()>:
     e80:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     e87:	20 00 00 00 
     e8b:	83 3c 25 c4 02 70 00 	cmpl   $0x20,0x7002c4
     e92:	20 
     e93:	74 0c                	je     ea1 <bits_extract_ne()+0x21>
     e95:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     e9c:	02 00 00 00 
     ea0:	c3                   	retq   
     ea1:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     ea8:	04 00 00 00 
     eac:	c3                   	retq   

0000000000000ead <mskd_extract_geq()>:
     ead:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     eb4:	00 00 00 16 
     eb8:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     ebf:	3d ff ff ff 15       	cmp    $0x15ffffff,%eax
     ec4:	76 0c                	jbe    ed2 <mskd_extract_geq()+0x25>
     ec6:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     ecd:	20 00 00 00 
     ed1:	c3                   	retq   
     ed2:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     ed9:	40 00 00 00 
     edd:	c3                   	retq   

0000000000000ede <shifted_val(regbits::Shft<unsigned int, mcu::Timer::Prescale>)>:
     ede:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     ee5:	00 00 00 2e 
     ee9:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     ef0:	21 f8                	and    %edi,%eax
     ef2:	48 89 f9             	mov    %rdi,%rcx
     ef5:	48 c1 e9 20          	shr    $0x20,%rcx
     ef9:	d3 e8                	shr    %cl,%eax
     efb:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     f02:	c3                   	retq   

0000000000000f03 <call_shifted_const_val()>:
     f03:	48 bf 00 00 00 3e 19 	movabs $0x193e000000,%rdi
     f0a:	00 00 00 
     f0d:	e8 00 00 00 00       	callq  f12 <call_shifted_const_val()+0xf>
     f12:	f3 c3                	repz retq 

0000000000000f14 <call_shifted_var_val()>:
     f14:	48 bf 00 00 00 3e 19 	movabs $0x193e000000,%rdi
     f1b:	00 00 00 
     f1e:	e8 00 00 00 00       	callq  f23 <call_shifted_var_val()+0xf>
     f23:	f3 c3                	repz retq 

0000000000000f25 <call_shifted_global_val()>:
     f25:	48 bf 00 00 00 3e 19 	movabs $0x193e000000,%rdi
     f2c:	00 00 00 
     f2f:	e8 00 00 00 00       	callq  f34 <call_shifted_global_val()+0xf>
     f34:	f3 c3                	repz retq 

0000000000000f36 <shifted_ref(regbits::Shft<unsigned int, mcu::Timer::Prescale> const&)>:
     f36:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     f3d:	00 00 00 2e 
     f41:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     f48:	23 07                	and    (%rdi),%eax
     f4a:	8b 4f 04             	mov    0x4(%rdi),%ecx
     f4d:	d3 e8                	shr    %cl,%eax
     f4f:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     f56:	c3                   	retq   

0000000000000f57 <call_shifted_const_ref()>:
     f57:	48 83 ec 10          	sub    $0x10,%rsp
     f5b:	c7 04 24 00 00 00 3e 	movl   $0x3e000000,(%rsp)
     f62:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%rsp)
     f69:	00 
     f6a:	48 89 e7             	mov    %rsp,%rdi
     f6d:	e8 00 00 00 00       	callq  f72 <call_shifted_const_ref()+0x1b>
     f72:	48 83 c4 10          	add    $0x10,%rsp
     f76:	c3                   	retq   

0000000000000f77 <call_shifted_var_ref()>:
     f77:	48 83 ec 10          	sub    $0x10,%rsp
     f7b:	c7 04 24 00 00 00 3e 	movl   $0x3e000000,(%rsp)
     f82:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%rsp)
     f89:	00 
     f8a:	48 89 e7             	mov    %rsp,%rdi
     f8d:	e8 00 00 00 00       	callq  f92 <call_shifted_var_ref()+0x1b>
     f92:	48 83 c4 10          	add    $0x10,%rsp
     f96:	c3                   	retq   

0000000000000f97 <call_shifted_global_ref()>:
     f97:	48 83 ec 10          	sub    $0x10,%rsp
     f9b:	c7 04 24 00 00 00 3e 	movl   $0x3e000000,(%rsp)
     fa2:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%rsp)
     fa9:	00 
     faa:	48 89 e7             	mov    %rsp,%rdi
     fad:	e8 00 00 00 00       	callq  fb2 <call_shifted_global_ref()+0x1b>
     fb2:	48 83 c4 10          	add    $0x10,%rsp
     fb6:	c3                   	retq   

0000000000000fb7 <copy_bits_val(regbits::Copy<unsigned int, mcu::Serial::Config>)>:
     fb7:	40 f6 c7 40          	test   $0x40,%dil
     fbb:	74 0c                	je     fc9 <copy_bits_val(regbits::Copy<unsigned int, mcu::Serial::Config>)+0x12>
     fbd:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     fc4:	02 00 00 00 
     fc8:	c3                   	retq   
     fc9:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     fd0:	04 00 00 00 
     fd4:	c3                   	retq   

0000000000000fd5 <call_copy_bits_val()>:
     fd5:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     fdc:	40 00 00 00 
     fe0:	8b 3c 25 c4 02 70 00 	mov    0x7002c4,%edi
     fe7:	e8 00 00 00 00       	callq  fec <call_copy_bits_val()+0x17>
     fec:	f3 c3                	repz retq 

0000000000000fee <copy_bits_ref(regbits::Copy<unsigned int, mcu::Serial::Config> const&)>:
     fee:	f6 07 40             	testb  $0x40,(%rdi)
     ff1:	74 0c                	je     fff <copy_bits_ref(regbits::Copy<unsigned int, mcu::Serial::Config> const&)+0x11>
     ff3:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     ffa:	02 00 00 00 
     ffe:	c3                   	retq   
     fff:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
    1006:	04 00 00 00 
    100a:	c3                   	retq   

000000000000100b <call_copy_bits_ref()>:
    100b:	48 83 ec 10          	sub    $0x10,%rsp
    100f:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
    1016:	40 00 00 00 
    101a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
    1021:	89 04 24             	mov    %eax,(%rsp)
    1024:	48 89 e7             	mov    %rsp,%rdi
    1027:	e8 00 00 00 00       	callq  102c <call_copy_bits_ref()+0x21>
    102c:	48 83 c4 10          	add    $0x10,%rsp
    1030:	c3                   	retq   

0000000000001031 <run>:
    1031:	48 83 ec 08          	sub    $0x8,%rsp
    1035:	80 3d 00 00 00 00 00 	cmpb   $0x0,0x0(%rip)        # 103c <run+0xb>
    103c:	75 23                	jne    1061 <run+0x30>
    103e:	bf 00 00 00 00       	mov    $0x0,%edi
    1043:	e8 00 00 00 00       	callq  1048 <run+0x17>
    1048:	85 c0                	test   %eax,%eax
    104a:	74 15                	je     1061 <run+0x30>
    104c:	48 c7 05 00 00 00 00 	movq   $0x70012c,0x0(%rip)        # 1057 <run+0x26>
    1053:	2c 01 70 00 
    1057:	bf 00 00 00 00       	mov    $0x0,%edi
    105c:	e8 00 00 00 00       	callq  1061 <run+0x30>
    1061:	ba 00 00 00 00       	mov    $0x0,%edx
    1066:	be c4 02 70 00       	mov    $0x7002c4,%esi
    106b:	bf 00 00 00 00       	mov    $0x0,%edi
    1070:	e8 00 00 00 00       	callq  1075 <run+0x44>
    1075:	ba 01 00 00 00       	mov    $0x1,%edx
    107a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    107f:	bf 00 00 00 00       	mov    $0x0,%edi
    1084:	e8 00 00 00 00       	callq  1089 <run+0x58>
    1089:	ba 02 00 00 00       	mov    $0x2,%edx
    108e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1093:	bf 00 00 00 00       	mov    $0x0,%edi
    1098:	e8 00 00 00 00       	callq  109d <run+0x6c>
    109d:	ba 03 00 00 00       	mov    $0x3,%edx
    10a2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    10a7:	bf 00 00 00 00       	mov    $0x0,%edi
    10ac:	e8 00 00 00 00       	callq  10b1 <run+0x80>
    10b1:	ba 04 00 00 00       	mov    $0x4,%edx
    10b6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    10bb:	bf 00 00 00 00       	mov    $0x0,%edi
    10c0:	e8 00 00 00 00       	callq  10c5 <run+0x94>
    10c5:	ba 05 00 00 00       	mov    $0x5,%edx
    10ca:	be c4 02 70 00       	mov    $0x7002c4,%esi
    10cf:	bf 00 00 00 00       	mov    $0x0,%edi
    10d4:	e8 00 00 00 00       	callq  10d9 <run+0xa8>
    10d9:	ba 06 00 00 00       	mov    $0x6,%edx
    10de:	be c4 02 70 00       	mov    $0x7002c4,%esi
    10e3:	bf 00 00 00 00       	mov    $0x0,%edi
    10e8:	e8 00 00 00 00       	callq  10ed <run+0xbc>
    10ed:	ba 07 00 00 00       	mov    $0x7,%edx
    10f2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    10f7:	bf 00 00 00 00       	mov    $0x0,%edi
    10fc:	e8 00 00 00 00       	callq  1101 <run+0xd0>
    1101:	ba 08 00 00 00       	mov    $0x8,%edx
    1106:	be c4 02 70 00       	mov    $0x7002c4,%esi
    110b:	bf 00 00 00 00       	mov    $0x0,%edi
    1110:	e8 00 00 00 00       	callq  1115 <run+0xe4>
    1115:	ba 09 00 00 00       	mov    $0x9,%edx
    111a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    111f:	bf 00 00 00 00       	mov    $0x0,%edi
    1124:	e8 00 00 00 00       	callq  1129 <run+0xf8>
    1129:	ba 0a 00 00 00       	mov    $0xa,%edx
    112e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1133:	bf 00 00 00 00       	mov    $0x0,%edi
    1138:	e8 00 00 00 00       	callq  113d <run+0x10c>
    113d:	ba 0b 00 00 00       	mov    $0xb,%edx
    1142:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1147:	bf 00 00 00 00       	mov    $0x0,%edi
    114c:	e8 00 00 00 00       	callq  1151 <run+0x120>
    1151:	ba 0c 00 00 00       	mov    $0xc,%edx
    1156:	be c4 02 70 00       	mov    $0x7002c4,%esi
    115b:	bf 00 00 00 00       	mov    $0x0,%edi
    1160:	e8 00 00 00 00       	callq  1165 <run+0x134>
    1165:	ba 0d 00 00 00       	mov    $0xd,%edx
    116a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    116f:	bf 00 00 00 00       	mov    $0x0,%edi
    1174:	e8 00 00 00 00       	callq  1179 <run+0x148>
    1179:	ba 0e 00 00 00       	mov    $0xe,%edx
    117e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1183:	bf 00 00 00 00       	mov    $0x0,%edi
    1188:	e8 00 00 00 00       	callq  118d <run+0x15c>
    118d:	ba 0f 00 00 00       	mov    $0xf,%edx
    1192:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1197:	bf 00 00 00 00       	mov    $0x0,%edi
    119c:	e8 00 00 00 00       	callq  11a1 <run+0x170>
    11a1:	ba 10 00 00 00       	mov    $0x10,%edx
    11a6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    11ab:	bf 00 00 00 00       	mov    $0x0,%edi
    11b0:	e8 00 00 00 00       	callq  11b5 <run+0x184>
    11b5:	ba 11 00 00 00       	mov    $0x11,%edx
    11ba:	be c4 02 70 00       	mov    $0x7002c4,%esi
    11bf:	bf 00 00 00 00       	mov    $0x0,%edi
    11c4:	e8 00 00 00 00       	callq  11c9 <run+0x198>
    11c9:	ba 12 00 00 00       	mov    $0x12,%edx
    11ce:	be c4 02 70 00       	mov    $0x7002c4,%esi
    11d3:	bf 00 00 00 00       	mov    $0x0,%edi
    11d8:	e8 00 00 00 00       	callq  11dd <run+0x1ac>
    11dd:	ba 13 00 00 00       	mov    $0x13,%edx
    11e2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    11e7:	bf 00 00 00 00       	mov    $0x0,%edi
    11ec:	e8 00 00 00 00       	callq  11f1 <run+0x1c0>
    11f1:	ba 14 00 00 00       	mov    $0x14,%edx
    11f6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    11fb:	bf 00 00 00 00       	mov    $0x0,%edi
    1200:	e8 00 00 00 00       	callq  1205 <run+0x1d4>
    1205:	ba 15 00 00 00       	mov    $0x15,%edx
    120a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    120f:	bf 00 00 00 00       	mov    $0x0,%edi
    1214:	e8 00 00 00 00       	callq  1219 <run+0x1e8>
    1219:	ba 16 00 00 00       	mov    $0x16,%edx
    121e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1223:	bf 00 00 00 00       	mov    $0x0,%edi
    1228:	e8 00 00 00 00       	callq  122d <run+0x1fc>
    122d:	ba 17 00 00 00       	mov    $0x17,%edx
    1232:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1237:	bf 00 00 00 00       	mov    $0x0,%edi
    123c:	e8 00 00 00 00       	callq  1241 <run+0x210>
    1241:	ba 18 00 00 00       	mov    $0x18,%edx
    1246:	be c4 02 70 00       	mov    $0x7002c4,%esi
    124b:	bf 00 00 00 00       	mov    $0x0,%edi
    1250:	e8 00 00 00 00       	callq  1255 <run+0x224>
    1255:	ba 19 00 00 00       	mov    $0x19,%edx
    125a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    125f:	bf 00 00 00 00       	mov    $0x0,%edi
    1264:	e8 00 00 00 00       	callq  1269 <run+0x238>
    1269:	ba 1a 00 00 00       	mov    $0x1a,%edx
    126e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1273:	bf 00 00 00 00       	mov    $0x0,%edi
    1278:	e8 00 00 00 00       	callq  127d <run+0x24c>
    127d:	ba 1b 00 00 00       	mov    $0x1b,%edx
    1282:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1287:	bf 00 00 00 00       	mov    $0x0,%edi
    128c:	e8 00 00 00 00       	callq  1291 <run+0x260>
    1291:	ba 1c 00 00 00       	mov    $0x1c,%edx
    1296:	be c4 02 70 00       	mov    $0x7002c4,%esi
    129b:	bf 00 00 00 00       	mov    $0x0,%edi
    12a0:	e8 00 00 00 00       	callq  12a5 <run+0x274>
    12a5:	ba 1d 00 00 00       	mov    $0x1d,%edx
    12aa:	be c4 02 70 00       	mov    $0x7002c4,%esi
    12af:	bf 00 00 00 00       	mov    $0x0,%edi
    12b4:	e8 00 00 00 00       	callq  12b9 <run+0x288>
    12b9:	ba 1e 00 00 00       	mov    $0x1e,%edx
    12be:	be c4 02 70 00       	mov    $0x7002c4,%esi
    12c3:	bf 00 00 00 00       	mov    $0x0,%edi
    12c8:	e8 00 00 00 00       	callq  12cd <run+0x29c>
    12cd:	ba 1f 00 00 00       	mov    $0x1f,%edx
    12d2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    12d7:	bf 00 00 00 00       	mov    $0x0,%edi
    12dc:	e8 00 00 00 00       	callq  12e1 <run+0x2b0>
    12e1:	ba 20 00 00 00       	mov    $0x20,%edx
    12e6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    12eb:	bf 00 00 00 00       	mov    $0x0,%edi
    12f0:	e8 00 00 00 00       	callq  12f5 <run+0x2c4>
    12f5:	ba 21 00 00 00       	mov    $0x21,%edx
    12fa:	be c4 02 70 00       	mov    $0x7002c4,%esi
    12ff:	bf 00 00 00 00       	mov    $0x0,%edi
    1304:	e8 00 00 00 00       	callq  1309 <run+0x2d8>
    1309:	ba 22 00 00 00       	mov    $0x22,%edx
    130e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1313:	bf 00 00 00 00       	mov    $0x0,%edi
    1318:	e8 00 00 00 00       	callq  131d <run+0x2ec>
    131d:	ba 23 00 00 00       	mov    $0x23,%edx
    1322:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1327:	bf 00 00 00 00       	mov    $0x0,%edi
    132c:	e8 00 00 00 00       	callq  1331 <run+0x300>
    1331:	ba 24 00 00 00       	mov    $0x24,%edx
    1336:	be c4 02 70 00       	mov    $0x7002c4,%esi
    133b:	bf 00 00 00 00       	mov    $0x0,%edi
    1340:	e8 00 00 00 00       	callq  1345 <run+0x314>
    1345:	ba 25 00 00 00       	mov    $0x25,%edx
    134a:	be 24 02 70 00       	mov    $0x700224,%esi
    134f:	bf 00 00 00 00       	mov    $0x0,%edi
    1354:	e8 00 00 00 00       	callq  1359 <run+0x328>
    1359:	ba 26 00 00 00       	mov    $0x26,%edx
    135e:	be 24 02 70 00       	mov    $0x700224,%esi
    1363:	bf 00 00 00 00       	mov    $0x0,%edi
    1368:	e8 00 00 00 00       	callq  136d <run+0x33c>
    136d:	ba 27 00 00 00       	mov    $0x27,%edx
    1372:	be 24 02 70 00       	mov    $0x700224,%esi
    1377:	bf 00 00 00 00       	mov    $0x0,%edi
    137c:	e8 00 00 00 00       	callq  1381 <run+0x350>
    1381:	ba 28 00 00 00       	mov    $0x28,%edx
    1386:	be c4 02 70 00       	mov    $0x7002c4,%esi
    138b:	bf 00 00 00 00       	mov    $0x0,%edi
    1390:	e8 00 00 00 00       	callq  1395 <run+0x364>
    1395:	ba 29 00 00 00       	mov    $0x29,%edx
    139a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    139f:	bf 00 00 00 00       	mov    $0x0,%edi
    13a4:	e8 00 00 00 00       	callq  13a9 <run+0x378>
    13a9:	ba 2a 00 00 00       	mov    $0x2a,%edx
    13ae:	be c4 02 70 00       	mov    $0x7002c4,%esi
    13b3:	bf 00 00 00 00       	mov    $0x0,%edi
    13b8:	e8 00 00 00 00       	callq  13bd <run+0x38c>
    13bd:	ba 2b 00 00 00       	mov    $0x2b,%edx
    13c2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    13c7:	bf 00 00 00 00       	mov    $0x0,%edi
    13cc:	e8 00 00 00 00       	callq  13d1 <run+0x3a0>
    13d1:	ba 2c 00 00 00       	mov    $0x2c,%edx
    13d6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    13db:	bf 00 00 00 00       	mov    $0x0,%edi
    13e0:	e8 00 00 00 00       	callq  13e5 <run+0x3b4>
    13e5:	ba 2d 00 00 00       	mov    $0x2d,%edx
    13ea:	be a0 01 70 00       	mov    $0x7001a0,%esi
    13ef:	bf 00 00 00 00       	mov    $0x0,%edi
    13f4:	e8 00 00 00 00       	callq  13f9 <run+0x3c8>
    13f9:	ba 2e 00 00 00       	mov    $0x2e,%edx
    13fe:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1403:	bf 00 00 00 00       	mov    $0x0,%edi
    1408:	e8 00 00 00 00       	callq  140d <run+0x3dc>
    140d:	ba 2f 00 00 00       	mov    $0x2f,%edx
    1412:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1417:	bf 00 00 00 00       	mov    $0x0,%edi
    141c:	e8 00 00 00 00       	callq  1421 <run+0x3f0>
    1421:	ba 30 00 00 00       	mov    $0x30,%edx
    1426:	be c4 02 70 00       	mov    $0x7002c4,%esi
    142b:	bf 00 00 00 00       	mov    $0x0,%edi
    1430:	e8 00 00 00 00       	callq  1435 <run+0x404>
    1435:	ba 31 00 00 00       	mov    $0x31,%edx
    143a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    143f:	bf 00 00 00 00       	mov    $0x0,%edi
    1444:	e8 00 00 00 00       	callq  1449 <run+0x418>
    1449:	ba 32 00 00 00       	mov    $0x32,%edx
    144e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1453:	bf 00 00 00 00       	mov    $0x0,%edi
    1458:	e8 00 00 00 00       	callq  145d <run+0x42c>
    145d:	ba 33 00 00 00       	mov    $0x33,%edx
    1462:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1467:	bf 00 00 00 00       	mov    $0x0,%edi
    146c:	e8 00 00 00 00       	callq  1471 <run+0x440>
    1471:	ba 34 00 00 00       	mov    $0x34,%edx
    1476:	be c4 02 70 00       	mov    $0x7002c4,%esi
    147b:	bf 00 00 00 00       	mov    $0x0,%edi
    1480:	e8 00 00 00 00       	callq  1485 <run+0x454>
    1485:	ba 35 00 00 00       	mov    $0x35,%edx
    148a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    148f:	bf 00 00 00 00       	mov    $0x0,%edi
    1494:	e8 00 00 00 00       	callq  1499 <run+0x468>
    1499:	ba 36 00 00 00       	mov    $0x36,%edx
    149e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    14a3:	bf 00 00 00 00       	mov    $0x0,%edi
    14a8:	e8 00 00 00 00       	callq  14ad <run+0x47c>
    14ad:	ba 37 00 00 00       	mov    $0x37,%edx
    14b2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    14b7:	bf 00 00 00 00       	mov    $0x0,%edi
    14bc:	e8 00 00 00 00       	callq  14c1 <run+0x490>
    14c1:	ba 38 00 00 00       	mov    $0x38,%edx
    14c6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    14cb:	bf 00 00 00 00       	mov    $0x0,%edi
    14d0:	e8 00 00 00 00       	callq  14d5 <run+0x4a4>
    14d5:	ba 39 00 00 00       	mov    $0x39,%edx
    14da:	be c4 02 70 00       	mov    $0x7002c4,%esi
    14df:	bf 00 00 00 00       	mov    $0x0,%edi
    14e4:	e8 00 00 00 00       	callq  14e9 <run+0x4b8>
    14e9:	ba 3a 00 00 00       	mov    $0x3a,%edx
    14ee:	be c4 02 70 00       	mov    $0x7002c4,%esi
    14f3:	bf 00 00 00 00       	mov    $0x0,%edi
    14f8:	e8 00 00 00 00       	callq  14fd <run+0x4cc>
    14fd:	ba 3b 00 00 00       	mov    $0x3b,%edx
    1502:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1507:	bf 00 00 00 00       	mov    $0x0,%edi
    150c:	e8 00 00 00 00       	callq  1511 <run+0x4e0>
    1511:	ba 3c 00 00 00       	mov    $0x3c,%edx
    1516:	be c4 02 70 00       	mov    $0x7002c4,%esi
    151b:	bf 00 00 00 00       	mov    $0x0,%edi
    1520:	e8 00 00 00 00       	callq  1525 <run+0x4f4>
    1525:	ba 3d 00 00 00       	mov    $0x3d,%edx
    152a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    152f:	bf 00 00 00 00       	mov    $0x0,%edi
    1534:	e8 00 00 00 00       	callq  1539 <run+0x508>
    1539:	ba 3e 00 00 00       	mov    $0x3e,%edx
    153e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1543:	bf 00 00 00 00       	mov    $0x0,%edi
    1548:	e8 00 00 00 00       	callq  154d <run+0x51c>
    154d:	ba 3f 00 00 00       	mov    $0x3f,%edx
    1552:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1557:	bf 00 00 00 00       	mov    $0x0,%edi
    155c:	e8 00 00 00 00       	callq  1561 <run+0x530>
    1561:	ba 40 00 00 00       	mov    $0x40,%edx
    1566:	be 24 02 70 00       	mov    $0x700224,%esi
    156b:	bf 00 00 00 00       	mov    $0x0,%edi
    1570:	e8 00 00 00 00       	callq  1575 <run+0x544>
    1575:	ba 41 00 00 00       	mov    $0x41,%edx
    157a:	be 24 02 70 00       	mov    $0x700224,%esi
    157f:	bf 00 00 00 00       	mov    $0x0,%edi
    1584:	e8 00 00 00 00       	callq  1589 <run+0x558>
    1589:	ba 42 00 00 00       	mov    $0x42,%edx
    158e:	be 24 02 70 00       	mov    $0x700224,%esi
    1593:	bf 00 00 00 00       	mov    $0x0,%edi
    1598:	e8 00 00 00 00       	callq  159d <run+0x56c>
    159d:	ba 43 00 00 00       	mov    $0x43,%edx
    15a2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    15a7:	bf 00 00 00 00       	mov    $0x0,%edi
    15ac:	e8 00 00 00 00       	callq  15b1 <run+0x580>
    15b1:	ba 44 00 00 00       	mov    $0x44,%edx
    15b6:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 15bd <run+0x58c>
    15bd:	bf 00 00 00 00       	mov    $0x0,%edi
    15c2:	e8 00 00 00 00       	callq  15c7 <run+0x596>
    15c7:	ba 45 00 00 00       	mov    $0x45,%edx
    15cc:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 15d3 <run+0x5a2>
    15d3:	bf 00 00 00 00       	mov    $0x0,%edi
    15d8:	e8 00 00 00 00       	callq  15dd <run+0x5ac>
    15dd:	ba 46 00 00 00       	mov    $0x46,%edx
    15e2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    15e7:	bf 00 00 00 00       	mov    $0x0,%edi
    15ec:	e8 00 00 00 00       	callq  15f1 <run+0x5c0>
    15f1:	ba 47 00 00 00       	mov    $0x47,%edx
    15f6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    15fb:	bf 00 00 00 00       	mov    $0x0,%edi
    1600:	e8 00 00 00 00       	callq  1605 <run+0x5d4>
    1605:	ba 48 00 00 00       	mov    $0x48,%edx
    160a:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1611 <run+0x5e0>
    1611:	bf 00 00 00 00       	mov    $0x0,%edi
    1616:	e8 00 00 00 00       	callq  161b <run+0x5ea>
    161b:	ba 49 00 00 00       	mov    $0x49,%edx
    1620:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1627 <run+0x5f6>
    1627:	bf 00 00 00 00       	mov    $0x0,%edi
    162c:	e8 00 00 00 00       	callq  1631 <run+0x600>
    1631:	ba 4a 00 00 00       	mov    $0x4a,%edx
    1636:	be c4 02 70 00       	mov    $0x7002c4,%esi
    163b:	bf 00 00 00 00       	mov    $0x0,%edi
    1640:	e8 00 00 00 00       	callq  1645 <run+0x614>
    1645:	ba 4b 00 00 00       	mov    $0x4b,%edx
    164a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    164f:	bf 00 00 00 00       	mov    $0x0,%edi
    1654:	e8 00 00 00 00       	callq  1659 <run+0x628>
    1659:	ba 4c 00 00 00       	mov    $0x4c,%edx
    165e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1663:	bf 00 00 00 00       	mov    $0x0,%edi
    1668:	e8 00 00 00 00       	callq  166d <run+0x63c>
    166d:	ba 4d 00 00 00       	mov    $0x4d,%edx
    1672:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1677:	bf 00 00 00 00       	mov    $0x0,%edi
    167c:	e8 00 00 00 00       	callq  1681 <run+0x650>
    1681:	ba 4e 00 00 00       	mov    $0x4e,%edx
    1686:	be c4 02 70 00       	mov    $0x7002c4,%esi
    168b:	bf 00 00 00 00       	mov    $0x0,%edi
    1690:	e8 00 00 00 00       	callq  1695 <run+0x664>
    1695:	ba 4f 00 00 00       	mov    $0x4f,%edx
    169a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    169f:	bf 00 00 00 00       	mov    $0x0,%edi
    16a4:	e8 00 00 00 00       	callq  16a9 <run+0x678>
    16a9:	ba 50 00 00 00       	mov    $0x50,%edx
    16ae:	be c4 02 70 00       	mov    $0x7002c4,%esi
    16b3:	bf 00 00 00 00       	mov    $0x0,%edi
    16b8:	e8 00 00 00 00       	callq  16bd <run+0x68c>
    16bd:	ba 51 00 00 00       	mov    $0x51,%edx
    16c2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    16c7:	bf 00 00 00 00       	mov    $0x0,%edi
    16cc:	e8 00 00 00 00       	callq  16d1 <run+0x6a0>
    16d1:	ba 52 00 00 00       	mov    $0x52,%edx
    16d6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    16db:	bf 00 00 00 00       	mov    $0x0,%edi
    16e0:	e8 00 00 00 00       	callq  16e5 <run+0x6b4>
    16e5:	ba 53 00 00 00       	mov    $0x53,%edx
    16ea:	be c4 02 70 00       	mov    $0x7002c4,%esi
    16ef:	bf 00 00 00 00       	mov    $0x0,%edi
    16f4:	e8 00 00 00 00       	callq  16f9 <run+0x6c8>
    16f9:	ba 54 00 00 00       	mov    $0x54,%edx
    16fe:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1703:	bf 00 00 00 00       	mov    $0x0,%edi
    1708:	e8 00 00 00 00       	callq  170d <run+0x6dc>
    170d:	ba 55 00 00 00       	mov    $0x55,%edx
    1712:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1717:	bf 00 00 00 00       	mov    $0x0,%edi
    171c:	e8 00 00 00 00       	callq  1721 <run+0x6f0>
    1721:	ba 56 00 00 00       	mov    $0x56,%edx
    1726:	be c4 02 70 00       	mov    $0x7002c4,%esi
    172b:	bf 00 00 00 00       	mov    $0x0,%edi
    1730:	e8 00 00 00 00       	callq  1735 <run+0x704>
    1735:	ba 57 00 00 00       	mov    $0x57,%edx
    173a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    173f:	bf 00 00 00 00       	mov    $0x0,%edi
    1744:	e8 00 00 00 00       	callq  1749 <run+0x718>
    1749:	ba 58 00 00 00       	mov    $0x58,%edx
    174e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1753:	bf 00 00 00 00       	mov    $0x0,%edi
    1758:	e8 00 00 00 00       	callq  175d <run+0x72c>
    175d:	ba 59 00 00 00       	mov    $0x59,%edx
    1762:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1767:	bf 00 00 00 00       	mov    $0x0,%edi
    176c:	e8 00 00 00 00       	callq  1771 <run+0x740>
    1771:	ba 5a 00 00 00       	mov    $0x5a,%edx
    1776:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 177d <run+0x74c>
    177d:	bf 00 00 00 00       	mov    $0x0,%edi
    1782:	e8 00 00 00 00       	callq  1787 <run+0x756>
    1787:	ba 5b 00 00 00       	mov    $0x5b,%edx
    178c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1793 <run+0x762>
    1793:	bf 00 00 00 00       	mov    $0x0,%edi
    1798:	e8 00 00 00 00       	callq  179d <run+0x76c>
    179d:	ba 5c 00 00 00       	mov    $0x5c,%edx
    17a2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    17a7:	bf 00 00 00 00       	mov    $0x0,%edi
    17ac:	e8 00 00 00 00       	callq  17b1 <run+0x780>
    17b1:	ba 5d 00 00 00       	mov    $0x5d,%edx
    17b6:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17bd <run+0x78c>
    17bd:	bf 00 00 00 00       	mov    $0x0,%edi
    17c2:	e8 00 00 00 00       	callq  17c7 <run+0x796>
    17c7:	ba 5e 00 00 00       	mov    $0x5e,%edx
    17cc:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17d3 <run+0x7a2>
    17d3:	bf 00 00 00 00       	mov    $0x0,%edi
    17d8:	e8 00 00 00 00       	callq  17dd <run+0x7ac>
    17dd:	ba 5f 00 00 00       	mov    $0x5f,%edx
    17e2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    17e7:	bf 00 00 00 00       	mov    $0x0,%edi
    17ec:	e8 00 00 00 00       	callq  17f1 <run+0x7c0>
    17f1:	ba 60 00 00 00       	mov    $0x60,%edx
    17f6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    17fb:	bf 00 00 00 00       	mov    $0x0,%edi
    1800:	e8 00 00 00 00       	callq  1805 <run+0x7d4>
    1805:	ba 61 00 00 00       	mov    $0x61,%edx
    180a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    180f:	bf 00 00 00 00       	mov    $0x0,%edi
    1814:	e8 00 00 00 00       	callq  1819 <run+0x7e8>
    1819:	ba 62 00 00 00       	mov    $0x62,%edx
    181e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1823:	bf 00 00 00 00       	mov    $0x0,%edi
    1828:	e8 00 00 00 00       	callq  182d <run+0x7fc>
    182d:	ba 63 00 00 00       	mov    $0x63,%edx
    1832:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1839 <run+0x808>
    1839:	bf 00 00 00 00       	mov    $0x0,%edi
    183e:	e8 00 00 00 00       	callq  1843 <run+0x812>
    1843:	ba 64 00 00 00       	mov    $0x64,%edx
    1848:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 184f <run+0x81e>
    184f:	bf 00 00 00 00       	mov    $0x0,%edi
    1854:	e8 00 00 00 00       	callq  1859 <run+0x828>
    1859:	ba 65 00 00 00       	mov    $0x65,%edx
    185e:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1865 <run+0x834>
    1865:	bf 00 00 00 00       	mov    $0x0,%edi
    186a:	e8 00 00 00 00       	callq  186f <run+0x83e>
    186f:	ba 66 00 00 00       	mov    $0x66,%edx
    1874:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 187b <run+0x84a>
    187b:	bf 00 00 00 00       	mov    $0x0,%edi
    1880:	e8 00 00 00 00       	callq  1885 <run+0x854>
    1885:	ba 67 00 00 00       	mov    $0x67,%edx
    188a:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1891 <run+0x860>
    1891:	bf 00 00 00 00       	mov    $0x0,%edi
    1896:	e8 00 00 00 00       	callq  189b <run+0x86a>
    189b:	ba 68 00 00 00       	mov    $0x68,%edx
    18a0:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 18a7 <run+0x876>
    18a7:	bf 00 00 00 00       	mov    $0x0,%edi
    18ac:	e8 00 00 00 00       	callq  18b1 <run+0x880>
    18b1:	ba 69 00 00 00       	mov    $0x69,%edx
    18b6:	be c4 02 70 00       	mov    $0x7002c4,%esi
    18bb:	bf 00 00 00 00       	mov    $0x0,%edi
    18c0:	e8 00 00 00 00       	callq  18c5 <run+0x894>
    18c5:	ba 6a 00 00 00       	mov    $0x6a,%edx
    18ca:	be c4 02 70 00       	mov    $0x7002c4,%esi
    18cf:	bf 00 00 00 00       	mov    $0x0,%edi
    18d4:	e8 00 00 00 00       	callq  18d9 <run+0x8a8>
    18d9:	ba 6b 00 00 00       	mov    $0x6b,%edx
    18de:	be c4 02 70 00       	mov    $0x7002c4,%esi
    18e3:	bf 00 00 00 00       	mov    $0x0,%edi
    18e8:	e8 00 00 00 00       	callq  18ed <run+0x8bc>
    18ed:	ba 6c 00 00 00       	mov    $0x6c,%edx
    18f2:	be c4 02 70 00       	mov    $0x7002c4,%esi
    18f7:	bf 00 00 00 00       	mov    $0x0,%edi
    18fc:	e8 00 00 00 00       	callq  1901 <run+0x8d0>
    1901:	ba 6d 00 00 00       	mov    $0x6d,%edx
    1906:	be c4 02 70 00       	mov    $0x7002c4,%esi
    190b:	bf 00 00 00 00       	mov    $0x0,%edi
    1910:	e8 00 00 00 00       	callq  1915 <run+0x8e4>
    1915:	ba 6e 00 00 00       	mov    $0x6e,%edx
    191a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    191f:	bf 00 00 00 00       	mov    $0x0,%edi
    1924:	e8 00 00 00 00       	callq  1929 <run+0x8f8>
    1929:	ba 6f 00 00 00       	mov    $0x6f,%edx
    192e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1933:	bf 00 00 00 00       	mov    $0x0,%edi
    1938:	e8 00 00 00 00       	callq  193d <run+0x90c>
    193d:	ba 70 00 00 00       	mov    $0x70,%edx
    1942:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1947:	bf 00 00 00 00       	mov    $0x0,%edi
    194c:	e8 00 00 00 00       	callq  1951 <run+0x920>
    1951:	ba 71 00 00 00       	mov    $0x71,%edx
    1956:	be c4 02 70 00       	mov    $0x7002c4,%esi
    195b:	bf 00 00 00 00       	mov    $0x0,%edi
    1960:	e8 00 00 00 00       	callq  1965 <run+0x934>
    1965:	ba 72 00 00 00       	mov    $0x72,%edx
    196a:	be c4 02 70 00       	mov    $0x7002c4,%esi
    196f:	bf 00 00 00 00       	mov    $0x0,%edi
    1974:	e8 00 00 00 00       	callq  1979 <run+0x948>
    1979:	ba 73 00 00 00       	mov    $0x73,%edx
    197e:	be c4 02 70 00       	mov    $0x7002c4,%esi
    1983:	bf 00 00 00 00       	mov    $0x0,%edi
    1988:	e8 00 00 00 00       	callq  198d <run+0x95c>
    198d:	48 83 c4 08          	add    $0x8,%rsp
    1991:	c3                   	retq   
